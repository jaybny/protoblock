// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApiData.proto

#include "ApiData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fantasybit {
class FantasyNameHashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyNameHash>
      _instance;
} _FantasyNameHash_default_instance_;
class DistributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Distribution>
      _instance;
} _Distribution_default_instance_;
class ProfitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Profits>
      _instance;
} _Profits_default_instance_;
class FillsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fills>
      _instance;
} _Fills_default_instance_;
class ProjKstatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjKstats>
      _instance;
} _ProjKstats_default_instance_;
class ProjDstatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjDstats>
      _instance;
} _ProjDstats_default_instance_;
class ProjOstatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjOstats>
      _instance;
} _ProjOstats_default_instance_;
class ProjStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjStats>
      _instance;
} _ProjStats_default_instance_;
}  // namespace fantasybit
namespace protobuf_ApiData_2eproto {
void InitDefaultsFantasyNameHashImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_FantasyNameHash_default_instance_;
    new (ptr) ::fantasybit::FantasyNameHash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyNameHash::InitAsDefaultInstance();
}

void InitDefaultsFantasyNameHash() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyNameHashImpl);
}

void InitDefaultsDistributionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Distribution_default_instance_;
    new (ptr) ::fantasybit::Distribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Distribution::InitAsDefaultInstance();
}

void InitDefaultsDistribution() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDistributionImpl);
}

void InitDefaultsProfitsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Profits_default_instance_;
    new (ptr) ::fantasybit::Profits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Profits::InitAsDefaultInstance();
}

void InitDefaultsProfits() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProfitsImpl);
}

void InitDefaultsFillsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Fills_default_instance_;
    new (ptr) ::fantasybit::Fills();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Fills::InitAsDefaultInstance();
}

void InitDefaultsFills() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFillsImpl);
}

void InitDefaultsProjKstatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_ProjKstats_default_instance_;
    new (ptr) ::fantasybit::ProjKstats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjKstats::InitAsDefaultInstance();
}

void InitDefaultsProjKstats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjKstatsImpl);
}

void InitDefaultsProjDstatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_ProjDstats_default_instance_;
    new (ptr) ::fantasybit::ProjDstats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjDstats::InitAsDefaultInstance();
}

void InitDefaultsProjDstats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjDstatsImpl);
}

void InitDefaultsProjOstatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_ProjOstats_default_instance_;
    new (ptr) ::fantasybit::ProjOstats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjOstats::InitAsDefaultInstance();
}

void InitDefaultsProjOstats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjOstatsImpl);
}

void InitDefaultsProjStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ApiData_2eproto::InitDefaultsProjOstats();
  protobuf_ApiData_2eproto::InitDefaultsProjDstats();
  protobuf_ApiData_2eproto::InitDefaultsProjKstats();
  {
    void* ptr = &::fantasybit::_ProjStats_default_instance_;
    new (ptr) ::fantasybit::ProjStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjStats::InitAsDefaultInstance();
}

void InitDefaultsProjStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjStatsImpl);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameHash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameHash, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameHash, hash_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, fantasy_nameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, proj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, award_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Distribution, result_),
  0,
  2,
  4,
  5,
  3,
  1,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, fantasy_nameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Profits, pnl_),
  0,
  2,
  4,
  5,
  3,
  1,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, passivebuy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, buyer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, seller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, teamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, qty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Fills, price_),
  5,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, pa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, fg30_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, fg40_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, fg50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjKstats, fg60_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, twopt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, onept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, deftd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, sfty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, turnovers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, sacks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjDstats, ptsa_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, passyds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, passtd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, rushyds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, rushtd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, recyds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, rectd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, rec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, pint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, fumble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, twopt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjOstats, onept_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjStats, ostats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjStats, dstats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjStats, kstats_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fantasybit::FantasyNameHash)},
  { 9, 23, sizeof(::fantasybit::Distribution)},
  { 32, 47, sizeof(::fantasybit::Profits)},
  { 57, 71, sizeof(::fantasybit::Fills)},
  { 80, 90, sizeof(::fantasybit::ProjKstats)},
  { 95, 107, sizeof(::fantasybit::ProjDstats)},
  { 114, 130, sizeof(::fantasybit::ProjOstats)},
  { 141, 149, sizeof(::fantasybit::ProjStats)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyNameHash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Distribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Profits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Fills_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ProjKstats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ProjDstats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ProjOstats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ProjStats_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ApiData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rApiData.proto\022\nfantasybit\"-\n\017FantasyNa"
      "meHash\022\014\n\004name\030\n \001(\t\022\014\n\004hash\030\036 \001(\004\"\243\001\n\014D"
      "istribution\022\016\n\006gameid\030\002 \001(\t\022\016\n\006teamid\030\004 "
      "\001(\t\022\016\n\006season\030\005 \001(\005\022\014\n\004week\030\006 \001(\005\022\026\n\016fan"
      "tasy_nameid\030\001 \001(\004\022\020\n\010playerid\030\003 \001(\t\022\014\n\004p"
      "roj\030\007 \001(\005\022\r\n\005award\030\010 \001(\002\022\016\n\006result\030\t \001(\002"
      "\"\252\001\n\007Profits\022\016\n\006gameid\030\002 \001(\t\022\016\n\006teamid\030\004"
      " \001(\t\022\016\n\006season\030\005 \001(\005\022\014\n\004week\030\006 \001(\005\022\026\n\016fa"
      "ntasy_nameid\030\001 \001(\004\022\020\n\010playerid\030\003 \001(\t\022\013\n\003"
      "qty\030\007 \001(\005\022\r\n\005price\030\010 \001(\002\022\016\n\006result\030\t \001(\002"
      "\022\013\n\003pnl\030\n \001(\002\"\226\001\n\005Fills\022\022\n\npassivebuy\030\001 "
      "\001(\010\022\r\n\005buyer\030\n \001(\t\022\016\n\006seller\030\024 \001(\t\022\016\n\006te"
      "amid\030( \001(\t\022\020\n\010playerid\030- \001(\t\022\016\n\006season\0302"
      " \001(\005\022\014\n\004week\030< \001(\005\022\013\n\003qty\030F \001(\005\022\r\n\005price"
      "\030P \001(\002\"P\n\nProjKstats\022\n\n\002pa\030\n \001(\002\022\014\n\004fg30"
      "\030\024 \001(\002\022\014\n\004fg40\030\036 \001(\002\022\014\n\004fg50\030( \001(\002\022\014\n\004fg"
      "60\0302 \001(\002\"{\n\nProjDstats\022\r\n\005twopt\030d \001(\002\022\r\n"
      "\005onept\030n \001(\002\022\r\n\005deftd\030x \001(\002\022\r\n\004sfty\030\202\001 \001"
      "(\002\022\022\n\tturnovers\030\214\001 \001(\002\022\016\n\005sacks\030\226\001 \001(\002\022\r"
      "\n\004ptsa\030\240\001 \001(\002\"\266\001\n\nProjOstats\022\017\n\007passyds\030"
      "\n \001(\002\022\016\n\006passtd\030\024 \001(\002\022\017\n\007rushyds\030\036 \001(\002\022\016"
      "\n\006rushtd\030( \001(\002\022\016\n\006recyds\0302 \001(\002\022\r\n\005rectd\030"
      "< \001(\002\022\013\n\003rec\030F \001(\002\022\014\n\004pint\030P \001(\002\022\016\n\006fumb"
      "le\030Z \001(\002\022\r\n\005twopt\030d \001(\002\022\r\n\005onept\030n \001(\002\"\203"
      "\001\n\tProjStats\022&\n\006ostats\030\n \001(\0132\026.fantasybi"
      "t.ProjOstats\022&\n\006dstats\030\024 \001(\0132\026.fantasybi"
      "t.ProjDstats\022&\n\006kstats\030\036 \001(\0132\026.fantasybi"
      "t.ProjKstats"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ApiData.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ApiData_2eproto
namespace fantasybit {

// ===================================================================

void FantasyNameHash::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyNameHash::kNameFieldNumber;
const int FantasyNameHash::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyNameHash::FantasyNameHash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsFantasyNameHash();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyNameHash)
}
FantasyNameHash::FantasyNameHash(const FantasyNameHash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameHash)
}

void FantasyNameHash::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_ = GOOGLE_ULONGLONG(0);
}

FantasyNameHash::~FantasyNameHash() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameHash)
  SharedDtor();
}

void FantasyNameHash::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FantasyNameHash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyNameHash::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyNameHash& FantasyNameHash::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsFantasyNameHash();
  return *internal_default_instance();
}

FantasyNameHash* FantasyNameHash::New(::google::protobuf::Arena* arena) const {
  FantasyNameHash* n = new FantasyNameHash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyNameHash::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyNameHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  hash_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyNameHash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyNameHash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyNameHash.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 hash = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyNameHash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyNameHash)
  return false;
#undef DO_
}

void FantasyNameHash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyNameHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameHash.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional uint64 hash = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyNameHash)
}

::google::protobuf::uint8* FantasyNameHash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameHash.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 hash = 30;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameHash)
  return target;
}

size_t FantasyNameHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyNameHash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 hash = 30;
    if (has_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameHash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyNameHash)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyNameHash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyNameHash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyNameHash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyNameHash)
    MergeFrom(*source);
  }
}

void FantasyNameHash::MergeFrom(const FantasyNameHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyNameHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      hash_ = from.hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyNameHash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyNameHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameHash::CopyFrom(const FantasyNameHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyNameHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameHash::IsInitialized() const {
  return true;
}

void FantasyNameHash::Swap(FantasyNameHash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyNameHash::InternalSwap(FantasyNameHash* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(hash_, other->hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyNameHash::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Distribution::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution::kGameidFieldNumber;
const int Distribution::kTeamidFieldNumber;
const int Distribution::kSeasonFieldNumber;
const int Distribution::kWeekFieldNumber;
const int Distribution::kFantasyNameidFieldNumber;
const int Distribution::kPlayeridFieldNumber;
const int Distribution::kProjFieldNumber;
const int Distribution::kAwardFieldNumber;
const int Distribution::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution::Distribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsDistribution();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Distribution)
}
Distribution::Distribution(const Distribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_teamid()) {
    teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
  }
  ::memcpy(&fantasy_nameid_, &from.fantasy_nameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Distribution)
}

void Distribution::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(result_));
}

Distribution::~Distribution() {
  // @@protoc_insertion_point(destructor:fantasybit.Distribution)
  SharedDtor();
}

void Distribution::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Distribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Distribution::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Distribution& Distribution::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsDistribution();
  return *internal_default_instance();
}

Distribution* Distribution::New(::google::protobuf::Arena* arena) const {
  Distribution* n = new Distribution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!teamid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*teamid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&award_) -
        reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(award_));
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Distribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Distribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fantasy_nameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fantasy_nameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_nameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), static_cast<int>(this->gameid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Distribution.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Distribution.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string teamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamid().data(), static_cast<int>(this->teamid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Distribution.teamid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 season = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 week = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proj = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_proj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float award = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_award();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &award_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float result = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Distribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Distribution)
  return false;
#undef DO_
}

void Distribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fantasy_nameid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fantasy_nameid(), output);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  // optional string playerid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playerid(), output);
  }

  // optional string teamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.teamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->teamid(), output);
  }

  // optional int32 season = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->season(), output);
  }

  // optional int32 week = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->week(), output);
  }

  // optional int32 proj = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->proj(), output);
  }

  // optional float award = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->award(), output);
  }

  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Distribution)
}

::google::protobuf::uint8* Distribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Distribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fantasy_nameid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fantasy_nameid(), target);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameid(), target);
  }

  // optional string playerid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playerid(), target);
  }

  // optional string teamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Distribution.teamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->teamid(), target);
  }

  // optional int32 season = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->season(), target);
  }

  // optional int32 week = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->week(), target);
  }

  // optional int32 proj = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->proj(), target);
  }

  // optional float award = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->award(), target);
  }

  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Distribution)
  return target;
}

size_t Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Distribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional uint64 fantasy_nameid = 1;
    if (has_fantasy_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_nameid());
    }

    // optional int32 season = 5;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 week = 6;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 proj = 7;
    if (has_proj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional float award = 8;
    if (has_award()) {
      total_size += 1 + 4;
    }

  }
  // optional float result = 9;
  if (has_result()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Distribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Distribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Distribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Distribution)
    MergeFrom(*source);
  }
}

void Distribution::MergeFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_teamid();
      teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_nameid_ = from.fantasy_nameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000040u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000080u) {
      award_ = from.award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_result(from.result());
  }
}

void Distribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution::CopyFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution::IsInitialized() const {
  return true;
}

void Distribution::Swap(Distribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution::InternalSwap(Distribution* other) {
  using std::swap;
  gameid_.Swap(&other->gameid_);
  playerid_.Swap(&other->playerid_);
  teamid_.Swap(&other->teamid_);
  swap(fantasy_nameid_, other->fantasy_nameid_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(proj_, other->proj_);
  swap(award_, other->award_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Distribution::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Profits::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profits::kGameidFieldNumber;
const int Profits::kTeamidFieldNumber;
const int Profits::kSeasonFieldNumber;
const int Profits::kWeekFieldNumber;
const int Profits::kFantasyNameidFieldNumber;
const int Profits::kPlayeridFieldNumber;
const int Profits::kQtyFieldNumber;
const int Profits::kPriceFieldNumber;
const int Profits::kResultFieldNumber;
const int Profits::kPnlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profits::Profits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsProfits();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Profits)
}
Profits::Profits(const Profits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_teamid()) {
    teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
  }
  ::memcpy(&fantasy_nameid_, &from.fantasy_nameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pnl_) -
    reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(pnl_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Profits)
}

void Profits::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnl_) -
      reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(pnl_));
}

Profits::~Profits() {
  // @@protoc_insertion_point(destructor:fantasybit.Profits)
  SharedDtor();
}

void Profits::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Profits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profits::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profits& Profits::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsProfits();
  return *internal_default_instance();
}

Profits* Profits::New(::google::protobuf::Arena* arena) const {
  Profits* n = new Profits;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profits::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Profits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!teamid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*teamid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&fantasy_nameid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&fantasy_nameid_)) + sizeof(price_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pnl_) -
        reinterpret_cast<char*>(&result_)) + sizeof(pnl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Profits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fantasy_nameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fantasy_nameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_nameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), static_cast<int>(this->gameid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Profits.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Profits.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string teamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamid().data(), static_cast<int>(this->teamid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Profits.teamid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 season = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 week = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qty = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float price = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float result = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pnl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_pnl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pnl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Profits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Profits)
  return false;
#undef DO_
}

void Profits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Profits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fantasy_nameid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fantasy_nameid(), output);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gameid(), output);
  }

  // optional string playerid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playerid(), output);
  }

  // optional string teamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.teamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->teamid(), output);
  }

  // optional int32 season = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->season(), output);
  }

  // optional int32 week = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->week(), output);
  }

  // optional int32 qty = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->qty(), output);
  }

  // optional float price = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->price(), output);
  }

  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->result(), output);
  }

  // optional float pnl = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pnl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Profits)
}

::google::protobuf::uint8* Profits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Profits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 fantasy_nameid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fantasy_nameid(), target);
  }

  // optional string gameid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gameid(), target);
  }

  // optional string playerid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playerid(), target);
  }

  // optional string teamid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Profits.teamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->teamid(), target);
  }

  // optional int32 season = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->season(), target);
  }

  // optional int32 week = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->week(), target);
  }

  // optional int32 qty = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->qty(), target);
  }

  // optional float price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->price(), target);
  }

  // optional float result = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->result(), target);
  }

  // optional float pnl = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pnl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Profits)
  return target;
}

size_t Profits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Profits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional string playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string teamid = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional uint64 fantasy_nameid = 1;
    if (has_fantasy_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_nameid());
    }

    // optional int32 season = 5;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 week = 6;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 qty = 7;
    if (has_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qty());
    }

    // optional float price = 8;
    if (has_price()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float result = 9;
    if (has_result()) {
      total_size += 1 + 4;
    }

    // optional float pnl = 10;
    if (has_pnl()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Profits)
  GOOGLE_DCHECK_NE(&from, this);
  const Profits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Profits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Profits)
    MergeFrom(*source);
  }
}

void Profits::MergeFrom(const Profits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Profits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_teamid();
      teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_nameid_ = from.fantasy_nameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000020u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000040u) {
      qty_ = from.qty_;
    }
    if (cached_has_bits & 0x00000080u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000200u) {
      pnl_ = from.pnl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Profits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profits::CopyFrom(const Profits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Profits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profits::IsInitialized() const {
  return true;
}

void Profits::Swap(Profits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profits::InternalSwap(Profits* other) {
  using std::swap;
  gameid_.Swap(&other->gameid_);
  playerid_.Swap(&other->playerid_);
  teamid_.Swap(&other->teamid_);
  swap(fantasy_nameid_, other->fantasy_nameid_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(qty_, other->qty_);
  swap(price_, other->price_);
  swap(result_, other->result_);
  swap(pnl_, other->pnl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profits::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Fills::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fills::kPassivebuyFieldNumber;
const int Fills::kBuyerFieldNumber;
const int Fills::kSellerFieldNumber;
const int Fills::kTeamidFieldNumber;
const int Fills::kPlayeridFieldNumber;
const int Fills::kSeasonFieldNumber;
const int Fills::kWeekFieldNumber;
const int Fills::kQtyFieldNumber;
const int Fills::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fills::Fills()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsFills();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Fills)
}
Fills::Fills(const Fills& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buyer()) {
    buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
  }
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seller()) {
    seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
  }
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_teamid()) {
    teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&qty_) -
    reinterpret_cast<char*>(&price_)) + sizeof(qty_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Fills)
}

void Fills::SharedCtor() {
  _cached_size_ = 0;
  buyer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qty_) -
      reinterpret_cast<char*>(&price_)) + sizeof(qty_));
}

Fills::~Fills() {
  // @@protoc_insertion_point(destructor:fantasybit.Fills)
  SharedDtor();
}

void Fills::SharedDtor() {
  buyer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seller_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fills::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fills& Fills::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsFills();
  return *internal_default_instance();
}

Fills* Fills::New(::google::protobuf::Arena* arena) const {
  Fills* n = new Fills;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fills::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Fills)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!buyer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*buyer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!seller_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*seller_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!teamid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*teamid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&price_)) + sizeof(week_));
  }
  qty_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Fills)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool passivebuy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_passivebuy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passivebuy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string buyer = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer().data(), static_cast<int>(this->buyer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Fills.buyer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string seller = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seller()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seller().data(), static_cast<int>(this->seller().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Fills.seller");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string teamid = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamid().data(), static_cast<int>(this->teamid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Fills.teamid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Fills.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 season = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 week = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qty = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_qty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float price = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 645 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Fills)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Fills)
  return false;
#undef DO_
}

void Fills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Fills)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool passivebuy = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->passivebuy(), output);
  }

  // optional string buyer = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer().data(), static_cast<int>(this->buyer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.buyer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->buyer(), output);
  }

  // optional string seller = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seller().data(), static_cast<int>(this->seller().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.seller");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->seller(), output);
  }

  // optional string teamid = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.teamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->teamid(), output);
  }

  // optional string playerid = 45;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->playerid(), output);
  }

  // optional int32 season = 50;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->season(), output);
  }

  // optional int32 week = 60;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->week(), output);
  }

  // optional int32 qty = 70;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->qty(), output);
  }

  // optional float price = 80;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Fills)
}

::google::protobuf::uint8* Fills::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Fills)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool passivebuy = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->passivebuy(), target);
  }

  // optional string buyer = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer().data(), static_cast<int>(this->buyer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.buyer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->buyer(), target);
  }

  // optional string seller = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seller().data(), static_cast<int>(this->seller().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.seller");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->seller(), target);
  }

  // optional string teamid = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.teamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->teamid(), target);
  }

  // optional string playerid = 45;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Fills.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->playerid(), target);
  }

  // optional int32 season = 50;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->season(), target);
  }

  // optional int32 week = 60;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->week(), target);
  }

  // optional int32 qty = 70;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->qty(), target);
  }

  // optional float price = 80;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(80, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Fills)
  return target;
}

size_t Fills::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Fills)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string buyer = 10;
    if (has_buyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer());
    }

    // optional string seller = 20;
    if (has_seller()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seller());
    }

    // optional string teamid = 40;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional string playerid = 45;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional float price = 80;
    if (has_price()) {
      total_size += 2 + 4;
    }

    // optional bool passivebuy = 1;
    if (has_passivebuy()) {
      total_size += 1 + 1;
    }

    // optional int32 season = 50;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 week = 60;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

  }
  // optional int32 qty = 70;
  if (has_qty()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->qty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fills::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Fills)
  GOOGLE_DCHECK_NE(&from, this);
  const Fills* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fills>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Fills)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Fills)
    MergeFrom(*source);
  }
}

void Fills::MergeFrom(const Fills& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Fills)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_buyer();
      buyer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_seller();
      seller_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seller_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_teamid();
      teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      passivebuy_ = from.passivebuy_;
    }
    if (cached_has_bits & 0x00000040u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000080u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_qty(from.qty());
  }
}

void Fills::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Fills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fills::CopyFrom(const Fills& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Fills)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fills::IsInitialized() const {
  return true;
}

void Fills::Swap(Fills* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fills::InternalSwap(Fills* other) {
  using std::swap;
  buyer_.Swap(&other->buyer_);
  seller_.Swap(&other->seller_);
  teamid_.Swap(&other->teamid_);
  playerid_.Swap(&other->playerid_);
  swap(price_, other->price_);
  swap(passivebuy_, other->passivebuy_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(qty_, other->qty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fills::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjKstats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjKstats::kPaFieldNumber;
const int ProjKstats::kFg30FieldNumber;
const int ProjKstats::kFg40FieldNumber;
const int ProjKstats::kFg50FieldNumber;
const int ProjKstats::kFg60FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjKstats::ProjKstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsProjKstats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjKstats)
}
ProjKstats::ProjKstats(const ProjKstats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fg60_, &from.fg60_,
    static_cast<size_t>(reinterpret_cast<char*>(&fg50_) -
    reinterpret_cast<char*>(&fg60_)) + sizeof(fg50_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjKstats)
}

void ProjKstats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fg60_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fg50_) -
      reinterpret_cast<char*>(&fg60_)) + sizeof(fg50_));
}

ProjKstats::~ProjKstats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjKstats)
  SharedDtor();
}

void ProjKstats::SharedDtor() {
}

void ProjKstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjKstats::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjKstats& ProjKstats::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsProjKstats();
  return *internal_default_instance();
}

ProjKstats* ProjKstats::New(::google::protobuf::Arena* arena) const {
  ProjKstats* n = new ProjKstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjKstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjKstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&fg60_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fg50_) -
        reinterpret_cast<char*>(&fg60_)) + sizeof(fg50_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjKstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjKstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pa = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_pa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg30 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_fg30();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg30_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg40 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
          set_has_fg40();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg40_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg50 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {
          set_has_fg50();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fg60 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {
          set_has_fg60();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fg60_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjKstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjKstats)
  return false;
#undef DO_
}

void ProjKstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjKstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pa = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pa(), output);
  }

  // optional float fg30 = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->fg30(), output);
  }

  // optional float fg40 = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->fg40(), output);
  }

  // optional float fg50 = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->fg50(), output);
  }

  // optional float fg60 = 50;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->fg60(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjKstats)
}

::google::protobuf::uint8* ProjKstats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjKstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pa = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pa(), target);
  }

  // optional float fg30 = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->fg30(), target);
  }

  // optional float fg40 = 30;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->fg40(), target);
  }

  // optional float fg50 = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->fg50(), target);
  }

  // optional float fg60 = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->fg60(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjKstats)
  return target;
}

size_t ProjKstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjKstats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float fg60 = 50;
    if (has_fg60()) {
      total_size += 2 + 4;
    }

    // optional float pa = 10;
    if (has_pa()) {
      total_size += 1 + 4;
    }

    // optional float fg30 = 20;
    if (has_fg30()) {
      total_size += 2 + 4;
    }

    // optional float fg40 = 30;
    if (has_fg40()) {
      total_size += 2 + 4;
    }

    // optional float fg50 = 40;
    if (has_fg50()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjKstats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjKstats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjKstats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjKstats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjKstats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjKstats)
    MergeFrom(*source);
  }
}

void ProjKstats::MergeFrom(const ProjKstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjKstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      fg60_ = from.fg60_;
    }
    if (cached_has_bits & 0x00000002u) {
      pa_ = from.pa_;
    }
    if (cached_has_bits & 0x00000004u) {
      fg30_ = from.fg30_;
    }
    if (cached_has_bits & 0x00000008u) {
      fg40_ = from.fg40_;
    }
    if (cached_has_bits & 0x00000010u) {
      fg50_ = from.fg50_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjKstats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjKstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjKstats::CopyFrom(const ProjKstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjKstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjKstats::IsInitialized() const {
  return true;
}

void ProjKstats::Swap(ProjKstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjKstats::InternalSwap(ProjKstats* other) {
  using std::swap;
  swap(fg60_, other->fg60_);
  swap(pa_, other->pa_);
  swap(fg30_, other->fg30_);
  swap(fg40_, other->fg40_);
  swap(fg50_, other->fg50_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjKstats::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjDstats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjDstats::kTwoptFieldNumber;
const int ProjDstats::kOneptFieldNumber;
const int ProjDstats::kDeftdFieldNumber;
const int ProjDstats::kSftyFieldNumber;
const int ProjDstats::kTurnoversFieldNumber;
const int ProjDstats::kSacksFieldNumber;
const int ProjDstats::kPtsaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjDstats::ProjDstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsProjDstats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjDstats)
}
ProjDstats::ProjDstats(const ProjDstats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ptsa_, &from.ptsa_,
    static_cast<size_t>(reinterpret_cast<char*>(&sacks_) -
    reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjDstats)
}

void ProjDstats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ptsa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sacks_) -
      reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
}

ProjDstats::~ProjDstats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjDstats)
  SharedDtor();
}

void ProjDstats::SharedDtor() {
}

void ProjDstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjDstats::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjDstats& ProjDstats::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsProjDstats();
  return *internal_default_instance();
}

ProjDstats* ProjDstats::New(::google::protobuf::Arena* arena) const {
  ProjDstats* n = new ProjDstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjDstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjDstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&ptsa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sacks_) -
        reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjDstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjDstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float twopt = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 805 & 0xFF */)) {
          set_has_twopt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &twopt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float onept = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 885 & 0xFF */)) {
          set_has_onept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &onept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float deftd = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 965 & 0xFF */)) {
          set_has_deftd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deftd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sfty = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 1045 & 0xFF */)) {
          set_has_sfty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sfty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float turnovers = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 1125 & 0xFF */)) {
          set_has_turnovers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnovers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sacks = 150;
      case 150: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 1205 & 0xFF */)) {
          set_has_sacks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sacks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ptsa = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 1285 & 0xFF */)) {
          set_has_ptsa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptsa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjDstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjDstats)
  return false;
#undef DO_
}

void ProjDstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjDstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float twopt = 100;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->twopt(), output);
  }

  // optional float onept = 110;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->onept(), output);
  }

  // optional float deftd = 120;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->deftd(), output);
  }

  // optional float sfty = 130;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(130, this->sfty(), output);
  }

  // optional float turnovers = 140;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(140, this->turnovers(), output);
  }

  // optional float sacks = 150;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(150, this->sacks(), output);
  }

  // optional float ptsa = 160;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(160, this->ptsa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjDstats)
}

::google::protobuf::uint8* ProjDstats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjDstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float twopt = 100;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->twopt(), target);
  }

  // optional float onept = 110;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->onept(), target);
  }

  // optional float deftd = 120;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->deftd(), target);
  }

  // optional float sfty = 130;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(130, this->sfty(), target);
  }

  // optional float turnovers = 140;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(140, this->turnovers(), target);
  }

  // optional float sacks = 150;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(150, this->sacks(), target);
  }

  // optional float ptsa = 160;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(160, this->ptsa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjDstats)
  return target;
}

size_t ProjDstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjDstats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional float ptsa = 160;
    if (has_ptsa()) {
      total_size += 2 + 4;
    }

    // optional float twopt = 100;
    if (has_twopt()) {
      total_size += 2 + 4;
    }

    // optional float onept = 110;
    if (has_onept()) {
      total_size += 2 + 4;
    }

    // optional float deftd = 120;
    if (has_deftd()) {
      total_size += 2 + 4;
    }

    // optional float sfty = 130;
    if (has_sfty()) {
      total_size += 2 + 4;
    }

    // optional float turnovers = 140;
    if (has_turnovers()) {
      total_size += 2 + 4;
    }

    // optional float sacks = 150;
    if (has_sacks()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjDstats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjDstats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjDstats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjDstats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjDstats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjDstats)
    MergeFrom(*source);
  }
}

void ProjDstats::MergeFrom(const ProjDstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjDstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      ptsa_ = from.ptsa_;
    }
    if (cached_has_bits & 0x00000002u) {
      twopt_ = from.twopt_;
    }
    if (cached_has_bits & 0x00000004u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000008u) {
      deftd_ = from.deftd_;
    }
    if (cached_has_bits & 0x00000010u) {
      sfty_ = from.sfty_;
    }
    if (cached_has_bits & 0x00000020u) {
      turnovers_ = from.turnovers_;
    }
    if (cached_has_bits & 0x00000040u) {
      sacks_ = from.sacks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjDstats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjDstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjDstats::CopyFrom(const ProjDstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjDstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjDstats::IsInitialized() const {
  return true;
}

void ProjDstats::Swap(ProjDstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjDstats::InternalSwap(ProjDstats* other) {
  using std::swap;
  swap(ptsa_, other->ptsa_);
  swap(twopt_, other->twopt_);
  swap(onept_, other->onept_);
  swap(deftd_, other->deftd_);
  swap(sfty_, other->sfty_);
  swap(turnovers_, other->turnovers_);
  swap(sacks_, other->sacks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjDstats::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjOstats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjOstats::kPassydsFieldNumber;
const int ProjOstats::kPasstdFieldNumber;
const int ProjOstats::kRushydsFieldNumber;
const int ProjOstats::kRushtdFieldNumber;
const int ProjOstats::kRecydsFieldNumber;
const int ProjOstats::kRectdFieldNumber;
const int ProjOstats::kRecFieldNumber;
const int ProjOstats::kPintFieldNumber;
const int ProjOstats::kFumbleFieldNumber;
const int ProjOstats::kTwoptFieldNumber;
const int ProjOstats::kOneptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjOstats::ProjOstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsProjOstats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjOstats)
}
ProjOstats::ProjOstats(const ProjOstats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&onept_, &from.onept_,
    static_cast<size_t>(reinterpret_cast<char*>(&twopt_) -
    reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjOstats)
}

void ProjOstats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&onept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twopt_) -
      reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
}

ProjOstats::~ProjOstats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjOstats)
  SharedDtor();
}

void ProjOstats::SharedDtor() {
}

void ProjOstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjOstats::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjOstats& ProjOstats::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsProjOstats();
  return *internal_default_instance();
}

ProjOstats* ProjOstats::New(::google::protobuf::Arena* arena) const {
  ProjOstats* n = new ProjOstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjOstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjOstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&onept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rec_) -
        reinterpret_cast<char*>(&onept_)) + sizeof(rec_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&pint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&twopt_) -
        reinterpret_cast<char*>(&pint_)) + sizeof(twopt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjOstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjOstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float passyds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_passyds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &passyds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float passtd = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_passtd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &passtd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rushyds = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
          set_has_rushyds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rushyds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rushtd = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {
          set_has_rushtd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rushtd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recyds = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {
          set_has_recyds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recyds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rectd = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 485 & 0xFF */)) {
          set_has_rectd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rectd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rec = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 565 & 0xFF */)) {
          set_has_rec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pint = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 645 & 0xFF */)) {
          set_has_pint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fumble = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 725 & 0xFF */)) {
          set_has_fumble();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fumble_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float twopt = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 805 & 0xFF */)) {
          set_has_twopt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &twopt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float onept = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 885 & 0xFF */)) {
          set_has_onept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &onept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjOstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjOstats)
  return false;
#undef DO_
}

void ProjOstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjOstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float passyds = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->passyds(), output);
  }

  // optional float passtd = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->passtd(), output);
  }

  // optional float rushyds = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->rushyds(), output);
  }

  // optional float rushtd = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->rushtd(), output);
  }

  // optional float recyds = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->recyds(), output);
  }

  // optional float rectd = 60;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->rectd(), output);
  }

  // optional float rec = 70;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->rec(), output);
  }

  // optional float pint = 80;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->pint(), output);
  }

  // optional float fumble = 90;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->fumble(), output);
  }

  // optional float twopt = 100;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->twopt(), output);
  }

  // optional float onept = 110;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->onept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjOstats)
}

::google::protobuf::uint8* ProjOstats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjOstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float passyds = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->passyds(), target);
  }

  // optional float passtd = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->passtd(), target);
  }

  // optional float rushyds = 30;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->rushyds(), target);
  }

  // optional float rushtd = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->rushtd(), target);
  }

  // optional float recyds = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->recyds(), target);
  }

  // optional float rectd = 60;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->rectd(), target);
  }

  // optional float rec = 70;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->rec(), target);
  }

  // optional float pint = 80;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(80, this->pint(), target);
  }

  // optional float fumble = 90;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(90, this->fumble(), target);
  }

  // optional float twopt = 100;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->twopt(), target);
  }

  // optional float onept = 110;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->onept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjOstats)
  return target;
}

size_t ProjOstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjOstats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float onept = 110;
    if (has_onept()) {
      total_size += 2 + 4;
    }

    // optional float passyds = 10;
    if (has_passyds()) {
      total_size += 1 + 4;
    }

    // optional float passtd = 20;
    if (has_passtd()) {
      total_size += 2 + 4;
    }

    // optional float rushyds = 30;
    if (has_rushyds()) {
      total_size += 2 + 4;
    }

    // optional float rushtd = 40;
    if (has_rushtd()) {
      total_size += 2 + 4;
    }

    // optional float recyds = 50;
    if (has_recyds()) {
      total_size += 2 + 4;
    }

    // optional float rectd = 60;
    if (has_rectd()) {
      total_size += 2 + 4;
    }

    // optional float rec = 70;
    if (has_rec()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float pint = 80;
    if (has_pint()) {
      total_size += 2 + 4;
    }

    // optional float fumble = 90;
    if (has_fumble()) {
      total_size += 2 + 4;
    }

    // optional float twopt = 100;
    if (has_twopt()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjOstats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjOstats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjOstats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjOstats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjOstats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjOstats)
    MergeFrom(*source);
  }
}

void ProjOstats::MergeFrom(const ProjOstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjOstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000002u) {
      passyds_ = from.passyds_;
    }
    if (cached_has_bits & 0x00000004u) {
      passtd_ = from.passtd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rushyds_ = from.rushyds_;
    }
    if (cached_has_bits & 0x00000010u) {
      rushtd_ = from.rushtd_;
    }
    if (cached_has_bits & 0x00000020u) {
      recyds_ = from.recyds_;
    }
    if (cached_has_bits & 0x00000040u) {
      rectd_ = from.rectd_;
    }
    if (cached_has_bits & 0x00000080u) {
      rec_ = from.rec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      pint_ = from.pint_;
    }
    if (cached_has_bits & 0x00000200u) {
      fumble_ = from.fumble_;
    }
    if (cached_has_bits & 0x00000400u) {
      twopt_ = from.twopt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjOstats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjOstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjOstats::CopyFrom(const ProjOstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjOstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjOstats::IsInitialized() const {
  return true;
}

void ProjOstats::Swap(ProjOstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjOstats::InternalSwap(ProjOstats* other) {
  using std::swap;
  swap(onept_, other->onept_);
  swap(passyds_, other->passyds_);
  swap(passtd_, other->passtd_);
  swap(rushyds_, other->rushyds_);
  swap(rushtd_, other->rushtd_);
  swap(recyds_, other->recyds_);
  swap(rectd_, other->rectd_);
  swap(rec_, other->rec_);
  swap(pint_, other->pint_);
  swap(fumble_, other->fumble_);
  swap(twopt_, other->twopt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjOstats::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjStats::InitAsDefaultInstance() {
  ::fantasybit::_ProjStats_default_instance_._instance.get_mutable()->ostats_ = const_cast< ::fantasybit::ProjOstats*>(
      ::fantasybit::ProjOstats::internal_default_instance());
  ::fantasybit::_ProjStats_default_instance_._instance.get_mutable()->dstats_ = const_cast< ::fantasybit::ProjDstats*>(
      ::fantasybit::ProjDstats::internal_default_instance());
  ::fantasybit::_ProjStats_default_instance_._instance.get_mutable()->kstats_ = const_cast< ::fantasybit::ProjKstats*>(
      ::fantasybit::ProjKstats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjStats::kOstatsFieldNumber;
const int ProjStats::kDstatsFieldNumber;
const int ProjStats::kKstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjStats::ProjStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ApiData_2eproto::InitDefaultsProjStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjStats)
}
ProjStats::ProjStats(const ProjStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ostats()) {
    ostats_ = new ::fantasybit::ProjOstats(*from.ostats_);
  } else {
    ostats_ = NULL;
  }
  if (from.has_dstats()) {
    dstats_ = new ::fantasybit::ProjDstats(*from.dstats_);
  } else {
    dstats_ = NULL;
  }
  if (from.has_kstats()) {
    kstats_ = new ::fantasybit::ProjKstats(*from.kstats_);
  } else {
    kstats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjStats)
}

void ProjStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ostats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kstats_) -
      reinterpret_cast<char*>(&ostats_)) + sizeof(kstats_));
}

ProjStats::~ProjStats() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjStats)
  SharedDtor();
}

void ProjStats::SharedDtor() {
  if (this != internal_default_instance()) delete ostats_;
  if (this != internal_default_instance()) delete dstats_;
  if (this != internal_default_instance()) delete kstats_;
}

void ProjStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjStats::descriptor() {
  ::protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjStats& ProjStats::default_instance() {
  ::protobuf_ApiData_2eproto::InitDefaultsProjStats();
  return *internal_default_instance();
}

ProjStats* ProjStats::New(::google::protobuf::Arena* arena) const {
  ProjStats* n = new ProjStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjStats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ostats_ != NULL);
      ostats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dstats_ != NULL);
      dstats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kstats_ != NULL);
      kstats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.ProjOstats ostats = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ostats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.ProjDstats dstats = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.ProjKstats kstats = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjStats)
  return false;
#undef DO_
}

void ProjStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ProjOstats ostats = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ostats_, output);
  }

  // optional .fantasybit.ProjDstats dstats = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->dstats_, output);
  }

  // optional .fantasybit.ProjKstats kstats = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->kstats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjStats)
}

::google::protobuf::uint8* ProjStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ProjOstats ostats = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->ostats_, deterministic, target);
  }

  // optional .fantasybit.ProjDstats dstats = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->dstats_, deterministic, target);
  }

  // optional .fantasybit.ProjKstats kstats = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->kstats_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjStats)
  return target;
}

size_t ProjStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .fantasybit.ProjOstats ostats = 10;
    if (has_ostats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ostats_);
    }

    // optional .fantasybit.ProjDstats dstats = 20;
    if (has_dstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->dstats_);
    }

    // optional .fantasybit.ProjKstats kstats = 30;
    if (has_kstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->kstats_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjStats)
    MergeFrom(*source);
  }
}

void ProjStats::MergeFrom(const ProjStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ostats()->::fantasybit::ProjOstats::MergeFrom(from.ostats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dstats()->::fantasybit::ProjDstats::MergeFrom(from.dstats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kstats()->::fantasybit::ProjKstats::MergeFrom(from.kstats());
    }
  }
}

void ProjStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjStats::CopyFrom(const ProjStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjStats::IsInitialized() const {
  return true;
}

void ProjStats::Swap(ProjStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjStats::InternalSwap(ProjStats* other) {
  using std::swap;
  swap(ostats_, other->ostats_);
  swap(dstats_, other->dstats_);
  swap(kstats_, other->kstats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjStats::GetMetadata() const {
  protobuf_ApiData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ApiData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
