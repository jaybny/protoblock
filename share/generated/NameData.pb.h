// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#ifndef PROTOBUF_NameData_2eproto__INCLUDED
#define PROTOBUF_NameData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ExData.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_NameData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFantasyNameBalImpl();
void InitDefaultsFantasyNameBal();
void InitDefaultsFantasyBitAwardImpl();
void InitDefaultsFantasyBitAward();
void InitDefaultsFantasyBitPnlImpl();
void InitDefaultsFantasyBitPnl();
void InitDefaultsFantasyBitProjImpl();
void InitDefaultsFantasyBitProj();
void InitDefaultsGameFantasyBitProjImpl();
void InitDefaultsGameFantasyBitProj();
inline void InitDefaults() {
  InitDefaultsFantasyNameBal();
  InitDefaultsFantasyBitAward();
  InitDefaultsFantasyBitPnl();
  InitDefaultsFantasyBitProj();
  InitDefaultsGameFantasyBitProj();
}
}  // namespace protobuf_NameData_2eproto
namespace fantasybit {
class FantasyBitAward;
class FantasyBitAwardDefaultTypeInternal;
extern FantasyBitAwardDefaultTypeInternal _FantasyBitAward_default_instance_;
class FantasyBitPnl;
class FantasyBitPnlDefaultTypeInternal;
extern FantasyBitPnlDefaultTypeInternal _FantasyBitPnl_default_instance_;
class FantasyBitProj;
class FantasyBitProjDefaultTypeInternal;
extern FantasyBitProjDefaultTypeInternal _FantasyBitProj_default_instance_;
class FantasyNameBal;
class FantasyNameBalDefaultTypeInternal;
extern FantasyNameBalDefaultTypeInternal _FantasyNameBal_default_instance_;
class GameFantasyBitProj;
class GameFantasyBitProjDefaultTypeInternal;
extern GameFantasyBitProjDefaultTypeInternal _GameFantasyBitProj_default_instance_;
}  // namespace fantasybit
namespace fantasybit {

// ===================================================================

class FantasyNameBal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameBal) */ {
 public:
  FantasyNameBal();
  virtual ~FantasyNameBal();

  FantasyNameBal(const FantasyNameBal& from);

  inline FantasyNameBal& operator=(const FantasyNameBal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyNameBal(FantasyNameBal&& from) noexcept
    : FantasyNameBal() {
    *this = ::std::move(from);
  }

  inline FantasyNameBal& operator=(FantasyNameBal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameBal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameBal* internal_default_instance() {
    return reinterpret_cast<const FantasyNameBal*>(
               &_FantasyNameBal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FantasyNameBal* other);
  friend void swap(FantasyNameBal& a, FantasyNameBal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameBal* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyNameBal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyNameBal& from);
  void MergeFrom(const FantasyNameBal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyNameBal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string public_key = 20;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 20;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional uint64 bits = 30;
  bool has_bits() const;
  void clear_bits();
  static const int kBitsFieldNumber = 30;
  ::google::protobuf::uint64 bits() const;
  void set_bits(::google::protobuf::uint64 value);

  // optional int64 stake = 40;
  bool has_stake() const;
  void clear_stake();
  static const int kStakeFieldNumber = 40;
  ::google::protobuf::int64 stake() const;
  void set_stake(::google::protobuf::int64 value);

  // optional uint64 chash = 50;
  bool has_chash() const;
  void clear_chash();
  static const int kChashFieldNumber = 50;
  ::google::protobuf::uint64 chash() const;
  void set_chash(::google::protobuf::uint64 value);

  // optional int32 block = 60;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 60;
  ::google::protobuf::int32 block() const;
  void set_block(::google::protobuf::int32 value);

  // optional int32 count = 70;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 70;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameBal)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_bits();
  void clear_has_bits();
  void set_has_stake();
  void clear_has_stake();
  void set_has_chash();
  void clear_has_chash();
  void set_has_block();
  void clear_has_block();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::uint64 bits_;
  ::google::protobuf::int64 stake_;
  ::google::protobuf::uint64 chash_;
  ::google::protobuf::int32 block_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_NameData_2eproto::TableStruct;
  friend void ::protobuf_NameData_2eproto::InitDefaultsFantasyNameBalImpl();
};
// -------------------------------------------------------------------

class FantasyBitAward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyBitAward) */ {
 public:
  FantasyBitAward();
  virtual ~FantasyBitAward();

  FantasyBitAward(const FantasyBitAward& from);

  inline FantasyBitAward& operator=(const FantasyBitAward& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyBitAward(FantasyBitAward&& from) noexcept
    : FantasyBitAward() {
    *this = ::std::move(from);
  }

  inline FantasyBitAward& operator=(FantasyBitAward&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyBitAward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyBitAward* internal_default_instance() {
    return reinterpret_cast<const FantasyBitAward*>(
               &_FantasyBitAward_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FantasyBitAward* other);
  friend void swap(FantasyBitAward& a, FantasyBitAward& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyBitAward* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyBitAward* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyBitAward& from);
  void MergeFrom(const FantasyBitAward& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyBitAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // optional uint64 award = 30;
  bool has_award() const;
  void clear_award();
  static const int kAwardFieldNumber = 30;
  ::google::protobuf::uint64 award() const;
  void set_award(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitAward)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_proj();
  void clear_has_proj();
  void set_has_award();
  void clear_has_award();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 proj_;
  ::google::protobuf::uint64 award_;
  friend struct ::protobuf_NameData_2eproto::TableStruct;
  friend void ::protobuf_NameData_2eproto::InitDefaultsFantasyBitAwardImpl();
};
// -------------------------------------------------------------------

class FantasyBitPnl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyBitPnl) */ {
 public:
  FantasyBitPnl();
  virtual ~FantasyBitPnl();

  FantasyBitPnl(const FantasyBitPnl& from);

  inline FantasyBitPnl& operator=(const FantasyBitPnl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyBitPnl(FantasyBitPnl&& from) noexcept
    : FantasyBitPnl() {
    *this = ::std::move(from);
  }

  inline FantasyBitPnl& operator=(FantasyBitPnl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyBitPnl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyBitPnl* internal_default_instance() {
    return reinterpret_cast<const FantasyBitPnl*>(
               &_FantasyBitPnl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FantasyBitPnl* other);
  friend void swap(FantasyBitPnl& a, FantasyBitPnl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyBitPnl* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyBitPnl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyBitPnl& from);
  void MergeFrom(const FantasyBitPnl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyBitPnl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .fantasybit.SettlePos spos = 20;
  bool has_spos() const;
  void clear_spos();
  static const int kSposFieldNumber = 20;
  const ::fantasybit::SettlePos& spos() const;
  ::fantasybit::SettlePos* release_spos();
  ::fantasybit::SettlePos* mutable_spos();
  void set_allocated_spos(::fantasybit::SettlePos* spos);

  // optional int64 pnl = 30;
  bool has_pnl() const;
  void clear_pnl();
  static const int kPnlFieldNumber = 30;
  ::google::protobuf::int64 pnl() const;
  void set_pnl(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitPnl)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_spos();
  void clear_has_spos();
  void set_has_pnl();
  void clear_has_pnl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::fantasybit::SettlePos* spos_;
  ::google::protobuf::int64 pnl_;
  friend struct ::protobuf_NameData_2eproto::TableStruct;
  friend void ::protobuf_NameData_2eproto::InitDefaultsFantasyBitPnlImpl();
};
// -------------------------------------------------------------------

class FantasyBitProj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyBitProj) */ {
 public:
  FantasyBitProj();
  virtual ~FantasyBitProj();

  FantasyBitProj(const FantasyBitProj& from);

  inline FantasyBitProj& operator=(const FantasyBitProj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyBitProj(FantasyBitProj&& from) noexcept
    : FantasyBitProj() {
    *this = ::std::move(from);
  }

  inline FantasyBitProj& operator=(FantasyBitProj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyBitProj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyBitProj* internal_default_instance() {
    return reinterpret_cast<const FantasyBitProj*>(
               &_FantasyBitProj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FantasyBitProj* other);
  friend void swap(FantasyBitProj& a, FantasyBitProj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyBitProj* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyBitProj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyBitProj& from);
  void MergeFrom(const FantasyBitProj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyBitProj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional int32 block = 50;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 50;
  ::google::protobuf::int32 block() const;
  void set_block(::google::protobuf::int32 value);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // optional int32 count = 40;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 40;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitProj)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_proj();
  void clear_has_proj();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_count();
  void clear_has_count();
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 block_;
  ::google::protobuf::int32 proj_;
  ::google::protobuf::int32 count_;
  friend struct ::protobuf_NameData_2eproto::TableStruct;
  friend void ::protobuf_NameData_2eproto::InitDefaultsFantasyBitProjImpl();
};
// -------------------------------------------------------------------

class GameFantasyBitProj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameFantasyBitProj) */ {
 public:
  GameFantasyBitProj();
  virtual ~GameFantasyBitProj();

  GameFantasyBitProj(const GameFantasyBitProj& from);

  inline GameFantasyBitProj& operator=(const GameFantasyBitProj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameFantasyBitProj(GameFantasyBitProj&& from) noexcept
    : GameFantasyBitProj() {
    *this = ::std::move(from);
  }

  inline GameFantasyBitProj& operator=(GameFantasyBitProj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameFantasyBitProj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFantasyBitProj* internal_default_instance() {
    return reinterpret_cast<const GameFantasyBitProj*>(
               &_GameFantasyBitProj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GameFantasyBitProj* other);
  friend void swap(GameFantasyBitProj& a, GameFantasyBitProj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameFantasyBitProj* New() const PROTOBUF_FINAL { return New(NULL); }

  GameFantasyBitProj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameFantasyBitProj& from);
  void MergeFrom(const GameFantasyBitProj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameFantasyBitProj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.FantasyBitProj home = 20;
  int home_size() const;
  void clear_home();
  static const int kHomeFieldNumber = 20;
  const ::fantasybit::FantasyBitProj& home(int index) const;
  ::fantasybit::FantasyBitProj* mutable_home(int index);
  ::fantasybit::FantasyBitProj* add_home();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
      mutable_home();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
      home() const;

  // repeated .fantasybit.FantasyBitProj away = 30;
  int away_size() const;
  void clear_away();
  static const int kAwayFieldNumber = 30;
  const ::fantasybit::FantasyBitProj& away(int index) const;
  ::fantasybit::FantasyBitProj* mutable_away(int index);
  ::fantasybit::FantasyBitProj* add_away();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
      mutable_away();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
      away() const;

  // optional string gameid = 10;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 10;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // @@protoc_insertion_point(class_scope:fantasybit.GameFantasyBitProj)
 private:
  void set_has_gameid();
  void clear_has_gameid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj > home_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj > away_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  friend struct ::protobuf_NameData_2eproto::TableStruct;
  friend void ::protobuf_NameData_2eproto::InitDefaultsGameFantasyBitProjImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FantasyNameBal

// optional string name = 10;
inline bool FantasyNameBal::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameBal::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameBal::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameBal::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyNameBal::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.name)
  return name_.GetNoArena();
}
inline void FantasyNameBal::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.name)
}
#if LANG_CXX11
inline void FantasyNameBal::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBal.name)
}
#endif
inline void FantasyNameBal::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBal.name)
}
inline void FantasyNameBal::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBal.name)
}
inline ::std::string* FantasyNameBal::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBal.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBal::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBal.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBal::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBal.name)
}

// optional string public_key = 20;
inline bool FantasyNameBal::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameBal::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameBal::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameBal::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& FantasyNameBal::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.public_key)
  return public_key_.GetNoArena();
}
inline void FantasyNameBal::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.public_key)
}
#if LANG_CXX11
inline void FantasyNameBal::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBal.public_key)
}
#endif
inline void FantasyNameBal::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBal.public_key)
}
inline void FantasyNameBal::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBal.public_key)
}
inline ::std::string* FantasyNameBal::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBal.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBal::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBal.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBal::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBal.public_key)
}

// optional uint64 bits = 30;
inline bool FantasyNameBal::has_bits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyNameBal::set_has_bits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyNameBal::clear_has_bits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyNameBal::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
  clear_has_bits();
}
inline ::google::protobuf::uint64 FantasyNameBal::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.bits)
  return bits_;
}
inline void FantasyNameBal::set_bits(::google::protobuf::uint64 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.bits)
}

// optional int64 stake = 40;
inline bool FantasyNameBal::has_stake() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyNameBal::set_has_stake() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyNameBal::clear_has_stake() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyNameBal::clear_stake() {
  stake_ = GOOGLE_LONGLONG(0);
  clear_has_stake();
}
inline ::google::protobuf::int64 FantasyNameBal::stake() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.stake)
  return stake_;
}
inline void FantasyNameBal::set_stake(::google::protobuf::int64 value) {
  set_has_stake();
  stake_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.stake)
}

// optional uint64 chash = 50;
inline bool FantasyNameBal::has_chash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FantasyNameBal::set_has_chash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FantasyNameBal::clear_has_chash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FantasyNameBal::clear_chash() {
  chash_ = GOOGLE_ULONGLONG(0);
  clear_has_chash();
}
inline ::google::protobuf::uint64 FantasyNameBal::chash() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.chash)
  return chash_;
}
inline void FantasyNameBal::set_chash(::google::protobuf::uint64 value) {
  set_has_chash();
  chash_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.chash)
}

// optional int32 block = 60;
inline bool FantasyNameBal::has_block() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FantasyNameBal::set_has_block() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FantasyNameBal::clear_has_block() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FantasyNameBal::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 FantasyNameBal::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.block)
  return block_;
}
inline void FantasyNameBal::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.block)
}

// optional int32 count = 70;
inline bool FantasyNameBal::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FantasyNameBal::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FantasyNameBal::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FantasyNameBal::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 FantasyNameBal::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.count)
  return count_;
}
inline void FantasyNameBal::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.count)
}

// -------------------------------------------------------------------

// FantasyBitAward

// optional string name = 10;
inline bool FantasyBitAward::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyBitAward::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyBitAward::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyBitAward::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyBitAward::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.name)
  return name_.GetNoArena();
}
inline void FantasyBitAward::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.name)
}
#if LANG_CXX11
inline void FantasyBitAward::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitAward.name)
}
#endif
inline void FantasyBitAward::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitAward.name)
}
inline void FantasyBitAward::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitAward.name)
}
inline ::std::string* FantasyBitAward::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitAward.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitAward::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitAward.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitAward::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitAward.name)
}

// optional int32 proj = 20;
inline bool FantasyBitAward::has_proj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyBitAward::set_has_proj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyBitAward::clear_has_proj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyBitAward::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 FantasyBitAward::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.proj)
  return proj_;
}
inline void FantasyBitAward::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.proj)
}

// optional uint64 award = 30;
inline bool FantasyBitAward::has_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyBitAward::set_has_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyBitAward::clear_has_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyBitAward::clear_award() {
  award_ = GOOGLE_ULONGLONG(0);
  clear_has_award();
}
inline ::google::protobuf::uint64 FantasyBitAward::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.award)
  return award_;
}
inline void FantasyBitAward::set_award(::google::protobuf::uint64 value) {
  set_has_award();
  award_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.award)
}

// -------------------------------------------------------------------

// FantasyBitPnl

// optional string name = 10;
inline bool FantasyBitPnl::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyBitPnl::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyBitPnl::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyBitPnl::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyBitPnl::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitPnl.name)
  return name_.GetNoArena();
}
inline void FantasyBitPnl::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitPnl.name)
}
#if LANG_CXX11
inline void FantasyBitPnl::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitPnl.name)
}
#endif
inline void FantasyBitPnl::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitPnl.name)
}
inline void FantasyBitPnl::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitPnl.name)
}
inline ::std::string* FantasyBitPnl::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitPnl.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitPnl::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitPnl.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitPnl::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitPnl.name)
}

// optional .fantasybit.SettlePos spos = 20;
inline bool FantasyBitPnl::has_spos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyBitPnl::set_has_spos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyBitPnl::clear_has_spos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::SettlePos& FantasyBitPnl::spos() const {
  const ::fantasybit::SettlePos* p = spos_;
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitPnl.spos)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::SettlePos*>(
      &::fantasybit::_SettlePos_default_instance_);
}
inline ::fantasybit::SettlePos* FantasyBitPnl::release_spos() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitPnl.spos)
  clear_has_spos();
  ::fantasybit::SettlePos* temp = spos_;
  spos_ = NULL;
  return temp;
}
inline ::fantasybit::SettlePos* FantasyBitPnl::mutable_spos() {
  set_has_spos();
  if (spos_ == NULL) {
    spos_ = new ::fantasybit::SettlePos;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitPnl.spos)
  return spos_;
}
inline void FantasyBitPnl::set_allocated_spos(::fantasybit::SettlePos* spos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(spos_);
  }
  if (spos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spos, submessage_arena);
    }
    set_has_spos();
  } else {
    clear_has_spos();
  }
  spos_ = spos;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitPnl.spos)
}

// optional int64 pnl = 30;
inline bool FantasyBitPnl::has_pnl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyBitPnl::set_has_pnl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyBitPnl::clear_has_pnl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyBitPnl::clear_pnl() {
  pnl_ = GOOGLE_LONGLONG(0);
  clear_has_pnl();
}
inline ::google::protobuf::int64 FantasyBitPnl::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitPnl.pnl)
  return pnl_;
}
inline void FantasyBitPnl::set_pnl(::google::protobuf::int64 value) {
  set_has_pnl();
  pnl_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitPnl.pnl)
}

// -------------------------------------------------------------------

// FantasyBitProj

// optional string name = 10;
inline bool FantasyBitProj::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyBitProj::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyBitProj::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyBitProj::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyBitProj::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.name)
  return name_.GetNoArena();
}
inline void FantasyBitProj::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.name)
}
#if LANG_CXX11
inline void FantasyBitProj::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitProj.name)
}
#endif
inline void FantasyBitProj::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitProj.name)
}
inline void FantasyBitProj::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitProj.name)
}
inline ::std::string* FantasyBitProj::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitProj.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitProj::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitProj.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitProj::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitProj.name)
}

// optional int32 proj = 20;
inline bool FantasyBitProj::has_proj() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyBitProj::set_has_proj() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyBitProj::clear_has_proj() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyBitProj::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 FantasyBitProj::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.proj)
  return proj_;
}
inline void FantasyBitProj::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.proj)
}

// optional string playerid = 30;
inline bool FantasyBitProj::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyBitProj::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyBitProj::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyBitProj::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& FantasyBitProj::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.playerid)
  return playerid_.GetNoArena();
}
inline void FantasyBitProj::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.playerid)
}
#if LANG_CXX11
inline void FantasyBitProj::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyBitProj.playerid)
}
#endif
inline void FantasyBitProj::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitProj.playerid)
}
inline void FantasyBitProj::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitProj.playerid)
}
inline ::std::string* FantasyBitProj::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitProj.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitProj::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyBitProj.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitProj::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitProj.playerid)
}

// optional int32 count = 40;
inline bool FantasyBitProj::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FantasyBitProj::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FantasyBitProj::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FantasyBitProj::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 FantasyBitProj::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.count)
  return count_;
}
inline void FantasyBitProj::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.count)
}

// optional int32 block = 50;
inline bool FantasyBitProj::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyBitProj::set_has_block() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyBitProj::clear_has_block() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyBitProj::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 FantasyBitProj::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.block)
  return block_;
}
inline void FantasyBitProj::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.block)
}

// -------------------------------------------------------------------

// GameFantasyBitProj

// optional string gameid = 10;
inline bool GameFantasyBitProj::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameFantasyBitProj::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameFantasyBitProj::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameFantasyBitProj::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& GameFantasyBitProj::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameFantasyBitProj.gameid)
  return gameid_.GetNoArena();
}
inline void GameFantasyBitProj::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameFantasyBitProj.gameid)
}
#if LANG_CXX11
inline void GameFantasyBitProj::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameFantasyBitProj.gameid)
}
#endif
inline void GameFantasyBitProj::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameFantasyBitProj.gameid)
}
inline void GameFantasyBitProj::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameFantasyBitProj.gameid)
}
inline ::std::string* GameFantasyBitProj::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameFantasyBitProj.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameFantasyBitProj::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameFantasyBitProj.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameFantasyBitProj::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameFantasyBitProj.gameid)
}

// repeated .fantasybit.FantasyBitProj home = 20;
inline int GameFantasyBitProj::home_size() const {
  return home_.size();
}
inline void GameFantasyBitProj::clear_home() {
  home_.Clear();
}
inline const ::fantasybit::FantasyBitProj& GameFantasyBitProj::home(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameFantasyBitProj.home)
  return home_.Get(index);
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::mutable_home(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameFantasyBitProj.home)
  return home_.Mutable(index);
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::add_home() {
  // @@protoc_insertion_point(field_add:fantasybit.GameFantasyBitProj.home)
  return home_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
GameFantasyBitProj::mutable_home() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameFantasyBitProj.home)
  return &home_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
GameFantasyBitProj::home() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameFantasyBitProj.home)
  return home_;
}

// repeated .fantasybit.FantasyBitProj away = 30;
inline int GameFantasyBitProj::away_size() const {
  return away_.size();
}
inline void GameFantasyBitProj::clear_away() {
  away_.Clear();
}
inline const ::fantasybit::FantasyBitProj& GameFantasyBitProj::away(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameFantasyBitProj.away)
  return away_.Get(index);
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::mutable_away(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameFantasyBitProj.away)
  return away_.Mutable(index);
}
inline ::fantasybit::FantasyBitProj* GameFantasyBitProj::add_away() {
  // @@protoc_insertion_point(field_add:fantasybit.GameFantasyBitProj.away)
  return away_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >*
GameFantasyBitProj::mutable_away() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameFantasyBitProj.away)
  return &away_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitProj >&
GameFantasyBitProj::away() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameFantasyBitProj.away)
  return away_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NameData_2eproto__INCLUDED
