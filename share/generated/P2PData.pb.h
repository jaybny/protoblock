// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: P2PData.proto

#ifndef PROTOBUF_P2PData_2eproto__INCLUDED
#define PROTOBUF_P2PData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_P2PData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPeerImpl();
void InitDefaultsPeer();
void InitDefaultsSessionIdImpl();
void InitDefaultsSessionId();
void InitDefaultsWirePeerImpl();
void InitDefaultsWirePeer();
void InitDefaultsMsgIntroImpl();
void InitDefaultsMsgIntro();
void InitDefaultsChainHeadImpl();
void InitDefaultsChainHead();
void InitDefaultsPeerChainStatusImpl();
void InitDefaultsPeerChainStatus();
void InitDefaultsMsgAliveImpl();
void InitDefaultsMsgAlive();
void InitDefaultsMsgHelloImpl();
void InitDefaultsMsgHello();
void InitDefaultsWireMsgImpl();
void InitDefaultsWireMsg();
inline void InitDefaults() {
  InitDefaultsPeer();
  InitDefaultsSessionId();
  InitDefaultsWirePeer();
  InitDefaultsMsgIntro();
  InitDefaultsChainHead();
  InitDefaultsPeerChainStatus();
  InitDefaultsMsgAlive();
  InitDefaultsMsgHello();
  InitDefaultsWireMsg();
}
}  // namespace protobuf_P2PData_2eproto
namespace fantasybit {
class ChainHead;
class ChainHeadDefaultTypeInternal;
extern ChainHeadDefaultTypeInternal _ChainHead_default_instance_;
class MsgAlive;
class MsgAliveDefaultTypeInternal;
extern MsgAliveDefaultTypeInternal _MsgAlive_default_instance_;
class MsgHello;
class MsgHelloDefaultTypeInternal;
extern MsgHelloDefaultTypeInternal _MsgHello_default_instance_;
class MsgIntro;
class MsgIntroDefaultTypeInternal;
extern MsgIntroDefaultTypeInternal _MsgIntro_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class PeerChainStatus;
class PeerChainStatusDefaultTypeInternal;
extern PeerChainStatusDefaultTypeInternal _PeerChainStatus_default_instance_;
class SessionId;
class SessionIdDefaultTypeInternal;
extern SessionIdDefaultTypeInternal _SessionId_default_instance_;
class WireMsg;
class WireMsgDefaultTypeInternal;
extern WireMsgDefaultTypeInternal _WireMsg_default_instance_;
class WirePeer;
class WirePeerDefaultTypeInternal;
extern WirePeerDefaultTypeInternal _WirePeer_default_instance_;
}  // namespace fantasybit
namespace fantasybit {

enum Peer_IsListening {
  Peer_IsListening__dontuse_ = 0,
  Peer_IsListening_NOTSURE = 1,
  Peer_IsListening_ITHINKSO = 2,
  Peer_IsListening_YES = 3,
  Peer_IsListening_NO = 4
};
bool Peer_IsListening_IsValid(int value);
const Peer_IsListening Peer_IsListening_IsListening_MIN = Peer_IsListening__dontuse_;
const Peer_IsListening Peer_IsListening_IsListening_MAX = Peer_IsListening_NO;
const int Peer_IsListening_IsListening_ARRAYSIZE = Peer_IsListening_IsListening_MAX + 1;

const ::google::protobuf::EnumDescriptor* Peer_IsListening_descriptor();
inline const ::std::string& Peer_IsListening_Name(Peer_IsListening value) {
  return ::google::protobuf::internal::NameOfEnum(
    Peer_IsListening_descriptor(), value);
}
inline bool Peer_IsListening_Parse(
    const ::std::string& name, Peer_IsListening* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Peer_IsListening>(
    Peer_IsListening_descriptor(), name, value);
}
enum SessionId_NetworkID {
  SessionId_NetworkID__dontuse_ = 0,
  SessionId_NetworkID_TEST = 1,
  SessionId_NetworkID_PROD = 2
};
bool SessionId_NetworkID_IsValid(int value);
const SessionId_NetworkID SessionId_NetworkID_NetworkID_MIN = SessionId_NetworkID__dontuse_;
const SessionId_NetworkID SessionId_NetworkID_NetworkID_MAX = SessionId_NetworkID_PROD;
const int SessionId_NetworkID_NetworkID_ARRAYSIZE = SessionId_NetworkID_NetworkID_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionId_NetworkID_descriptor();
inline const ::std::string& SessionId_NetworkID_Name(SessionId_NetworkID value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionId_NetworkID_descriptor(), value);
}
inline bool SessionId_NetworkID_Parse(
    const ::std::string& name, SessionId_NetworkID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionId_NetworkID>(
    SessionId_NetworkID_descriptor(), name, value);
}
enum PeerChainStatus_ChainState {
  PeerChainStatus_ChainState__dontuse_ = 0,
  PeerChainStatus_ChainState_STARTING = 2,
  PeerChainStatus_ChainState_SEARCHING = 4,
  PeerChainStatus_ChainState_REORG = 6,
  PeerChainStatus_ChainState_STOPPING = 8,
  PeerChainStatus_ChainState_ABORTING = 10,
  PeerChainStatus_ChainState_CONNECTING = 40,
  PeerChainStatus_ChainState_SYNCING = 50,
  PeerChainStatus_ChainState_LIVE = 60
};
bool PeerChainStatus_ChainState_IsValid(int value);
const PeerChainStatus_ChainState PeerChainStatus_ChainState_ChainState_MIN = PeerChainStatus_ChainState__dontuse_;
const PeerChainStatus_ChainState PeerChainStatus_ChainState_ChainState_MAX = PeerChainStatus_ChainState_LIVE;
const int PeerChainStatus_ChainState_ChainState_ARRAYSIZE = PeerChainStatus_ChainState_ChainState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerChainStatus_ChainState_descriptor();
inline const ::std::string& PeerChainStatus_ChainState_Name(PeerChainStatus_ChainState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerChainStatus_ChainState_descriptor(), value);
}
inline bool PeerChainStatus_ChainState_Parse(
    const ::std::string& name, PeerChainStatus_ChainState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerChainStatus_ChainState>(
    PeerChainStatus_ChainState_descriptor(), name, value);
}
enum MsgType {
  _dontuse_ = 0,
  INTRO = 1,
  HELLO = 2,
  ALIVE = 4
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = _dontuse_;
const MsgType MsgType_MAX = ALIVE;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Peer_IsListening IsListening;
  static const IsListening _dontuse_ =
    Peer_IsListening__dontuse_;
  static const IsListening NOTSURE =
    Peer_IsListening_NOTSURE;
  static const IsListening ITHINKSO =
    Peer_IsListening_ITHINKSO;
  static const IsListening YES =
    Peer_IsListening_YES;
  static const IsListening NO =
    Peer_IsListening_NO;
  static inline bool IsListening_IsValid(int value) {
    return Peer_IsListening_IsValid(value);
  }
  static const IsListening IsListening_MIN =
    Peer_IsListening_IsListening_MIN;
  static const IsListening IsListening_MAX =
    Peer_IsListening_IsListening_MAX;
  static const int IsListening_ARRAYSIZE =
    Peer_IsListening_IsListening_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IsListening_descriptor() {
    return Peer_IsListening_descriptor();
  }
  static inline const ::std::string& IsListening_Name(IsListening value) {
    return Peer_IsListening_Name(value);
  }
  static inline bool IsListening_Parse(const ::std::string& name,
      IsListening* value) {
    return Peer_IsListening_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string address = 10;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 10;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional uint32 port = 30;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 30;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional .fantasybit.Peer.IsListening is_listening = 40;
  bool has_is_listening() const;
  void clear_is_listening();
  static const int kIsListeningFieldNumber = 40;
  ::fantasybit::Peer_IsListening is_listening() const;
  void set_is_listening(::fantasybit::Peer_IsListening value);

  // @@protoc_insertion_point(class_scope:fantasybit.Peer)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();
  void set_has_is_listening();
  void clear_has_is_listening();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint32 port_;
  int is_listening_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsPeerImpl();
};
// -------------------------------------------------------------------

class SessionId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.SessionId) */ {
 public:
  SessionId();
  virtual ~SessionId();

  SessionId(const SessionId& from);

  inline SessionId& operator=(const SessionId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionId(SessionId&& from) noexcept
    : SessionId() {
    *this = ::std::move(from);
  }

  inline SessionId& operator=(SessionId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionId* internal_default_instance() {
    return reinterpret_cast<const SessionId*>(
               &_SessionId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SessionId* other);
  friend void swap(SessionId& a, SessionId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionId* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionId& from);
  void MergeFrom(const SessionId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SessionId_NetworkID NetworkID;
  static const NetworkID _dontuse_ =
    SessionId_NetworkID__dontuse_;
  static const NetworkID TEST =
    SessionId_NetworkID_TEST;
  static const NetworkID PROD =
    SessionId_NetworkID_PROD;
  static inline bool NetworkID_IsValid(int value) {
    return SessionId_NetworkID_IsValid(value);
  }
  static const NetworkID NetworkID_MIN =
    SessionId_NetworkID_NetworkID_MIN;
  static const NetworkID NetworkID_MAX =
    SessionId_NetworkID_NetworkID_MAX;
  static const int NetworkID_ARRAYSIZE =
    SessionId_NetworkID_NetworkID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NetworkID_descriptor() {
    return SessionId_NetworkID_descriptor();
  }
  static inline const ::std::string& NetworkID_Name(NetworkID value) {
    return SessionId_NetworkID_Name(value);
  }
  static inline bool NetworkID_Parse(const ::std::string& name,
      NetworkID* value) {
    return SessionId_NetworkID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes uuid = 30;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 30;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional uint32 start_time = 20;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 20;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // optional .fantasybit.SessionId.NetworkID network_id = 1;
  bool has_network_id() const;
  void clear_network_id();
  static const int kNetworkIdFieldNumber = 1;
  ::fantasybit::SessionId_NetworkID network_id() const;
  void set_network_id(::fantasybit::SessionId_NetworkID value);

  // optional uint32 wire_version = 10;
  bool has_wire_version() const;
  void clear_wire_version();
  static const int kWireVersionFieldNumber = 10;
  ::google::protobuf::uint32 wire_version() const;
  void set_wire_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.SessionId)
 private:
  void set_has_network_id();
  void clear_has_network_id();
  void set_has_wire_version();
  void clear_has_wire_version();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_uuid();
  void clear_has_uuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::uint32 start_time_;
  int network_id_;
  ::google::protobuf::uint32 wire_version_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsSessionIdImpl();
};
// -------------------------------------------------------------------

class WirePeer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.WirePeer) */ {
 public:
  WirePeer();
  virtual ~WirePeer();

  WirePeer(const WirePeer& from);

  inline WirePeer& operator=(const WirePeer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WirePeer(WirePeer&& from) noexcept
    : WirePeer() {
    *this = ::std::move(from);
  }

  inline WirePeer& operator=(WirePeer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WirePeer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WirePeer* internal_default_instance() {
    return reinterpret_cast<const WirePeer*>(
               &_WirePeer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(WirePeer* other);
  friend void swap(WirePeer& a, WirePeer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WirePeer* New() const PROTOBUF_FINAL { return New(NULL); }

  WirePeer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WirePeer& from);
  void MergeFrom(const WirePeer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WirePeer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.SessionId session_id = 10;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 10;
  const ::fantasybit::SessionId& session_id() const;
  ::fantasybit::SessionId* release_session_id();
  ::fantasybit::SessionId* mutable_session_id();
  void set_allocated_session_id(::fantasybit::SessionId* session_id);

  // optional .fantasybit.Peer peer = 20;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 20;
  const ::fantasybit::Peer& peer() const;
  ::fantasybit::Peer* release_peer();
  ::fantasybit::Peer* mutable_peer();
  void set_allocated_peer(::fantasybit::Peer* peer);

  // @@protoc_insertion_point(class_scope:fantasybit.WirePeer)
 private:
  void set_has_session_id();
  void clear_has_session_id();
  void set_has_peer();
  void clear_has_peer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::SessionId* session_id_;
  ::fantasybit::Peer* peer_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsWirePeerImpl();
};
// -------------------------------------------------------------------

class MsgIntro : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MsgIntro) */ {
 public:
  MsgIntro();
  virtual ~MsgIntro();

  MsgIntro(const MsgIntro& from);

  inline MsgIntro& operator=(const MsgIntro& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgIntro(MsgIntro&& from) noexcept
    : MsgIntro() {
    *this = ::std::move(from);
  }

  inline MsgIntro& operator=(MsgIntro&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgIntro& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgIntro* internal_default_instance() {
    return reinterpret_cast<const MsgIntro*>(
               &_MsgIntro_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MsgIntro* other);
  friend void swap(MsgIntro& a, MsgIntro& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgIntro* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgIntro* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgIntro& from);
  void MergeFrom(const MsgIntro& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgIntro* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.Peer everyone = 30;
  int everyone_size() const;
  void clear_everyone();
  static const int kEveryoneFieldNumber = 30;
  const ::fantasybit::Peer& everyone(int index) const;
  ::fantasybit::Peer* mutable_everyone(int index);
  ::fantasybit::Peer* add_everyone();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Peer >*
      mutable_everyone();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::Peer >&
      everyone() const;

  // optional .fantasybit.WirePeer iam = 10;
  bool has_iam() const;
  void clear_iam();
  static const int kIamFieldNumber = 10;
  const ::fantasybit::WirePeer& iam() const;
  ::fantasybit::WirePeer* release_iam();
  ::fantasybit::WirePeer* mutable_iam();
  void set_allocated_iam(::fantasybit::WirePeer* iam);

  // optional .fantasybit.WirePeer youare = 20;
  bool has_youare() const;
  void clear_youare();
  static const int kYouareFieldNumber = 20;
  const ::fantasybit::WirePeer& youare() const;
  ::fantasybit::WirePeer* release_youare();
  ::fantasybit::WirePeer* mutable_youare();
  void set_allocated_youare(::fantasybit::WirePeer* youare);

  // @@protoc_insertion_point(class_scope:fantasybit.MsgIntro)
 private:
  void set_has_iam();
  void clear_has_iam();
  void set_has_youare();
  void clear_has_youare();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Peer > everyone_;
  ::fantasybit::WirePeer* iam_;
  ::fantasybit::WirePeer* youare_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsMsgIntroImpl();
};
// -------------------------------------------------------------------

class ChainHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ChainHead) */ {
 public:
  ChainHead();
  virtual ~ChainHead();

  ChainHead(const ChainHead& from);

  inline ChainHead& operator=(const ChainHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChainHead(ChainHead&& from) noexcept
    : ChainHead() {
    *this = ::std::move(from);
  }

  inline ChainHead& operator=(ChainHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChainHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChainHead* internal_default_instance() {
    return reinterpret_cast<const ChainHead*>(
               &_ChainHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ChainHead* other);
  friend void swap(ChainHead& a, ChainHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChainHead* New() const PROTOBUF_FINAL { return New(NULL); }

  ChainHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChainHead& from);
  void MergeFrom(const ChainHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChainHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 30;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 30;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 height = 10;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 weight = 20;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 20;
  ::google::protobuf::int32 weight() const;
  void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.ChainHead)
 private:
  void set_has_height();
  void clear_has_height();
  void set_has_weight();
  void clear_has_weight();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 weight_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsChainHeadImpl();
};
// -------------------------------------------------------------------

class PeerChainStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PeerChainStatus) */ {
 public:
  PeerChainStatus();
  virtual ~PeerChainStatus();

  PeerChainStatus(const PeerChainStatus& from);

  inline PeerChainStatus& operator=(const PeerChainStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerChainStatus(PeerChainStatus&& from) noexcept
    : PeerChainStatus() {
    *this = ::std::move(from);
  }

  inline PeerChainStatus& operator=(PeerChainStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerChainStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerChainStatus* internal_default_instance() {
    return reinterpret_cast<const PeerChainStatus*>(
               &_PeerChainStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PeerChainStatus* other);
  friend void swap(PeerChainStatus& a, PeerChainStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerChainStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  PeerChainStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PeerChainStatus& from);
  void MergeFrom(const PeerChainStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PeerChainStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PeerChainStatus_ChainState ChainState;
  static const ChainState _dontuse_ =
    PeerChainStatus_ChainState__dontuse_;
  static const ChainState STARTING =
    PeerChainStatus_ChainState_STARTING;
  static const ChainState SEARCHING =
    PeerChainStatus_ChainState_SEARCHING;
  static const ChainState REORG =
    PeerChainStatus_ChainState_REORG;
  static const ChainState STOPPING =
    PeerChainStatus_ChainState_STOPPING;
  static const ChainState ABORTING =
    PeerChainStatus_ChainState_ABORTING;
  static const ChainState CONNECTING =
    PeerChainStatus_ChainState_CONNECTING;
  static const ChainState SYNCING =
    PeerChainStatus_ChainState_SYNCING;
  static const ChainState LIVE =
    PeerChainStatus_ChainState_LIVE;
  static inline bool ChainState_IsValid(int value) {
    return PeerChainStatus_ChainState_IsValid(value);
  }
  static const ChainState ChainState_MIN =
    PeerChainStatus_ChainState_ChainState_MIN;
  static const ChainState ChainState_MAX =
    PeerChainStatus_ChainState_ChainState_MAX;
  static const int ChainState_ARRAYSIZE =
    PeerChainStatus_ChainState_ChainState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChainState_descriptor() {
    return PeerChainStatus_ChainState_descriptor();
  }
  static inline const ::std::string& ChainState_Name(ChainState value) {
    return PeerChainStatus_ChainState_Name(value);
  }
  static inline bool ChainState_Parse(const ::std::string& name,
      ChainState* value) {
    return PeerChainStatus_ChainState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.ChainHead last_dea = 10;
  bool has_last_dea() const;
  void clear_last_dea();
  static const int kLastDeaFieldNumber = 10;
  const ::fantasybit::ChainHead& last_dea() const;
  ::fantasybit::ChainHead* release_last_dea();
  ::fantasybit::ChainHead* mutable_last_dea();
  void set_allocated_last_dea(::fantasybit::ChainHead* last_dea);

  // optional .fantasybit.ChainHead last_irreversible = 20;
  bool has_last_irreversible() const;
  void clear_last_irreversible();
  static const int kLastIrreversibleFieldNumber = 20;
  const ::fantasybit::ChainHead& last_irreversible() const;
  ::fantasybit::ChainHead* release_last_irreversible();
  ::fantasybit::ChainHead* mutable_last_irreversible();
  void set_allocated_last_irreversible(::fantasybit::ChainHead* last_irreversible);

  // optional uint32 mempool_size = 40;
  bool has_mempool_size() const;
  void clear_mempool_size();
  static const int kMempoolSizeFieldNumber = 40;
  ::google::protobuf::uint32 mempool_size() const;
  void set_mempool_size(::google::protobuf::uint32 value);

  // optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
  bool has_chain_state() const;
  void clear_chain_state();
  static const int kChainStateFieldNumber = 1;
  ::fantasybit::PeerChainStatus_ChainState chain_state() const;
  void set_chain_state(::fantasybit::PeerChainStatus_ChainState value);

  // optional uint32 mempool_count = 30;
  bool has_mempool_count() const;
  void clear_mempool_count();
  static const int kMempoolCountFieldNumber = 30;
  ::google::protobuf::uint32 mempool_count() const;
  void set_mempool_count(::google::protobuf::uint32 value);

  // optional uint64 last_block_timestamp = 50;
  bool has_last_block_timestamp() const;
  void clear_last_block_timestamp();
  static const int kLastBlockTimestampFieldNumber = 50;
  ::google::protobuf::uint64 last_block_timestamp() const;
  void set_last_block_timestamp(::google::protobuf::uint64 value);

  // optional uint64 last_tx_timestamp = 60;
  bool has_last_tx_timestamp() const;
  void clear_last_tx_timestamp();
  static const int kLastTxTimestampFieldNumber = 60;
  ::google::protobuf::uint64 last_tx_timestamp() const;
  void set_last_tx_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.PeerChainStatus)
 private:
  void set_has_chain_state();
  void clear_has_chain_state();
  void set_has_last_dea();
  void clear_has_last_dea();
  void set_has_last_irreversible();
  void clear_has_last_irreversible();
  void set_has_mempool_count();
  void clear_has_mempool_count();
  void set_has_mempool_size();
  void clear_has_mempool_size();
  void set_has_last_block_timestamp();
  void clear_has_last_block_timestamp();
  void set_has_last_tx_timestamp();
  void clear_has_last_tx_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::ChainHead* last_dea_;
  ::fantasybit::ChainHead* last_irreversible_;
  ::google::protobuf::uint32 mempool_size_;
  int chain_state_;
  ::google::protobuf::uint32 mempool_count_;
  ::google::protobuf::uint64 last_block_timestamp_;
  ::google::protobuf::uint64 last_tx_timestamp_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsPeerChainStatusImpl();
};
// -------------------------------------------------------------------

class MsgAlive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MsgAlive) */ {
 public:
  MsgAlive();
  virtual ~MsgAlive();

  MsgAlive(const MsgAlive& from);

  inline MsgAlive& operator=(const MsgAlive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgAlive(MsgAlive&& from) noexcept
    : MsgAlive() {
    *this = ::std::move(from);
  }

  inline MsgAlive& operator=(MsgAlive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAlive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgAlive* internal_default_instance() {
    return reinterpret_cast<const MsgAlive*>(
               &_MsgAlive_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MsgAlive* other);
  friend void swap(MsgAlive& a, MsgAlive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgAlive* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgAlive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgAlive& from);
  void MergeFrom(const MsgAlive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgAlive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.PeerChainStatus peer_status = 30;
  bool has_peer_status() const;
  void clear_peer_status();
  static const int kPeerStatusFieldNumber = 30;
  const ::fantasybit::PeerChainStatus& peer_status() const;
  ::fantasybit::PeerChainStatus* release_peer_status();
  ::fantasybit::PeerChainStatus* mutable_peer_status();
  void set_allocated_peer_status(::fantasybit::PeerChainStatus* peer_status);

  // optional uint64 timestamp = 40;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 40;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.MsgAlive)
 private:
  void set_has_peer_status();
  void clear_has_peer_status();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::PeerChainStatus* peer_status_;
  ::google::protobuf::uint64 timestamp_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsMsgAliveImpl();
};
// -------------------------------------------------------------------

class MsgHello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MsgHello) */ {
 public:
  MsgHello();
  virtual ~MsgHello();

  MsgHello(const MsgHello& from);

  inline MsgHello& operator=(const MsgHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgHello(MsgHello&& from) noexcept
    : MsgHello() {
    *this = ::std::move(from);
  }

  inline MsgHello& operator=(MsgHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHello* internal_default_instance() {
    return reinterpret_cast<const MsgHello*>(
               &_MsgHello_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(MsgHello* other);
  friend void swap(MsgHello& a, MsgHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgHello* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgHello* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgHello& from);
  void MergeFrom(const MsgHello& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.WirePeer connections = 20;
  int connections_size() const;
  void clear_connections();
  static const int kConnectionsFieldNumber = 20;
  const ::fantasybit::WirePeer& connections(int index) const;
  ::fantasybit::WirePeer* mutable_connections(int index);
  ::fantasybit::WirePeer* add_connections();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::WirePeer >*
      mutable_connections();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::WirePeer >&
      connections() const;

  // optional .fantasybit.MsgIntro update = 10;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 10;
  const ::fantasybit::MsgIntro& update() const;
  ::fantasybit::MsgIntro* release_update();
  ::fantasybit::MsgIntro* mutable_update();
  void set_allocated_update(::fantasybit::MsgIntro* update);

  // @@protoc_insertion_point(class_scope:fantasybit.MsgHello)
 private:
  void set_has_update();
  void clear_has_update();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::WirePeer > connections_;
  ::fantasybit::MsgIntro* update_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsMsgHelloImpl();
};
// -------------------------------------------------------------------

class WireMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.WireMsg) */ {
 public:
  WireMsg();
  virtual ~WireMsg();

  WireMsg(const WireMsg& from);

  inline WireMsg& operator=(const WireMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WireMsg(WireMsg&& from) noexcept
    : WireMsg() {
    *this = ::std::move(from);
  }

  inline WireMsg& operator=(WireMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WireMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WireMsg* internal_default_instance() {
    return reinterpret_cast<const WireMsg*>(
               &_WireMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WireMsg* other);
  friend void swap(WireMsg& a, WireMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WireMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  WireMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WireMsg& from);
  void MergeFrom(const WireMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WireMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.MsgIntro intro = 20;
  bool has_intro() const;
  void clear_intro();
  static const int kIntroFieldNumber = 20;
  const ::fantasybit::MsgIntro& intro() const;
  ::fantasybit::MsgIntro* release_intro();
  ::fantasybit::MsgIntro* mutable_intro();
  void set_allocated_intro(::fantasybit::MsgIntro* intro);

  // optional .fantasybit.MsgHello hello = 30;
  bool has_hello() const;
  void clear_hello();
  static const int kHelloFieldNumber = 30;
  const ::fantasybit::MsgHello& hello() const;
  ::fantasybit::MsgHello* release_hello();
  ::fantasybit::MsgHello* mutable_hello();
  void set_allocated_hello(::fantasybit::MsgHello* hello);

  // optional .fantasybit.MsgAlive alive = 40;
  bool has_alive() const;
  void clear_alive();
  static const int kAliveFieldNumber = 40;
  const ::fantasybit::MsgAlive& alive() const;
  ::fantasybit::MsgAlive* release_alive();
  ::fantasybit::MsgAlive* mutable_alive();
  void set_allocated_alive(::fantasybit::MsgAlive* alive);

  // optional .fantasybit.MsgType type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::fantasybit::MsgType type() const;
  void set_type(::fantasybit::MsgType value);

  // @@protoc_insertion_point(class_scope:fantasybit.WireMsg)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_intro();
  void clear_has_intro();
  void set_has_hello();
  void clear_has_hello();
  void set_has_alive();
  void clear_has_alive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::MsgIntro* intro_;
  ::fantasybit::MsgHello* hello_;
  ::fantasybit::MsgAlive* alive_;
  int type_;
  friend struct ::protobuf_P2PData_2eproto::TableStruct;
  friend void ::protobuf_P2PData_2eproto::InitDefaultsWireMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Peer

// optional string address = 10;
inline bool Peer::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Peer::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Peer::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Peer::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Peer::address() const {
  // @@protoc_insertion_point(field_get:fantasybit.Peer.address)
  return address_.GetNoArena();
}
inline void Peer::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Peer.address)
}
#if LANG_CXX11
inline void Peer::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Peer.address)
}
#endif
inline void Peer::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Peer.address)
}
inline void Peer::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Peer.address)
}
inline ::std::string* Peer::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:fantasybit.Peer.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_address() {
  // @@protoc_insertion_point(field_release:fantasybit.Peer.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Peer.address)
}

// optional uint32 port = 30;
inline bool Peer::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Peer::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Peer::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Peer::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Peer::port() const {
  // @@protoc_insertion_point(field_get:fantasybit.Peer.port)
  return port_;
}
inline void Peer::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Peer.port)
}

// optional .fantasybit.Peer.IsListening is_listening = 40;
inline bool Peer::has_is_listening() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Peer::set_has_is_listening() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Peer::clear_has_is_listening() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Peer::clear_is_listening() {
  is_listening_ = 0;
  clear_has_is_listening();
}
inline ::fantasybit::Peer_IsListening Peer::is_listening() const {
  // @@protoc_insertion_point(field_get:fantasybit.Peer.is_listening)
  return static_cast< ::fantasybit::Peer_IsListening >(is_listening_);
}
inline void Peer::set_is_listening(::fantasybit::Peer_IsListening value) {
  assert(::fantasybit::Peer_IsListening_IsValid(value));
  set_has_is_listening();
  is_listening_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Peer.is_listening)
}

// -------------------------------------------------------------------

// SessionId

// optional .fantasybit.SessionId.NetworkID network_id = 1;
inline bool SessionId::has_network_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionId::set_has_network_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionId::clear_has_network_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionId::clear_network_id() {
  network_id_ = 0;
  clear_has_network_id();
}
inline ::fantasybit::SessionId_NetworkID SessionId::network_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.network_id)
  return static_cast< ::fantasybit::SessionId_NetworkID >(network_id_);
}
inline void SessionId::set_network_id(::fantasybit::SessionId_NetworkID value) {
  assert(::fantasybit::SessionId_NetworkID_IsValid(value));
  set_has_network_id();
  network_id_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.network_id)
}

// optional uint32 wire_version = 10;
inline bool SessionId::has_wire_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionId::set_has_wire_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionId::clear_has_wire_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionId::clear_wire_version() {
  wire_version_ = 0u;
  clear_has_wire_version();
}
inline ::google::protobuf::uint32 SessionId::wire_version() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.wire_version)
  return wire_version_;
}
inline void SessionId::set_wire_version(::google::protobuf::uint32 value) {
  set_has_wire_version();
  wire_version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.wire_version)
}

// optional uint32 start_time = 20;
inline bool SessionId::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionId::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionId::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionId::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 SessionId::start_time() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.start_time)
  return start_time_;
}
inline void SessionId::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.start_time)
}

// optional bytes uuid = 30;
inline bool SessionId::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionId::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionId::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionId::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& SessionId::uuid() const {
  // @@protoc_insertion_point(field_get:fantasybit.SessionId.uuid)
  return uuid_.GetNoArena();
}
inline void SessionId::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SessionId.uuid)
}
#if LANG_CXX11
inline void SessionId::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SessionId.uuid)
}
#endif
inline void SessionId::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SessionId.uuid)
}
inline void SessionId::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SessionId.uuid)
}
inline ::std::string* SessionId::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:fantasybit.SessionId.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionId::release_uuid() {
  // @@protoc_insertion_point(field_release:fantasybit.SessionId.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionId::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SessionId.uuid)
}

// -------------------------------------------------------------------

// WirePeer

// optional .fantasybit.SessionId session_id = 10;
inline bool WirePeer::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WirePeer::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WirePeer::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WirePeer::clear_session_id() {
  if (session_id_ != NULL) session_id_->Clear();
  clear_has_session_id();
}
inline const ::fantasybit::SessionId& WirePeer::session_id() const {
  const ::fantasybit::SessionId* p = session_id_;
  // @@protoc_insertion_point(field_get:fantasybit.WirePeer.session_id)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::SessionId*>(
      &::fantasybit::_SessionId_default_instance_);
}
inline ::fantasybit::SessionId* WirePeer::release_session_id() {
  // @@protoc_insertion_point(field_release:fantasybit.WirePeer.session_id)
  clear_has_session_id();
  ::fantasybit::SessionId* temp = session_id_;
  session_id_ = NULL;
  return temp;
}
inline ::fantasybit::SessionId* WirePeer::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == NULL) {
    session_id_ = new ::fantasybit::SessionId;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.WirePeer.session_id)
  return session_id_;
}
inline void WirePeer::set_allocated_session_id(::fantasybit::SessionId* session_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete session_id_;
  }
  if (session_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session_id, submessage_arena);
    }
    set_has_session_id();
  } else {
    clear_has_session_id();
  }
  session_id_ = session_id;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WirePeer.session_id)
}

// optional .fantasybit.Peer peer = 20;
inline bool WirePeer::has_peer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WirePeer::set_has_peer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WirePeer::clear_has_peer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WirePeer::clear_peer() {
  if (peer_ != NULL) peer_->Clear();
  clear_has_peer();
}
inline const ::fantasybit::Peer& WirePeer::peer() const {
  const ::fantasybit::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:fantasybit.WirePeer.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::Peer*>(
      &::fantasybit::_Peer_default_instance_);
}
inline ::fantasybit::Peer* WirePeer::release_peer() {
  // @@protoc_insertion_point(field_release:fantasybit.WirePeer.peer)
  clear_has_peer();
  ::fantasybit::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::fantasybit::Peer* WirePeer::mutable_peer() {
  set_has_peer();
  if (peer_ == NULL) {
    peer_ = new ::fantasybit::Peer;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.WirePeer.peer)
  return peer_;
}
inline void WirePeer::set_allocated_peer(::fantasybit::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    set_has_peer();
  } else {
    clear_has_peer();
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WirePeer.peer)
}

// -------------------------------------------------------------------

// MsgIntro

// optional .fantasybit.WirePeer iam = 10;
inline bool MsgIntro::has_iam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgIntro::set_has_iam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgIntro::clear_has_iam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgIntro::clear_iam() {
  if (iam_ != NULL) iam_->Clear();
  clear_has_iam();
}
inline const ::fantasybit::WirePeer& MsgIntro::iam() const {
  const ::fantasybit::WirePeer* p = iam_;
  // @@protoc_insertion_point(field_get:fantasybit.MsgIntro.iam)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::WirePeer*>(
      &::fantasybit::_WirePeer_default_instance_);
}
inline ::fantasybit::WirePeer* MsgIntro::release_iam() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgIntro.iam)
  clear_has_iam();
  ::fantasybit::WirePeer* temp = iam_;
  iam_ = NULL;
  return temp;
}
inline ::fantasybit::WirePeer* MsgIntro::mutable_iam() {
  set_has_iam();
  if (iam_ == NULL) {
    iam_ = new ::fantasybit::WirePeer;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgIntro.iam)
  return iam_;
}
inline void MsgIntro::set_allocated_iam(::fantasybit::WirePeer* iam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete iam_;
  }
  if (iam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      iam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, iam, submessage_arena);
    }
    set_has_iam();
  } else {
    clear_has_iam();
  }
  iam_ = iam;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgIntro.iam)
}

// optional .fantasybit.WirePeer youare = 20;
inline bool MsgIntro::has_youare() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgIntro::set_has_youare() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgIntro::clear_has_youare() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgIntro::clear_youare() {
  if (youare_ != NULL) youare_->Clear();
  clear_has_youare();
}
inline const ::fantasybit::WirePeer& MsgIntro::youare() const {
  const ::fantasybit::WirePeer* p = youare_;
  // @@protoc_insertion_point(field_get:fantasybit.MsgIntro.youare)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::WirePeer*>(
      &::fantasybit::_WirePeer_default_instance_);
}
inline ::fantasybit::WirePeer* MsgIntro::release_youare() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgIntro.youare)
  clear_has_youare();
  ::fantasybit::WirePeer* temp = youare_;
  youare_ = NULL;
  return temp;
}
inline ::fantasybit::WirePeer* MsgIntro::mutable_youare() {
  set_has_youare();
  if (youare_ == NULL) {
    youare_ = new ::fantasybit::WirePeer;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgIntro.youare)
  return youare_;
}
inline void MsgIntro::set_allocated_youare(::fantasybit::WirePeer* youare) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youare_;
  }
  if (youare) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      youare = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, youare, submessage_arena);
    }
    set_has_youare();
  } else {
    clear_has_youare();
  }
  youare_ = youare;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgIntro.youare)
}

// repeated .fantasybit.Peer everyone = 30;
inline int MsgIntro::everyone_size() const {
  return everyone_.size();
}
inline void MsgIntro::clear_everyone() {
  everyone_.Clear();
}
inline const ::fantasybit::Peer& MsgIntro::everyone(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgIntro.everyone)
  return everyone_.Get(index);
}
inline ::fantasybit::Peer* MsgIntro::mutable_everyone(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgIntro.everyone)
  return everyone_.Mutable(index);
}
inline ::fantasybit::Peer* MsgIntro::add_everyone() {
  // @@protoc_insertion_point(field_add:fantasybit.MsgIntro.everyone)
  return everyone_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Peer >*
MsgIntro::mutable_everyone() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MsgIntro.everyone)
  return &everyone_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Peer >&
MsgIntro::everyone() const {
  // @@protoc_insertion_point(field_list:fantasybit.MsgIntro.everyone)
  return everyone_;
}

// -------------------------------------------------------------------

// ChainHead

// optional int32 height = 10;
inline bool ChainHead::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChainHead::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChainHead::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChainHead::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ChainHead::height() const {
  // @@protoc_insertion_point(field_get:fantasybit.ChainHead.height)
  return height_;
}
inline void ChainHead::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ChainHead.height)
}

// optional int32 weight = 20;
inline bool ChainHead::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChainHead::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChainHead::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChainHead::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 ChainHead::weight() const {
  // @@protoc_insertion_point(field_get:fantasybit.ChainHead.weight)
  return weight_;
}
inline void ChainHead::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ChainHead.weight)
}

// optional bytes id = 30;
inline bool ChainHead::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChainHead::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChainHead::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChainHead::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ChainHead::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.ChainHead.id)
  return id_.GetNoArena();
}
inline void ChainHead::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ChainHead.id)
}
#if LANG_CXX11
inline void ChainHead::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ChainHead.id)
}
#endif
inline void ChainHead::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ChainHead.id)
}
inline void ChainHead::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ChainHead.id)
}
inline ::std::string* ChainHead::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.ChainHead.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChainHead::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.ChainHead.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChainHead::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ChainHead.id)
}

// -------------------------------------------------------------------

// PeerChainStatus

// optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
inline bool PeerChainStatus::has_chain_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PeerChainStatus::set_has_chain_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PeerChainStatus::clear_has_chain_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PeerChainStatus::clear_chain_state() {
  chain_state_ = 0;
  clear_has_chain_state();
}
inline ::fantasybit::PeerChainStatus_ChainState PeerChainStatus::chain_state() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.chain_state)
  return static_cast< ::fantasybit::PeerChainStatus_ChainState >(chain_state_);
}
inline void PeerChainStatus::set_chain_state(::fantasybit::PeerChainStatus_ChainState value) {
  assert(::fantasybit::PeerChainStatus_ChainState_IsValid(value));
  set_has_chain_state();
  chain_state_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.chain_state)
}

// optional .fantasybit.ChainHead last_dea = 10;
inline bool PeerChainStatus::has_last_dea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerChainStatus::set_has_last_dea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerChainStatus::clear_has_last_dea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerChainStatus::clear_last_dea() {
  if (last_dea_ != NULL) last_dea_->Clear();
  clear_has_last_dea();
}
inline const ::fantasybit::ChainHead& PeerChainStatus::last_dea() const {
  const ::fantasybit::ChainHead* p = last_dea_;
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_dea)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ChainHead*>(
      &::fantasybit::_ChainHead_default_instance_);
}
inline ::fantasybit::ChainHead* PeerChainStatus::release_last_dea() {
  // @@protoc_insertion_point(field_release:fantasybit.PeerChainStatus.last_dea)
  clear_has_last_dea();
  ::fantasybit::ChainHead* temp = last_dea_;
  last_dea_ = NULL;
  return temp;
}
inline ::fantasybit::ChainHead* PeerChainStatus::mutable_last_dea() {
  set_has_last_dea();
  if (last_dea_ == NULL) {
    last_dea_ = new ::fantasybit::ChainHead;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PeerChainStatus.last_dea)
  return last_dea_;
}
inline void PeerChainStatus::set_allocated_last_dea(::fantasybit::ChainHead* last_dea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_dea_;
  }
  if (last_dea) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_dea = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_dea, submessage_arena);
    }
    set_has_last_dea();
  } else {
    clear_has_last_dea();
  }
  last_dea_ = last_dea;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PeerChainStatus.last_dea)
}

// optional .fantasybit.ChainHead last_irreversible = 20;
inline bool PeerChainStatus::has_last_irreversible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerChainStatus::set_has_last_irreversible() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeerChainStatus::clear_has_last_irreversible() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeerChainStatus::clear_last_irreversible() {
  if (last_irreversible_ != NULL) last_irreversible_->Clear();
  clear_has_last_irreversible();
}
inline const ::fantasybit::ChainHead& PeerChainStatus::last_irreversible() const {
  const ::fantasybit::ChainHead* p = last_irreversible_;
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_irreversible)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ChainHead*>(
      &::fantasybit::_ChainHead_default_instance_);
}
inline ::fantasybit::ChainHead* PeerChainStatus::release_last_irreversible() {
  // @@protoc_insertion_point(field_release:fantasybit.PeerChainStatus.last_irreversible)
  clear_has_last_irreversible();
  ::fantasybit::ChainHead* temp = last_irreversible_;
  last_irreversible_ = NULL;
  return temp;
}
inline ::fantasybit::ChainHead* PeerChainStatus::mutable_last_irreversible() {
  set_has_last_irreversible();
  if (last_irreversible_ == NULL) {
    last_irreversible_ = new ::fantasybit::ChainHead;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PeerChainStatus.last_irreversible)
  return last_irreversible_;
}
inline void PeerChainStatus::set_allocated_last_irreversible(::fantasybit::ChainHead* last_irreversible) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_irreversible_;
  }
  if (last_irreversible) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_irreversible = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_irreversible, submessage_arena);
    }
    set_has_last_irreversible();
  } else {
    clear_has_last_irreversible();
  }
  last_irreversible_ = last_irreversible;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PeerChainStatus.last_irreversible)
}

// optional uint32 mempool_count = 30;
inline bool PeerChainStatus::has_mempool_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PeerChainStatus::set_has_mempool_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PeerChainStatus::clear_has_mempool_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PeerChainStatus::clear_mempool_count() {
  mempool_count_ = 0u;
  clear_has_mempool_count();
}
inline ::google::protobuf::uint32 PeerChainStatus::mempool_count() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.mempool_count)
  return mempool_count_;
}
inline void PeerChainStatus::set_mempool_count(::google::protobuf::uint32 value) {
  set_has_mempool_count();
  mempool_count_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.mempool_count)
}

// optional uint32 mempool_size = 40;
inline bool PeerChainStatus::has_mempool_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeerChainStatus::set_has_mempool_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PeerChainStatus::clear_has_mempool_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PeerChainStatus::clear_mempool_size() {
  mempool_size_ = 0u;
  clear_has_mempool_size();
}
inline ::google::protobuf::uint32 PeerChainStatus::mempool_size() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.mempool_size)
  return mempool_size_;
}
inline void PeerChainStatus::set_mempool_size(::google::protobuf::uint32 value) {
  set_has_mempool_size();
  mempool_size_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.mempool_size)
}

// optional uint64 last_block_timestamp = 50;
inline bool PeerChainStatus::has_last_block_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PeerChainStatus::set_has_last_block_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PeerChainStatus::clear_has_last_block_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PeerChainStatus::clear_last_block_timestamp() {
  last_block_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_last_block_timestamp();
}
inline ::google::protobuf::uint64 PeerChainStatus::last_block_timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_block_timestamp)
  return last_block_timestamp_;
}
inline void PeerChainStatus::set_last_block_timestamp(::google::protobuf::uint64 value) {
  set_has_last_block_timestamp();
  last_block_timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.last_block_timestamp)
}

// optional uint64 last_tx_timestamp = 60;
inline bool PeerChainStatus::has_last_tx_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PeerChainStatus::set_has_last_tx_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PeerChainStatus::clear_has_last_tx_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PeerChainStatus::clear_last_tx_timestamp() {
  last_tx_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_last_tx_timestamp();
}
inline ::google::protobuf::uint64 PeerChainStatus::last_tx_timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.PeerChainStatus.last_tx_timestamp)
  return last_tx_timestamp_;
}
inline void PeerChainStatus::set_last_tx_timestamp(::google::protobuf::uint64 value) {
  set_has_last_tx_timestamp();
  last_tx_timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PeerChainStatus.last_tx_timestamp)
}

// -------------------------------------------------------------------

// MsgAlive

// optional .fantasybit.PeerChainStatus peer_status = 30;
inline bool MsgAlive::has_peer_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgAlive::set_has_peer_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgAlive::clear_has_peer_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgAlive::clear_peer_status() {
  if (peer_status_ != NULL) peer_status_->Clear();
  clear_has_peer_status();
}
inline const ::fantasybit::PeerChainStatus& MsgAlive::peer_status() const {
  const ::fantasybit::PeerChainStatus* p = peer_status_;
  // @@protoc_insertion_point(field_get:fantasybit.MsgAlive.peer_status)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::PeerChainStatus*>(
      &::fantasybit::_PeerChainStatus_default_instance_);
}
inline ::fantasybit::PeerChainStatus* MsgAlive::release_peer_status() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgAlive.peer_status)
  clear_has_peer_status();
  ::fantasybit::PeerChainStatus* temp = peer_status_;
  peer_status_ = NULL;
  return temp;
}
inline ::fantasybit::PeerChainStatus* MsgAlive::mutable_peer_status() {
  set_has_peer_status();
  if (peer_status_ == NULL) {
    peer_status_ = new ::fantasybit::PeerChainStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgAlive.peer_status)
  return peer_status_;
}
inline void MsgAlive::set_allocated_peer_status(::fantasybit::PeerChainStatus* peer_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_status_;
  }
  if (peer_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer_status, submessage_arena);
    }
    set_has_peer_status();
  } else {
    clear_has_peer_status();
  }
  peer_status_ = peer_status;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgAlive.peer_status)
}

// optional uint64 timestamp = 40;
inline bool MsgAlive::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgAlive::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgAlive::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgAlive::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 MsgAlive::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgAlive.timestamp)
  return timestamp_;
}
inline void MsgAlive::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MsgAlive.timestamp)
}

// -------------------------------------------------------------------

// MsgHello

// optional .fantasybit.MsgIntro update = 10;
inline bool MsgHello::has_update() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHello::set_has_update() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHello::clear_has_update() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHello::clear_update() {
  if (update_ != NULL) update_->Clear();
  clear_has_update();
}
inline const ::fantasybit::MsgIntro& MsgHello::update() const {
  const ::fantasybit::MsgIntro* p = update_;
  // @@protoc_insertion_point(field_get:fantasybit.MsgHello.update)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MsgIntro*>(
      &::fantasybit::_MsgIntro_default_instance_);
}
inline ::fantasybit::MsgIntro* MsgHello::release_update() {
  // @@protoc_insertion_point(field_release:fantasybit.MsgHello.update)
  clear_has_update();
  ::fantasybit::MsgIntro* temp = update_;
  update_ = NULL;
  return temp;
}
inline ::fantasybit::MsgIntro* MsgHello::mutable_update() {
  set_has_update();
  if (update_ == NULL) {
    update_ = new ::fantasybit::MsgIntro;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgHello.update)
  return update_;
}
inline void MsgHello::set_allocated_update(::fantasybit::MsgIntro* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_;
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
  } else {
    clear_has_update();
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MsgHello.update)
}

// repeated .fantasybit.WirePeer connections = 20;
inline int MsgHello::connections_size() const {
  return connections_.size();
}
inline void MsgHello::clear_connections() {
  connections_.Clear();
}
inline const ::fantasybit::WirePeer& MsgHello::connections(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MsgHello.connections)
  return connections_.Get(index);
}
inline ::fantasybit::WirePeer* MsgHello::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MsgHello.connections)
  return connections_.Mutable(index);
}
inline ::fantasybit::WirePeer* MsgHello::add_connections() {
  // @@protoc_insertion_point(field_add:fantasybit.MsgHello.connections)
  return connections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::WirePeer >*
MsgHello::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MsgHello.connections)
  return &connections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::WirePeer >&
MsgHello::connections() const {
  // @@protoc_insertion_point(field_list:fantasybit.MsgHello.connections)
  return connections_;
}

// -------------------------------------------------------------------

// WireMsg

// optional .fantasybit.MsgType type = 10;
inline bool WireMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WireMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WireMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WireMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::MsgType WireMsg::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.type)
  return static_cast< ::fantasybit::MsgType >(type_);
}
inline void WireMsg::set_type(::fantasybit::MsgType value) {
  assert(::fantasybit::MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.WireMsg.type)
}

// optional .fantasybit.MsgIntro intro = 20;
inline bool WireMsg::has_intro() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WireMsg::set_has_intro() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WireMsg::clear_has_intro() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WireMsg::clear_intro() {
  if (intro_ != NULL) intro_->Clear();
  clear_has_intro();
}
inline const ::fantasybit::MsgIntro& WireMsg::intro() const {
  const ::fantasybit::MsgIntro* p = intro_;
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.intro)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MsgIntro*>(
      &::fantasybit::_MsgIntro_default_instance_);
}
inline ::fantasybit::MsgIntro* WireMsg::release_intro() {
  // @@protoc_insertion_point(field_release:fantasybit.WireMsg.intro)
  clear_has_intro();
  ::fantasybit::MsgIntro* temp = intro_;
  intro_ = NULL;
  return temp;
}
inline ::fantasybit::MsgIntro* WireMsg::mutable_intro() {
  set_has_intro();
  if (intro_ == NULL) {
    intro_ = new ::fantasybit::MsgIntro;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.WireMsg.intro)
  return intro_;
}
inline void WireMsg::set_allocated_intro(::fantasybit::MsgIntro* intro) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete intro_;
  }
  if (intro) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intro = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intro, submessage_arena);
    }
    set_has_intro();
  } else {
    clear_has_intro();
  }
  intro_ = intro;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WireMsg.intro)
}

// optional .fantasybit.MsgHello hello = 30;
inline bool WireMsg::has_hello() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WireMsg::set_has_hello() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WireMsg::clear_has_hello() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WireMsg::clear_hello() {
  if (hello_ != NULL) hello_->Clear();
  clear_has_hello();
}
inline const ::fantasybit::MsgHello& WireMsg::hello() const {
  const ::fantasybit::MsgHello* p = hello_;
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.hello)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MsgHello*>(
      &::fantasybit::_MsgHello_default_instance_);
}
inline ::fantasybit::MsgHello* WireMsg::release_hello() {
  // @@protoc_insertion_point(field_release:fantasybit.WireMsg.hello)
  clear_has_hello();
  ::fantasybit::MsgHello* temp = hello_;
  hello_ = NULL;
  return temp;
}
inline ::fantasybit::MsgHello* WireMsg::mutable_hello() {
  set_has_hello();
  if (hello_ == NULL) {
    hello_ = new ::fantasybit::MsgHello;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.WireMsg.hello)
  return hello_;
}
inline void WireMsg::set_allocated_hello(::fantasybit::MsgHello* hello) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hello_;
  }
  if (hello) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hello = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hello, submessage_arena);
    }
    set_has_hello();
  } else {
    clear_has_hello();
  }
  hello_ = hello;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WireMsg.hello)
}

// optional .fantasybit.MsgAlive alive = 40;
inline bool WireMsg::has_alive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WireMsg::set_has_alive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WireMsg::clear_has_alive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WireMsg::clear_alive() {
  if (alive_ != NULL) alive_->Clear();
  clear_has_alive();
}
inline const ::fantasybit::MsgAlive& WireMsg::alive() const {
  const ::fantasybit::MsgAlive* p = alive_;
  // @@protoc_insertion_point(field_get:fantasybit.WireMsg.alive)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MsgAlive*>(
      &::fantasybit::_MsgAlive_default_instance_);
}
inline ::fantasybit::MsgAlive* WireMsg::release_alive() {
  // @@protoc_insertion_point(field_release:fantasybit.WireMsg.alive)
  clear_has_alive();
  ::fantasybit::MsgAlive* temp = alive_;
  alive_ = NULL;
  return temp;
}
inline ::fantasybit::MsgAlive* WireMsg::mutable_alive() {
  set_has_alive();
  if (alive_ == NULL) {
    alive_ = new ::fantasybit::MsgAlive;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.WireMsg.alive)
  return alive_;
}
inline void WireMsg::set_allocated_alive(::fantasybit::MsgAlive* alive) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete alive_;
  }
  if (alive) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      alive = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alive, submessage_arena);
    }
    set_has_alive();
  } else {
    clear_has_alive();
  }
  alive_ = alive;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WireMsg.alive)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fantasybit::Peer_IsListening> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::Peer_IsListening>() {
  return ::fantasybit::Peer_IsListening_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::SessionId_NetworkID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::SessionId_NetworkID>() {
  return ::fantasybit::SessionId_NetworkID_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::PeerChainStatus_ChainState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::PeerChainStatus_ChainState>() {
  return ::fantasybit::PeerChainStatus_ChainState_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MsgType>() {
  return ::fantasybit::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_P2PData_2eproto__INCLUDED
