// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fantasybit {
class MyFantasyNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MyFantasyName>
      _instance;
} _MyFantasyName_default_instance_;
class FantasyPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyPlayer>
      _instance;
} _FantasyPlayer_default_instance_;
class SecretDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Secret>
      _instance;
} _Secret_default_instance_;
class Secret2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Secret2>
      _instance;
} _Secret2_default_instance_;
class Secret3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Secret3>
      _instance;
} _Secret3_default_instance_;
class OutDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutData>
      _instance;
} _OutData_default_instance_;
class InDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InData>
      _instance;
} _InData_default_instance_;
class NameProofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NameProof>
      _instance;
} _NameProof_default_instance_;
class TweetProofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TweetProof>
      _instance;
} _TweetProof_default_instance_;
class MasterProofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MasterProof>
      _instance;
} _MasterProof_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transaction>
      _instance;
} _Transaction_default_instance_;
class NameTransDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NameTrans>
      _instance;
} _NameTrans_default_instance_;
class TransferTransDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferTrans>
      _instance;
} _TransferTrans_default_instance_;
class SignedTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignedTransaction>
      _instance;
} _SignedTransaction_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockHeader>
      _instance;
} _BlockHeader_default_instance_;
class SignedBlockHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignedBlockHeader>
      _instance;
} _SignedBlockHeader_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block>
      _instance;
} _Block_default_instance_;
class NodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeRequest>
      _instance;
} _NodeRequest_default_instance_;
class NodeReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeReply>
      _instance;
} _NodeReply_default_instance_;
class FantasyPlayerPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyPlayerPoints>
      _instance;
} _FantasyPlayerPoints_default_instance_;
class ProjectionTransDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectionTrans>
      _instance;
} _ProjectionTrans_default_instance_;
class PlayerPointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerPoints>
      _instance;
} _PlayerPoints_default_instance_;
class ProjectionTransBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectionTransBlock>
      _instance;
} _ProjectionTransBlock_default_instance_;
class DataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Data>
      _instance;
} _Data_default_instance_;
class PlayerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerData>
      _instance;
} _PlayerData_default_instance_;
class GameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameData>
      _instance;
} _GameData_default_instance_;
class ResultDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResultData>
      _instance;
} _ResultData_default_instance_;
class ScheduleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScheduleData>
      _instance;
} _ScheduleData_default_instance_;
class DataTransitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataTransition>
      _instance;
} _DataTransition_default_instance_;
class TeamStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamState>
      _instance;
} _TeamState_default_instance_;
class DeltaDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeltaData>
      _instance;
} _DeltaData_default_instance_;
class MessageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageData>
      _instance;
} _MessageData_default_instance_;
class StampedTransDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StampedTrans>
      _instance;
} _StampedTrans_default_instance_;
class ExchangeOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExchangeOrder>
      _instance;
} _ExchangeOrder_default_instance_;
class OrderUniqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderUnique>
      _instance;
} _OrderUnique_default_instance_;
class OrderDeetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderDeets>
      _instance;
} _OrderDeets_default_instance_;
class InsideUniqueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InsideUnique>
      _instance;
} _InsideUnique_default_instance_;
class TimeTransitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeTransition>
      _instance;
} _TimeTransition_default_instance_;
}  // namespace fantasybit
namespace protobuf_ProtoData_2eproto {
void InitDefaultsMyFantasyNameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_MyFantasyName_default_instance_;
    new (ptr) ::fantasybit::MyFantasyName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MyFantasyName::InitAsDefaultInstance();
}

void InitDefaultsMyFantasyName() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMyFantasyNameImpl);
}

void InitDefaultsFantasyPlayerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_FantasyPlayer_default_instance_;
    new (ptr) ::fantasybit::FantasyPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyPlayer::InitAsDefaultInstance();
}

void InitDefaultsFantasyPlayer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyPlayerImpl);
}

void InitDefaultsSecretImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsMyFantasyName();
  protobuf_ProtoData_2eproto::InitDefaultsNameTrans();
  {
    void* ptr = &::fantasybit::_Secret_default_instance_;
    new (ptr) ::fantasybit::Secret();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Secret::InitAsDefaultInstance();
}

void InitDefaultsSecret() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSecretImpl);
}

void InitDefaultsSecret2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Secret2_default_instance_;
    new (ptr) ::fantasybit::Secret2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Secret2::InitAsDefaultInstance();
}

void InitDefaultsSecret2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSecret2Impl);
}

void InitDefaultsSecret3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Secret3_default_instance_;
    new (ptr) ::fantasybit::Secret3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Secret3::InitAsDefaultInstance();
}

void InitDefaultsSecret3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSecret3Impl);
}

void InitDefaultsOutDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsMyFantasyName();
  {
    void* ptr = &::fantasybit::_OutData_default_instance_;
    new (ptr) ::fantasybit::OutData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OutData::InitAsDefaultInstance();
}

void InitDefaultsOutData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOutDataImpl);
}

void InitDefaultsInDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsDataTransition();
  {
    void* ptr = &::fantasybit::_InData_default_instance_;
    new (ptr) ::fantasybit::InData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::InData::InitAsDefaultInstance();
}

void InitDefaultsInData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInDataImpl);
}

void InitDefaultsNameProofImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_NameProof_default_instance_;
    new (ptr) ::fantasybit::NameProof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NameProof::InitAsDefaultInstance();
}

void InitDefaultsNameProof() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNameProofImpl);
}

void InitDefaultsTweetProofImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_TweetProof_default_instance_;
    new (ptr) ::fantasybit::TweetProof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TweetProof::InitAsDefaultInstance();
}

void InitDefaultsTweetProof() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTweetProofImpl);
}

void InitDefaultsMasterProofImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsSignedTransaction();
  {
    void* ptr = &::fantasybit::_MasterProof_default_instance_;
    new (ptr) ::fantasybit::MasterProof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MasterProof::InitAsDefaultInstance();
}

void InitDefaultsMasterProof() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMasterProofImpl);
}

void InitDefaultsTransactionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Transaction_default_instance_;
    new (ptr) ::fantasybit::Transaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Transaction::InitAsDefaultInstance();
}

void InitDefaultsTransaction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransactionImpl);
}

void InitDefaultsNameTransImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsNameProof();
  {
    void* ptr = &::fantasybit::_NameTrans_default_instance_;
    new (ptr) ::fantasybit::NameTrans();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NameTrans::InitAsDefaultInstance();
}

void InitDefaultsNameTrans() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNameTransImpl);
}

void InitDefaultsTransferTransImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_TransferTrans_default_instance_;
    new (ptr) ::fantasybit::TransferTrans();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TransferTrans::InitAsDefaultInstance();
}

void InitDefaultsTransferTrans() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransferTransImpl);
}

void InitDefaultsSignedTransactionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsTransaction();
  {
    void* ptr = &::fantasybit::_SignedTransaction_default_instance_;
    new (ptr) ::fantasybit::SignedTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SignedTransaction::InitAsDefaultInstance();
}

void InitDefaultsSignedTransaction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignedTransactionImpl);
}

void InitDefaultsBlockHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_BlockHeader_default_instance_;
    new (ptr) ::fantasybit::BlockHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::BlockHeader::InitAsDefaultInstance();
}

void InitDefaultsBlockHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlockHeaderImpl);
}

void InitDefaultsSignedBlockHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsBlockHeader();
  {
    void* ptr = &::fantasybit::_SignedBlockHeader_default_instance_;
    new (ptr) ::fantasybit::SignedBlockHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SignedBlockHeader::InitAsDefaultInstance();
}

void InitDefaultsSignedBlockHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignedBlockHeaderImpl);
}

void InitDefaultsBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsSignedBlockHeader();
  protobuf_ProtoData_2eproto::InitDefaultsSignedTransaction();
  {
    void* ptr = &::fantasybit::_Block_default_instance_;
    new (ptr) ::fantasybit::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Block::InitAsDefaultInstance();
}

void InitDefaultsBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBlockImpl);
}

void InitDefaultsNodeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_NodeRequest_default_instance_;
    new (ptr) ::fantasybit::NodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NodeRequest::InitAsDefaultInstance();
}

void InitDefaultsNodeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeRequestImpl);
}

void InitDefaultsNodeReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_NodeReply_default_instance_;
    new (ptr) ::fantasybit::NodeReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::NodeReply::InitAsDefaultInstance();
}

void InitDefaultsNodeReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNodeReplyImpl);
}

void InitDefaultsFantasyPlayerPointsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_FantasyPlayerPoints_default_instance_;
    new (ptr) ::fantasybit::FantasyPlayerPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyPlayerPoints::InitAsDefaultInstance();
}

void InitDefaultsFantasyPlayerPoints() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyPlayerPointsImpl);
}

void InitDefaultsProjectionTransImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_ProjectionTrans_default_instance_;
    new (ptr) ::fantasybit::ProjectionTrans();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjectionTrans::InitAsDefaultInstance();
}

void InitDefaultsProjectionTrans() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjectionTransImpl);
}

void InitDefaultsPlayerPointsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_PlayerPoints_default_instance_;
    new (ptr) ::fantasybit::PlayerPoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerPoints::InitAsDefaultInstance();
}

void InitDefaultsPlayerPoints() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerPointsImpl);
}

void InitDefaultsProjectionTransBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsPlayerPoints();
  {
    void* ptr = &::fantasybit::_ProjectionTransBlock_default_instance_;
    new (ptr) ::fantasybit::ProjectionTransBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ProjectionTransBlock::InitAsDefaultInstance();
}

void InitDefaultsProjectionTransBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProjectionTransBlockImpl);
}

void InitDefaultsDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Data_default_instance_;
    new (ptr) ::fantasybit::Data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Data::InitAsDefaultInstance();
}

void InitDefaultsData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataImpl);
}

void InitDefaultsPlayerDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsPlayerBase();
  protobuf_StatusData_2eproto::InitDefaultsPlayerStatus();
  {
    void* ptr = &::fantasybit::_PlayerData_default_instance_;
    new (ptr) ::fantasybit::PlayerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerData::InitAsDefaultInstance();
}

void InitDefaultsPlayerData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerDataImpl);
}

void InitDefaultsGameDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StatusData_2eproto::InitDefaultsGameStatus();
  {
    void* ptr = &::fantasybit::_GameData_default_instance_;
    new (ptr) ::fantasybit::GameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameData::InitAsDefaultInstance();
}

void InitDefaultsGameData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameDataImpl);
}

void InitDefaultsResultDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsGameResult();
  {
    void* ptr = &::fantasybit::_ResultData_default_instance_;
    new (ptr) ::fantasybit::ResultData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ResultData::InitAsDefaultInstance();
}

void InitDefaultsResultData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsResultDataImpl);
}

void InitDefaultsScheduleDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsWeeklySchedule();
  {
    void* ptr = &::fantasybit::_ScheduleData_default_instance_;
    new (ptr) ::fantasybit::ScheduleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ScheduleData::InitAsDefaultInstance();
}

void InitDefaultsScheduleData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsScheduleDataImpl);
}

void InitDefaultsDataTransitionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsGameData();
  protobuf_ProtoData_2eproto::InitDefaultsData();
  {
    void* ptr = &::fantasybit::_DataTransition_default_instance_;
    new (ptr) ::fantasybit::DataTransition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DataTransition::InitAsDefaultInstance();
}

void InitDefaultsDataTransition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataTransitionImpl);
}

void InitDefaultsTeamStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_TeamState_default_instance_;
    new (ptr) ::fantasybit::TeamState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TeamState::InitAsDefaultInstance();
}

void InitDefaultsTeamState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTeamStateImpl);
}

void InitDefaultsDeltaDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsMyFantasyName();
  protobuf_StatusData_2eproto::InitDefaultsGlobalState();
  protobuf_ProtoData_2eproto::InitDefaultsTeamState();
  protobuf_ProtoData_2eproto::InitDefaultsData();
  protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayer();
  {
    void* ptr = &::fantasybit::_DeltaData_default_instance_;
    new (ptr) ::fantasybit::DeltaData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::DeltaData::InitAsDefaultInstance();
}

void InitDefaultsDeltaData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeltaDataImpl);
}

void InitDefaultsMessageDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_MessageData_default_instance_;
    new (ptr) ::fantasybit::MessageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MessageData::InitAsDefaultInstance();
}

void InitDefaultsMessageData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageDataImpl);
}

void InitDefaultsStampedTransImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsSignedTransaction();
  {
    void* ptr = &::fantasybit::_StampedTrans_default_instance_;
    new (ptr) ::fantasybit::StampedTrans();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::StampedTrans::InitAsDefaultInstance();
}

void InitDefaultsStampedTrans() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStampedTransImpl);
}

void InitDefaultsExchangeOrderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ExData_2eproto::InitDefaultsOrderCore();
  protobuf_ExData_2eproto::InitDefaultsFutContract();
  {
    void* ptr = &::fantasybit::_ExchangeOrder_default_instance_;
    new (ptr) ::fantasybit::ExchangeOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ExchangeOrder::InitAsDefaultInstance();
}

void InitDefaultsExchangeOrder() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExchangeOrderImpl);
}

void InitDefaultsOrderUniqueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_OrderUnique_default_instance_;
    new (ptr) ::fantasybit::OrderUnique();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderUnique::InitAsDefaultInstance();
}

void InitDefaultsOrderUnique() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOrderUniqueImpl);
}

void InitDefaultsOrderDeetsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsOrderUnique();
  {
    void* ptr = &::fantasybit::_OrderDeets_default_instance_;
    new (ptr) ::fantasybit::OrderDeets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::OrderDeets::InitAsDefaultInstance();
}

void InitDefaultsOrderDeets() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOrderDeetsImpl);
}

void InitDefaultsInsideUniqueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ProtoData_2eproto::InitDefaultsOrderUnique();
  {
    void* ptr = &::fantasybit::_InsideUnique_default_instance_;
    new (ptr) ::fantasybit::InsideUnique();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::InsideUnique::InitAsDefaultInstance();
}

void InitDefaultsInsideUnique() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInsideUniqueImpl);
}

void InitDefaultsTimeTransitionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_TimeTransition_default_instance_;
    new (ptr) ::fantasybit::TimeTransition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::TimeTransition::InitAsDefaultInstance();
}

void InitDefaultsTimeTransition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeTransitionImpl);
}

::google::protobuf::Metadata file_level_metadata[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MyFantasyName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MyFantasyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MyFantasyName, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MyFantasyName, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayer, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayer, bits_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret, myfantasyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret, nametran_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret2, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret2, fantasy_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret2, public_key_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret3, private_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret3, mnemonic_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret3, fantasy_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Secret3, public_key_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OutData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OutData, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OutData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OutData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OutData, myfantasyname_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, data2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InData, data_trans_),
  4,
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameProof, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameProof, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameProof, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameProof, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TweetProof, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TweetProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TweetProof, tweet_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MasterProof, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MasterProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MasterProof, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MasterProof, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MasterProof, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MasterProof, new_oracle_name_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Transaction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Transaction, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Transaction, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Transaction, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Transaction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Transaction, nonce_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, fantasy_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, proof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, recovery_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, am_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NameTrans, my_agent_),
  0,
  1,
  4,
  2,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TransferTrans, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TransferTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TransferTrans, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TransferTrans, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TransferTrans, amount_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedTransaction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedTransaction, trans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedTransaction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedTransaction, sig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedTransaction, fantasy_name_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, prev_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, generator_pk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, generating_sig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, basetarget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, blocktype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::BlockHeader, transaction_id_),
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  8,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedBlockHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedBlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedBlockHeader, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SignedBlockHeader, sig_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Block, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Block, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Block, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Block, signedhead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Block, signed_transactions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeRequest, myip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeRequest, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeRequest, myhost_),
  3,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeReply, hight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::NodeReply, ips_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyPlayerPoints, result_),
  1,
  2,
  0,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTrans, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTrans, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTrans, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTrans, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTrans, points_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerPoints, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerPoints, points_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ProjectionTransBlock, player_points_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Data, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Data, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Data, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Data, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerData, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerData, player_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerData, player_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerData, player_game_status_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameData, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameData, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ResultData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ResultData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ResultData, game_result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ScheduleData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ScheduleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ScheduleData, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ScheduleData, weekly_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, gamedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DataTransition, data_),
  2,
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TeamState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TeamState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TeamState, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TeamState, teamid_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, myfantasyname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, globalstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, teamstates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, datas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::DeltaData, players_),
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MessageData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MessageData, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MessageData, gt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MessageData, lt_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::StampedTrans, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::StampedTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::StampedTrans, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::StampedTrans, seqnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::StampedTrans, prevseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::StampedTrans, signed_orig_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, core_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, cancel_oref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, futcontract_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ExchangeOrder, symbol_),
  5,
  0,
  2,
  4,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, buyside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderUnique, price_),
  0,
  2,
  3,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderDeets, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderDeets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderDeets, oid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderDeets, order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::OrderDeets, size_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, buyside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, oid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::InsideUnique, size_),
  2,
  0,
  6,
  4,
  1,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TimeTransition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TimeTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TimeTransition, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TimeTransition, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::TimeTransition, week_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fantasybit::MyFantasyName)},
  { 9, 16, sizeof(::fantasybit::FantasyPlayer)},
  { 18, 26, sizeof(::fantasybit::Secret)},
  { 29, 37, sizeof(::fantasybit::Secret2)},
  { 40, 49, sizeof(::fantasybit::Secret3)},
  { 53, 60, sizeof(::fantasybit::OutData)},
  { 62, 72, sizeof(::fantasybit::InData)},
  { 77, 83, sizeof(::fantasybit::NameProof)},
  { 84, 90, sizeof(::fantasybit::TweetProof)},
  { 91, 100, sizeof(::fantasybit::MasterProof)},
  { 104, 112, sizeof(::fantasybit::Transaction)},
  { 115, 126, sizeof(::fantasybit::NameTrans)},
  { 132, 140, sizeof(::fantasybit::TransferTrans)},
  { 143, 152, sizeof(::fantasybit::SignedTransaction)},
  { 156, 170, sizeof(::fantasybit::BlockHeader)},
  { 179, 186, sizeof(::fantasybit::SignedBlockHeader)},
  { 188, 195, sizeof(::fantasybit::Block)},
  { 197, 206, sizeof(::fantasybit::NodeRequest)},
  { 210, 217, sizeof(::fantasybit::NodeReply)},
  { 219, 229, sizeof(::fantasybit::FantasyPlayerPoints)},
  { 234, 243, sizeof(::fantasybit::ProjectionTrans)},
  { 247, 254, sizeof(::fantasybit::PlayerPoints)},
  { 256, 264, sizeof(::fantasybit::ProjectionTransBlock)},
  { 267, 274, sizeof(::fantasybit::Data)},
  { 276, 285, sizeof(::fantasybit::PlayerData)},
  { 289, 296, sizeof(::fantasybit::GameData)},
  { 298, 304, sizeof(::fantasybit::ResultData)},
  { 305, 312, sizeof(::fantasybit::ScheduleData)},
  { 314, 324, sizeof(::fantasybit::DataTransition)},
  { 329, 337, sizeof(::fantasybit::TeamState)},
  { 340, 351, sizeof(::fantasybit::DeltaData)},
  { 357, 365, sizeof(::fantasybit::MessageData)},
  { 368, 377, sizeof(::fantasybit::StampedTrans)},
  { 381, 392, sizeof(::fantasybit::ExchangeOrder)},
  { 398, 409, sizeof(::fantasybit::OrderUnique)},
  { 415, 423, sizeof(::fantasybit::OrderDeets)},
  { 426, 438, sizeof(::fantasybit::InsideUnique)},
  { 445, 453, sizeof(::fantasybit::TimeTransition)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_MyFantasyName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Secret_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Secret2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Secret3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_OutData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_InData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_NameProof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_TweetProof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_MasterProof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Transaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_NameTrans_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_TransferTrans_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_SignedTransaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_BlockHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_SignedBlockHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_NodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_NodeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyPlayerPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ProjectionTrans_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_PlayerPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ProjectionTransBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_PlayerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_GameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ResultData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ScheduleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_DataTransition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_TeamState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_DeltaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_MessageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_StampedTrans_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ExchangeOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_OrderUnique_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_OrderDeets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_InsideUnique_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_TimeTransition_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ProtoData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017ProtoData.proto\022\nfantasybit\032\020StaticDat"
      "a.proto\032\020StatusData.proto\032\014ExData.proto\""
      "G\n\rMyFantasyName\022\014\n\004name\030\001 \001(\t\022(\n\006status"
      "\030\002 \001(\0162\030.fantasybit.MyNameStatus\"+\n\rFant"
      "asyPlayer\022\014\n\004name\030\n \001(\t\022\014\n\004bits\030\024 \001(\004\"x\n"
      "\006Secret\022\023\n\013private_key\030\001 \002(\t\0220\n\rmyfantas"
      "yname\030\002 \001(\0132\031.fantasybit.MyFantasyName\022\'"
      "\n\010nametran\030\n \001(\0132\025.fantasybit.NameTrans\""
      "H\n\007Secret2\022\023\n\013private_key\030\001 \001(\t\022\024\n\014fanta"
      "sy_name\030\024 \001(\t\022\022\n\npublic_key\030\036 \001(\t\"^\n\007Sec"
      "ret3\022\023\n\013private_key\030\001 \001(\t\022\024\n\014mnemonic_ke"
      "y\030\003 \001(\t\022\024\n\014fantasy_name\030\024 \001(\t\022\022\n\npublic_"
      "key\030\036 \001(\t\"\245\001\n\007OutData\022&\n\004type\030\001 \002(\0162\030.fa"
      "ntasybit.OutData.Type\0220\n\rmyfantasyname\030\002"
      " \001(\0132\031.fantasybit.MyFantasyName\"6\n\004Type\022"
      "\021\n\rMYFANTASYNAME\020\001\022\014\n\010SNAPSHOT\020\002\022\r\n\tHEAR"
      "TBEAT\020\003*\010\010d\020\200\200\200\200\002\"\200\002\n\006InData\022%\n\004type\030\001 \002"
      "(\0162\027.fantasybit.InData.Type\022\014\n\004data\030\002 \001("
      "\t\022\r\n\005data2\030\003 \001(\t\022\013\n\003num\030\004 \001(\005\022.\n\ndata_tr"
      "ans\030\005 \001(\0132\032.fantasybit.DataTransition\"k\n"
      "\004Type\022\014\n\010MINENAME\020\001\022\010\n\004QUIT\020\002\022\r\n\tHEARTBE"
      "AT\020\003\022\013\n\007CONNECT\020\004\022\016\n\nMAKE_BLOCK\020\005\022\013\n\007NEW"
      "NAME\020\006\022\010\n\004PROJ\020\007\022\010\n\004DATA\020\010*\010\010d\020\200\200\200\200\002\"t\n\t"
      "NameProof\022(\n\004type\030\001 \001(\0162\032.fantasybit.Nam"
      "eProof.Type\"2\n\004Type\022\007\n\003POW\020\001\022\t\n\005TWEET\020\002\022"
      "\n\n\006ORACLE\020\003\022\n\n\006MASTER\020\004*\t\010\310\001\020\200\200\200\200\002\"`\n\nTw"
      "eetProof\022\r\n\005tweet\030\n \001(\t2C\n\013tweet_proof\022\025"
      ".fantasybit.NameProof\030\311\001 \001(\0132\026.fantasybi"
      "t.TweetProof\"\275\001\n\013MasterProof\022\016\n\006season\030\n"
      " \001(\t\022\014\n\004week\030\024 \001(\005\022\021\n\ttimestamp\030\025 \001(\005\0226\n"
      "\017new_oracle_name\030B \001(\0132\035.fantasybit.Sign"
      "edTransaction2E\n\014master_proof\022\025.fantasyb"
      "it.NameProof\030\221\003 \001(\0132\027.fantasybit.MasterP"
      "roof\"\\\n\013Transaction\022\017\n\007version\030\001 \001(\005\022#\n\004"
      "type\030\002 \001(\0162\025.fantasybit.TransType\022\r\n\005non"
      "ce\030\n \001(\004*\010\010d\020\200\200\200\200\002\"\332\001\n\tNameTrans\022\024\n\014fant"
      "asy_name\030\n \001(\t\022\022\n\npublic_key\030\024 \001(\014\022$\n\005pr"
      "oof\030\036 \001(\0132\025.fantasybit.NameProof\022\024\n\014reco"
      "very_key\030( \001(\014\022\020\n\010am_agent\0302 \001(\010\022\020\n\010my_a"
      "gent\030< \001(\t2C\n\nname_trans\022\027.fantasybit.Tr"
      "ansaction\030\310\001 \001(\0132\025.fantasybit.NameTrans\""
      "\205\001\n\rTransferTrans\022\014\n\004from\030\n \001(\t\022\n\n\002to\030\024 "
      "\001(\t\022\016\n\006amount\030\036 \001(\0042J\n\rtransfer_tran\022\027.f"
      "antasybit.Transaction\030\220\003 \001(\0132\031.fantasybi"
      "t.TransferTrans\"j\n\021SignedTransaction\022&\n\005"
      "trans\030\n \001(\0132\027.fantasybit.Transaction\022\n\n\002"
      "id\030\024 \001(\014\022\013\n\003sig\030\036 \001(\014\022\024\n\014fantasy_name\030( "
      "\001(\t\"\370\001\n\013BlockHeader\022\017\n\007version\030\001 \001(\005\022\013\n\003"
      "num\030\n \001(\005\022\017\n\007prev_id\030\024 \001(\014\022\021\n\ttimestamp\030"
      "\025 \001(\005\022\024\n\014generator_pk\030\036 \001(\014\022\026\n\016generatin"
      "g_sig\030( \001(\014\022\022\n\nbasetarget\0302 \001(\005\022/\n\tblock"
      "type\030< \001(\0162\034.fantasybit.BlockHeader.Type"
      "\022\026\n\016transaction_id\030F \001(\014\"\034\n\004Type\022\n\n\006NORM"
      "AL\020\001\022\010\n\004DATA\020\002\"G\n\021SignedBlockHeader\022%\n\004h"
      "ead\030\n \001(\0132\027.fantasybit.BlockHeader\022\013\n\003si"
      "g\030\036 \001(\t\"\201\001\n\005Block\0221\n\nsignedhead\030\n \001(\0132\035."
      "fantasybit.SignedBlockHeader\022:\n\023signed_t"
      "ransactions\030\024 \003(\0132\035.fantasybit.SignedTra"
      "nsaction*\t\010\350\007\020\200\200\200\200\002\"\257\001\n\013NodeRequest\022*\n\004t"
      "ype\030\n \001(\0162\034.fantasybit.NodeRequest.Type\022"
      "\014\n\004myip\030\024 \001(\t\022\013\n\003num\030\036 \001(\005\022\016\n\006myhost\030( \001"
      "(\t\"I\n\004Type\022\r\n\tHANDSHAKE\020\001\022\021\n\rBLOCK_REQUE"
      "ST\020\002\022\021\n\rHIGHT_REQUEST\020\003\022\014\n\010NAT_TEST\020\004\"\'\n"
      "\tNodeReply\022\r\n\005hight\030\n \001(\005\022\013\n\003ips\030\024 \003(\t\"e"
      "\n\023FantasyPlayerPoints\022\016\n\006season\030\n \001(\r\022\014\n"
      "\004week\030\024 \001(\r\022\020\n\010playerid\030\036 \001(\t\022\016\n\006points\030"
      "( \001(\005\022\016\n\006result\0302 \001(\002\"\234\001\n\017ProjectionTran"
      "s\022\016\n\006season\030\n \001(\r\022\014\n\004week\030\024 \001(\r\022\020\n\010playe"
      "rid\030\036 \001(\t\022\016\n\006points\030( \001(\0052I\n\nproj_trans\022"
      "\027.fantasybit.Transaction\030\311\001 \001(\0132\033.fantas"
      "ybit.ProjectionTrans\"0\n\014PlayerPoints\022\020\n\010"
      "playerid\030\036 \001(\t\022\016\n\006points\030( \001(\005\"\273\001\n\024Proje"
      "ctionTransBlock\022\016\n\006season\030\n \001(\r\022\014\n\004week\030"
      "\024 \001(\r\022/\n\rplayer_points\030\036 \003(\0132\030.fantasybi"
      "t.PlayerPoints2T\n\020proj_trans_block\022\027.fan"
      "tasybit.Transaction\030\323\001 \001(\0132 .fantasybit."
      "ProjectionTransBlock\"\213\001\n\004Data\022\017\n\007version"
      "\030\n \001(\005\022#\n\004type\030\024 \001(\0162\025.fantasybit.Data.T"
      "ype\"C\n\004Type\022\014\n\010SCHEDULE\020\000\022\n\n\006PLAYER\020\001\022\010\n"
      "\004GAME\020\002\022\n\n\006RESULT\020\003\022\013\n\007MESSAGE\020\004*\010\010d\020\200\200\200"
      "\200\002\"\365\001\n\nPlayerData\022\020\n\010playerid\030\n \001(\t\022+\n\013p"
      "layer_base\030\024 \001(\0132\026.fantasybit.PlayerBase"
      "\022/\n\rplayer_status\030\036 \001(\0132\030.fantasybit.Pla"
      "yerStatus\0228\n\022player_game_status\030( \001(\0162\034."
      "fantasybit.PlayerGameStatus2=\n\013player_da"
      "ta\022\020.fantasybit.Data\030e \001(\0132\026.fantasybit."
      "PlayerData\"}\n\010GameData\022\016\n\006gameid\030\n \001(\t\022&"
      "\n\006status\030\024 \001(\0132\026.fantasybit.GameStatus29"
      "\n\tgame_data\022\020.fantasybit.Data\030o \001(\0132\024.fa"
      "ntasybit.GameData\"y\n\nResultData\022+\n\013game_"
      "result\030\n \001(\0132\026.fantasybit.GameResult2>\n\013"
      "result_data\022\020.fantasybit.Data\030\312\001 \001(\0132\026.f"
      "antasybit.ResultData\"\214\001\n\014ScheduleData\022\014\n"
      "\004week\030\001 \001(\005\022*\n\006weekly\030\n \001(\0132\032.fantasybit"
      ".WeeklySchedule2B\n\rschedule_data\022\020.fanta"
      "sybit.Data\030\256\002 \001(\0132\030.fantasybit.ScheduleD"
      "ata\"\342\001\n\016DataTransition\022 \n\004type\030\001 \001(\0162\022.f"
      "antasybit.TrType\022\016\n\006season\030\n \001(\r\022\014\n\004week"
      "\030\024 \001(\r\022&\n\010gamedata\030\036 \003(\0132\024.fantasybit.Ga"
      "meData\022\036\n\004data\030( \003(\0132\020.fantasybit.Data2H"
      "\n\ndata_trans\022\027.fantasybit.Transaction\030\313\001"
      " \001(\0132\032.fantasybit.DataTransition\"w\n\tTeam"
      "State\022*\n\005state\030\001 \001(\0162\033.fantasybit.TeamSt"
      "ate.State\022\014\n\004week\030\n \001(\r\022\016\n\006teamid\030\024 \001(\t\""
      " \n\005State\022\013\n\007PREGAME\020\001\022\n\n\006INGAME\020\002\"\275\002\n\tDe"
      "ltaData\022(\n\004type\030\001 \001(\0162\032.fantasybit.Delta"
      "Data.Type\0220\n\rmyfantasyname\030\002 \003(\0132\031.fanta"
      "sybit.MyFantasyName\022,\n\013globalstate\030\n \001(\013"
      "2\027.fantasybit.GlobalState\022)\n\nteamstates\030"
      "\024 \003(\0132\025.fantasybit.TeamState\022\037\n\005datas\030\036 "
      "\003(\0132\020.fantasybit.Data\022*\n\007players\030( \003(\0132\031"
      ".fantasybit.FantasyPlayer\"#\n\004Type\022\014\n\010SNA"
      "PSHOT\020\002\022\r\n\tHEARTBEAT\020\003*\t\010\350\007\020\200\200\200\200\002\"t\n\013Mes"
      "sageData\022\013\n\003msg\030\n \001(\t\022\n\n\002gt\030\024 \001(\005\022\n\n\002lt\030"
      "\036 \001(\0052@\n\014message_data\022\020.fantasybit.Data\030"
      "\224\003 \001(\0132\027.fantasybit.MessageData\"\301\001\n\014Stam"
      "pedTrans\022\021\n\ttimestamp\030\n \001(\004\022\016\n\006seqnum\030\024 "
      "\001(\005\022\017\n\007prevseq\030\025 \001(\005\0222\n\013signed_orig\030\036 \001("
      "\0132\035.fantasybit.SignedTransaction2I\n\rstam"
      "ped_trans\022\027.fantasybit.Transaction\030\254\002 \001("
      "\0132\030.fantasybit.StampedTrans\"\311\002\n\rExchange"
      "Order\022,\n\004type\030\n \001(\0162\036.fantasybit.Exchang"
      "eOrder.Type\022\020\n\010playerid\030( \001(\t\022#\n\004core\0302 "
      "\001(\0132\025.fantasybit.OrderCore\022\023\n\013cancel_ore"
      "f\030d \001(\005\022,\n\013futcontract\030n \001(\0132\027.fantasybi"
      "t.FutContract\022\016\n\006symbol\030x \001(\t\"(\n\004Type\022\007\n"
      "\003NEW\020\001\022\n\n\006CANCEL\020\002\022\013\n\007REPLACE\020\003*\t\010\364\003\020\200\200\200"
      "\200\0022K\n\016exchange_order\022\027.fantasybit.Transa"
      "ction\030\266\002 \001(\0132\031.fantasybit.ExchangeOrder\""
      "q\n\013OrderUnique\022\022\n\npublic_key\030\n \001(\t\022\016\n\006se"
      "ason\030\024 \001(\r\022\014\n\004week\030\036 \001(\r\022\017\n\007buyside\030( \001("
      "\010\022\020\n\010playerid\0302 \001(\t\022\r\n\005price\030F \001(\005\"O\n\nOr"
      "derDeets\022\013\n\003oid\030\n \001(\014\022&\n\005order\030\024 \001(\0132\027.f"
      "antasybit.OrderUnique\022\014\n\004size\030\036 \001(\005\"\227\001\n\014"
      "InsideUnique\022\020\n\010playerid\0302 \001(\t\022\022\n\npublic"
      "_key\030\n \001(\t\022\017\n\007buyside\030( \001(\010\022\r\n\005price\030F \001"
      "(\005\022\013\n\003oid\030\013 \001(\014\022&\n\005order\030\024 \001(\0132\027.fantasy"
      "bit.OrderUnique\022\014\n\004size\030\036 \001(\005\"\316\001\n\016TimeTr"
      "ansition\022-\n\004type\030\001 \001(\0162\037.fantasybit.Time"
      "Transition.Type\022\016\n\006season\030\n \001(\r\022\014\n\004week\030"
      "\024 \001(\r\"%\n\004Type\022\r\n\tTRADEOPEN\020\002\022\016\n\nTRADECLO"
      "SE\020\0032H\n\ntime_trans\022\027.fantasybit.Transact"
      "ion\030\257\002 \001(\0132\032.fantasybit.TimeTransition*Y"
      "\n\014MyNameStatus\022\010\n\004none\020\001\022\013\n\007notavil\020\002\022\r\n"
      "\trequested\020\005\022\024\n\020transaction_sent\020\017\022\r\n\tco"
      "nfirmed\020\024*\251\001\n\tTransType\022\010\n\004NAME\020\000\022\016\n\nPRO"
      "JECTION\020\001\022\n\n\006RESULT\020\002\022\010\n\004DATA\020\003\022\024\n\020PROJE"
      "CTION_BLOCK\020\004\022\017\n\013MASTER_NAME\020\005\022\010\n\004TIME\020\006"
      "\022\013\n\007STAMPED\020\007\022\014\n\010EXCHANGE\020\010\022\022\n\016EXCHANGE_"
      "BLOCK\020\t\022\014\n\010TRANSFER\020\n*\260\001\n\006TrType\022\017\n\013SEAS"
      "ONSTART\020\002\022\r\n\tSEASONEND\020\003\022\r\n\tHEARTBEAT\020\005\022"
      "\r\n\tGAMESTART\020\006\022\014\n\010WEEKOVER\020\007\022\025\n\021TRADESES"
      "SIONSTART\020\010\022\037\n\033TRADESESSIONCLOSEANDPREOP"
      "EN\020\t\022\020\n\014PLAYOFFSTART\020\n\022\020\n\014SUPERBOWLEND\020\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoData.proto", &protobuf_RegisterTypes);
  ::protobuf_StaticData_2eproto::AddDescriptors();
  ::protobuf_StatusData_2eproto::AddDescriptors();
  ::protobuf_ExData_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ProtoData_2eproto
namespace fantasybit {
const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[0];
}
bool OutData_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OutData_Type OutData::MYFANTASYNAME;
const OutData_Type OutData::SNAPSHOT;
const OutData_Type OutData::HEARTBEAT;
const OutData_Type OutData::Type_MIN;
const OutData_Type OutData::Type_MAX;
const int OutData::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InData_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[1];
}
bool InData_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InData_Type InData::MINENAME;
const InData_Type InData::QUIT;
const InData_Type InData::HEARTBEAT;
const InData_Type InData::CONNECT;
const InData_Type InData::MAKE_BLOCK;
const InData_Type InData::NEWNAME;
const InData_Type InData::PROJ;
const InData_Type InData::DATA;
const InData_Type InData::Type_MIN;
const InData_Type InData::Type_MAX;
const int InData::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[2];
}
bool NameProof_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NameProof_Type NameProof::POW;
const NameProof_Type NameProof::TWEET;
const NameProof_Type NameProof::ORACLE;
const NameProof_Type NameProof::MASTER;
const NameProof_Type NameProof::Type_MIN;
const NameProof_Type NameProof::Type_MAX;
const int NameProof::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[3];
}
bool BlockHeader_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlockHeader_Type BlockHeader::NORMAL;
const BlockHeader_Type BlockHeader::DATA;
const BlockHeader_Type BlockHeader::Type_MIN;
const BlockHeader_Type BlockHeader::Type_MAX;
const int BlockHeader::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[4];
}
bool NodeRequest_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NodeRequest_Type NodeRequest::HANDSHAKE;
const NodeRequest_Type NodeRequest::BLOCK_REQUEST;
const NodeRequest_Type NodeRequest::HIGHT_REQUEST;
const NodeRequest_Type NodeRequest::NAT_TEST;
const NodeRequest_Type NodeRequest::Type_MIN;
const NodeRequest_Type NodeRequest::Type_MAX;
const int NodeRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Data_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[5];
}
bool Data_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Data_Type Data::SCHEDULE;
const Data_Type Data::PLAYER;
const Data_Type Data::GAME;
const Data_Type Data::RESULT;
const Data_Type Data::MESSAGE;
const Data_Type Data::Type_MIN;
const Data_Type Data::Type_MAX;
const int Data::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[6];
}
bool TeamState_State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TeamState_State TeamState::PREGAME;
const TeamState_State TeamState::INGAME;
const TeamState_State TeamState::State_MIN;
const TeamState_State TeamState::State_MAX;
const int TeamState::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[7];
}
bool DeltaData_Type_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DeltaData_Type DeltaData::SNAPSHOT;
const DeltaData_Type DeltaData::HEARTBEAT;
const DeltaData_Type DeltaData::Type_MIN;
const DeltaData_Type DeltaData::Type_MAX;
const int DeltaData::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ExchangeOrder_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[8];
}
bool ExchangeOrder_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExchangeOrder_Type ExchangeOrder::NEW;
const ExchangeOrder_Type ExchangeOrder::CANCEL;
const ExchangeOrder_Type ExchangeOrder::REPLACE;
const ExchangeOrder_Type ExchangeOrder::Type_MIN;
const ExchangeOrder_Type ExchangeOrder::Type_MAX;
const int ExchangeOrder::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TimeTransition_Type_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[9];
}
bool TimeTransition_Type_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TimeTransition_Type TimeTransition::TRADEOPEN;
const TimeTransition_Type TimeTransition::TRADECLOSE;
const TimeTransition_Type TimeTransition::Type_MIN;
const TimeTransition_Type TimeTransition::Type_MAX;
const int TimeTransition::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[10];
}
bool MyNameStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 5:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransType_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[11];
}
bool TransType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrType_descriptor() {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ProtoData_2eproto::file_level_enum_descriptors[12];
}
bool TrType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MyFantasyName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyFantasyName::kNameFieldNumber;
const int MyFantasyName::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyFantasyName::MyFantasyName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsMyFantasyName();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MyFantasyName)
}
MyFantasyName::MyFantasyName(const MyFantasyName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.MyFantasyName)
}

void MyFantasyName::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
}

MyFantasyName::~MyFantasyName() {
  // @@protoc_insertion_point(destructor:fantasybit.MyFantasyName)
  SharedDtor();
}

void MyFantasyName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MyFantasyName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFantasyName::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MyFantasyName& MyFantasyName::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsMyFantasyName();
  return *internal_default_instance();
}

MyFantasyName* MyFantasyName::New(::google::protobuf::Arena* arena) const {
  MyFantasyName* n = new MyFantasyName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyFantasyName::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MyFantasyName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MyFantasyName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MyFantasyName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.MyFantasyName.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.MyNameStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MyNameStatus_IsValid(value)) {
            set_status(static_cast< ::fantasybit::MyNameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MyFantasyName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MyFantasyName)
  return false;
#undef DO_
}

void MyFantasyName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MyFantasyName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MyFantasyName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MyFantasyName)
}

::google::protobuf::uint8* MyFantasyName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MyFantasyName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MyFantasyName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MyFantasyName)
  return target;
}

size_t MyFantasyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MyFantasyName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .fantasybit.MyNameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFantasyName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MyFantasyName)
  GOOGLE_DCHECK_NE(&from, this);
  const MyFantasyName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MyFantasyName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MyFantasyName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MyFantasyName)
    MergeFrom(*source);
  }
}

void MyFantasyName::MergeFrom(const MyFantasyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MyFantasyName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MyFantasyName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MyFantasyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFantasyName::CopyFrom(const MyFantasyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MyFantasyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFantasyName::IsInitialized() const {
  return true;
}

void MyFantasyName::Swap(MyFantasyName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyFantasyName::InternalSwap(MyFantasyName* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyFantasyName::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FantasyPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyPlayer::kNameFieldNumber;
const int FantasyPlayer::kBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyPlayer::FantasyPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyPlayer)
}
FantasyPlayer::FantasyPlayer(const FantasyPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  bits_ = from.bits_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyPlayer)
}

void FantasyPlayer::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bits_ = GOOGLE_ULONGLONG(0);
}

FantasyPlayer::~FantasyPlayer() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyPlayer)
  SharedDtor();
}

void FantasyPlayer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FantasyPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayer::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyPlayer& FantasyPlayer::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayer();
  return *internal_default_instance();
}

FantasyPlayer* FantasyPlayer::New(::google::protobuf::Arena* arena) const {
  FantasyPlayer* n = new FantasyPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  bits_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyPlayer.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bits = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyPlayer)
  return false;
#undef DO_
}

void FantasyPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional uint64 bits = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyPlayer)
}

::google::protobuf::uint8* FantasyPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 bits = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyPlayer)
  return target;
}

size_t FantasyPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 bits = 20;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyPlayer)
    MergeFrom(*source);
  }
}

void FantasyPlayer::MergeFrom(const FantasyPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      bits_ = from.bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayer::CopyFrom(const FantasyPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayer::IsInitialized() const {
  return true;
}

void FantasyPlayer::Swap(FantasyPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyPlayer::InternalSwap(FantasyPlayer* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(bits_, other->bits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyPlayer::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Secret::InitAsDefaultInstance() {
  ::fantasybit::_Secret_default_instance_._instance.get_mutable()->myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(
      ::fantasybit::MyFantasyName::internal_default_instance());
  ::fantasybit::_Secret_default_instance_._instance.get_mutable()->nametran_ = const_cast< ::fantasybit::NameTrans*>(
      ::fantasybit::NameTrans::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Secret::kPrivateKeyFieldNumber;
const int Secret::kMyfantasynameFieldNumber;
const int Secret::kNametranFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Secret::Secret()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsSecret();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Secret)
}
Secret::Secret(const Secret& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_key()) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  if (from.has_myfantasyname()) {
    myfantasyname_ = new ::fantasybit::MyFantasyName(*from.myfantasyname_);
  } else {
    myfantasyname_ = NULL;
  }
  if (from.has_nametran()) {
    nametran_ = new ::fantasybit::NameTrans(*from.nametran_);
  } else {
    nametran_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret)
}

void Secret::SharedCtor() {
  _cached_size_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&myfantasyname_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nametran_) -
      reinterpret_cast<char*>(&myfantasyname_)) + sizeof(nametran_));
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret)
  SharedDtor();
}

void Secret::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete myfantasyname_;
  if (this != internal_default_instance()) delete nametran_;
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Secret& Secret::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsSecret();
  return *internal_default_instance();
}

Secret* Secret::New(::google::protobuf::Arena* arena) const {
  Secret* n = new Secret;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!private_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(myfantasyname_ != NULL);
      myfantasyname_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nametran_ != NULL);
      nametran_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Secret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string private_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_key().data(), static_cast<int>(this->private_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret.private_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_myfantasyname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.NameTrans nametran = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nametran()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Secret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Secret)
  return false;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_key(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->myfantasyname_, output);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->nametran_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Secret)
}

::google::protobuf::uint8* Secret::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->myfantasyname_, deterministic, target);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->nametran_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret)
  return target;
}

size_t Secret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Secret)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string private_key = 1;
  if (has_private_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->myfantasyname_);
    }

    // optional .fantasybit.NameTrans nametran = 10;
    if (has_nametran()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->nametran_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Secret)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Secret)
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_nametran()->::fantasybit::NameTrans::MergeFrom(from.nametran());
    }
  }
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_nametran()) {
    if (!this->nametran_->IsInitialized()) return false;
  }
  return true;
}

void Secret::Swap(Secret* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret::InternalSwap(Secret* other) {
  using std::swap;
  private_key_.Swap(&other->private_key_);
  swap(myfantasyname_, other->myfantasyname_);
  swap(nametran_, other->nametran_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Secret2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Secret2::kPrivateKeyFieldNumber;
const int Secret2::kFantasyNameFieldNumber;
const int Secret2::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Secret2::Secret2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsSecret2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Secret2)
}
Secret2::Secret2(const Secret2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_key()) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_name()) {
    fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret2)
}

void Secret2::SharedCtor() {
  _cached_size_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Secret2::~Secret2() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret2)
  SharedDtor();
}

void Secret2::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Secret2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret2::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Secret2& Secret2::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsSecret2();
  return *internal_default_instance();
}

Secret2* Secret2::New(::google::protobuf::Arena* arena) const {
  Secret2* n = new Secret2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret2::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Secret2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!private_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fantasy_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Secret2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Secret2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_key().data(), static_cast<int>(this->private_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret2.private_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret2.fantasy_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), static_cast<int>(this->public_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret2.public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Secret2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Secret2)
  return false;
#undef DO_
}

void Secret2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Secret2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_key(), output);
  }

  // optional string fantasy_name = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->fantasy_name(), output);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Secret2)
}

::google::protobuf::uint8* Secret2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional string fantasy_name = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret2)
  return target;
}

size_t Secret2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Secret2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional string fantasy_name = 20;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Secret2)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Secret2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Secret2)
    MergeFrom(*source);
  }
}

void Secret2::MergeFrom(const Secret2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Secret2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
}

void Secret2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Secret2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret2::CopyFrom(const Secret2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Secret2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret2::IsInitialized() const {
  return true;
}

void Secret2::Swap(Secret2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret2::InternalSwap(Secret2* other) {
  using std::swap;
  private_key_.Swap(&other->private_key_);
  fantasy_name_.Swap(&other->fantasy_name_);
  public_key_.Swap(&other->public_key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret2::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Secret3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Secret3::kPrivateKeyFieldNumber;
const int Secret3::kMnemonicKeyFieldNumber;
const int Secret3::kFantasyNameFieldNumber;
const int Secret3::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Secret3::Secret3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsSecret3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Secret3)
}
Secret3::Secret3(const Secret3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_key()) {
    private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
  }
  mnemonic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mnemonic_key()) {
    mnemonic_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnemonic_key_);
  }
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_name()) {
    fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret3)
}

void Secret3::SharedCtor() {
  _cached_size_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnemonic_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Secret3::~Secret3() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret3)
  SharedDtor();
}

void Secret3::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnemonic_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Secret3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret3::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Secret3& Secret3::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsSecret3();
  return *internal_default_instance();
}

Secret3* Secret3::New(::google::protobuf::Arena* arena) const {
  Secret3* n = new Secret3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret3::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Secret3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!private_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mnemonic_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mnemonic_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!fantasy_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Secret3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Secret3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_key().data(), static_cast<int>(this->private_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret3.private_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mnemonic_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnemonic_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mnemonic_key().data(), static_cast<int>(this->mnemonic_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret3.mnemonic_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret3.fantasy_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), static_cast<int>(this->public_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret3.public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Secret3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Secret3)
  return false;
#undef DO_
}

void Secret3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Secret3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_key(), output);
  }

  // optional string mnemonic_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mnemonic_key().data(), static_cast<int>(this->mnemonic_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.mnemonic_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mnemonic_key(), output);
  }

  // optional string fantasy_name = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->fantasy_name(), output);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Secret3)
}

::google::protobuf::uint8* Secret3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), static_cast<int>(this->private_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional string mnemonic_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mnemonic_key().data(), static_cast<int>(this->mnemonic_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.mnemonic_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mnemonic_key(), target);
  }

  // optional string fantasy_name = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret3.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret3)
  return target;
}

size_t Secret3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Secret3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional string mnemonic_key = 3;
    if (has_mnemonic_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mnemonic_key());
    }

    // optional string fantasy_name = 20;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Secret3)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Secret3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Secret3)
    MergeFrom(*source);
  }
}

void Secret3::MergeFrom(const Secret3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Secret3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mnemonic_key();
      mnemonic_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnemonic_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
}

void Secret3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Secret3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret3::CopyFrom(const Secret3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Secret3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret3::IsInitialized() const {
  return true;
}

void Secret3::Swap(Secret3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret3::InternalSwap(Secret3* other) {
  using std::swap;
  private_key_.Swap(&other->private_key_);
  mnemonic_key_.Swap(&other->mnemonic_key_);
  fantasy_name_.Swap(&other->fantasy_name_);
  public_key_.Swap(&other->public_key_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret3::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OutData::InitAsDefaultInstance() {
  ::fantasybit::_OutData_default_instance_._instance.get_mutable()->myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(
      ::fantasybit::MyFantasyName::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutData::kTypeFieldNumber;
const int OutData::kMyfantasynameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutData::OutData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsOutData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.OutData)
}
OutData::OutData(const OutData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_myfantasyname()) {
    myfantasyname_ = new ::fantasybit::MyFantasyName(*from.myfantasyname_);
  } else {
    myfantasyname_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.OutData)
}

void OutData::SharedCtor() {
  _cached_size_ = 0;
  myfantasyname_ = NULL;
  type_ = 1;
}

OutData::~OutData() {
  // @@protoc_insertion_point(destructor:fantasybit.OutData)
  SharedDtor();
}

void OutData::SharedDtor() {
  if (this != internal_default_instance()) delete myfantasyname_;
}

void OutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutData& OutData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsOutData();
  return *internal_default_instance();
}

OutData* OutData::New(::google::protobuf::Arena* arena) const {
  OutData* n = new OutData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OutData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(myfantasyname_ != NULL);
      myfantasyname_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.OutData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.OutData.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::OutData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::OutData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_myfantasyname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.OutData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.OutData)
  return false;
#undef DO_
}

void OutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.OutData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .fantasybit.OutData.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->myfantasyname_, output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.OutData)
}

::google::protobuf::uint8* OutData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OutData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .fantasybit.OutData.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->myfantasyname_, deterministic, target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OutData)
  return target;
}

size_t OutData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OutData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->myfantasyname_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OutData)
  GOOGLE_DCHECK_NE(&from, this);
  const OutData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OutData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OutData)
    MergeFrom(*source);
  }
}

void OutData::MergeFrom(const OutData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OutData)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OutData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OutData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutData::CopyFrom(const OutData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OutData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void OutData::Swap(OutData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutData::InternalSwap(OutData* other) {
  using std::swap;
  swap(myfantasyname_, other->myfantasyname_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata OutData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InData::InitAsDefaultInstance() {
  ::fantasybit::_InData_default_instance_._instance.get_mutable()->data_trans_ = const_cast< ::fantasybit::DataTransition*>(
      ::fantasybit::DataTransition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InData::kTypeFieldNumber;
const int InData::kDataFieldNumber;
const int InData::kData2FieldNumber;
const int InData::kNumFieldNumber;
const int InData::kDataTransFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InData::InData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsInData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.InData)
}
InData::InData(const InData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data2()) {
    data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  if (from.has_data_trans()) {
    data_trans_ = new ::fantasybit::DataTransition(*from.data_trans_);
  } else {
    data_trans_ = NULL;
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&num_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.InData)
}

void InData::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_trans_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&data_trans_)) + sizeof(num_));
  type_ = 1;
}

InData::~InData() {
  // @@protoc_insertion_point(destructor:fantasybit.InData)
  SharedDtor();
}

void InData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_trans_;
}

void InData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InData& InData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsInData();
  return *internal_default_instance();
}

InData* InData::New(::google::protobuf::Arena* arena) const {
  InData* n = new InData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.InData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data2_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_trans_ != NULL);
      data_trans_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    num_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.InData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.InData.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::InData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::InData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.InData.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data2().data(), static_cast<int>(this->data2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.InData.data2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.DataTransition data_trans = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_trans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.InData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.InData)
  return false;
#undef DO_
}

void InData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.InData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .fantasybit.InData.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional string data2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), static_cast<int>(this->data2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data2(), output);
  }

  // optional int32 num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->data_trans_, output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.InData)
}

::google::protobuf::uint8* InData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.InData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .fantasybit.InData.Type type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional string data2 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), static_cast<int>(this->data2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data2(), target);
  }

  // optional int32 num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->data_trans_, deterministic, target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.InData)
  return target;
}

size_t InData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.InData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string data2 = 3;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data2());
    }

    // optional .fantasybit.DataTransition data_trans = 5;
    if (has_data_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->data_trans_);
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.InData)
  GOOGLE_DCHECK_NE(&from, this);
  const InData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.InData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.InData)
    MergeFrom(*source);
  }
}

void InData::MergeFrom(const InData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.InData)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data2();
      data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_data_trans()->::fantasybit::DataTransition::MergeFrom(from.data_trans());
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.InData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InData::CopyFrom(const InData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.InData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_data_trans()) {
    if (!this->data_trans_->IsInitialized()) return false;
  }
  return true;
}

void InData::Swap(InData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InData::InternalSwap(InData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  data2_.Swap(&other->data2_);
  swap(data_trans_, other->data_trans_);
  swap(num_, other->num_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata InData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NameProof::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameProof::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameProof::NameProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsNameProof();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NameProof)
}
NameProof::NameProof(const NameProof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameProof)
}

void NameProof::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
}

NameProof::~NameProof() {
  // @@protoc_insertion_point(destructor:fantasybit.NameProof)
  SharedDtor();
}

void NameProof::SharedDtor() {
}

void NameProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameProof::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NameProof& NameProof::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsNameProof();
  return *internal_default_instance();
}

NameProof* NameProof::New(::google::protobuf::Arena* arena) const {
  NameProof* n = new NameProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameProof::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NameProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NameProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NameProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NameProof.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NameProof_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NameProof_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NameProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NameProof)
  return false;
#undef DO_
}

void NameProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NameProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.NameProof.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NameProof)
}

::google::protobuf::uint8* NameProof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.NameProof.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // Extension range [200, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      200, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameProof)
  return target;
}

size_t NameProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NameProof)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameProof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NameProof)
  GOOGLE_DCHECK_NE(&from, this);
  const NameProof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameProof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NameProof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NameProof)
    MergeFrom(*source);
  }
}

void NameProof::MergeFrom(const NameProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NameProof)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void NameProof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NameProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameProof::CopyFrom(const NameProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NameProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameProof::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void NameProof::Swap(NameProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameProof::InternalSwap(NameProof* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NameProof::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TweetProof::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TweetProof::kTweetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TweetProof::TweetProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsTweetProof();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TweetProof)
}
TweetProof::TweetProof(const TweetProof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tweet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tweet()) {
    tweet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tweet_);
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.TweetProof)
}

void TweetProof::SharedCtor() {
  _cached_size_ = 0;
  tweet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TweetProof::~TweetProof() {
  // @@protoc_insertion_point(destructor:fantasybit.TweetProof)
  SharedDtor();
}

void TweetProof::SharedDtor() {
  tweet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TweetProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TweetProof::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TweetProof& TweetProof::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsTweetProof();
  return *internal_default_instance();
}

TweetProof* TweetProof::New(::google::protobuf::Arena* arena) const {
  TweetProof* n = new TweetProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TweetProof::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TweetProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!tweet_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tweet_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TweetProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TweetProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tweet = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tweet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tweet().data(), static_cast<int>(this->tweet().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TweetProof.tweet");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TweetProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TweetProof)
  return false;
#undef DO_
}

void TweetProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TweetProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tweet = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tweet().data(), static_cast<int>(this->tweet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TweetProof.tweet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tweet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TweetProof)
}

::google::protobuf::uint8* TweetProof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TweetProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tweet = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tweet().data(), static_cast<int>(this->tweet().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TweetProof.tweet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tweet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TweetProof)
  return target;
}

size_t TweetProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TweetProof)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string tweet = 10;
  if (has_tweet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tweet());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TweetProof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TweetProof)
  GOOGLE_DCHECK_NE(&from, this);
  const TweetProof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TweetProof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TweetProof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TweetProof)
    MergeFrom(*source);
  }
}

void TweetProof::MergeFrom(const TweetProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TweetProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tweet()) {
    set_has_tweet();
    tweet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tweet_);
  }
}

void TweetProof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TweetProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetProof::CopyFrom(const TweetProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TweetProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetProof::IsInitialized() const {
  return true;
}

void TweetProof::Swap(TweetProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TweetProof::InternalSwap(TweetProof* other) {
  using std::swap;
  tweet_.Swap(&other->tweet_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TweetProof::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MasterProof::InitAsDefaultInstance() {
  ::fantasybit::_MasterProof_default_instance_._instance.get_mutable()->new_oracle_name_ = const_cast< ::fantasybit::SignedTransaction*>(
      ::fantasybit::SignedTransaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterProof::kSeasonFieldNumber;
const int MasterProof::kWeekFieldNumber;
const int MasterProof::kTimestampFieldNumber;
const int MasterProof::kNewOracleNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterProof::MasterProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsMasterProof();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MasterProof)
}
MasterProof::MasterProof(const MasterProof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  season_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_season()) {
    season_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.season_);
  }
  if (from.has_new_oracle_name()) {
    new_oracle_name_ = new ::fantasybit::SignedTransaction(*from.new_oracle_name_);
  } else {
    new_oracle_name_ = NULL;
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&week_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MasterProof)
}

void MasterProof::SharedCtor() {
  _cached_size_ = 0;
  season_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_oracle_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&new_oracle_name_)) + sizeof(timestamp_));
}

MasterProof::~MasterProof() {
  // @@protoc_insertion_point(destructor:fantasybit.MasterProof)
  SharedDtor();
}

void MasterProof::SharedDtor() {
  season_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete new_oracle_name_;
}

void MasterProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterProof::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterProof& MasterProof::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsMasterProof();
  return *internal_default_instance();
}

MasterProof* MasterProof::New(::google::protobuf::Arena* arena) const {
  MasterProof* n = new MasterProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MasterProof::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MasterProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!season_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*season_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_oracle_name_ != NULL);
      new_oracle_name_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&week_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&week_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MasterProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MasterProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string season = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_season()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->season().data(), static_cast<int>(this->season().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.MasterProof.season");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 week = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.SignedTransaction new_oracle_name = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 530 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_oracle_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MasterProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MasterProof)
  return false;
#undef DO_
}

void MasterProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MasterProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string season = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->season().data(), static_cast<int>(this->season().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MasterProof.season");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->season(), output);
  }

  // optional int32 week = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->week(), output);
  }

  // optional int32 timestamp = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timestamp(), output);
  }

  // optional .fantasybit.SignedTransaction new_oracle_name = 66;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, *this->new_oracle_name_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MasterProof)
}

::google::protobuf::uint8* MasterProof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MasterProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string season = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->season().data(), static_cast<int>(this->season().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MasterProof.season");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->season(), target);
  }

  // optional int32 week = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->week(), target);
  }

  // optional int32 timestamp = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timestamp(), target);
  }

  // optional .fantasybit.SignedTransaction new_oracle_name = 66;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        66, *this->new_oracle_name_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MasterProof)
  return target;
}

size_t MasterProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MasterProof)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->season());
    }

    // optional .fantasybit.SignedTransaction new_oracle_name = 66;
    if (has_new_oracle_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->new_oracle_name_);
    }

    // optional int32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional int32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterProof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MasterProof)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterProof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterProof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MasterProof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MasterProof)
    MergeFrom(*source);
  }
}

void MasterProof::MergeFrom(const MasterProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MasterProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_season();
      season_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.season_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_new_oracle_name()->::fantasybit::SignedTransaction::MergeFrom(from.new_oracle_name());
    }
    if (cached_has_bits & 0x00000004u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MasterProof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MasterProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterProof::CopyFrom(const MasterProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MasterProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterProof::IsInitialized() const {
  if (has_new_oracle_name()) {
    if (!this->new_oracle_name_->IsInitialized()) return false;
  }
  return true;
}

void MasterProof::Swap(MasterProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterProof::InternalSwap(MasterProof* other) {
  using std::swap;
  season_.Swap(&other->season_);
  swap(new_oracle_name_, other->new_oracle_name_);
  swap(week_, other->week_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MasterProof::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kVersionFieldNumber;
const int Transaction::kTypeFieldNumber;
const int Transaction::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsTransaction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Transaction)
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:fantasybit.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transaction& Transaction::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsTransaction();
  return *internal_default_instance();
}

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.TransType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TransType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TransType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nonce = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .fantasybit.TransType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 nonce = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->nonce(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .fantasybit.TransType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 nonce = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->nonce(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Transaction)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.TransType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 nonce = 10;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(nonce_, other->nonce_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NameTrans::InitAsDefaultInstance() {
  ::fantasybit::_NameTrans_default_instance_._instance.get_mutable()->proof_ = const_cast< ::fantasybit::NameProof*>(
      ::fantasybit::NameProof::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameTrans::kFantasyNameFieldNumber;
const int NameTrans::kPublicKeyFieldNumber;
const int NameTrans::kProofFieldNumber;
const int NameTrans::kRecoveryKeyFieldNumber;
const int NameTrans::kAmAgentFieldNumber;
const int NameTrans::kMyAgentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameTrans::NameTrans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsNameTrans();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NameTrans)
}
NameTrans::NameTrans(const NameTrans& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_name()) {
    fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  recovery_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recovery_key()) {
    recovery_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recovery_key_);
  }
  my_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_my_agent()) {
    my_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.my_agent_);
  }
  if (from.has_proof()) {
    proof_ = new ::fantasybit::NameProof(*from.proof_);
  } else {
    proof_ = NULL;
  }
  am_agent_ = from.am_agent_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameTrans)
}

void NameTrans::SharedCtor() {
  _cached_size_ = 0;
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recovery_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&am_agent_) -
      reinterpret_cast<char*>(&proof_)) + sizeof(am_agent_));
}

NameTrans::~NameTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.NameTrans)
  SharedDtor();
}

void NameTrans::SharedDtor() {
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recovery_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  my_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
}

void NameTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameTrans::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NameTrans& NameTrans::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsNameTrans();
  return *internal_default_instance();
}

NameTrans* NameTrans::New(::google::protobuf::Arena* arena) const {
  NameTrans* n = new NameTrans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NameTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fantasy_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!recovery_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*recovery_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!my_agent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*my_agent_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(proof_ != NULL);
      proof_->Clear();
    }
  }
  am_agent_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NameTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NameTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NameTrans.fantasy_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_key = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.NameProof proof = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes recovery_key = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recovery_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool am_agent = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_am_agent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &am_agent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string my_agent = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_my_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->my_agent().data(), static_cast<int>(this->my_agent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NameTrans.my_agent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NameTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NameTrans)
  return false;
#undef DO_
}

void NameTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NameTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fantasy_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fantasy_name(), output);
  }

  // optional bytes public_key = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->public_key(), output);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->proof_, output);
  }

  // optional bytes recovery_key = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->recovery_key(), output);
  }

  // optional bool am_agent = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->am_agent(), output);
  }

  // optional string my_agent = 60;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->my_agent().data(), static_cast<int>(this->my_agent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.my_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->my_agent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NameTrans)
}

::google::protobuf::uint8* NameTrans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fantasy_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  // optional bytes public_key = 20;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->public_key(), target);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->proof_, deterministic, target);
  }

  // optional bytes recovery_key = 40;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->recovery_key(), target);
  }

  // optional bool am_agent = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->am_agent(), target);
  }

  // optional string my_agent = 60;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->my_agent().data(), static_cast<int>(this->my_agent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.my_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->my_agent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameTrans)
  return target;
}

size_t NameTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NameTrans)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional bytes public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional bytes recovery_key = 40;
    if (has_recovery_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recovery_key());
    }

    // optional string my_agent = 60;
    if (has_my_agent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->my_agent());
    }

    // optional .fantasybit.NameProof proof = 30;
    if (has_proof()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->proof_);
    }

    // optional bool am_agent = 50;
    if (has_am_agent()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameTrans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NameTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const NameTrans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NameTrans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NameTrans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NameTrans)
    MergeFrom(*source);
  }
}

void NameTrans::MergeFrom(const NameTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NameTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_recovery_key();
      recovery_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recovery_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_my_agent();
      my_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.my_agent_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_proof()->::fantasybit::NameProof::MergeFrom(from.proof());
    }
    if (cached_has_bits & 0x00000020u) {
      am_agent_ = from.am_agent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NameTrans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NameTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrans::CopyFrom(const NameTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NameTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrans::IsInitialized() const {
  if (has_proof()) {
    if (!this->proof_->IsInitialized()) return false;
  }
  return true;
}

void NameTrans::Swap(NameTrans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameTrans::InternalSwap(NameTrans* other) {
  using std::swap;
  fantasy_name_.Swap(&other->fantasy_name_);
  public_key_.Swap(&other->public_key_);
  recovery_key_.Swap(&other->recovery_key_);
  my_agent_.Swap(&other->my_agent_);
  swap(proof_, other->proof_);
  swap(am_agent_, other->am_agent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameTrans::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransferTrans::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferTrans::kFromFieldNumber;
const int TransferTrans::kToFieldNumber;
const int TransferTrans::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferTrans::TransferTrans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsTransferTrans();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TransferTrans)
}
TransferTrans::TransferTrans(const TransferTrans& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from()) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to()) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.TransferTrans)
}

void TransferTrans::SharedCtor() {
  _cached_size_ = 0;
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
}

TransferTrans::~TransferTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.TransferTrans)
  SharedDtor();
}

void TransferTrans::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferTrans::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferTrans& TransferTrans::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsTransferTrans();
  return *internal_default_instance();
}

TransferTrans* TransferTrans::New(::google::protobuf::Arena* arena) const {
  TransferTrans* n = new TransferTrans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TransferTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!to_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*to_.UnsafeRawStringPointer())->clear();
    }
  }
  amount_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TransferTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TransferTrans.from");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TransferTrans.to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TransferTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TransferTrans)
  return false;
#undef DO_
}

void TransferTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TransferTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TransferTrans.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->from(), output);
  }

  // optional string to = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TransferTrans.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->to(), output);
  }

  // optional uint64 amount = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TransferTrans)
}

::google::protobuf::uint8* TransferTrans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TransferTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TransferTrans.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->from(), target);
  }

  // optional string to = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TransferTrans.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->to(), target);
  }

  // optional uint64 amount = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TransferTrans)
  return target;
}

size_t TransferTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TransferTrans)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string from = 10;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string to = 20;
    if (has_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional uint64 amount = 30;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferTrans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TransferTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferTrans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferTrans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TransferTrans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TransferTrans)
    MergeFrom(*source);
  }
}

void TransferTrans::MergeFrom(const TransferTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TransferTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from();
      from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to();
      to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferTrans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TransferTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferTrans::CopyFrom(const TransferTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TransferTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferTrans::IsInitialized() const {
  return true;
}

void TransferTrans::Swap(TransferTrans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferTrans::InternalSwap(TransferTrans* other) {
  using std::swap;
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferTrans::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignedTransaction::InitAsDefaultInstance() {
  ::fantasybit::_SignedTransaction_default_instance_._instance.get_mutable()->trans_ = const_cast< ::fantasybit::Transaction*>(
      ::fantasybit::Transaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedTransaction::kTransFieldNumber;
const int SignedTransaction::kIdFieldNumber;
const int SignedTransaction::kSigFieldNumber;
const int SignedTransaction::kFantasyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedTransaction::SignedTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsSignedTransaction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.SignedTransaction)
}
SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sig()) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_name()) {
    fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
  }
  if (from.has_trans()) {
    trans_ = new ::fantasybit::Transaction(*from.trans_);
  } else {
    trans_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.SignedTransaction)
}

void SignedTransaction::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_ = NULL;
}

SignedTransaction::~SignedTransaction() {
  // @@protoc_insertion_point(destructor:fantasybit.SignedTransaction)
  SharedDtor();
}

void SignedTransaction::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trans_;
}

void SignedTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedTransaction::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignedTransaction& SignedTransaction::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsSignedTransaction();
  return *internal_default_instance();
}

SignedTransaction* SignedTransaction::New(::google::protobuf::Arena* arena) const {
  SignedTransaction* n = new SignedTransaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sig_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sig_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!fantasy_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trans_ != NULL);
      trans_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignedTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.SignedTransaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Transaction trans = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sig = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_name = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.SignedTransaction.fantasy_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.SignedTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.SignedTransaction)
  return false;
#undef DO_
}

void SignedTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.SignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Transaction trans = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->trans_, output);
  }

  // optional bytes id = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->id(), output);
  }

  // optional bytes sig = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->sig(), output);
  }

  // optional string fantasy_name = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedTransaction.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->fantasy_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.SignedTransaction)
}

::google::protobuf::uint8* SignedTransaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SignedTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Transaction trans = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->trans_, deterministic, target);
  }

  // optional bytes id = 20;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->id(), target);
  }

  // optional bytes sig = 30;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->sig(), target);
  }

  // optional string fantasy_name = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), static_cast<int>(this->fantasy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedTransaction.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->fantasy_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SignedTransaction)
  return target;
}

size_t SignedTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SignedTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes id = 20;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig());
    }

    // optional string fantasy_name = 40;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional .fantasybit.Transaction trans = 10;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->trans_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedTransaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedTransaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SignedTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SignedTransaction)
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SignedTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sig();
      sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_trans()->::fantasybit::Transaction::MergeFrom(from.trans());
    }
  }
}

void SignedTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SignedTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {
  if (has_trans()) {
    if (!this->trans_->IsInitialized()) return false;
  }
  return true;
}

void SignedTransaction::Swap(SignedTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedTransaction::InternalSwap(SignedTransaction* other) {
  using std::swap;
  id_.Swap(&other->id_);
  sig_.Swap(&other->sig_);
  fantasy_name_.Swap(&other->fantasy_name_);
  swap(trans_, other->trans_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignedTransaction::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockHeader::kVersionFieldNumber;
const int BlockHeader::kNumFieldNumber;
const int BlockHeader::kPrevIdFieldNumber;
const int BlockHeader::kTimestampFieldNumber;
const int BlockHeader::kGeneratorPkFieldNumber;
const int BlockHeader::kGeneratingSigFieldNumber;
const int BlockHeader::kBasetargetFieldNumber;
const int BlockHeader::kBlocktypeFieldNumber;
const int BlockHeader::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockHeader::BlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsBlockHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prev_id()) {
    prev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_id_);
  }
  generator_pk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generator_pk()) {
    generator_pk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_pk_);
  }
  generating_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generating_sig()) {
    generating_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generating_sig_);
  }
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transaction_id()) {
    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocktype_) -
    reinterpret_cast<char*>(&version_)) + sizeof(blocktype_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.BlockHeader)
}

void BlockHeader::SharedCtor() {
  _cached_size_ = 0;
  prev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_pk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generating_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basetarget_) -
      reinterpret_cast<char*>(&version_)) + sizeof(basetarget_));
  blocktype_ = 1;
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:fantasybit.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  prev_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_pk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generating_sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockHeader& BlockHeader::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsBlockHeader();
  return *internal_default_instance();
}

BlockHeader* BlockHeader::New(::google::protobuf::Arena* arena) const {
  BlockHeader* n = new BlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.BlockHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!prev_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prev_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!generator_pk_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*generator_pk_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!generating_sig_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*generating_sig_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!transaction_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*transaction_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&basetarget_) -
        reinterpret_cast<char*>(&version_)) + sizeof(basetarget_));
  }
  blocktype_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.BlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes prev_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes generator_pk = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generator_pk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes generating_sig = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generating_sig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 basetarget = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_basetarget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basetarget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.BlockHeader.Type blocktype = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::BlockHeader_Type_IsValid(value)) {
            set_blocktype(static_cast< ::fantasybit::BlockHeader_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                60, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes transaction_id = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.BlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.BlockHeader)
  return false;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.BlockHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 num = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num(), output);
  }

  // optional bytes prev_id = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->prev_id(), output);
  }

  // optional int32 timestamp = 21;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timestamp(), output);
  }

  // optional bytes generator_pk = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->generator_pk(), output);
  }

  // optional bytes generating_sig = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->generating_sig(), output);
  }

  // optional int32 basetarget = 50;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->basetarget(), output);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->blocktype(), output);
  }

  // optional bytes transaction_id = 70;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      70, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.BlockHeader)
}

::google::protobuf::uint8* BlockHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.BlockHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 num = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num(), target);
  }

  // optional bytes prev_id = 20;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->prev_id(), target);
  }

  // optional int32 timestamp = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timestamp(), target);
  }

  // optional bytes generator_pk = 30;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->generator_pk(), target);
  }

  // optional bytes generating_sig = 40;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->generating_sig(), target);
  }

  // optional int32 basetarget = 50;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->basetarget(), target);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->blocktype(), target);
  }

  // optional bytes transaction_id = 70;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.BlockHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes prev_id = 20;
    if (has_prev_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev_id());
    }

    // optional bytes generator_pk = 30;
    if (has_generator_pk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generator_pk());
    }

    // optional bytes generating_sig = 40;
    if (has_generating_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generating_sig());
    }

    // optional bytes transaction_id = 70;
    if (has_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction_id());
    }

    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional int32 basetarget = 50;
    if (has_basetarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basetarget());
    }

  }
  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocktype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.BlockHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prev_id();
      prev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_generator_pk();
      generator_pk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_pk_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_generating_sig();
      generating_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generating_sig_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      basetarget_ = from.basetarget_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_blocktype(from.blocktype());
  }
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  prev_id_.Swap(&other->prev_id_);
  generator_pk_.Swap(&other->generator_pk_);
  generating_sig_.Swap(&other->generating_sig_);
  transaction_id_.Swap(&other->transaction_id_);
  swap(version_, other->version_);
  swap(num_, other->num_);
  swap(timestamp_, other->timestamp_);
  swap(basetarget_, other->basetarget_);
  swap(blocktype_, other->blocktype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignedBlockHeader::InitAsDefaultInstance() {
  ::fantasybit::_SignedBlockHeader_default_instance_._instance.get_mutable()->head_ = const_cast< ::fantasybit::BlockHeader*>(
      ::fantasybit::BlockHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedBlockHeader::kHeadFieldNumber;
const int SignedBlockHeader::kSigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedBlockHeader::SignedBlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsSignedBlockHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.SignedBlockHeader)
}
SignedBlockHeader::SignedBlockHeader(const SignedBlockHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sig()) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.has_head()) {
    head_ = new ::fantasybit::BlockHeader(*from.head_);
  } else {
    head_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.SignedBlockHeader)
}

void SignedBlockHeader::SharedCtor() {
  _cached_size_ = 0;
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
}

SignedBlockHeader::~SignedBlockHeader() {
  // @@protoc_insertion_point(destructor:fantasybit.SignedBlockHeader)
  SharedDtor();
}

void SignedBlockHeader::SharedDtor() {
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void SignedBlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedBlockHeader::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignedBlockHeader& SignedBlockHeader::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsSignedBlockHeader();
  return *internal_default_instance();
}

SignedBlockHeader* SignedBlockHeader::New(::google::protobuf::Arena* arena) const {
  SignedBlockHeader* n = new SignedBlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedBlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SignedBlockHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!sig_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sig_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(head_ != NULL);
      head_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignedBlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.SignedBlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.BlockHeader head = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sig = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sig().data(), static_cast<int>(this->sig().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.SignedBlockHeader.sig");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.SignedBlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.SignedBlockHeader)
  return false;
#undef DO_
}

void SignedBlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.SignedBlockHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.BlockHeader head = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->head_, output);
  }

  // optional string sig = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), static_cast<int>(this->sig().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedBlockHeader.sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->sig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.SignedBlockHeader)
}

::google::protobuf::uint8* SignedBlockHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SignedBlockHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.BlockHeader head = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->head_, deterministic, target);
  }

  // optional string sig = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), static_cast<int>(this->sig().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedBlockHeader.sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->sig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SignedBlockHeader)
  return target;
}

size_t SignedBlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SignedBlockHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

    // optional .fantasybit.BlockHeader head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->head_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedBlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SignedBlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedBlockHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedBlockHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SignedBlockHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SignedBlockHeader)
    MergeFrom(*source);
  }
}

void SignedBlockHeader::MergeFrom(const SignedBlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SignedBlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sig();
      sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_head()->::fantasybit::BlockHeader::MergeFrom(from.head());
    }
  }
}

void SignedBlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SignedBlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBlockHeader::CopyFrom(const SignedBlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SignedBlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBlockHeader::IsInitialized() const {
  return true;
}

void SignedBlockHeader::Swap(SignedBlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedBlockHeader::InternalSwap(SignedBlockHeader* other) {
  using std::swap;
  sig_.Swap(&other->sig_);
  swap(head_, other->head_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignedBlockHeader::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::fantasybit::_Block_default_instance_._instance.get_mutable()->signedhead_ = const_cast< ::fantasybit::SignedBlockHeader*>(
      ::fantasybit::SignedBlockHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kSignedheadFieldNumber;
const int Block::kSignedTransactionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signed_transactions_(from.signed_transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_signedhead()) {
    signedhead_ = new ::fantasybit::SignedBlockHeader(*from.signedhead_);
  } else {
    signedhead_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Block)
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  signedhead_ = NULL;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:fantasybit.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != internal_default_instance()) delete signedhead_;
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Block& Block::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsBlock();
  return *internal_default_instance();
}

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  signed_transactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signedhead_ != NULL);
    signedhead_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SignedBlockHeader signedhead = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signedhead()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.SignedTransaction signed_transactions = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_signed_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->signedhead_, output);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signed_transactions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->signed_transactions(static_cast<int>(i)), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->signedhead_, deterministic, target);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signed_transactions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->signed_transactions(static_cast<int>(i)), deterministic, target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Block)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->signed_transactions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signed_transactions(static_cast<int>(i)));
    }
  }

  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->signedhead_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signed_transactions_.MergeFrom(from.signed_transactions_);
  if (from.has_signedhead()) {
    mutable_signedhead()->::fantasybit::SignedBlockHeader::MergeFrom(from.signedhead());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->signed_transactions())) return false;
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  signed_transactions_.InternalSwap(&other->signed_transactions_);
  swap(signedhead_, other->signedhead_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeRequest::kTypeFieldNumber;
const int NodeRequest::kMyipFieldNumber;
const int NodeRequest::kNumFieldNumber;
const int NodeRequest::kMyhostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeRequest::NodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsNodeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NodeRequest)
}
NodeRequest::NodeRequest(const NodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  myip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_myip()) {
    myip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.myip_);
  }
  myhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_myhost()) {
    myhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.myhost_);
  }
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&num_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.NodeRequest)
}

void NodeRequest::SharedCtor() {
  _cached_size_ = 0;
  myip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  myhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  type_ = 1;
}

NodeRequest::~NodeRequest() {
  // @@protoc_insertion_point(destructor:fantasybit.NodeRequest)
  SharedDtor();
}

void NodeRequest::SharedDtor() {
  myip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  myhost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRequest::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeRequest& NodeRequest::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsNodeRequest();
  return *internal_default_instance();
}

NodeRequest* NodeRequest::New(::google::protobuf::Arena* arena) const {
  NodeRequest* n = new NodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!myip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*myip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!myhost_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*myhost_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    num_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NodeRequest.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NodeRequest_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NodeRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string myip = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->myip().data(), static_cast<int>(this->myip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NodeRequest.myip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string myhost = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->myhost().data(), static_cast<int>(this->myhost().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NodeRequest.myhost");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NodeRequest)
  return false;
#undef DO_
}

void NodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string myip = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myip().data(), static_cast<int>(this->myip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->myip(), output);
  }

  // optional int32 num = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->num(), output);
  }

  // optional string myhost = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myhost().data(), static_cast<int>(this->myhost().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myhost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->myhost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NodeRequest)
}

::google::protobuf::uint8* NodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string myip = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myip().data(), static_cast<int>(this->myip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->myip(), target);
  }

  // optional int32 num = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->num(), target);
  }

  // optional string myhost = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myhost().data(), static_cast<int>(this->myhost().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myhost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->myhost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NodeRequest)
  return target;
}

size_t NodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string myip = 20;
    if (has_myip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myip());
    }

    // optional string myhost = 40;
    if (has_myhost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myhost());
    }

    // optional int32 num = 30;
    if (has_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .fantasybit.NodeRequest.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NodeRequest)
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_myip();
      myip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.myip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_myhost();
      myhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.myhost_);
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {
  return true;
}

void NodeRequest::Swap(NodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRequest::InternalSwap(NodeRequest* other) {
  using std::swap;
  myip_.Swap(&other->myip_);
  myhost_.Swap(&other->myhost_);
  swap(num_, other->num_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeRequest::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeReply::kHightFieldNumber;
const int NodeReply::kIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeReply::NodeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsNodeReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NodeReply)
}
NodeReply::NodeReply(const NodeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hight_ = from.hight_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.NodeReply)
}

void NodeReply::SharedCtor() {
  _cached_size_ = 0;
  hight_ = 0;
}

NodeReply::~NodeReply() {
  // @@protoc_insertion_point(destructor:fantasybit.NodeReply)
  SharedDtor();
}

void NodeReply::SharedDtor() {
}

void NodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeReply::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeReply& NodeReply::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsNodeReply();
  return *internal_default_instance();
}

NodeReply* NodeReply::New(::google::protobuf::Arena* arena) const {
  NodeReply* n = new NodeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.NodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  hight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NodeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hight = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_hight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ips = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ips(this->ips_size() - 1).data(),
            static_cast<int>(this->ips(this->ips_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NodeReply.ips");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NodeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NodeReply)
  return false;
#undef DO_
}

void NodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hight = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hight(), output);
  }

  // repeated string ips = 20;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ips(i).data(), static_cast<int>(this->ips(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeReply.ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NodeReply)
}

::google::protobuf::uint8* NodeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NodeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hight = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hight(), target);
  }

  // repeated string ips = 20;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ips(i).data(), static_cast<int>(this->ips(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeReply.ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->ips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NodeReply)
  return target;
}

size_t NodeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.NodeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string ips = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->ips_size());
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  // optional int32 hight = 10;
  if (has_hight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.NodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.NodeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.NodeReply)
    MergeFrom(*source);
  }
}

void NodeReply::MergeFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.NodeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
  if (from.has_hight()) {
    set_hight(from.hight());
  }
}

void NodeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReply::CopyFrom(const NodeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.NodeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {
  return true;
}

void NodeReply::Swap(NodeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeReply::InternalSwap(NodeReply* other) {
  using std::swap;
  ips_.InternalSwap(&other->ips_);
  swap(hight_, other->hight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeReply::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FantasyPlayerPoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyPlayerPoints::kSeasonFieldNumber;
const int FantasyPlayerPoints::kWeekFieldNumber;
const int FantasyPlayerPoints::kPlayeridFieldNumber;
const int FantasyPlayerPoints::kPointsFieldNumber;
const int FantasyPlayerPoints::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyPlayerPoints::FantasyPlayerPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayerPoints();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyPlayerPoints)
}
FantasyPlayerPoints::FantasyPlayerPoints(const FantasyPlayerPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&season_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyPlayerPoints)
}

void FantasyPlayerPoints::SharedCtor() {
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&season_)) + sizeof(result_));
}

FantasyPlayerPoints::~FantasyPlayerPoints() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyPlayerPoints)
  SharedDtor();
}

void FantasyPlayerPoints::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FantasyPlayerPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayerPoints::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyPlayerPoints& FantasyPlayerPoints::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayerPoints();
  return *internal_default_instance();
}

FantasyPlayerPoints* FantasyPlayerPoints::New(::google::protobuf::Arena* arena) const {
  FantasyPlayerPoints* n = new FantasyPlayerPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyPlayerPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyPlayerPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*playerid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&season_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyPlayerPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyPlayerPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyPlayerPoints.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float result = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyPlayerPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyPlayerPoints)
  return false;
#undef DO_
}

void FantasyPlayerPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyPlayerPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayerPoints.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  // optional float result = 50;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyPlayerPoints)
}

::google::protobuf::uint8* FantasyPlayerPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyPlayerPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayerPoints.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  // optional float result = 50;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyPlayerPoints)
  return target;
}

size_t FantasyPlayerPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyPlayerPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional float result = 50;
    if (has_result()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayerPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyPlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyPlayerPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyPlayerPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyPlayerPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyPlayerPoints)
    MergeFrom(*source);
  }
}

void FantasyPlayerPoints::MergeFrom(const FantasyPlayerPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyPlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000004u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000008u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyPlayerPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyPlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayerPoints::CopyFrom(const FantasyPlayerPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyPlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayerPoints::IsInitialized() const {
  return true;
}

void FantasyPlayerPoints::Swap(FantasyPlayerPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyPlayerPoints::InternalSwap(FantasyPlayerPoints* other) {
  using std::swap;
  playerid_.Swap(&other->playerid_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(points_, other->points_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyPlayerPoints::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjectionTrans::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionTrans::kSeasonFieldNumber;
const int ProjectionTrans::kWeekFieldNumber;
const int ProjectionTrans::kPlayeridFieldNumber;
const int ProjectionTrans::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectionTrans::ProjectionTrans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsProjectionTrans();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjectionTrans)
}
ProjectionTrans::ProjectionTrans(const ProjectionTrans& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  ::memcpy(&points_, &from.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&points_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjectionTrans)
}

void ProjectionTrans::SharedCtor() {
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&points_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&points_)) + sizeof(week_));
}

ProjectionTrans::~ProjectionTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjectionTrans)
  SharedDtor();
}

void ProjectionTrans::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProjectionTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionTrans::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjectionTrans& ProjectionTrans::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsProjectionTrans();
  return *internal_default_instance();
}

ProjectionTrans* ProjectionTrans::New(::google::protobuf::Arena* arena) const {
  ProjectionTrans* n = new ProjectionTrans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectionTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjectionTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*playerid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&points_)) + sizeof(week_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjectionTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjectionTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.ProjectionTrans.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjectionTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjectionTrans)
  return false;
#undef DO_
}

void ProjectionTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjectionTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjectionTrans.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjectionTrans)
}

::google::protobuf::uint8* ProjectionTrans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjectionTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjectionTrans.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjectionTrans)
  return target;
}

size_t ProjectionTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjectionTrans)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionTrans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjectionTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionTrans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectionTrans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjectionTrans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjectionTrans)
    MergeFrom(*source);
  }
}

void ProjectionTrans::MergeFrom(const ProjectionTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjectionTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000004u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionTrans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjectionTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTrans::CopyFrom(const ProjectionTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjectionTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTrans::IsInitialized() const {
  return true;
}

void ProjectionTrans::Swap(ProjectionTrans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectionTrans::InternalSwap(ProjectionTrans* other) {
  using std::swap;
  playerid_.Swap(&other->playerid_);
  swap(points_, other->points_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectionTrans::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerPoints::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerPoints::kPlayeridFieldNumber;
const int PlayerPoints::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerPoints::PlayerPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsPlayerPoints();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerPoints)
}
PlayerPoints::PlayerPoints(const PlayerPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  points_ = from.points_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerPoints)
}

void PlayerPoints::SharedCtor() {
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
}

PlayerPoints::~PlayerPoints() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerPoints)
  SharedDtor();
}

void PlayerPoints::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPoints::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerPoints& PlayerPoints::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsPlayerPoints();
  return *internal_default_instance();
}

PlayerPoints* PlayerPoints::New(::google::protobuf::Arena* arena) const {
  PlayerPoints* n = new PlayerPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*playerid_.UnsafeRawStringPointer())->clear();
  }
  points_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerPoints.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerPoints)
  return false;
#undef DO_
}

void PlayerPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerPoints.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerPoints)
}

::google::protobuf::uint8* PlayerPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerPoints.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerPoints)
  return target;
}

size_t PlayerPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerPoints)
    MergeFrom(*source);
  }
}

void PlayerPoints::MergeFrom(const PlayerPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPoints::CopyFrom(const PlayerPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPoints::IsInitialized() const {
  return true;
}

void PlayerPoints::Swap(PlayerPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerPoints::InternalSwap(PlayerPoints* other) {
  using std::swap;
  playerid_.Swap(&other->playerid_);
  swap(points_, other->points_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerPoints::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProjectionTransBlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionTransBlock::kSeasonFieldNumber;
const int ProjectionTransBlock::kWeekFieldNumber;
const int ProjectionTransBlock::kPlayerPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectionTransBlock::ProjectionTransBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsProjectionTransBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjectionTransBlock)
}
ProjectionTransBlock::ProjectionTransBlock(const ProjectionTransBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_points_(from.player_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&season_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjectionTransBlock)
}

void ProjectionTransBlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
}

ProjectionTransBlock::~ProjectionTransBlock() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjectionTransBlock)
  SharedDtor();
}

void ProjectionTransBlock::SharedDtor() {
}

void ProjectionTransBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionTransBlock::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProjectionTransBlock& ProjectionTransBlock::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsProjectionTransBlock();
  return *internal_default_instance();
}

ProjectionTransBlock* ProjectionTransBlock::New(::google::protobuf::Arena* arena) const {
  ProjectionTransBlock* n = new ProjectionTransBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectionTransBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ProjectionTransBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProjectionTransBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjectionTransBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.PlayerPoints player_points = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjectionTransBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjectionTransBlock)
  return false;
#undef DO_
}

void ProjectionTransBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjectionTransBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // repeated .fantasybit.PlayerPoints player_points = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->player_points(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjectionTransBlock)
}

::google::protobuf::uint8* ProjectionTransBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjectionTransBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // repeated .fantasybit.PlayerPoints player_points = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->player_points(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjectionTransBlock)
  return target;
}

size_t ProjectionTransBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ProjectionTransBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.PlayerPoints player_points = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->player_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_points(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionTransBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ProjectionTransBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectionTransBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectionTransBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ProjectionTransBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ProjectionTransBlock)
    MergeFrom(*source);
  }
}

void ProjectionTransBlock::MergeFrom(const ProjectionTransBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ProjectionTransBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_points_.MergeFrom(from.player_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProjectionTransBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ProjectionTransBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTransBlock::CopyFrom(const ProjectionTransBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ProjectionTransBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTransBlock::IsInitialized() const {
  return true;
}

void ProjectionTransBlock::Swap(ProjectionTransBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectionTransBlock::InternalSwap(ProjectionTransBlock* other) {
  using std::swap;
  player_points_.InternalSwap(&other->player_points_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectionTransBlock::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Data::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kVersionFieldNumber;
const int Data::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:fantasybit.Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Data& Data::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsData();
  return *internal_default_instance();
}

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&version_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.Data.Type type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::Data_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::Data_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Data)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.Data.Type type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerData::InitAsDefaultInstance() {
  ::fantasybit::_PlayerData_default_instance_._instance.get_mutable()->player_base_ = const_cast< ::fantasybit::PlayerBase*>(
      ::fantasybit::PlayerBase::internal_default_instance());
  ::fantasybit::_PlayerData_default_instance_._instance.get_mutable()->player_status_ = const_cast< ::fantasybit::PlayerStatus*>(
      ::fantasybit::PlayerStatus::internal_default_instance());
}
void PlayerData::clear_player_base() {
  if (player_base_ != NULL) player_base_->Clear();
  clear_has_player_base();
}
void PlayerData::clear_player_status() {
  if (player_status_ != NULL) player_status_->Clear();
  clear_has_player_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kPlayeridFieldNumber;
const int PlayerData::kPlayerBaseFieldNumber;
const int PlayerData::kPlayerStatusFieldNumber;
const int PlayerData::kPlayerGameStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerData::PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsPlayerData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerData)
}
PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.has_player_base()) {
    player_base_ = new ::fantasybit::PlayerBase(*from.player_base_);
  } else {
    player_base_ = NULL;
  }
  if (from.has_player_status()) {
    player_status_ = new ::fantasybit::PlayerStatus(*from.player_status_);
  } else {
    player_status_ = NULL;
  }
  player_game_status_ = from.player_game_status_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerData)
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_game_status_) -
      reinterpret_cast<char*>(&player_base_)) + sizeof(player_game_status_));
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_base_;
  if (this != internal_default_instance()) delete player_status_;
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerData& PlayerData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsPlayerData();
  return *internal_default_instance();
}

PlayerData* PlayerData::New(::google::protobuf::Arena* arena) const {
  PlayerData* n = new PlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_base_ != NULL);
      player_base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(player_status_ != NULL);
      player_status_->Clear();
    }
  }
  player_game_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerData.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.PlayerBase player_base = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.PlayerStatus player_status = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.PlayerGameStatus player_game_status = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::PlayerGameStatus_IsValid(value)) {
            set_player_game_status(static_cast< ::fantasybit::PlayerGameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerData.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playerid(), output);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->player_base_, output);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->player_status_, output);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->player_game_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerData)
}

::google::protobuf::uint8* PlayerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerData.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->player_base_, deterministic, target);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->player_status_, deterministic, target);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->player_game_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerData)
  return target;
}

size_t PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.PlayerBase player_base = 20;
    if (has_player_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->player_base_);
    }

    // optional .fantasybit.PlayerStatus player_status = 30;
    if (has_player_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->player_status_);
    }

    // optional .fantasybit.PlayerGameStatus player_game_status = 40;
    if (has_player_game_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player_game_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerData)
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_base()->::fantasybit::PlayerBase::MergeFrom(from.player_base());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_player_status()->::fantasybit::PlayerStatus::MergeFrom(from.player_status());
    }
    if (cached_has_bits & 0x00000008u) {
      player_game_status_ = from.player_game_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {
  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerData::InternalSwap(PlayerData* other) {
  using std::swap;
  playerid_.Swap(&other->playerid_);
  swap(player_base_, other->player_base_);
  swap(player_status_, other->player_status_);
  swap(player_game_status_, other->player_game_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameData::InitAsDefaultInstance() {
  ::fantasybit::_GameData_default_instance_._instance.get_mutable()->status_ = const_cast< ::fantasybit::GameStatus*>(
      ::fantasybit::GameStatus::internal_default_instance());
}
void GameData::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameData::kGameidFieldNumber;
const int GameData::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameData::GameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsGameData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameData)
}
GameData::GameData(const GameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  if (from.has_status()) {
    status_ = new ::fantasybit::GameStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameData)
}

void GameData::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
}

GameData::~GameData() {
  // @@protoc_insertion_point(destructor:fantasybit.GameData)
  SharedDtor();
}

void GameData::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void GameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameData& GameData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsGameData();
  return *internal_default_instance();
}

GameData* GameData::New(::google::protobuf::Arena* arena) const {
  GameData* n = new GameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gameid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), static_cast<int>(this->gameid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameData.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.GameStatus status = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameData)
  return false;
#undef DO_
}

void GameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameData.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gameid(), output);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameData)
}

::google::protobuf::uint8* GameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameData.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->status_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameData)
  return target;
}

size_t GameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string gameid = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional .fantasybit.GameStatus status = 20;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->status_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  const GameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameData)
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_status()->::fantasybit::GameStatus::MergeFrom(from.status());
    }
  }
}

void GameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {
  return true;
}

void GameData::Swap(GameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameData::InternalSwap(GameData* other) {
  using std::swap;
  gameid_.Swap(&other->gameid_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResultData::InitAsDefaultInstance() {
  ::fantasybit::_ResultData_default_instance_._instance.get_mutable()->game_result_ = const_cast< ::fantasybit::GameResult*>(
      ::fantasybit::GameResult::internal_default_instance());
}
void ResultData::clear_game_result() {
  if (game_result_ != NULL) game_result_->Clear();
  clear_has_game_result();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultData::kGameResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResultData::ResultData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsResultData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ResultData)
}
ResultData::ResultData(const ResultData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_result()) {
    game_result_ = new ::fantasybit::GameResult(*from.game_result_);
  } else {
    game_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.ResultData)
}

void ResultData::SharedCtor() {
  _cached_size_ = 0;
  game_result_ = NULL;
}

ResultData::~ResultData() {
  // @@protoc_insertion_point(destructor:fantasybit.ResultData)
  SharedDtor();
}

void ResultData::SharedDtor() {
  if (this != internal_default_instance()) delete game_result_;
}

void ResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResultData& ResultData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsResultData();
  return *internal_default_instance();
}

ResultData* ResultData::New(::google::protobuf::Arena* arena) const {
  ResultData* n = new ResultData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ResultData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_result_ != NULL);
    game_result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ResultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GameResult game_result = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ResultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ResultData)
  return false;
#undef DO_
}

void ResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ResultData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GameResult game_result = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->game_result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ResultData)
}

::google::protobuf::uint8* ResultData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ResultData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.GameResult game_result = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->game_result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ResultData)
  return target;
}

size_t ResultData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ResultData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .fantasybit.GameResult game_result = 10;
  if (has_game_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->game_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ResultData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ResultData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ResultData)
    MergeFrom(*source);
  }
}

void ResultData::MergeFrom(const ResultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ResultData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_result()) {
    mutable_game_result()->::fantasybit::GameResult::MergeFrom(from.game_result());
  }
}

void ResultData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultData::CopyFrom(const ResultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ResultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultData::IsInitialized() const {
  return true;
}

void ResultData::Swap(ResultData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultData::InternalSwap(ResultData* other) {
  using std::swap;
  swap(game_result_, other->game_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScheduleData::InitAsDefaultInstance() {
  ::fantasybit::_ScheduleData_default_instance_._instance.get_mutable()->weekly_ = const_cast< ::fantasybit::WeeklySchedule*>(
      ::fantasybit::WeeklySchedule::internal_default_instance());
}
void ScheduleData::clear_weekly() {
  if (weekly_ != NULL) weekly_->Clear();
  clear_has_weekly();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScheduleData::kWeekFieldNumber;
const int ScheduleData::kWeeklyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScheduleData::ScheduleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsScheduleData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ScheduleData)
}
ScheduleData::ScheduleData(const ScheduleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weekly()) {
    weekly_ = new ::fantasybit::WeeklySchedule(*from.weekly_);
  } else {
    weekly_ = NULL;
  }
  week_ = from.week_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.ScheduleData)
}

void ScheduleData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weekly_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&weekly_)) + sizeof(week_));
}

ScheduleData::~ScheduleData() {
  // @@protoc_insertion_point(destructor:fantasybit.ScheduleData)
  SharedDtor();
}

void ScheduleData::SharedDtor() {
  if (this != internal_default_instance()) delete weekly_;
}

void ScheduleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScheduleData& ScheduleData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsScheduleData();
  return *internal_default_instance();
}

ScheduleData* ScheduleData::New(::google::protobuf::Arena* arena) const {
  ScheduleData* n = new ScheduleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScheduleData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ScheduleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(weekly_ != NULL);
    weekly_->Clear();
  }
  week_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScheduleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ScheduleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.WeeklySchedule weekly = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weekly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ScheduleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ScheduleData)
  return false;
#undef DO_
}

void ScheduleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ScheduleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 week = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week(), output);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->weekly_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ScheduleData)
}

::google::protobuf::uint8* ScheduleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ScheduleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 week = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week(), target);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->weekly_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ScheduleData)
  return target;
}

size_t ScheduleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ScheduleData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.WeeklySchedule weekly = 10;
    if (has_weekly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->weekly_);
    }

    // optional int32 week = 1;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ScheduleData)
  GOOGLE_DCHECK_NE(&from, this);
  const ScheduleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScheduleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ScheduleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ScheduleData)
    MergeFrom(*source);
  }
}

void ScheduleData::MergeFrom(const ScheduleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ScheduleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_weekly()->::fantasybit::WeeklySchedule::MergeFrom(from.weekly());
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScheduleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ScheduleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleData::CopyFrom(const ScheduleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ScheduleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleData::IsInitialized() const {
  return true;
}

void ScheduleData::Swap(ScheduleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScheduleData::InternalSwap(ScheduleData* other) {
  using std::swap;
  swap(weekly_, other->weekly_);
  swap(week_, other->week_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScheduleData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataTransition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTransition::kTypeFieldNumber;
const int DataTransition::kSeasonFieldNumber;
const int DataTransition::kWeekFieldNumber;
const int DataTransition::kGamedataFieldNumber;
const int DataTransition::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataTransition::DataTransition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsDataTransition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.DataTransition)
}
DataTransition::DataTransition(const DataTransition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gamedata_(from.gamedata_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&season_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.DataTransition)
}

void DataTransition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
  type_ = 2;
}

DataTransition::~DataTransition() {
  // @@protoc_insertion_point(destructor:fantasybit.DataTransition)
  SharedDtor();
}

void DataTransition::SharedDtor() {
}

void DataTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTransition::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataTransition& DataTransition::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsDataTransition();
  return *internal_default_instance();
}

DataTransition* DataTransition::New(::google::protobuf::Arena* arena) const {
  DataTransition* n = new DataTransition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DataTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamedata_.Clear();
  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.DataTransition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TrType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TrType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.GameData gamedata = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_gamedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.Data data = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.DataTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.DataTransition)
  return false;
#undef DO_
}

void DataTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.DataTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TrType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamedata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->gamedata(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.Data data = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.DataTransition)
}

::google::protobuf::uint8* DataTransition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DataTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TrType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gamedata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->gamedata(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.Data data = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DataTransition)
  return target;
}

size_t DataTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DataTransition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.GameData gamedata = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->gamedata_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gamedata(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.Data data = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional .fantasybit.TrType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTransition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DataTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTransition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataTransition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DataTransition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DataTransition)
    MergeFrom(*source);
  }
}

void DataTransition::MergeFrom(const DataTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DataTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamedata_.MergeFrom(from.gamedata_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataTransition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DataTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransition::CopyFrom(const DataTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DataTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransition::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void DataTransition::Swap(DataTransition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataTransition::InternalSwap(DataTransition* other) {
  using std::swap;
  gamedata_.InternalSwap(&other->gamedata_);
  data_.InternalSwap(&other->data_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataTransition::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamState::kStateFieldNumber;
const int TeamState::kWeekFieldNumber;
const int TeamState::kTeamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamState::TeamState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsTeamState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TeamState)
}
TeamState::TeamState(const TeamState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_teamid()) {
    teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
  }
  ::memcpy(&week_, &from.week_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&week_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamState)
}

void TeamState::SharedCtor() {
  _cached_size_ = 0;
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  week_ = 0u;
  state_ = 1;
}

TeamState::~TeamState() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamState)
  SharedDtor();
}

void TeamState::SharedDtor() {
  teamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TeamState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamState::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamState& TeamState::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsTeamState();
  return *internal_default_instance();
}

TeamState* TeamState::New(::google::protobuf::Arena* arena) const {
  TeamState* n = new TeamState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!teamid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*teamid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    week_ = 0u;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TeamState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TeamState.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TeamState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::TeamState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string teamid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamid().data(), static_cast<int>(this->teamid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamState.teamid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TeamState)
  return false;
#undef DO_
}

void TeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TeamState.State state = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 week = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week(), output);
  }

  // optional string teamid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamState.teamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->teamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TeamState)
}

::google::protobuf::uint8* TeamState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TeamState.State state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 week = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week(), target);
  }

  // optional string teamid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), static_cast<int>(this->teamid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamState.teamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamState)
  return target;
}

size_t TeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TeamState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional uint32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional .fantasybit.TeamState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TeamState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TeamState)
    MergeFrom(*source);
  }
}

void TeamState::MergeFrom(const TeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_teamid();
      teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamState::CopyFrom(const TeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamState::IsInitialized() const {
  return true;
}

void TeamState::Swap(TeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamState::InternalSwap(TeamState* other) {
  using std::swap;
  teamid_.Swap(&other->teamid_);
  swap(week_, other->week_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamState::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeltaData::InitAsDefaultInstance() {
  ::fantasybit::_DeltaData_default_instance_._instance.get_mutable()->globalstate_ = const_cast< ::fantasybit::GlobalState*>(
      ::fantasybit::GlobalState::internal_default_instance());
}
void DeltaData::clear_globalstate() {
  if (globalstate_ != NULL) globalstate_->Clear();
  clear_has_globalstate();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaData::kTypeFieldNumber;
const int DeltaData::kMyfantasynameFieldNumber;
const int DeltaData::kGlobalstateFieldNumber;
const int DeltaData::kTeamstatesFieldNumber;
const int DeltaData::kDatasFieldNumber;
const int DeltaData::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaData::DeltaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsDeltaData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.DeltaData)
}
DeltaData::DeltaData(const DeltaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      myfantasyname_(from.myfantasyname_),
      teamstates_(from.teamstates_),
      datas_(from.datas_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_globalstate()) {
    globalstate_ = new ::fantasybit::GlobalState(*from.globalstate_);
  } else {
    globalstate_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.DeltaData)
}

void DeltaData::SharedCtor() {
  _cached_size_ = 0;
  globalstate_ = NULL;
  type_ = 2;
}

DeltaData::~DeltaData() {
  // @@protoc_insertion_point(destructor:fantasybit.DeltaData)
  SharedDtor();
}

void DeltaData::SharedDtor() {
  if (this != internal_default_instance()) delete globalstate_;
}

void DeltaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeltaData& DeltaData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsDeltaData();
  return *internal_default_instance();
}

DeltaData* DeltaData::New(::google::protobuf::Arena* arena) const {
  DeltaData* n = new DeltaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.DeltaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  myfantasyname_.Clear();
  teamstates_.Clear();
  datas_.Clear();
  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(globalstate_ != NULL);
      globalstate_->Clear();
    }
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeltaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.DeltaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.DeltaData.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::DeltaData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::DeltaData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_myfantasyname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.GlobalState globalstate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_globalstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.TeamState teamstates = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_teamstates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.Data datas = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_datas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.FantasyPlayer players = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.DeltaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.DeltaData)
  return false;
#undef DO_
}

void DeltaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.DeltaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.DeltaData.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->myfantasyname_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(static_cast<int>(i)), output);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->globalstate_, output);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teamstates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->teamstates(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.Data datas = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->datas(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->players(static_cast<int>(i)), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.DeltaData)
}

::google::protobuf::uint8* DeltaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DeltaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.DeltaData.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->myfantasyname_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->myfantasyname(static_cast<int>(i)), deterministic, target);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->globalstate_, deterministic, target);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teamstates_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->teamstates(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.Data datas = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->datas(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->players(static_cast<int>(i)), deterministic, target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DeltaData)
  return target;
}

size_t DeltaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.DeltaData)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->myfantasyname_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->myfantasyname(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->teamstates_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teamstates(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.Data datas = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->datas_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->datas(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.GlobalState globalstate = 10;
    if (has_globalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->globalstate_);
    }

    // optional .fantasybit.DeltaData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.DeltaData)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.DeltaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.DeltaData)
    MergeFrom(*source);
  }
}

void DeltaData::MergeFrom(const DeltaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.DeltaData)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  myfantasyname_.MergeFrom(from.myfantasyname_);
  teamstates_.MergeFrom(from.teamstates_);
  datas_.MergeFrom(from.datas_);
  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from.globalstate());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeltaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.DeltaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaData::CopyFrom(const DeltaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.DeltaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaData::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void DeltaData::Swap(DeltaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaData::InternalSwap(DeltaData* other) {
  using std::swap;
  myfantasyname_.InternalSwap(&other->myfantasyname_);
  teamstates_.InternalSwap(&other->teamstates_);
  datas_.InternalSwap(&other->datas_);
  players_.InternalSwap(&other->players_);
  swap(globalstate_, other->globalstate_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata DeltaData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageData::kMsgFieldNumber;
const int MessageData::kGtFieldNumber;
const int MessageData::kLtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageData::MessageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsMessageData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MessageData)
}
MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&gt_, &from.gt_,
    static_cast<size_t>(reinterpret_cast<char*>(&lt_) -
    reinterpret_cast<char*>(&gt_)) + sizeof(lt_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.MessageData)
}

void MessageData::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lt_) -
      reinterpret_cast<char*>(&gt_)) + sizeof(lt_));
}

MessageData::~MessageData() {
  // @@protoc_insertion_point(destructor:fantasybit.MessageData)
  SharedDtor();
}

void MessageData::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageData& MessageData::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsMessageData();
  return *internal_default_instance();
}

MessageData* MessageData::New(::google::protobuf::Arena* arena) const {
  MessageData* n = new MessageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MessageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&gt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lt_) -
        reinterpret_cast<char*>(&gt_)) + sizeof(lt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MessageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.MessageData.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gt = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_gt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lt = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_lt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MessageData)
  return false;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MessageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MessageData.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->msg(), output);
  }

  // optional int32 gt = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->gt(), output);
  }

  // optional int32 lt = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->lt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MessageData)
}

::google::protobuf::uint8* MessageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MessageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string msg = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MessageData.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->msg(), target);
  }

  // optional int32 gt = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->gt(), target);
  }

  // optional int32 lt = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->lt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MessageData)
  return target;
}

size_t MessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MessageData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string msg = 10;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 gt = 20;
    if (has_gt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gt());
    }

    // optional int32 lt = 30;
    if (has_lt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MessageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MessageData)
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      gt_ = from.gt_;
    }
    if (cached_has_bits & 0x00000004u) {
      lt_ = from.lt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageData::InternalSwap(MessageData* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(gt_, other->gt_);
  swap(lt_, other->lt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StampedTrans::InitAsDefaultInstance() {
  ::fantasybit::_StampedTrans_default_instance_._instance.get_mutable()->signed_orig_ = const_cast< ::fantasybit::SignedTransaction*>(
      ::fantasybit::SignedTransaction::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StampedTrans::kTimestampFieldNumber;
const int StampedTrans::kSeqnumFieldNumber;
const int StampedTrans::kPrevseqFieldNumber;
const int StampedTrans::kSignedOrigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StampedTrans::StampedTrans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsStampedTrans();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.StampedTrans)
}
StampedTrans::StampedTrans(const StampedTrans& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signed_orig()) {
    signed_orig_ = new ::fantasybit::SignedTransaction(*from.signed_orig_);
  } else {
    signed_orig_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevseq_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(prevseq_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.StampedTrans)
}

void StampedTrans::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&signed_orig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevseq_) -
      reinterpret_cast<char*>(&signed_orig_)) + sizeof(prevseq_));
}

StampedTrans::~StampedTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.StampedTrans)
  SharedDtor();
}

void StampedTrans::SharedDtor() {
  if (this != internal_default_instance()) delete signed_orig_;
}

void StampedTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StampedTrans::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StampedTrans& StampedTrans::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsStampedTrans();
  return *internal_default_instance();
}

StampedTrans* StampedTrans::New(::google::protobuf::Arena* arena) const {
  StampedTrans* n = new StampedTrans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StampedTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.StampedTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signed_orig_ != NULL);
    signed_orig_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prevseq_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(prevseq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StampedTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.StampedTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seqnum = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_seqnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prevseq = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_prevseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.SignedTransaction signed_orig = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signed_orig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.StampedTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.StampedTrans)
  return false;
#undef DO_
}

void StampedTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.StampedTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->timestamp(), output);
  }

  // optional int32 seqnum = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->seqnum(), output);
  }

  // optional int32 prevseq = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->prevseq(), output);
  }

  // optional .fantasybit.SignedTransaction signed_orig = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->signed_orig_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.StampedTrans)
}

::google::protobuf::uint8* StampedTrans::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.StampedTrans)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->timestamp(), target);
  }

  // optional int32 seqnum = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->seqnum(), target);
  }

  // optional int32 prevseq = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->prevseq(), target);
  }

  // optional .fantasybit.SignedTransaction signed_orig = 30;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->signed_orig_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.StampedTrans)
  return target;
}

size_t StampedTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.StampedTrans)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .fantasybit.SignedTransaction signed_orig = 30;
    if (has_signed_orig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->signed_orig_);
    }

    // optional uint64 timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional int32 seqnum = 20;
    if (has_seqnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

    // optional int32 prevseq = 21;
    if (has_prevseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevseq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StampedTrans::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.StampedTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const StampedTrans* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StampedTrans>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.StampedTrans)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.StampedTrans)
    MergeFrom(*source);
  }
}

void StampedTrans::MergeFrom(const StampedTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.StampedTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_signed_orig()->::fantasybit::SignedTransaction::MergeFrom(from.signed_orig());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      seqnum_ = from.seqnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      prevseq_ = from.prevseq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StampedTrans::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.StampedTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StampedTrans::CopyFrom(const StampedTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.StampedTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StampedTrans::IsInitialized() const {
  if (has_signed_orig()) {
    if (!this->signed_orig_->IsInitialized()) return false;
  }
  return true;
}

void StampedTrans::Swap(StampedTrans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StampedTrans::InternalSwap(StampedTrans* other) {
  using std::swap;
  swap(signed_orig_, other->signed_orig_);
  swap(timestamp_, other->timestamp_);
  swap(seqnum_, other->seqnum_);
  swap(prevseq_, other->prevseq_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StampedTrans::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExchangeOrder::InitAsDefaultInstance() {
  ::fantasybit::_ExchangeOrder_default_instance_._instance.get_mutable()->core_ = const_cast< ::fantasybit::OrderCore*>(
      ::fantasybit::OrderCore::internal_default_instance());
  ::fantasybit::_ExchangeOrder_default_instance_._instance.get_mutable()->futcontract_ = const_cast< ::fantasybit::FutContract*>(
      ::fantasybit::FutContract::internal_default_instance());
}
void ExchangeOrder::clear_core() {
  if (core_ != NULL) core_->Clear();
  clear_has_core();
}
void ExchangeOrder::clear_futcontract() {
  if (futcontract_ != NULL) futcontract_->Clear();
  clear_has_futcontract();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeOrder::kTypeFieldNumber;
const int ExchangeOrder::kPlayeridFieldNumber;
const int ExchangeOrder::kCoreFieldNumber;
const int ExchangeOrder::kCancelOrefFieldNumber;
const int ExchangeOrder::kFutcontractFieldNumber;
const int ExchangeOrder::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExchangeOrder::ExchangeOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsExchangeOrder();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ExchangeOrder)
}
ExchangeOrder::ExchangeOrder(const ExchangeOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.has_core()) {
    core_ = new ::fantasybit::OrderCore(*from.core_);
  } else {
    core_ = NULL;
  }
  if (from.has_futcontract()) {
    futcontract_ = new ::fantasybit::FutContract(*from.futcontract_);
  } else {
    futcontract_ = NULL;
  }
  ::memcpy(&cancel_oref_, &from.cancel_oref_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&cancel_oref_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ExchangeOrder)
}

void ExchangeOrder::SharedCtor() {
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&core_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_oref_) -
      reinterpret_cast<char*>(&core_)) + sizeof(cancel_oref_));
  type_ = 1;
}

ExchangeOrder::~ExchangeOrder() {
  // @@protoc_insertion_point(destructor:fantasybit.ExchangeOrder)
  SharedDtor();
}

void ExchangeOrder::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete core_;
  if (this != internal_default_instance()) delete futcontract_;
}

void ExchangeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeOrder::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExchangeOrder& ExchangeOrder::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsExchangeOrder();
  return *internal_default_instance();
}

ExchangeOrder* ExchangeOrder::New(::google::protobuf::Arena* arena) const {
  ExchangeOrder* n = new ExchangeOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExchangeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ExchangeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(core_ != NULL);
      core_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(futcontract_ != NULL);
      futcontract_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    cancel_oref_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExchangeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ExchangeOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.ExchangeOrder.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::ExchangeOrder_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::ExchangeOrder_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.ExchangeOrder.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.OrderCore core = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_core()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cancel_oref = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_cancel_oref();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_oref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.FutContract futcontract = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 882 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_futcontract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string symbol = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.ExchangeOrder.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((4000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ExchangeOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ExchangeOrder)
  return false;
#undef DO_
}

void ExchangeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ExchangeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ExchangeOrder.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string playerid = 40;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ExchangeOrder.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->playerid(), output);
  }

  // optional .fantasybit.OrderCore core = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->core_, output);
  }

  // optional int32 cancel_oref = 100;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->cancel_oref(), output);
  }

  // optional .fantasybit.FutContract futcontract = 110;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, *this->futcontract_, output);
  }

  // optional string symbol = 120;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ExchangeOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->symbol(), output);
  }

  // Extension range [500, 536870912)
  _extensions_.SerializeWithCachedSizes(
      500, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ExchangeOrder)
}

::google::protobuf::uint8* ExchangeOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ExchangeOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.ExchangeOrder.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string playerid = 40;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ExchangeOrder.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->playerid(), target);
  }

  // optional .fantasybit.OrderCore core = 50;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, *this->core_, deterministic, target);
  }

  // optional int32 cancel_oref = 100;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->cancel_oref(), target);
  }

  // optional .fantasybit.FutContract futcontract = 110;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        110, *this->futcontract_, deterministic, target);
  }

  // optional string symbol = 120;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ExchangeOrder.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->symbol(), target);
  }

  // Extension range [500, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      500, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ExchangeOrder)
  return target;
}

size_t ExchangeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ExchangeOrder)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string playerid = 40;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string symbol = 120;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .fantasybit.OrderCore core = 50;
    if (has_core()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->core_);
    }

    // optional .fantasybit.FutContract futcontract = 110;
    if (has_futcontract()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->futcontract_);
    }

    // optional int32 cancel_oref = 100;
    if (has_cancel_oref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel_oref());
    }

    // optional .fantasybit.ExchangeOrder.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ExchangeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ExchangeOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExchangeOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ExchangeOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ExchangeOrder)
    MergeFrom(*source);
  }
}

void ExchangeOrder::MergeFrom(const ExchangeOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ExchangeOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_core()->::fantasybit::OrderCore::MergeFrom(from.core());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_futcontract()->::fantasybit::FutContract::MergeFrom(from.futcontract());
    }
    if (cached_has_bits & 0x00000010u) {
      cancel_oref_ = from.cancel_oref_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExchangeOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ExchangeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeOrder::CopyFrom(const ExchangeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ExchangeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeOrder::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ExchangeOrder::Swap(ExchangeOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExchangeOrder::InternalSwap(ExchangeOrder* other) {
  using std::swap;
  playerid_.Swap(&other->playerid_);
  symbol_.Swap(&other->symbol_);
  swap(core_, other->core_);
  swap(futcontract_, other->futcontract_);
  swap(cancel_oref_, other->cancel_oref_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata ExchangeOrder::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderUnique::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderUnique::kPublicKeyFieldNumber;
const int OrderUnique::kSeasonFieldNumber;
const int OrderUnique::kWeekFieldNumber;
const int OrderUnique::kBuysideFieldNumber;
const int OrderUnique::kPlayeridFieldNumber;
const int OrderUnique::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderUnique::OrderUnique()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsOrderUnique();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.OrderUnique)
}
OrderUnique::OrderUnique(const OrderUnique& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&season_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderUnique)
}

void OrderUnique::SharedCtor() {
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&season_)) + sizeof(price_));
}

OrderUnique::~OrderUnique() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderUnique)
  SharedDtor();
}

void OrderUnique::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderUnique::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderUnique::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderUnique& OrderUnique::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsOrderUnique();
  return *internal_default_instance();
}

OrderUnique* OrderUnique::New(::google::protobuf::Arena* arena) const {
  OrderUnique* n = new OrderUnique;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&season_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.OrderUnique)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), static_cast<int>(this->public_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.OrderUnique.public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool buyside = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_buyside();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.OrderUnique.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.OrderUnique)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.OrderUnique)
  return false;
#undef DO_
}

void OrderUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.OrderUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string public_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderUnique.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->public_key(), output);
  }

  // optional uint32 season = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->season(), output);
  }

  // optional uint32 week = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->week(), output);
  }

  // optional bool buyside = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->buyside(), output);
  }

  // optional string playerid = 50;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderUnique.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->playerid(), output);
  }

  // optional int32 price = 70;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.OrderUnique)
}

::google::protobuf::uint8* OrderUnique::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string public_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderUnique.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->public_key(), target);
  }

  // optional uint32 season = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->season(), target);
  }

  // optional uint32 week = 30;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->week(), target);
  }

  // optional bool buyside = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->buyside(), target);
  }

  // optional string playerid = 50;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.OrderUnique.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->playerid(), target);
  }

  // optional int32 price = 70;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderUnique)
  return target;
}

size_t OrderUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderUnique)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string public_key = 10;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional string playerid = 50;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional uint32 season = 20;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 30;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional bool buyside = 40;
    if (has_buyside()) {
      total_size += 2 + 1;
    }

    // optional int32 price = 70;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderUnique::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderUnique* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderUnique>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderUnique)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderUnique)
    MergeFrom(*source);
  }
}

void OrderUnique::MergeFrom(const OrderUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000004u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000008u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000010u) {
      buyside_ = from.buyside_;
    }
    if (cached_has_bits & 0x00000020u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderUnique::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderUnique::CopyFrom(const OrderUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUnique::IsInitialized() const {
  return true;
}

void OrderUnique::Swap(OrderUnique* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderUnique::InternalSwap(OrderUnique* other) {
  using std::swap;
  public_key_.Swap(&other->public_key_);
  playerid_.Swap(&other->playerid_);
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(buyside_, other->buyside_);
  swap(price_, other->price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderUnique::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OrderDeets::InitAsDefaultInstance() {
  ::fantasybit::_OrderDeets_default_instance_._instance.get_mutable()->order_ = const_cast< ::fantasybit::OrderUnique*>(
      ::fantasybit::OrderUnique::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderDeets::kOidFieldNumber;
const int OrderDeets::kOrderFieldNumber;
const int OrderDeets::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderDeets::OrderDeets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsOrderDeets();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.OrderDeets)
}
OrderDeets::OrderDeets(const OrderDeets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oid()) {
    oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oid_);
  }
  if (from.has_order()) {
    order_ = new ::fantasybit::OrderUnique(*from.order_);
  } else {
    order_ = NULL;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.OrderDeets)
}

void OrderDeets::SharedCtor() {
  _cached_size_ = 0;
  oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&order_)) + sizeof(size_));
}

OrderDeets::~OrderDeets() {
  // @@protoc_insertion_point(destructor:fantasybit.OrderDeets)
  SharedDtor();
}

void OrderDeets::SharedDtor() {
  oid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void OrderDeets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderDeets::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OrderDeets& OrderDeets::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsOrderDeets();
  return *internal_default_instance();
}

OrderDeets* OrderDeets::New(::google::protobuf::Arena* arena) const {
  OrderDeets* n = new OrderDeets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderDeets::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.OrderDeets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!oid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(order_ != NULL);
      order_->Clear();
    }
  }
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OrderDeets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.OrderDeets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes oid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.OrderUnique order = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.OrderDeets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.OrderDeets)
  return false;
#undef DO_
}

void OrderDeets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.OrderDeets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes oid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->oid(), output);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->order_, output);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.OrderDeets)
}

::google::protobuf::uint8* OrderDeets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OrderDeets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes oid = 10;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->oid(), target);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->order_, deterministic, target);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OrderDeets)
  return target;
}

size_t OrderDeets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.OrderDeets)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes oid = 10;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oid());
    }

    // optional .fantasybit.OrderUnique order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->order_);
    }

    // optional int32 size = 30;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderDeets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.OrderDeets)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderDeets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderDeets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.OrderDeets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.OrderDeets)
    MergeFrom(*source);
  }
}

void OrderDeets::MergeFrom(const OrderDeets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.OrderDeets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_oid();
      oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_order()->::fantasybit::OrderUnique::MergeFrom(from.order());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrderDeets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.OrderDeets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDeets::CopyFrom(const OrderDeets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.OrderDeets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDeets::IsInitialized() const {
  return true;
}

void OrderDeets::Swap(OrderDeets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderDeets::InternalSwap(OrderDeets* other) {
  using std::swap;
  oid_.Swap(&other->oid_);
  swap(order_, other->order_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderDeets::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InsideUnique::InitAsDefaultInstance() {
  ::fantasybit::_InsideUnique_default_instance_._instance.get_mutable()->order_ = const_cast< ::fantasybit::OrderUnique*>(
      ::fantasybit::OrderUnique::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsideUnique::kPlayeridFieldNumber;
const int InsideUnique::kPublicKeyFieldNumber;
const int InsideUnique::kBuysideFieldNumber;
const int InsideUnique::kPriceFieldNumber;
const int InsideUnique::kOidFieldNumber;
const int InsideUnique::kOrderFieldNumber;
const int InsideUnique::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsideUnique::InsideUnique()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsInsideUnique();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.InsideUnique)
}
InsideUnique::InsideUnique(const InsideUnique& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oid()) {
    oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.has_order()) {
    order_ = new ::fantasybit::OrderUnique(*from.order_);
  } else {
    order_ = NULL;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&buyside_) -
    reinterpret_cast<char*>(&price_)) + sizeof(buyside_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.InsideUnique)
}

void InsideUnique::SharedCtor() {
  _cached_size_ = 0;
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buyside_) -
      reinterpret_cast<char*>(&order_)) + sizeof(buyside_));
}

InsideUnique::~InsideUnique() {
  // @@protoc_insertion_point(destructor:fantasybit.InsideUnique)
  SharedDtor();
}

void InsideUnique::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void InsideUnique::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsideUnique::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsideUnique& InsideUnique::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsInsideUnique();
  return *internal_default_instance();
}

InsideUnique* InsideUnique::New(::google::protobuf::Arena* arena) const {
  InsideUnique* n = new InsideUnique;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsideUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.InsideUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!oid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*oid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(order_ != NULL);
      order_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyside_) -
        reinterpret_cast<char*>(&price_)) + sizeof(buyside_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InsideUnique::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.InsideUnique)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), static_cast<int>(this->public_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.InsideUnique.public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes oid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.OrderUnique order = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool buyside = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_buyside();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.InsideUnique.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 price = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.InsideUnique)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.InsideUnique)
  return false;
#undef DO_
}

void InsideUnique::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.InsideUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string public_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InsideUnique.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->public_key(), output);
  }

  // optional bytes oid = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->oid(), output);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->order_, output);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->size(), output);
  }

  // optional bool buyside = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->buyside(), output);
  }

  // optional string playerid = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InsideUnique.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->playerid(), output);
  }

  // optional int32 price = 70;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.InsideUnique)
}

::google::protobuf::uint8* InsideUnique::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.InsideUnique)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string public_key = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InsideUnique.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->public_key(), target);
  }

  // optional bytes oid = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->oid(), target);
  }

  // optional .fantasybit.OrderUnique order = 20;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->order_, deterministic, target);
  }

  // optional int32 size = 30;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->size(), target);
  }

  // optional bool buyside = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->buyside(), target);
  }

  // optional string playerid = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InsideUnique.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->playerid(), target);
  }

  // optional int32 price = 70;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.InsideUnique)
  return target;
}

size_t InsideUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.InsideUnique)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string public_key = 10;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional bytes oid = 11;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oid());
    }

    // optional string playerid = 50;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.OrderUnique order = 20;
    if (has_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->order_);
    }

    // optional int32 price = 70;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 size = 30;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bool buyside = 40;
    if (has_buyside()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsideUnique::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.InsideUnique)
  GOOGLE_DCHECK_NE(&from, this);
  const InsideUnique* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsideUnique>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.InsideUnique)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.InsideUnique)
    MergeFrom(*source);
  }
}

void InsideUnique::MergeFrom(const InsideUnique& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.InsideUnique)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_oid();
      oid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_order()->::fantasybit::OrderUnique::MergeFrom(from.order());
    }
    if (cached_has_bits & 0x00000010u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      buyside_ = from.buyside_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsideUnique::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.InsideUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsideUnique::CopyFrom(const InsideUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.InsideUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsideUnique::IsInitialized() const {
  return true;
}

void InsideUnique::Swap(InsideUnique* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsideUnique::InternalSwap(InsideUnique* other) {
  using std::swap;
  public_key_.Swap(&other->public_key_);
  oid_.Swap(&other->oid_);
  playerid_.Swap(&other->playerid_);
  swap(order_, other->order_);
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(buyside_, other->buyside_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsideUnique::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeTransition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeTransition::kTypeFieldNumber;
const int TimeTransition::kSeasonFieldNumber;
const int TimeTransition::kWeekFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeTransition::TimeTransition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ProtoData_2eproto::InitDefaultsTimeTransition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TimeTransition)
}
TimeTransition::TimeTransition(const TimeTransition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&season_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.TimeTransition)
}

void TimeTransition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&season_)) + sizeof(week_));
  type_ = 2;
}

TimeTransition::~TimeTransition() {
  // @@protoc_insertion_point(destructor:fantasybit.TimeTransition)
  SharedDtor();
}

void TimeTransition::SharedDtor() {
}

void TimeTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeTransition::descriptor() {
  ::protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeTransition& TimeTransition::default_instance() {
  ::protobuf_ProtoData_2eproto::InitDefaultsTimeTransition();
  return *internal_default_instance();
}

TimeTransition* TimeTransition::New(::google::protobuf::Arena* arena) const {
  TimeTransition* n = new TimeTransition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.TimeTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&week_) -
        reinterpret_cast<char*>(&season_)) + sizeof(week_));
    type_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TimeTransition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TimeTransition.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TimeTransition_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TimeTransition_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TimeTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TimeTransition)
  return false;
#undef DO_
}

void TimeTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TimeTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TimeTransition.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TimeTransition)
}

::google::protobuf::uint8* TimeTransition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TimeTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.TimeTransition.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 season = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TimeTransition)
  return target;
}

size_t TimeTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.TimeTransition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional .fantasybit.TimeTransition.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeTransition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.TimeTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeTransition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeTransition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.TimeTransition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.TimeTransition)
    MergeFrom(*source);
  }
}

void TimeTransition::MergeFrom(const TimeTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.TimeTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      week_ = from.week_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeTransition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.TimeTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTransition::CopyFrom(const TimeTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.TimeTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTransition::IsInitialized() const {
  return true;
}

void TimeTransition::Swap(TimeTransition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeTransition::InternalSwap(TimeTransition* other) {
  using std::swap;
  swap(season_, other->season_);
  swap(week_, other->week_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeTransition::GetMetadata() const {
  protobuf_ProtoData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ProtoData_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TweetProof::kTweetProofFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
  TweetProof::tweet_proof(kTweetProofFieldNumber, *::fantasybit::TweetProof::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterProof::kMasterProofFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MasterProof >, 11, false >
  MasterProof::master_proof(kMasterProofFieldNumber, *::fantasybit::MasterProof::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameTrans::kNameTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
  NameTrans::name_trans(kNameTransFieldNumber, *::fantasybit::NameTrans::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferTrans::kTransferTranFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TransferTrans >, 11, false >
  TransferTrans::transfer_tran(kTransferTranFieldNumber, *::fantasybit::TransferTrans::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionTrans::kProjTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
  ProjectionTrans::proj_trans(kProjTransFieldNumber, *::fantasybit::ProjectionTrans::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectionTransBlock::kProjTransBlockFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTransBlock >, 11, false >
  ProjectionTransBlock::proj_trans_block(kProjTransBlockFieldNumber, *::fantasybit::ProjectionTransBlock::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerData::kPlayerDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
  PlayerData::player_data(kPlayerDataFieldNumber, *::fantasybit::PlayerData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameData::kGameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GameData >, 11, false >
  GameData::game_data(kGameDataFieldNumber, *::fantasybit::GameData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResultData::kResultDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
  ResultData::result_data(kResultDataFieldNumber, *::fantasybit::ResultData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScheduleData::kScheduleDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ScheduleData >, 11, false >
  ScheduleData::schedule_data(kScheduleDataFieldNumber, *::fantasybit::ScheduleData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTransition::kDataTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
  DataTransition::data_trans(kDataTransFieldNumber, *::fantasybit::DataTransition::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageData::kMessageDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MessageData >, 11, false >
  MessageData::message_data(kMessageDataFieldNumber, *::fantasybit::MessageData::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StampedTrans::kStampedTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::StampedTrans >, 11, false >
  StampedTrans::stamped_trans(kStampedTransFieldNumber, *::fantasybit::StampedTrans::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExchangeOrder::kExchangeOrderFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ExchangeOrder >, 11, false >
  ExchangeOrder::exchange_order(kExchangeOrderFieldNumber, *::fantasybit::ExchangeOrder::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeTransition::kTimeTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TimeTransition >, 11, false >
  TimeTransition::time_trans(kTimeTransFieldNumber, *::fantasybit::TimeTransition::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
