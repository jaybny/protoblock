// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StaticData.proto

#include "StaticData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fantasybit {
class PlayerBaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerBase>
      _instance;
} _PlayerBase_default_instance_;
class GameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInfo>
      _instance;
} _GameInfo_default_instance_;
class WeeklyScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WeeklySchedule>
      _instance;
} _WeeklySchedule_default_instance_;
class KstatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Kstats>
      _instance;
} _Kstats_default_instance_;
class DstatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dstats>
      _instance;
} _Dstats_default_instance_;
class OstatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ostats>
      _instance;
} _Ostats_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stats>
      _instance;
} _Stats_default_instance_;
class PlayerResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerResult>
      _instance;
} _PlayerResult_default_instance_;
class GameResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameResult>
      _instance;
} _GameResult_default_instance_;
class SeasonResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeasonResult>
      _instance;
} _SeasonResult_default_instance_;
class PlayerContractSymbolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerContractSymbol>
      _instance;
} _PlayerContractSymbol_default_instance_;
}  // namespace fantasybit
namespace protobuf_StaticData_2eproto {
void InitDefaultsPlayerBaseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_PlayerBase_default_instance_;
    new (ptr) ::fantasybit::PlayerBase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerBase::InitAsDefaultInstance();
}

void InitDefaultsPlayerBase() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerBaseImpl);
}

void InitDefaultsGameInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_GameInfo_default_instance_;
    new (ptr) ::fantasybit::GameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameInfo::InitAsDefaultInstance();
}

void InitDefaultsGameInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameInfoImpl);
}

void InitDefaultsWeeklyScheduleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsGameInfo();
  {
    void* ptr = &::fantasybit::_WeeklySchedule_default_instance_;
    new (ptr) ::fantasybit::WeeklySchedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WeeklySchedule::InitAsDefaultInstance();
}

void InitDefaultsWeeklySchedule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWeeklyScheduleImpl);
}

void InitDefaultsKstatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Kstats_default_instance_;
    new (ptr) ::fantasybit::Kstats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Kstats::InitAsDefaultInstance();
}

void InitDefaultsKstats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKstatsImpl);
}

void InitDefaultsDstatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Dstats_default_instance_;
    new (ptr) ::fantasybit::Dstats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Dstats::InitAsDefaultInstance();
}

void InitDefaultsDstats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDstatsImpl);
}

void InitDefaultsOstatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Ostats_default_instance_;
    new (ptr) ::fantasybit::Ostats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Ostats::InitAsDefaultInstance();
}

void InitDefaultsOstats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOstatsImpl);
}

void InitDefaultsStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsOstats();
  protobuf_StaticData_2eproto::InitDefaultsDstats();
  protobuf_StaticData_2eproto::InitDefaultsKstats();
  {
    void* ptr = &::fantasybit::_Stats_default_instance_;
    new (ptr) ::fantasybit::Stats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Stats::InitAsDefaultInstance();
}

void InitDefaultsStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStatsImpl);
}

void InitDefaultsPlayerResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsStats();
  protobuf_NameData_2eproto::InitDefaultsFantasyBitAward();
  protobuf_NameData_2eproto::InitDefaultsFantasyBitPnl();
  {
    void* ptr = &::fantasybit::_PlayerResult_default_instance_;
    new (ptr) ::fantasybit::PlayerResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerResult::InitAsDefaultInstance();
}

void InitDefaultsPlayerResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerResultImpl);
}

void InitDefaultsGameResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsPlayerResult();
  {
    void* ptr = &::fantasybit::_GameResult_default_instance_;
    new (ptr) ::fantasybit::GameResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameResult::InitAsDefaultInstance();
}

void InitDefaultsGameResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameResultImpl);
}

void InitDefaultsSeasonResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_StaticData_2eproto::InitDefaultsPlayerResult();
  {
    void* ptr = &::fantasybit::_SeasonResult_default_instance_;
    new (ptr) ::fantasybit::SeasonResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SeasonResult::InitAsDefaultInstance();
}

void InitDefaultsSeasonResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSeasonResultImpl);
}

void InitDefaultsPlayerContractSymbolImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_PlayerContractSymbol_default_instance_;
    new (ptr) ::fantasybit::PlayerContractSymbol();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PlayerContractSymbol::InitAsDefaultInstance();
}

void InitDefaultsPlayerContractSymbol() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlayerContractSymbolImpl);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerBase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerBase, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerBase, last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerBase, position_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameInfo, home_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameInfo, away_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameInfo, time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WeeklySchedule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WeeklySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WeeklySchedule, games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WeeklySchedule, byes_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Kstats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Kstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Kstats, pa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Kstats, fg_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, twopt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, onept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, deftd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, sfty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, turnovers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, sacks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Dstats, ptsa_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, passyds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, passtd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, rushyds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, rushtd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, recyds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, rectd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, rec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, pint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, fumble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, twopt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Ostats, onept_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Stats, ostats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Stats, dstats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Stats, kstats_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, fantaybitaward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, fantasybitpnl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, rowposdividend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerResult, symbol_),
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, home_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, away_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, kickofftime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, hometotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameResult, awaytotal_),
  0,
  ~0u,
  ~0u,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SeasonResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SeasonResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SeasonResult, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SeasonResult, player_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SeasonResult, total_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, sybhash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, initals2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, seq2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, year2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, type1sorw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PlayerContractSymbol, week1or04s_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::fantasybit::PlayerBase)},
  { 11, 20, sizeof(::fantasybit::GameInfo)},
  { 24, 31, sizeof(::fantasybit::WeeklySchedule)},
  { 33, 40, sizeof(::fantasybit::Kstats)},
  { 42, 54, sizeof(::fantasybit::Dstats)},
  { 61, 77, sizeof(::fantasybit::Ostats)},
  { 88, 96, sizeof(::fantasybit::Stats)},
  { 99, 111, sizeof(::fantasybit::PlayerResult)},
  { 118, 129, sizeof(::fantasybit::GameResult)},
  { 135, 143, sizeof(::fantasybit::SeasonResult)},
  { 146, 159, sizeof(::fantasybit::PlayerContractSymbol)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_PlayerBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_GameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_WeeklySchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Kstats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Dstats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Ostats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_PlayerResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_GameResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_SeasonResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_PlayerContractSymbol_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "StaticData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020StaticData.proto\022\nfantasybit\032\016NameData"
      ".proto\";\n\nPlayerBase\022\r\n\005first\030\036 \001(\t\022\014\n\004l"
      "ast\030( \001(\t\022\020\n\010position\0302 \001(\t\"@\n\010GameInfo\022"
      "\n\n\002id\030\n \001(\t\022\014\n\004home\030\024 \001(\t\022\014\n\004away\030\036 \001(\t\022"
      "\014\n\004time\030( \001(\r\"C\n\016WeeklySchedule\022#\n\005games"
      "\030\n \003(\0132\024.fantasybit.GameInfo\022\014\n\004byes\030\024 \003"
      "(\t\" \n\006Kstats\022\n\n\002pa\030\n \001(\005\022\n\n\002fg\030\024 \003(\005\"w\n\006"
      "Dstats\022\r\n\005twopt\030d \001(\005\022\r\n\005onept\030n \001(\005\022\r\n\005"
      "deftd\030x \001(\005\022\r\n\004sfty\030\202\001 \001(\005\022\022\n\tturnovers\030"
      "\214\001 \001(\005\022\016\n\005sacks\030\226\001 \001(\005\022\r\n\004ptsa\030\240\001 \001(\005\"\262\001"
      "\n\006Ostats\022\017\n\007passyds\030\n \001(\005\022\016\n\006passtd\030\024 \001("
      "\005\022\017\n\007rushyds\030\036 \001(\005\022\016\n\006rushtd\030( \001(\005\022\016\n\006re"
      "cyds\0302 \001(\005\022\r\n\005rectd\030< \001(\005\022\013\n\003rec\030F \001(\005\022\014"
      "\n\004pint\030P \001(\005\022\016\n\006fumble\030Z \001(\005\022\r\n\005twopt\030d "
      "\001(\005\022\r\n\005onept\030n \001(\005\"s\n\005Stats\022\"\n\006ostats\030\n "
      "\001(\0132\022.fantasybit.Ostats\022\"\n\006dstats\030\024 \001(\0132"
      "\022.fantasybit.Dstats\022\"\n\006kstats\030\036 \001(\0132\022.fa"
      "ntasybit.Kstats\"\374\001\n\014PlayerResult\022\020\n\010play"
      "erid\030\024 \001(\t\022\016\n\006result\030( \001(\002\022 \n\005stats\0302 \001("
      "\0132\021.fantasybit.Stats\0223\n\016fantaybitaward\030<"
      " \003(\0132\033.fantasybit.FantasyBitAward\0220\n\rfan"
      "tasybitpnl\030F \003(\0132\031.fantasybit.FantasyBit"
      "Pnl\0221\n\016rowposdividend\030P \003(\0132\031.fantasybit"
      ".FantasyBitPnl\022\016\n\006symbol\030Z \001(\t\"\265\001\n\nGameR"
      "esult\022\016\n\006gameid\030\001 \001(\t\022-\n\013home_result\030\n \003"
      "(\0132\030.fantasybit.PlayerResult\022-\n\013away_res"
      "ult\030\024 \003(\0132\030.fantasybit.PlayerResult\022\023\n\013k"
      "ickofftime\030\036 \001(\r\022\021\n\thomeTotal\030( \001(\002\022\021\n\ta"
      "wayTotal\0302 \001(\002\"_\n\014SeasonResult\022\016\n\006season"
      "\030\001 \001(\004\0220\n\016player_results\030\n \003(\0132\030.fantasy"
      "bit.PlayerResult\022\r\n\005total\030\024 \001(\002\"\237\001\n\024Play"
      "erContractSymbol\022\016\n\006symbol\030\n \001(\t\022\020\n\010play"
      "erid\030\024 \001(\t\022\017\n\007sybhash\030\036 \001(\004\022\020\n\010initals2\030"
      "( \001(\t\022\014\n\004seq2\0302 \001(\t\022\r\n\005year2\030< \001(\t\022\021\n\tty"
      "pe1sorw\030F \001(\t\022\022\n\nweek1or04s\030P \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StaticData.proto", &protobuf_RegisterTypes);
  ::protobuf_NameData_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_StaticData_2eproto
namespace fantasybit {

// ===================================================================

void PlayerBase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerBase::kFirstFieldNumber;
const int PlayerBase::kLastFieldNumber;
const int PlayerBase::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerBase::PlayerBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsPlayerBase();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerBase)
}
PlayerBase::PlayerBase(const PlayerBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first()) {
    first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
  }
  last_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last()) {
    last_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_);
  }
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_position()) {
    position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerBase)
}

void PlayerBase::SharedCtor() {
  _cached_size_ = 0;
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PlayerBase::~PlayerBase() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerBase)
  SharedDtor();
}

void PlayerBase::SharedDtor() {
  first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBase::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerBase& PlayerBase::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsPlayerBase();
  return *internal_default_instance();
}

PlayerBase* PlayerBase::New(::google::protobuf::Arena* arena) const {
  PlayerBase* n = new PlayerBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerBase::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!first_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*first_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!last_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!position_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*position_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first().data(), static_cast<int>(this->first().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerBase.first");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last().data(), static_cast<int>(this->last().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerBase.last");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string position = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), static_cast<int>(this->position().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerBase.position");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerBase)
  return false;
#undef DO_
}

void PlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string first = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first().data(), static_cast<int>(this->first().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.first");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->first(), output);
  }

  // optional string last = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last().data(), static_cast<int>(this->last().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.last");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->last(), output);
  }

  // optional string position = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), static_cast<int>(this->position().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerBase)
}

::google::protobuf::uint8* PlayerBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string first = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first().data(), static_cast<int>(this->first().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.first");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->first(), target);
  }

  // optional string last = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last().data(), static_cast<int>(this->last().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.last");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->last(), target);
  }

  // optional string position = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), static_cast<int>(this->position().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerBase)
  return target;
}

size_t PlayerBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string first = 30;
    if (has_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first());
    }

    // optional string last = 40;
    if (has_last()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last());
    }

    // optional string position = 50;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerBase)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerBase)
    MergeFrom(*source);
  }
}

void PlayerBase::MergeFrom(const PlayerBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_first();
      first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_last();
      last_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_position();
      position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
    }
  }
}

void PlayerBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBase::CopyFrom(const PlayerBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBase::IsInitialized() const {
  return true;
}

void PlayerBase::Swap(PlayerBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerBase::InternalSwap(PlayerBase* other) {
  using std::swap;
  first_.Swap(&other->first_);
  last_.Swap(&other->last_);
  position_.Swap(&other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerBase::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kIdFieldNumber;
const int GameInfo::kHomeFieldNumber;
const int GameInfo::kAwayFieldNumber;
const int GameInfo::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsGameInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  home_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_home()) {
    home_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_);
  }
  away_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_away()) {
    away_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.away_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameInfo)
}

void GameInfo::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  away_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:fantasybit.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  away_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInfo& GameInfo::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsGameInfo();
  return *internal_default_instance();
}

GameInfo* GameInfo::New(::google::protobuf::Arena* arena) const {
  GameInfo* n = new GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!home_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*home_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!away_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*away_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameInfo.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string home = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->home().data(), static_cast<int>(this->home().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameInfo.home");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string away = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_away()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->away().data(), static_cast<int>(this->away().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameInfo.away");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->id(), output);
  }

  // optional string home = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home().data(), static_cast<int>(this->home().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.home");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->home(), output);
  }

  // optional string away = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->away().data(), static_cast<int>(this->away().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.away");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->away(), output);
  }

  // optional uint32 time = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->id(), target);
  }

  // optional string home = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home().data(), static_cast<int>(this->home().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.home");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->home(), target);
  }

  // optional string away = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->away().data(), static_cast<int>(this->away().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.away");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->away(), target);
  }

  // optional uint32 time = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string home = 20;
    if (has_home()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home());
    }

    // optional string away = 30;
    if (has_away()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->away());
    }

    // optional uint32 time = 40;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_home();
      home_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_away();
      away_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.away_);
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  home_.Swap(&other->home_);
  away_.Swap(&other->away_);
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WeeklySchedule::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeeklySchedule::kGamesFieldNumber;
const int WeeklySchedule::kByesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeeklySchedule::WeeklySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsWeeklySchedule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.WeeklySchedule)
}
WeeklySchedule::WeeklySchedule(const WeeklySchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      games_(from.games_),
      byes_(from.byes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fantasybit.WeeklySchedule)
}

void WeeklySchedule::SharedCtor() {
  _cached_size_ = 0;
}

WeeklySchedule::~WeeklySchedule() {
  // @@protoc_insertion_point(destructor:fantasybit.WeeklySchedule)
  SharedDtor();
}

void WeeklySchedule::SharedDtor() {
}

void WeeklySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeeklySchedule::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeeklySchedule& WeeklySchedule::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsWeeklySchedule();
  return *internal_default_instance();
}

WeeklySchedule* WeeklySchedule::New(::google::protobuf::Arena* arena) const {
  WeeklySchedule* n = new WeeklySchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeeklySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WeeklySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  byes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeeklySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.WeeklySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fantasybit.GameInfo games = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string byes = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_byes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->byes(this->byes_size() - 1).data(),
            static_cast<int>(this->byes(this->byes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.WeeklySchedule.byes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.WeeklySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.WeeklySchedule)
  return false;
#undef DO_
}

void WeeklySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.WeeklySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fantasybit.GameInfo games = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->games(static_cast<int>(i)), output);
  }

  // repeated string byes = 20;
  for (int i = 0, n = this->byes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->byes(i).data(), static_cast<int>(this->byes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.WeeklySchedule.byes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->byes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.WeeklySchedule)
}

::google::protobuf::uint8* WeeklySchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WeeklySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fantasybit.GameInfo games = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->games(static_cast<int>(i)), deterministic, target);
  }

  // repeated string byes = 20;
  for (int i = 0, n = this->byes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->byes(i).data(), static_cast<int>(this->byes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.WeeklySchedule.byes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->byes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WeeklySchedule)
  return target;
}

size_t WeeklySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WeeklySchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.GameInfo games = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  // repeated string byes = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->byes_size());
  for (int i = 0, n = this->byes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->byes(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeeklySchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WeeklySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const WeeklySchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeeklySchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WeeklySchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WeeklySchedule)
    MergeFrom(*source);
  }
}

void WeeklySchedule::MergeFrom(const WeeklySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WeeklySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
  byes_.MergeFrom(from.byes_);
}

void WeeklySchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WeeklySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeeklySchedule::CopyFrom(const WeeklySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WeeklySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklySchedule::IsInitialized() const {
  return true;
}

void WeeklySchedule::Swap(WeeklySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeeklySchedule::InternalSwap(WeeklySchedule* other) {
  using std::swap;
  games_.InternalSwap(&other->games_);
  byes_.InternalSwap(&other->byes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeeklySchedule::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Kstats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Kstats::kPaFieldNumber;
const int Kstats::kFgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Kstats::Kstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsKstats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Kstats)
}
Kstats::Kstats(const Kstats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fg_(from.fg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pa_ = from.pa_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.Kstats)
}

void Kstats::SharedCtor() {
  _cached_size_ = 0;
  pa_ = 0;
}

Kstats::~Kstats() {
  // @@protoc_insertion_point(destructor:fantasybit.Kstats)
  SharedDtor();
}

void Kstats::SharedDtor() {
}

void Kstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kstats::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Kstats& Kstats::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsKstats();
  return *internal_default_instance();
}

Kstats* Kstats::New(::google::protobuf::Arena* arena) const {
  Kstats* n = new Kstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Kstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Kstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fg_.Clear();
  pa_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Kstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Kstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pa = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fg = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160u, input, this->mutable_fg())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fg())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Kstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Kstats)
  return false;
#undef DO_
}

void Kstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Kstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pa = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pa(), output);
  }

  // repeated int32 fg = 20;
  for (int i = 0, n = this->fg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->fg(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Kstats)
}

::google::protobuf::uint8* Kstats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Kstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pa = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pa(), target);
  }

  // repeated int32 fg = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(20, this->fg_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Kstats)
  return target;
}

size_t Kstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Kstats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 fg = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fg_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->fg_size());
    total_size += data_size;
  }

  // optional int32 pa = 10;
  if (has_pa()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pa());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kstats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Kstats)
  GOOGLE_DCHECK_NE(&from, this);
  const Kstats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Kstats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Kstats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Kstats)
    MergeFrom(*source);
  }
}

void Kstats::MergeFrom(const Kstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Kstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fg_.MergeFrom(from.fg_);
  if (from.has_pa()) {
    set_pa(from.pa());
  }
}

void Kstats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Kstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kstats::CopyFrom(const Kstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Kstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kstats::IsInitialized() const {
  return true;
}

void Kstats::Swap(Kstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kstats::InternalSwap(Kstats* other) {
  using std::swap;
  fg_.InternalSwap(&other->fg_);
  swap(pa_, other->pa_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Kstats::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Dstats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dstats::kTwoptFieldNumber;
const int Dstats::kOneptFieldNumber;
const int Dstats::kDeftdFieldNumber;
const int Dstats::kSftyFieldNumber;
const int Dstats::kTurnoversFieldNumber;
const int Dstats::kSacksFieldNumber;
const int Dstats::kPtsaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dstats::Dstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsDstats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Dstats)
}
Dstats::Dstats(const Dstats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ptsa_, &from.ptsa_,
    static_cast<size_t>(reinterpret_cast<char*>(&sacks_) -
    reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Dstats)
}

void Dstats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ptsa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sacks_) -
      reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
}

Dstats::~Dstats() {
  // @@protoc_insertion_point(destructor:fantasybit.Dstats)
  SharedDtor();
}

void Dstats::SharedDtor() {
}

void Dstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dstats::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dstats& Dstats::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsDstats();
  return *internal_default_instance();
}

Dstats* Dstats::New(::google::protobuf::Arena* arena) const {
  Dstats* n = new Dstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dstats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Dstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&ptsa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sacks_) -
        reinterpret_cast<char*>(&ptsa_)) + sizeof(sacks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Dstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 twopt = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_twopt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twopt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 onept = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {
          set_has_onept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deftd = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 960 & 0xFF */)) {
          set_has_deftd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deftd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sfty = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 1040 & 0xFF */)) {
          set_has_sfty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sfty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 turnovers = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 1120 & 0xFF */)) {
          set_has_turnovers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnovers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sacks = 150;
      case 150: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 1200 & 0xFF */)) {
          set_has_sacks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sacks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ptsa = 160;
      case 160: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 1280 & 0xFF */)) {
          set_has_ptsa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptsa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Dstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Dstats)
  return false;
#undef DO_
}

void Dstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Dstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 twopt = 100;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->twopt(), output);
  }

  // optional int32 onept = 110;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->onept(), output);
  }

  // optional int32 deftd = 120;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->deftd(), output);
  }

  // optional int32 sfty = 130;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(130, this->sfty(), output);
  }

  // optional int32 turnovers = 140;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(140, this->turnovers(), output);
  }

  // optional int32 sacks = 150;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(150, this->sacks(), output);
  }

  // optional int32 ptsa = 160;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(160, this->ptsa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Dstats)
}

::google::protobuf::uint8* Dstats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Dstats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 twopt = 100;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->twopt(), target);
  }

  // optional int32 onept = 110;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->onept(), target);
  }

  // optional int32 deftd = 120;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->deftd(), target);
  }

  // optional int32 sfty = 130;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(130, this->sfty(), target);
  }

  // optional int32 turnovers = 140;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(140, this->turnovers(), target);
  }

  // optional int32 sacks = 150;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(150, this->sacks(), target);
  }

  // optional int32 ptsa = 160;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(160, this->ptsa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Dstats)
  return target;
}

size_t Dstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Dstats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 ptsa = 160;
    if (has_ptsa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptsa());
    }

    // optional int32 twopt = 100;
    if (has_twopt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twopt());
    }

    // optional int32 onept = 110;
    if (has_onept()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onept());
    }

    // optional int32 deftd = 120;
    if (has_deftd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deftd());
    }

    // optional int32 sfty = 130;
    if (has_sfty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sfty());
    }

    // optional int32 turnovers = 140;
    if (has_turnovers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnovers());
    }

    // optional int32 sacks = 150;
    if (has_sacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sacks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dstats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Dstats)
  GOOGLE_DCHECK_NE(&from, this);
  const Dstats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dstats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Dstats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Dstats)
    MergeFrom(*source);
  }
}

void Dstats::MergeFrom(const Dstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Dstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      ptsa_ = from.ptsa_;
    }
    if (cached_has_bits & 0x00000002u) {
      twopt_ = from.twopt_;
    }
    if (cached_has_bits & 0x00000004u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000008u) {
      deftd_ = from.deftd_;
    }
    if (cached_has_bits & 0x00000010u) {
      sfty_ = from.sfty_;
    }
    if (cached_has_bits & 0x00000020u) {
      turnovers_ = from.turnovers_;
    }
    if (cached_has_bits & 0x00000040u) {
      sacks_ = from.sacks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dstats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Dstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dstats::CopyFrom(const Dstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Dstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dstats::IsInitialized() const {
  return true;
}

void Dstats::Swap(Dstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dstats::InternalSwap(Dstats* other) {
  using std::swap;
  swap(ptsa_, other->ptsa_);
  swap(twopt_, other->twopt_);
  swap(onept_, other->onept_);
  swap(deftd_, other->deftd_);
  swap(sfty_, other->sfty_);
  swap(turnovers_, other->turnovers_);
  swap(sacks_, other->sacks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dstats::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ostats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ostats::kPassydsFieldNumber;
const int Ostats::kPasstdFieldNumber;
const int Ostats::kRushydsFieldNumber;
const int Ostats::kRushtdFieldNumber;
const int Ostats::kRecydsFieldNumber;
const int Ostats::kRectdFieldNumber;
const int Ostats::kRecFieldNumber;
const int Ostats::kPintFieldNumber;
const int Ostats::kFumbleFieldNumber;
const int Ostats::kTwoptFieldNumber;
const int Ostats::kOneptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ostats::Ostats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsOstats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Ostats)
}
Ostats::Ostats(const Ostats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&onept_, &from.onept_,
    static_cast<size_t>(reinterpret_cast<char*>(&twopt_) -
    reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Ostats)
}

void Ostats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&onept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twopt_) -
      reinterpret_cast<char*>(&onept_)) + sizeof(twopt_));
}

Ostats::~Ostats() {
  // @@protoc_insertion_point(destructor:fantasybit.Ostats)
  SharedDtor();
}

void Ostats::SharedDtor() {
}

void Ostats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ostats::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ostats& Ostats::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsOstats();
  return *internal_default_instance();
}

Ostats* Ostats::New(::google::protobuf::Arena* arena) const {
  Ostats* n = new Ostats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ostats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Ostats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&onept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rec_) -
        reinterpret_cast<char*>(&onept_)) + sizeof(rec_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&pint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&twopt_) -
        reinterpret_cast<char*>(&pint_)) + sizeof(twopt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ostats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Ostats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 passyds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_passyds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passyds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passtd = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_passtd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rushyds = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_rushyds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rushyds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rushtd = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_rushtd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rushtd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 recyds = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_recyds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recyds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rectd = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_rectd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rectd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rec = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_rec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pint = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {
          set_has_pint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fumble = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {
          set_has_fumble();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fumble_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 twopt = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_twopt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twopt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 onept = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 880 & 0xFF */)) {
          set_has_onept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Ostats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Ostats)
  return false;
#undef DO_
}

void Ostats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Ostats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 passyds = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->passyds(), output);
  }

  // optional int32 passtd = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->passtd(), output);
  }

  // optional int32 rushyds = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rushyds(), output);
  }

  // optional int32 rushtd = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rushtd(), output);
  }

  // optional int32 recyds = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->recyds(), output);
  }

  // optional int32 rectd = 60;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rectd(), output);
  }

  // optional int32 rec = 70;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->rec(), output);
  }

  // optional int32 pint = 80;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->pint(), output);
  }

  // optional int32 fumble = 90;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->fumble(), output);
  }

  // optional int32 twopt = 100;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->twopt(), output);
  }

  // optional int32 onept = 110;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->onept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Ostats)
}

::google::protobuf::uint8* Ostats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Ostats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 passyds = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->passyds(), target);
  }

  // optional int32 passtd = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->passtd(), target);
  }

  // optional int32 rushyds = 30;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rushyds(), target);
  }

  // optional int32 rushtd = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rushtd(), target);
  }

  // optional int32 recyds = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->recyds(), target);
  }

  // optional int32 rectd = 60;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rectd(), target);
  }

  // optional int32 rec = 70;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->rec(), target);
  }

  // optional int32 pint = 80;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->pint(), target);
  }

  // optional int32 fumble = 90;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->fumble(), target);
  }

  // optional int32 twopt = 100;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->twopt(), target);
  }

  // optional int32 onept = 110;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->onept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Ostats)
  return target;
}

size_t Ostats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Ostats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 onept = 110;
    if (has_onept()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onept());
    }

    // optional int32 passyds = 10;
    if (has_passyds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passyds());
    }

    // optional int32 passtd = 20;
    if (has_passtd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtd());
    }

    // optional int32 rushyds = 30;
    if (has_rushyds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rushyds());
    }

    // optional int32 rushtd = 40;
    if (has_rushtd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rushtd());
    }

    // optional int32 recyds = 50;
    if (has_recyds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recyds());
    }

    // optional int32 rectd = 60;
    if (has_rectd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rectd());
    }

    // optional int32 rec = 70;
    if (has_rec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 pint = 80;
    if (has_pint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pint());
    }

    // optional int32 fumble = 90;
    if (has_fumble()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fumble());
    }

    // optional int32 twopt = 100;
    if (has_twopt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twopt());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ostats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Ostats)
  GOOGLE_DCHECK_NE(&from, this);
  const Ostats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ostats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Ostats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Ostats)
    MergeFrom(*source);
  }
}

void Ostats::MergeFrom(const Ostats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Ostats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      onept_ = from.onept_;
    }
    if (cached_has_bits & 0x00000002u) {
      passyds_ = from.passyds_;
    }
    if (cached_has_bits & 0x00000004u) {
      passtd_ = from.passtd_;
    }
    if (cached_has_bits & 0x00000008u) {
      rushyds_ = from.rushyds_;
    }
    if (cached_has_bits & 0x00000010u) {
      rushtd_ = from.rushtd_;
    }
    if (cached_has_bits & 0x00000020u) {
      recyds_ = from.recyds_;
    }
    if (cached_has_bits & 0x00000040u) {
      rectd_ = from.rectd_;
    }
    if (cached_has_bits & 0x00000080u) {
      rec_ = from.rec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      pint_ = from.pint_;
    }
    if (cached_has_bits & 0x00000200u) {
      fumble_ = from.fumble_;
    }
    if (cached_has_bits & 0x00000400u) {
      twopt_ = from.twopt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ostats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Ostats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ostats::CopyFrom(const Ostats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Ostats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ostats::IsInitialized() const {
  return true;
}

void Ostats::Swap(Ostats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ostats::InternalSwap(Ostats* other) {
  using std::swap;
  swap(onept_, other->onept_);
  swap(passyds_, other->passyds_);
  swap(passtd_, other->passtd_);
  swap(rushyds_, other->rushyds_);
  swap(rushtd_, other->rushtd_);
  swap(recyds_, other->recyds_);
  swap(rectd_, other->rectd_);
  swap(rec_, other->rec_);
  swap(pint_, other->pint_);
  swap(fumble_, other->fumble_);
  swap(twopt_, other->twopt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ostats::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
  ::fantasybit::_Stats_default_instance_._instance.get_mutable()->ostats_ = const_cast< ::fantasybit::Ostats*>(
      ::fantasybit::Ostats::internal_default_instance());
  ::fantasybit::_Stats_default_instance_._instance.get_mutable()->dstats_ = const_cast< ::fantasybit::Dstats*>(
      ::fantasybit::Dstats::internal_default_instance());
  ::fantasybit::_Stats_default_instance_._instance.get_mutable()->kstats_ = const_cast< ::fantasybit::Kstats*>(
      ::fantasybit::Kstats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats::kOstatsFieldNumber;
const int Stats::kDstatsFieldNumber;
const int Stats::kKstatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats::Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Stats)
}
Stats::Stats(const Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ostats()) {
    ostats_ = new ::fantasybit::Ostats(*from.ostats_);
  } else {
    ostats_ = NULL;
  }
  if (from.has_dstats()) {
    dstats_ = new ::fantasybit::Dstats(*from.dstats_);
  } else {
    dstats_ = NULL;
  }
  if (from.has_kstats()) {
    kstats_ = new ::fantasybit::Kstats(*from.kstats_);
  } else {
    kstats_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.Stats)
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ostats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kstats_) -
      reinterpret_cast<char*>(&ostats_)) + sizeof(kstats_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:fantasybit.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != internal_default_instance()) delete ostats_;
  if (this != internal_default_instance()) delete dstats_;
  if (this != internal_default_instance()) delete kstats_;
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stats& Stats::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsStats();
  return *internal_default_instance();
}

Stats* Stats::New(::google::protobuf::Arena* arena) const {
  Stats* n = new Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ostats_ != NULL);
      ostats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dstats_ != NULL);
      dstats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kstats_ != NULL);
      kstats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Ostats ostats = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ostats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.Dstats dstats = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.Kstats kstats = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Ostats ostats = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ostats_, output);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->dstats_, output);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->kstats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Stats)
}

::google::protobuf::uint8* Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.Ostats ostats = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->ostats_, deterministic, target);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->dstats_, deterministic, target);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->kstats_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .fantasybit.Ostats ostats = 10;
    if (has_ostats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ostats_);
    }

    // optional .fantasybit.Dstats dstats = 20;
    if (has_dstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->dstats_);
    }

    // optional .fantasybit.Kstats kstats = 30;
    if (has_kstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->kstats_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ostats()->::fantasybit::Ostats::MergeFrom(from.ostats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dstats()->::fantasybit::Dstats::MergeFrom(from.dstats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kstats()->::fantasybit::Kstats::MergeFrom(from.kstats());
    }
  }
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::Swap(Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats::InternalSwap(Stats* other) {
  using std::swap;
  swap(ostats_, other->ostats_);
  swap(dstats_, other->dstats_);
  swap(kstats_, other->kstats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerResult::InitAsDefaultInstance() {
  ::fantasybit::_PlayerResult_default_instance_._instance.get_mutable()->stats_ = const_cast< ::fantasybit::Stats*>(
      ::fantasybit::Stats::internal_default_instance());
}
void PlayerResult::clear_fantaybitaward() {
  fantaybitaward_.Clear();
}
void PlayerResult::clear_fantasybitpnl() {
  fantasybitpnl_.Clear();
}
void PlayerResult::clear_rowposdividend() {
  rowposdividend_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerResult::kPlayeridFieldNumber;
const int PlayerResult::kResultFieldNumber;
const int PlayerResult::kStatsFieldNumber;
const int PlayerResult::kFantaybitawardFieldNumber;
const int PlayerResult::kFantasybitpnlFieldNumber;
const int PlayerResult::kRowposdividendFieldNumber;
const int PlayerResult::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerResult::PlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsPlayerResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fantaybitaward_(from.fantaybitaward_),
      fantasybitpnl_(from.fantasybitpnl_),
      rowposdividend_(from.rowposdividend_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.has_stats()) {
    stats_ = new ::fantasybit::Stats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerResult)
}

void PlayerResult::SharedCtor() {
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(result_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void PlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResult::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerResult& PlayerResult::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsPlayerResult();
  return *internal_default_instance();
}

PlayerResult* PlayerResult::New(::google::protobuf::Arena* arena) const {
  PlayerResult* n = new PlayerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fantaybitaward_.Clear();
  fantasybitpnl_.Clear();
  rowposdividend_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->Clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerResult.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float result = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.Stats stats = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fantaybitaward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fantasybitpnl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_rowposdividend()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string symbol = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 722 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerResult.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerResult)
  return false;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->playerid(), output);
  }

  // optional float result = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->result(), output);
  }

  // optional .fantasybit.Stats stats = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->stats_, output);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantaybitaward_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->fantaybitaward(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantasybitpnl_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->fantasybitpnl(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rowposdividend_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->rowposdividend(static_cast<int>(i)), output);
  }

  // optional string symbol = 90;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      90, this->symbol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerResult)
}

::google::protobuf::uint8* PlayerResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string playerid = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional float result = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->result(), target);
  }

  // optional .fantasybit.Stats stats = 50;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, *this->stats_, deterministic, target);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantaybitaward_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        60, this->fantaybitaward(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fantasybitpnl_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        70, this->fantasybitpnl(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rowposdividend_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        80, this->rowposdividend(static_cast<int>(i)), deterministic, target);
  }

  // optional string symbol = 90;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        90, this->symbol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerResult)
  return target;
}

size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  {
    unsigned int count = static_cast<unsigned int>(this->fantaybitaward_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fantaybitaward(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.FantasyBitPnl fantasybitpnl = 70;
  {
    unsigned int count = static_cast<unsigned int>(this->fantasybitpnl_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fantasybitpnl(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.FantasyBitPnl rowposdividend = 80;
  {
    unsigned int count = static_cast<unsigned int>(this->rowposdividend_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rowposdividend(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string symbol = 90;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .fantasybit.Stats stats = 50;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stats_);
    }

    // optional float result = 40;
    if (has_result()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerResult)
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fantaybitaward_.MergeFrom(from.fantaybitaward_);
  fantasybitpnl_.MergeFrom(from.fantasybitpnl_);
  rowposdividend_.MergeFrom(from.rowposdividend_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stats()->::fantasybit::Stats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  fantaybitaward_.InternalSwap(&other->fantaybitaward_);
  fantasybitpnl_.InternalSwap(&other->fantasybitpnl_);
  rowposdividend_.InternalSwap(&other->rowposdividend_);
  playerid_.Swap(&other->playerid_);
  symbol_.Swap(&other->symbol_);
  swap(stats_, other->stats_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResult::kGameidFieldNumber;
const int GameResult::kHomeResultFieldNumber;
const int GameResult::kAwayResultFieldNumber;
const int GameResult::kKickofftimeFieldNumber;
const int GameResult::kHomeTotalFieldNumber;
const int GameResult::kAwayTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResult::GameResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsGameResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameResult)
}
GameResult::GameResult(const GameResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      home_result_(from.home_result_),
      away_result_(from.away_result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  ::memcpy(&awaytotal_, &from.awaytotal_,
    static_cast<size_t>(reinterpret_cast<char*>(&hometotal_) -
    reinterpret_cast<char*>(&awaytotal_)) + sizeof(hometotal_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameResult)
}

void GameResult::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&awaytotal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hometotal_) -
      reinterpret_cast<char*>(&awaytotal_)) + sizeof(hometotal_));
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:fantasybit.GameResult)
  SharedDtor();
}

void GameResult::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResult::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResult& GameResult::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsGameResult();
  return *internal_default_instance();
}

GameResult* GameResult::New(::google::protobuf::Arena* arena) const {
  GameResult* n = new GameResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_result_.Clear();
  away_result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gameid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&awaytotal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hometotal_) -
        reinterpret_cast<char*>(&awaytotal_)) + sizeof(hometotal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), static_cast<int>(this->gameid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameResult.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.PlayerResult home_result = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_home_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.PlayerResult away_result = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_away_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kickofftime = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_kickofftime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickofftime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float homeTotal = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {
          set_has_hometotal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hometotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float awayTotal = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {
          set_has_awaytotal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &awaytotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameResult)
  return false;
#undef DO_
}

void GameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameResult.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->home_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->home_result(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->away_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->away_result(static_cast<int>(i)), output);
  }

  // optional uint32 kickofftime = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->kickofftime(), output);
  }

  // optional float homeTotal = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->hometotal(), output);
  }

  // optional float awayTotal = 50;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->awaytotal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameResult)
}

::google::protobuf::uint8* GameResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameResult.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->home_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->home_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->away_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->away_result(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 kickofftime = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->kickofftime(), target);
  }

  // optional float homeTotal = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->hometotal(), target);
  }

  // optional float awayTotal = 50;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->awaytotal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameResult)
  return target;
}

size_t GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.PlayerResult home_result = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->home_result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->home_result(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->away_result_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->away_result(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional float awayTotal = 50;
    if (has_awaytotal()) {
      total_size += 2 + 4;
    }

    // optional uint32 kickofftime = 30;
    if (has_kickofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickofftime());
    }

    // optional float homeTotal = 40;
    if (has_hometotal()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameResult)
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_result_.MergeFrom(from.home_result_);
  away_result_.MergeFrom(from.away_result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (cached_has_bits & 0x00000002u) {
      awaytotal_ = from.awaytotal_;
    }
    if (cached_has_bits & 0x00000004u) {
      kickofftime_ = from.kickofftime_;
    }
    if (cached_has_bits & 0x00000008u) {
      hometotal_ = from.hometotal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {
  return true;
}

void GameResult::Swap(GameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResult::InternalSwap(GameResult* other) {
  using std::swap;
  home_result_.InternalSwap(&other->home_result_);
  away_result_.InternalSwap(&other->away_result_);
  gameid_.Swap(&other->gameid_);
  swap(awaytotal_, other->awaytotal_);
  swap(kickofftime_, other->kickofftime_);
  swap(hometotal_, other->hometotal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResult::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeasonResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeasonResult::kSeasonFieldNumber;
const int SeasonResult::kPlayerResultsFieldNumber;
const int SeasonResult::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeasonResult::SeasonResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsSeasonResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.SeasonResult)
}
SeasonResult::SeasonResult(const SeasonResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_results_(from.player_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&season_, &from.season_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&season_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SeasonResult)
}

void SeasonResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&season_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&season_)) + sizeof(total_));
}

SeasonResult::~SeasonResult() {
  // @@protoc_insertion_point(destructor:fantasybit.SeasonResult)
  SharedDtor();
}

void SeasonResult::SharedDtor() {
}

void SeasonResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeasonResult::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeasonResult& SeasonResult::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsSeasonResult();
  return *internal_default_instance();
}

SeasonResult* SeasonResult::New(::google::protobuf::Arena* arena) const {
  SeasonResult* n = new SeasonResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeasonResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SeasonResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&season_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_) -
        reinterpret_cast<char*>(&season_)) + sizeof(total_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeasonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.SeasonResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 season = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.PlayerResult player_results = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_player_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float total = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.SeasonResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.SeasonResult)
  return false;
#undef DO_
}

void SeasonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.SeasonResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 season = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->season(), output);
  }

  // repeated .fantasybit.PlayerResult player_results = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->player_results(static_cast<int>(i)), output);
  }

  // optional float total = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.SeasonResult)
}

::google::protobuf::uint8* SeasonResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SeasonResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 season = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->season(), target);
  }

  // repeated .fantasybit.PlayerResult player_results = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->player_results(static_cast<int>(i)), deterministic, target);
  }

  // optional float total = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SeasonResult)
  return target;
}

size_t SeasonResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SeasonResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.PlayerResult player_results = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->player_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_results(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 season = 1;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->season());
    }

    // optional float total = 20;
    if (has_total()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeasonResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SeasonResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SeasonResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeasonResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SeasonResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SeasonResult)
    MergeFrom(*source);
  }
}

void SeasonResult::MergeFrom(const SeasonResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SeasonResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_results_.MergeFrom(from.player_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SeasonResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SeasonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeasonResult::CopyFrom(const SeasonResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SeasonResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeasonResult::IsInitialized() const {
  return true;
}

void SeasonResult::Swap(SeasonResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeasonResult::InternalSwap(SeasonResult* other) {
  using std::swap;
  player_results_.InternalSwap(&other->player_results_);
  swap(season_, other->season_);
  swap(total_, other->total_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeasonResult::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerContractSymbol::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerContractSymbol::kSymbolFieldNumber;
const int PlayerContractSymbol::kPlayeridFieldNumber;
const int PlayerContractSymbol::kSybhashFieldNumber;
const int PlayerContractSymbol::kInitals2FieldNumber;
const int PlayerContractSymbol::kSeq2FieldNumber;
const int PlayerContractSymbol::kYear2FieldNumber;
const int PlayerContractSymbol::kType1SorwFieldNumber;
const int PlayerContractSymbol::kWeek1Or04SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerContractSymbol::PlayerContractSymbol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_StaticData_2eproto::InitDefaultsPlayerContractSymbol();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerContractSymbol)
}
PlayerContractSymbol::PlayerContractSymbol(const PlayerContractSymbol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  initals2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_initals2()) {
    initals2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initals2_);
  }
  seq2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_seq2()) {
    seq2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq2_);
  }
  year2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_year2()) {
    year2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.year2_);
  }
  type1sorw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type1sorw()) {
    type1sorw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type1sorw_);
  }
  week1or04s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_week1or04s()) {
    week1or04s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.week1or04s_);
  }
  sybhash_ = from.sybhash_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerContractSymbol)
}

void PlayerContractSymbol::SharedCtor() {
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initals2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type1sorw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  week1or04s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sybhash_ = GOOGLE_ULONGLONG(0);
}

PlayerContractSymbol::~PlayerContractSymbol() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerContractSymbol)
  SharedDtor();
}

void PlayerContractSymbol::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  initals2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type1sorw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  week1or04s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerContractSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerContractSymbol::descriptor() {
  ::protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerContractSymbol& PlayerContractSymbol::default_instance() {
  ::protobuf_StaticData_2eproto::InitDefaultsPlayerContractSymbol();
  return *internal_default_instance();
}

PlayerContractSymbol* PlayerContractSymbol::New(::google::protobuf::Arena* arena) const {
  PlayerContractSymbol* n = new PlayerContractSymbol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerContractSymbol::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PlayerContractSymbol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!initals2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*initals2_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!seq2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*seq2_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!year2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*year2_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!type1sorw_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type1sorw_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!week1or04s_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*week1or04s_.UnsafeRawStringPointer())->clear();
    }
  }
  sybhash_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerContractSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerContractSymbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sybhash = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_sybhash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sybhash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string initals2 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initals2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->initals2().data(), static_cast<int>(this->initals2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.initals2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string seq2 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seq2().data(), static_cast<int>(this->seq2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.seq2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string year2 = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 482 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->year2().data(), static_cast<int>(this->year2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.year2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type1sorw = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 562 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type1sorw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type1sorw().data(), static_cast<int>(this->type1sorw().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.type1sorw");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string week1or04s = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_week1or04s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->week1or04s().data(), static_cast<int>(this->week1or04s().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerContractSymbol.week1or04s");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerContractSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerContractSymbol)
  return false;
#undef DO_
}

void PlayerContractSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerContractSymbol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->symbol(), output);
  }

  // optional string playerid = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->playerid(), output);
  }

  // optional uint64 sybhash = 30;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->sybhash(), output);
  }

  // optional string initals2 = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initals2().data(), static_cast<int>(this->initals2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.initals2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->initals2(), output);
  }

  // optional string seq2 = 50;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seq2().data(), static_cast<int>(this->seq2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.seq2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->seq2(), output);
  }

  // optional string year2 = 60;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->year2().data(), static_cast<int>(this->year2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.year2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      60, this->year2(), output);
  }

  // optional string type1sorw = 70;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type1sorw().data(), static_cast<int>(this->type1sorw().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.type1sorw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->type1sorw(), output);
  }

  // optional string week1or04s = 80;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->week1or04s().data(), static_cast<int>(this->week1or04s().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.week1or04s");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      80, this->week1or04s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerContractSymbol)
}

::google::protobuf::uint8* PlayerContractSymbol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerContractSymbol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string symbol = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // optional string playerid = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional uint64 sybhash = 30;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->sybhash(), target);
  }

  // optional string initals2 = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->initals2().data(), static_cast<int>(this->initals2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.initals2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->initals2(), target);
  }

  // optional string seq2 = 50;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seq2().data(), static_cast<int>(this->seq2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.seq2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->seq2(), target);
  }

  // optional string year2 = 60;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->year2().data(), static_cast<int>(this->year2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.year2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        60, this->year2(), target);
  }

  // optional string type1sorw = 70;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type1sorw().data(), static_cast<int>(this->type1sorw().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.type1sorw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->type1sorw(), target);
  }

  // optional string week1or04s = 80;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->week1or04s().data(), static_cast<int>(this->week1or04s().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerContractSymbol.week1or04s");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->week1or04s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerContractSymbol)
  return target;
}

size_t PlayerContractSymbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PlayerContractSymbol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string symbol = 10;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string initals2 = 40;
    if (has_initals2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initals2());
    }

    // optional string seq2 = 50;
    if (has_seq2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seq2());
    }

    // optional string year2 = 60;
    if (has_year2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year2());
    }

    // optional string type1sorw = 70;
    if (has_type1sorw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type1sorw());
    }

    // optional string week1or04s = 80;
    if (has_week1or04s()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->week1or04s());
    }

    // optional uint64 sybhash = 30;
    if (has_sybhash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sybhash());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerContractSymbol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PlayerContractSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerContractSymbol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerContractSymbol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PlayerContractSymbol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PlayerContractSymbol)
    MergeFrom(*source);
  }
}

void PlayerContractSymbol::MergeFrom(const PlayerContractSymbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PlayerContractSymbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_initals2();
      initals2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.initals2_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_seq2();
      seq2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq2_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_year2();
      year2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.year2_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_type1sorw();
      type1sorw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type1sorw_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_week1or04s();
      week1or04s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.week1or04s_);
    }
    if (cached_has_bits & 0x00000080u) {
      sybhash_ = from.sybhash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerContractSymbol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PlayerContractSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerContractSymbol::CopyFrom(const PlayerContractSymbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PlayerContractSymbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerContractSymbol::IsInitialized() const {
  return true;
}

void PlayerContractSymbol::Swap(PlayerContractSymbol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerContractSymbol::InternalSwap(PlayerContractSymbol* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  playerid_.Swap(&other->playerid_);
  initals2_.Swap(&other->initals2_);
  seq2_.Swap(&other->seq2_);
  year2_.Swap(&other->year2_);
  type1sorw_.Swap(&other->type1sorw_);
  week1or04s_.Swap(&other->week1or04s_);
  swap(sybhash_, other->sybhash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerContractSymbol::GetMetadata() const {
  protobuf_StaticData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_StaticData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
