// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef PROTOBUF_ProtoData_2eproto__INCLUDED
#define PROTOBUF_ProtoData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "StaticData.pb.h"
#include "StatusData.pb.h"
#include "ExData.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ProtoData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[38];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMyFantasyNameImpl();
void InitDefaultsMyFantasyName();
void InitDefaultsFantasyPlayerImpl();
void InitDefaultsFantasyPlayer();
void InitDefaultsSecretImpl();
void InitDefaultsSecret();
void InitDefaultsSecret2Impl();
void InitDefaultsSecret2();
void InitDefaultsSecret3Impl();
void InitDefaultsSecret3();
void InitDefaultsOutDataImpl();
void InitDefaultsOutData();
void InitDefaultsInDataImpl();
void InitDefaultsInData();
void InitDefaultsNameProofImpl();
void InitDefaultsNameProof();
void InitDefaultsTweetProofImpl();
void InitDefaultsTweetProof();
void InitDefaultsMasterProofImpl();
void InitDefaultsMasterProof();
void InitDefaultsTransactionImpl();
void InitDefaultsTransaction();
void InitDefaultsNameTransImpl();
void InitDefaultsNameTrans();
void InitDefaultsTransferTransImpl();
void InitDefaultsTransferTrans();
void InitDefaultsSignedTransactionImpl();
void InitDefaultsSignedTransaction();
void InitDefaultsBlockHeaderImpl();
void InitDefaultsBlockHeader();
void InitDefaultsSignedBlockHeaderImpl();
void InitDefaultsSignedBlockHeader();
void InitDefaultsBlockImpl();
void InitDefaultsBlock();
void InitDefaultsNodeRequestImpl();
void InitDefaultsNodeRequest();
void InitDefaultsNodeReplyImpl();
void InitDefaultsNodeReply();
void InitDefaultsFantasyPlayerPointsImpl();
void InitDefaultsFantasyPlayerPoints();
void InitDefaultsProjectionTransImpl();
void InitDefaultsProjectionTrans();
void InitDefaultsPlayerPointsImpl();
void InitDefaultsPlayerPoints();
void InitDefaultsProjectionTransBlockImpl();
void InitDefaultsProjectionTransBlock();
void InitDefaultsDataImpl();
void InitDefaultsData();
void InitDefaultsPlayerDataImpl();
void InitDefaultsPlayerData();
void InitDefaultsGameDataImpl();
void InitDefaultsGameData();
void InitDefaultsResultDataImpl();
void InitDefaultsResultData();
void InitDefaultsScheduleDataImpl();
void InitDefaultsScheduleData();
void InitDefaultsDataTransitionImpl();
void InitDefaultsDataTransition();
void InitDefaultsTeamStateImpl();
void InitDefaultsTeamState();
void InitDefaultsDeltaDataImpl();
void InitDefaultsDeltaData();
void InitDefaultsMessageDataImpl();
void InitDefaultsMessageData();
void InitDefaultsStampedTransImpl();
void InitDefaultsStampedTrans();
void InitDefaultsExchangeOrderImpl();
void InitDefaultsExchangeOrder();
void InitDefaultsOrderUniqueImpl();
void InitDefaultsOrderUnique();
void InitDefaultsOrderDeetsImpl();
void InitDefaultsOrderDeets();
void InitDefaultsInsideUniqueImpl();
void InitDefaultsInsideUnique();
void InitDefaultsTimeTransitionImpl();
void InitDefaultsTimeTransition();
inline void InitDefaults() {
  InitDefaultsMyFantasyName();
  InitDefaultsFantasyPlayer();
  InitDefaultsSecret();
  InitDefaultsSecret2();
  InitDefaultsSecret3();
  InitDefaultsOutData();
  InitDefaultsInData();
  InitDefaultsNameProof();
  InitDefaultsTweetProof();
  InitDefaultsMasterProof();
  InitDefaultsTransaction();
  InitDefaultsNameTrans();
  InitDefaultsTransferTrans();
  InitDefaultsSignedTransaction();
  InitDefaultsBlockHeader();
  InitDefaultsSignedBlockHeader();
  InitDefaultsBlock();
  InitDefaultsNodeRequest();
  InitDefaultsNodeReply();
  InitDefaultsFantasyPlayerPoints();
  InitDefaultsProjectionTrans();
  InitDefaultsPlayerPoints();
  InitDefaultsProjectionTransBlock();
  InitDefaultsData();
  InitDefaultsPlayerData();
  InitDefaultsGameData();
  InitDefaultsResultData();
  InitDefaultsScheduleData();
  InitDefaultsDataTransition();
  InitDefaultsTeamState();
  InitDefaultsDeltaData();
  InitDefaultsMessageData();
  InitDefaultsStampedTrans();
  InitDefaultsExchangeOrder();
  InitDefaultsOrderUnique();
  InitDefaultsOrderDeets();
  InitDefaultsInsideUnique();
  InitDefaultsTimeTransition();
}
}  // namespace protobuf_ProtoData_2eproto
namespace fantasybit {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DataTransition;
class DataTransitionDefaultTypeInternal;
extern DataTransitionDefaultTypeInternal _DataTransition_default_instance_;
class DeltaData;
class DeltaDataDefaultTypeInternal;
extern DeltaDataDefaultTypeInternal _DeltaData_default_instance_;
class ExchangeOrder;
class ExchangeOrderDefaultTypeInternal;
extern ExchangeOrderDefaultTypeInternal _ExchangeOrder_default_instance_;
class FantasyPlayer;
class FantasyPlayerDefaultTypeInternal;
extern FantasyPlayerDefaultTypeInternal _FantasyPlayer_default_instance_;
class FantasyPlayerPoints;
class FantasyPlayerPointsDefaultTypeInternal;
extern FantasyPlayerPointsDefaultTypeInternal _FantasyPlayerPoints_default_instance_;
class GameData;
class GameDataDefaultTypeInternal;
extern GameDataDefaultTypeInternal _GameData_default_instance_;
class InData;
class InDataDefaultTypeInternal;
extern InDataDefaultTypeInternal _InData_default_instance_;
class InsideUnique;
class InsideUniqueDefaultTypeInternal;
extern InsideUniqueDefaultTypeInternal _InsideUnique_default_instance_;
class MasterProof;
class MasterProofDefaultTypeInternal;
extern MasterProofDefaultTypeInternal _MasterProof_default_instance_;
class MessageData;
class MessageDataDefaultTypeInternal;
extern MessageDataDefaultTypeInternal _MessageData_default_instance_;
class MyFantasyName;
class MyFantasyNameDefaultTypeInternal;
extern MyFantasyNameDefaultTypeInternal _MyFantasyName_default_instance_;
class NameProof;
class NameProofDefaultTypeInternal;
extern NameProofDefaultTypeInternal _NameProof_default_instance_;
class NameTrans;
class NameTransDefaultTypeInternal;
extern NameTransDefaultTypeInternal _NameTrans_default_instance_;
class NodeReply;
class NodeReplyDefaultTypeInternal;
extern NodeReplyDefaultTypeInternal _NodeReply_default_instance_;
class NodeRequest;
class NodeRequestDefaultTypeInternal;
extern NodeRequestDefaultTypeInternal _NodeRequest_default_instance_;
class OrderDeets;
class OrderDeetsDefaultTypeInternal;
extern OrderDeetsDefaultTypeInternal _OrderDeets_default_instance_;
class OrderUnique;
class OrderUniqueDefaultTypeInternal;
extern OrderUniqueDefaultTypeInternal _OrderUnique_default_instance_;
class OutData;
class OutDataDefaultTypeInternal;
extern OutDataDefaultTypeInternal _OutData_default_instance_;
class PlayerData;
class PlayerDataDefaultTypeInternal;
extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
class PlayerPoints;
class PlayerPointsDefaultTypeInternal;
extern PlayerPointsDefaultTypeInternal _PlayerPoints_default_instance_;
class ProjectionTrans;
class ProjectionTransDefaultTypeInternal;
extern ProjectionTransDefaultTypeInternal _ProjectionTrans_default_instance_;
class ProjectionTransBlock;
class ProjectionTransBlockDefaultTypeInternal;
extern ProjectionTransBlockDefaultTypeInternal _ProjectionTransBlock_default_instance_;
class ResultData;
class ResultDataDefaultTypeInternal;
extern ResultDataDefaultTypeInternal _ResultData_default_instance_;
class ScheduleData;
class ScheduleDataDefaultTypeInternal;
extern ScheduleDataDefaultTypeInternal _ScheduleData_default_instance_;
class Secret;
class SecretDefaultTypeInternal;
extern SecretDefaultTypeInternal _Secret_default_instance_;
class Secret2;
class Secret2DefaultTypeInternal;
extern Secret2DefaultTypeInternal _Secret2_default_instance_;
class Secret3;
class Secret3DefaultTypeInternal;
extern Secret3DefaultTypeInternal _Secret3_default_instance_;
class SignedBlockHeader;
class SignedBlockHeaderDefaultTypeInternal;
extern SignedBlockHeaderDefaultTypeInternal _SignedBlockHeader_default_instance_;
class SignedTransaction;
class SignedTransactionDefaultTypeInternal;
extern SignedTransactionDefaultTypeInternal _SignedTransaction_default_instance_;
class StampedTrans;
class StampedTransDefaultTypeInternal;
extern StampedTransDefaultTypeInternal _StampedTrans_default_instance_;
class TeamState;
class TeamStateDefaultTypeInternal;
extern TeamStateDefaultTypeInternal _TeamState_default_instance_;
class TimeTransition;
class TimeTransitionDefaultTypeInternal;
extern TimeTransitionDefaultTypeInternal _TimeTransition_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransferTrans;
class TransferTransDefaultTypeInternal;
extern TransferTransDefaultTypeInternal _TransferTrans_default_instance_;
class TweetProof;
class TweetProofDefaultTypeInternal;
extern TweetProofDefaultTypeInternal _TweetProof_default_instance_;
}  // namespace fantasybit
namespace fantasybit {

enum OutData_Type {
  OutData_Type_MYFANTASYNAME = 1,
  OutData_Type_SNAPSHOT = 2,
  OutData_Type_HEARTBEAT = 3
};
bool OutData_Type_IsValid(int value);
const OutData_Type OutData_Type_Type_MIN = OutData_Type_MYFANTASYNAME;
const OutData_Type OutData_Type_Type_MAX = OutData_Type_HEARTBEAT;
const int OutData_Type_Type_ARRAYSIZE = OutData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor();
inline const ::std::string& OutData_Type_Name(OutData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutData_Type_descriptor(), value);
}
inline bool OutData_Type_Parse(
    const ::std::string& name, OutData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutData_Type>(
    OutData_Type_descriptor(), name, value);
}
enum InData_Type {
  InData_Type_MINENAME = 1,
  InData_Type_QUIT = 2,
  InData_Type_HEARTBEAT = 3,
  InData_Type_CONNECT = 4,
  InData_Type_MAKE_BLOCK = 5,
  InData_Type_NEWNAME = 6,
  InData_Type_PROJ = 7,
  InData_Type_DATA = 8
};
bool InData_Type_IsValid(int value);
const InData_Type InData_Type_Type_MIN = InData_Type_MINENAME;
const InData_Type InData_Type_Type_MAX = InData_Type_DATA;
const int InData_Type_Type_ARRAYSIZE = InData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* InData_Type_descriptor();
inline const ::std::string& InData_Type_Name(InData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    InData_Type_descriptor(), value);
}
inline bool InData_Type_Parse(
    const ::std::string& name, InData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InData_Type>(
    InData_Type_descriptor(), name, value);
}
enum NameProof_Type {
  NameProof_Type_POW = 1,
  NameProof_Type_TWEET = 2,
  NameProof_Type_ORACLE = 3,
  NameProof_Type_MASTER = 4
};
bool NameProof_Type_IsValid(int value);
const NameProof_Type NameProof_Type_Type_MIN = NameProof_Type_POW;
const NameProof_Type NameProof_Type_Type_MAX = NameProof_Type_MASTER;
const int NameProof_Type_Type_ARRAYSIZE = NameProof_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor();
inline const ::std::string& NameProof_Type_Name(NameProof_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NameProof_Type_descriptor(), value);
}
inline bool NameProof_Type_Parse(
    const ::std::string& name, NameProof_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NameProof_Type>(
    NameProof_Type_descriptor(), name, value);
}
enum BlockHeader_Type {
  BlockHeader_Type_NORMAL = 1,
  BlockHeader_Type_DATA = 2
};
bool BlockHeader_Type_IsValid(int value);
const BlockHeader_Type BlockHeader_Type_Type_MIN = BlockHeader_Type_NORMAL;
const BlockHeader_Type BlockHeader_Type_Type_MAX = BlockHeader_Type_DATA;
const int BlockHeader_Type_Type_ARRAYSIZE = BlockHeader_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor();
inline const ::std::string& BlockHeader_Type_Name(BlockHeader_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockHeader_Type_descriptor(), value);
}
inline bool BlockHeader_Type_Parse(
    const ::std::string& name, BlockHeader_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockHeader_Type>(
    BlockHeader_Type_descriptor(), name, value);
}
enum NodeRequest_Type {
  NodeRequest_Type_HANDSHAKE = 1,
  NodeRequest_Type_BLOCK_REQUEST = 2,
  NodeRequest_Type_HIGHT_REQUEST = 3,
  NodeRequest_Type_NAT_TEST = 4
};
bool NodeRequest_Type_IsValid(int value);
const NodeRequest_Type NodeRequest_Type_Type_MIN = NodeRequest_Type_HANDSHAKE;
const NodeRequest_Type NodeRequest_Type_Type_MAX = NodeRequest_Type_NAT_TEST;
const int NodeRequest_Type_Type_ARRAYSIZE = NodeRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor();
inline const ::std::string& NodeRequest_Type_Name(NodeRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeRequest_Type_descriptor(), value);
}
inline bool NodeRequest_Type_Parse(
    const ::std::string& name, NodeRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeRequest_Type>(
    NodeRequest_Type_descriptor(), name, value);
}
enum Data_Type {
  Data_Type_SCHEDULE = 0,
  Data_Type_PLAYER = 1,
  Data_Type_GAME = 2,
  Data_Type_RESULT = 3,
  Data_Type_MESSAGE = 4
};
bool Data_Type_IsValid(int value);
const Data_Type Data_Type_Type_MIN = Data_Type_SCHEDULE;
const Data_Type Data_Type_Type_MAX = Data_Type_MESSAGE;
const int Data_Type_Type_ARRAYSIZE = Data_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_Type_descriptor();
inline const ::std::string& Data_Type_Name(Data_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_Type_descriptor(), value);
}
inline bool Data_Type_Parse(
    const ::std::string& name, Data_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_Type>(
    Data_Type_descriptor(), name, value);
}
enum TeamState_State {
  TeamState_State_PREGAME = 1,
  TeamState_State_INGAME = 2
};
bool TeamState_State_IsValid(int value);
const TeamState_State TeamState_State_State_MIN = TeamState_State_PREGAME;
const TeamState_State TeamState_State_State_MAX = TeamState_State_INGAME;
const int TeamState_State_State_ARRAYSIZE = TeamState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor();
inline const ::std::string& TeamState_State_Name(TeamState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamState_State_descriptor(), value);
}
inline bool TeamState_State_Parse(
    const ::std::string& name, TeamState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamState_State>(
    TeamState_State_descriptor(), name, value);
}
enum DeltaData_Type {
  DeltaData_Type_SNAPSHOT = 2,
  DeltaData_Type_HEARTBEAT = 3
};
bool DeltaData_Type_IsValid(int value);
const DeltaData_Type DeltaData_Type_Type_MIN = DeltaData_Type_SNAPSHOT;
const DeltaData_Type DeltaData_Type_Type_MAX = DeltaData_Type_HEARTBEAT;
const int DeltaData_Type_Type_ARRAYSIZE = DeltaData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor();
inline const ::std::string& DeltaData_Type_Name(DeltaData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeltaData_Type_descriptor(), value);
}
inline bool DeltaData_Type_Parse(
    const ::std::string& name, DeltaData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeltaData_Type>(
    DeltaData_Type_descriptor(), name, value);
}
enum ExchangeOrder_Type {
  ExchangeOrder_Type_NEW = 1,
  ExchangeOrder_Type_CANCEL = 2,
  ExchangeOrder_Type_REPLACE = 3
};
bool ExchangeOrder_Type_IsValid(int value);
const ExchangeOrder_Type ExchangeOrder_Type_Type_MIN = ExchangeOrder_Type_NEW;
const ExchangeOrder_Type ExchangeOrder_Type_Type_MAX = ExchangeOrder_Type_REPLACE;
const int ExchangeOrder_Type_Type_ARRAYSIZE = ExchangeOrder_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExchangeOrder_Type_descriptor();
inline const ::std::string& ExchangeOrder_Type_Name(ExchangeOrder_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExchangeOrder_Type_descriptor(), value);
}
inline bool ExchangeOrder_Type_Parse(
    const ::std::string& name, ExchangeOrder_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExchangeOrder_Type>(
    ExchangeOrder_Type_descriptor(), name, value);
}
enum TimeTransition_Type {
  TimeTransition_Type_TRADEOPEN = 2,
  TimeTransition_Type_TRADECLOSE = 3
};
bool TimeTransition_Type_IsValid(int value);
const TimeTransition_Type TimeTransition_Type_Type_MIN = TimeTransition_Type_TRADEOPEN;
const TimeTransition_Type TimeTransition_Type_Type_MAX = TimeTransition_Type_TRADECLOSE;
const int TimeTransition_Type_Type_ARRAYSIZE = TimeTransition_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TimeTransition_Type_descriptor();
inline const ::std::string& TimeTransition_Type_Name(TimeTransition_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TimeTransition_Type_descriptor(), value);
}
inline bool TimeTransition_Type_Parse(
    const ::std::string& name, TimeTransition_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TimeTransition_Type>(
    TimeTransition_Type_descriptor(), name, value);
}
enum MyNameStatus {
  none = 1,
  notavil = 2,
  requested = 5,
  transaction_sent = 15,
  confirmed = 20
};
bool MyNameStatus_IsValid(int value);
const MyNameStatus MyNameStatus_MIN = none;
const MyNameStatus MyNameStatus_MAX = confirmed;
const int MyNameStatus_ARRAYSIZE = MyNameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor();
inline const ::std::string& MyNameStatus_Name(MyNameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MyNameStatus_descriptor(), value);
}
inline bool MyNameStatus_Parse(
    const ::std::string& name, MyNameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MyNameStatus>(
    MyNameStatus_descriptor(), name, value);
}
enum TransType {
  NAME = 0,
  PROJECTION = 1,
  RESULT = 2,
  DATA = 3,
  PROJECTION_BLOCK = 4,
  MASTER_NAME = 5,
  TIME = 6,
  STAMPED = 7,
  EXCHANGE = 8,
  EXCHANGE_BLOCK = 9,
  TRANSFER = 10
};
bool TransType_IsValid(int value);
const TransType TransType_MIN = NAME;
const TransType TransType_MAX = TRANSFER;
const int TransType_ARRAYSIZE = TransType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransType_descriptor();
inline const ::std::string& TransType_Name(TransType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransType_descriptor(), value);
}
inline bool TransType_Parse(
    const ::std::string& name, TransType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransType>(
    TransType_descriptor(), name, value);
}
enum TrType {
  SEASONSTART = 2,
  SEASONEND = 3,
  HEARTBEAT = 5,
  GAMESTART = 6,
  WEEKOVER = 7,
  TRADESESSIONSTART = 8,
  TRADESESSIONCLOSEANDPREOPEN = 9,
  PLAYOFFSTART = 10,
  SUPERBOWLEND = 12
};
bool TrType_IsValid(int value);
const TrType TrType_MIN = SEASONSTART;
const TrType TrType_MAX = SUPERBOWLEND;
const int TrType_ARRAYSIZE = TrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrType_descriptor();
inline const ::std::string& TrType_Name(TrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrType_descriptor(), value);
}
inline bool TrType_Parse(
    const ::std::string& name, TrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrType>(
    TrType_descriptor(), name, value);
}
// ===================================================================

class MyFantasyName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MyFantasyName) */ {
 public:
  MyFantasyName();
  virtual ~MyFantasyName();

  MyFantasyName(const MyFantasyName& from);

  inline MyFantasyName& operator=(const MyFantasyName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MyFantasyName(MyFantasyName&& from) noexcept
    : MyFantasyName() {
    *this = ::std::move(from);
  }

  inline MyFantasyName& operator=(MyFantasyName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyFantasyName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyFantasyName* internal_default_instance() {
    return reinterpret_cast<const MyFantasyName*>(
               &_MyFantasyName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MyFantasyName* other);
  friend void swap(MyFantasyName& a, MyFantasyName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MyFantasyName* New() const PROTOBUF_FINAL { return New(NULL); }

  MyFantasyName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MyFantasyName& from);
  void MergeFrom(const MyFantasyName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MyFantasyName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .fantasybit.MyNameStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::fantasybit::MyNameStatus status() const;
  void set_status(::fantasybit::MyNameStatus value);

  // @@protoc_insertion_point(class_scope:fantasybit.MyFantasyName)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int status_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsMyFantasyNameImpl();
};
// -------------------------------------------------------------------

class FantasyPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyPlayer) */ {
 public:
  FantasyPlayer();
  virtual ~FantasyPlayer();

  FantasyPlayer(const FantasyPlayer& from);

  inline FantasyPlayer& operator=(const FantasyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyPlayer(FantasyPlayer&& from) noexcept
    : FantasyPlayer() {
    *this = ::std::move(from);
  }

  inline FantasyPlayer& operator=(FantasyPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyPlayer* internal_default_instance() {
    return reinterpret_cast<const FantasyPlayer*>(
               &_FantasyPlayer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FantasyPlayer* other);
  friend void swap(FantasyPlayer& a, FantasyPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyPlayer* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyPlayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyPlayer& from);
  void MergeFrom(const FantasyPlayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 bits = 20;
  bool has_bits() const;
  void clear_bits();
  static const int kBitsFieldNumber = 20;
  ::google::protobuf::uint64 bits() const;
  void set_bits(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyPlayer)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_bits();
  void clear_has_bits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 bits_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayerImpl();
};
// -------------------------------------------------------------------

class Secret : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Secret) */ {
 public:
  Secret();
  virtual ~Secret();

  Secret(const Secret& from);

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Secret(Secret&& from) noexcept
    : Secret() {
    *this = ::std::move(from);
  }

  inline Secret& operator=(Secret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Secret* internal_default_instance() {
    return reinterpret_cast<const Secret*>(
               &_Secret_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Secret* other);
  friend void swap(Secret& a, Secret& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Secret* New() const PROTOBUF_FINAL { return New(NULL); }

  Secret* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Secret* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string private_key = 1;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  bool has_myfantasyname() const;
  void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  const ::fantasybit::MyFantasyName& myfantasyname() const;
  ::fantasybit::MyFantasyName* release_myfantasyname();
  ::fantasybit::MyFantasyName* mutable_myfantasyname();
  void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  // optional .fantasybit.NameTrans nametran = 10;
  bool has_nametran() const;
  void clear_nametran();
  static const int kNametranFieldNumber = 10;
  const ::fantasybit::NameTrans& nametran() const;
  ::fantasybit::NameTrans* release_nametran();
  ::fantasybit::NameTrans* mutable_nametran();
  void set_allocated_nametran(::fantasybit::NameTrans* nametran);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret)
 private:
  void set_has_private_key();
  void clear_has_private_key();
  void set_has_myfantasyname();
  void clear_has_myfantasyname();
  void set_has_nametran();
  void clear_has_nametran();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::fantasybit::MyFantasyName* myfantasyname_;
  ::fantasybit::NameTrans* nametran_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsSecretImpl();
};
// -------------------------------------------------------------------

class Secret2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Secret2) */ {
 public:
  Secret2();
  virtual ~Secret2();

  Secret2(const Secret2& from);

  inline Secret2& operator=(const Secret2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Secret2(Secret2&& from) noexcept
    : Secret2() {
    *this = ::std::move(from);
  }

  inline Secret2& operator=(Secret2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Secret2* internal_default_instance() {
    return reinterpret_cast<const Secret2*>(
               &_Secret2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Secret2* other);
  friend void swap(Secret2& a, Secret2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Secret2* New() const PROTOBUF_FINAL { return New(NULL); }

  Secret2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Secret2& from);
  void MergeFrom(const Secret2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Secret2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_key = 1;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional string fantasy_name = 20;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 20;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasy_name(::std::string&& value);
  #endif
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional string public_key = 30;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 30;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret2)
 private:
  void set_has_private_key();
  void clear_has_private_key();
  void set_has_fantasy_name();
  void clear_has_fantasy_name();
  void set_has_public_key();
  void clear_has_public_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsSecret2Impl();
};
// -------------------------------------------------------------------

class Secret3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Secret3) */ {
 public:
  Secret3();
  virtual ~Secret3();

  Secret3(const Secret3& from);

  inline Secret3& operator=(const Secret3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Secret3(Secret3&& from) noexcept
    : Secret3() {
    *this = ::std::move(from);
  }

  inline Secret3& operator=(Secret3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Secret3* internal_default_instance() {
    return reinterpret_cast<const Secret3*>(
               &_Secret3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Secret3* other);
  friend void swap(Secret3& a, Secret3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Secret3* New() const PROTOBUF_FINAL { return New(NULL); }

  Secret3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Secret3& from);
  void MergeFrom(const Secret3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Secret3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_key = 1;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  #if LANG_CXX11
  void set_private_key(::std::string&& value);
  #endif
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional string mnemonic_key = 3;
  bool has_mnemonic_key() const;
  void clear_mnemonic_key();
  static const int kMnemonicKeyFieldNumber = 3;
  const ::std::string& mnemonic_key() const;
  void set_mnemonic_key(const ::std::string& value);
  #if LANG_CXX11
  void set_mnemonic_key(::std::string&& value);
  #endif
  void set_mnemonic_key(const char* value);
  void set_mnemonic_key(const char* value, size_t size);
  ::std::string* mutable_mnemonic_key();
  ::std::string* release_mnemonic_key();
  void set_allocated_mnemonic_key(::std::string* mnemonic_key);

  // optional string fantasy_name = 20;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 20;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasy_name(::std::string&& value);
  #endif
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional string public_key = 30;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 30;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret3)
 private:
  void set_has_private_key();
  void clear_has_private_key();
  void set_has_mnemonic_key();
  void clear_has_mnemonic_key();
  void set_has_fantasy_name();
  void clear_has_fantasy_name();
  void set_has_public_key();
  void clear_has_public_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr mnemonic_key_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsSecret3Impl();
};
// -------------------------------------------------------------------

class OutData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.OutData) */ {
 public:
  OutData();
  virtual ~OutData();

  OutData(const OutData& from);

  inline OutData& operator=(const OutData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutData(OutData&& from) noexcept
    : OutData() {
    *this = ::std::move(from);
  }

  inline OutData& operator=(OutData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutData* internal_default_instance() {
    return reinterpret_cast<const OutData*>(
               &_OutData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(OutData* other);
  friend void swap(OutData& a, OutData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutData* New() const PROTOBUF_FINAL { return New(NULL); }

  OutData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OutData& from);
  void MergeFrom(const OutData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OutData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef OutData_Type Type;
  static const Type MYFANTASYNAME =
    OutData_Type_MYFANTASYNAME;
  static const Type SNAPSHOT =
    OutData_Type_SNAPSHOT;
  static const Type HEARTBEAT =
    OutData_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return OutData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    OutData_Type_Type_MIN;
  static const Type Type_MAX =
    OutData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    OutData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return OutData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return OutData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return OutData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  bool has_myfantasyname() const;
  void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  const ::fantasybit::MyFantasyName& myfantasyname() const;
  ::fantasybit::MyFantasyName* release_myfantasyname();
  ::fantasybit::MyFantasyName* mutable_myfantasyname();
  void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  // required .fantasybit.OutData.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::OutData_Type type() const;
  void set_type(::fantasybit::OutData_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OutData)
  // @@protoc_insertion_point(class_scope:fantasybit.OutData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_myfantasyname();
  void clear_has_myfantasyname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::MyFantasyName* myfantasyname_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsOutDataImpl();
};
// -------------------------------------------------------------------

class InData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.InData) */ {
 public:
  InData();
  virtual ~InData();

  InData(const InData& from);

  inline InData& operator=(const InData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InData(InData&& from) noexcept
    : InData() {
    *this = ::std::move(from);
  }

  inline InData& operator=(InData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InData* internal_default_instance() {
    return reinterpret_cast<const InData*>(
               &_InData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(InData* other);
  friend void swap(InData& a, InData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InData* New() const PROTOBUF_FINAL { return New(NULL); }

  InData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InData& from);
  void MergeFrom(const InData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InData_Type Type;
  static const Type MINENAME =
    InData_Type_MINENAME;
  static const Type QUIT =
    InData_Type_QUIT;
  static const Type HEARTBEAT =
    InData_Type_HEARTBEAT;
  static const Type CONNECT =
    InData_Type_CONNECT;
  static const Type MAKE_BLOCK =
    InData_Type_MAKE_BLOCK;
  static const Type NEWNAME =
    InData_Type_NEWNAME;
  static const Type PROJ =
    InData_Type_PROJ;
  static const Type DATA =
    InData_Type_DATA;
  static inline bool Type_IsValid(int value) {
    return InData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    InData_Type_Type_MIN;
  static const Type Type_MAX =
    InData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    InData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return InData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return InData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return InData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string data2 = 3;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 3;
  const ::std::string& data2() const;
  void set_data2(const ::std::string& value);
  #if LANG_CXX11
  void set_data2(::std::string&& value);
  #endif
  void set_data2(const char* value);
  void set_data2(const char* value, size_t size);
  ::std::string* mutable_data2();
  ::std::string* release_data2();
  void set_allocated_data2(::std::string* data2);

  // optional .fantasybit.DataTransition data_trans = 5;
  bool has_data_trans() const;
  void clear_data_trans();
  static const int kDataTransFieldNumber = 5;
  const ::fantasybit::DataTransition& data_trans() const;
  ::fantasybit::DataTransition* release_data_trans();
  ::fantasybit::DataTransition* mutable_data_trans();
  void set_allocated_data_trans(::fantasybit::DataTransition* data_trans);

  // optional int32 num = 4;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 4;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // required .fantasybit.InData.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::InData_Type type() const;
  void set_type(::fantasybit::InData_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(InData)
  // @@protoc_insertion_point(class_scope:fantasybit.InData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();
  void set_has_data2();
  void clear_has_data2();
  void set_has_num();
  void clear_has_num();
  void set_has_data_trans();
  void clear_has_data_trans();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr data2_;
  ::fantasybit::DataTransition* data_trans_;
  ::google::protobuf::int32 num_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsInDataImpl();
};
// -------------------------------------------------------------------

class NameProof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NameProof) */ {
 public:
  NameProof();
  virtual ~NameProof();

  NameProof(const NameProof& from);

  inline NameProof& operator=(const NameProof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameProof(NameProof&& from) noexcept
    : NameProof() {
    *this = ::std::move(from);
  }

  inline NameProof& operator=(NameProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameProof* internal_default_instance() {
    return reinterpret_cast<const NameProof*>(
               &_NameProof_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NameProof* other);
  friend void swap(NameProof& a, NameProof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameProof* New() const PROTOBUF_FINAL { return New(NULL); }

  NameProof* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NameProof& from);
  void MergeFrom(const NameProof& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NameProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NameProof_Type Type;
  static const Type POW =
    NameProof_Type_POW;
  static const Type TWEET =
    NameProof_Type_TWEET;
  static const Type ORACLE =
    NameProof_Type_ORACLE;
  static const Type MASTER =
    NameProof_Type_MASTER;
  static inline bool Type_IsValid(int value) {
    return NameProof_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NameProof_Type_Type_MIN;
  static const Type Type_MAX =
    NameProof_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NameProof_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NameProof_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NameProof_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NameProof_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.NameProof.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::NameProof_Type type() const;
  void set_type(::fantasybit::NameProof_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NameProof)
  // @@protoc_insertion_point(class_scope:fantasybit.NameProof)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsNameProofImpl();
};
// -------------------------------------------------------------------

class TweetProof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TweetProof) */ {
 public:
  TweetProof();
  virtual ~TweetProof();

  TweetProof(const TweetProof& from);

  inline TweetProof& operator=(const TweetProof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TweetProof(TweetProof&& from) noexcept
    : TweetProof() {
    *this = ::std::move(from);
  }

  inline TweetProof& operator=(TweetProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TweetProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TweetProof* internal_default_instance() {
    return reinterpret_cast<const TweetProof*>(
               &_TweetProof_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TweetProof* other);
  friend void swap(TweetProof& a, TweetProof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TweetProof* New() const PROTOBUF_FINAL { return New(NULL); }

  TweetProof* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TweetProof& from);
  void MergeFrom(const TweetProof& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TweetProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tweet = 10;
  bool has_tweet() const;
  void clear_tweet();
  static const int kTweetFieldNumber = 10;
  const ::std::string& tweet() const;
  void set_tweet(const ::std::string& value);
  #if LANG_CXX11
  void set_tweet(::std::string&& value);
  #endif
  void set_tweet(const char* value);
  void set_tweet(const char* value, size_t size);
  ::std::string* mutable_tweet();
  ::std::string* release_tweet();
  void set_allocated_tweet(::std::string* tweet);

  static const int kTweetProofFieldNumber = 201;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
    tweet_proof;
  // @@protoc_insertion_point(class_scope:fantasybit.TweetProof)
 private:
  void set_has_tweet();
  void clear_has_tweet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tweet_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsTweetProofImpl();
};
// -------------------------------------------------------------------

class MasterProof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MasterProof) */ {
 public:
  MasterProof();
  virtual ~MasterProof();

  MasterProof(const MasterProof& from);

  inline MasterProof& operator=(const MasterProof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterProof(MasterProof&& from) noexcept
    : MasterProof() {
    *this = ::std::move(from);
  }

  inline MasterProof& operator=(MasterProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterProof* internal_default_instance() {
    return reinterpret_cast<const MasterProof*>(
               &_MasterProof_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(MasterProof* other);
  friend void swap(MasterProof& a, MasterProof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterProof* New() const PROTOBUF_FINAL { return New(NULL); }

  MasterProof* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MasterProof& from);
  void MergeFrom(const MasterProof& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MasterProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  const ::std::string& season() const;
  void set_season(const ::std::string& value);
  #if LANG_CXX11
  void set_season(::std::string&& value);
  #endif
  void set_season(const char* value);
  void set_season(const char* value, size_t size);
  ::std::string* mutable_season();
  ::std::string* release_season();
  void set_allocated_season(::std::string* season);

  // optional .fantasybit.SignedTransaction new_oracle_name = 66;
  bool has_new_oracle_name() const;
  void clear_new_oracle_name();
  static const int kNewOracleNameFieldNumber = 66;
  const ::fantasybit::SignedTransaction& new_oracle_name() const;
  ::fantasybit::SignedTransaction* release_new_oracle_name();
  ::fantasybit::SignedTransaction* mutable_new_oracle_name();
  void set_allocated_new_oracle_name(::fantasybit::SignedTransaction* new_oracle_name);

  // optional int32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 timestamp = 21;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 21;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  static const int kMasterProofFieldNumber = 401;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MasterProof >, 11, false >
    master_proof;
  // @@protoc_insertion_point(class_scope:fantasybit.MasterProof)
 private:
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_new_oracle_name();
  void clear_has_new_oracle_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr season_;
  ::fantasybit::SignedTransaction* new_oracle_name_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 timestamp_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsMasterProofImpl();
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const PROTOBUF_FINAL { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.TransType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::fantasybit::TransType type() const;
  void set_type(::fantasybit::TransType value);

  // optional uint64 nonce = 10;
  bool has_nonce() const;
  void clear_nonce();
  static const int kNonceFieldNumber = 10;
  ::google::protobuf::uint64 nonce() const;
  void set_nonce(::google::protobuf::uint64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Transaction)
  // @@protoc_insertion_point(class_scope:fantasybit.Transaction)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_nonce();
  void clear_has_nonce();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  int type_;
  ::google::protobuf::uint64 nonce_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsTransactionImpl();
};
// -------------------------------------------------------------------

class NameTrans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NameTrans) */ {
 public:
  NameTrans();
  virtual ~NameTrans();

  NameTrans(const NameTrans& from);

  inline NameTrans& operator=(const NameTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameTrans(NameTrans&& from) noexcept
    : NameTrans() {
    *this = ::std::move(from);
  }

  inline NameTrans& operator=(NameTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameTrans* internal_default_instance() {
    return reinterpret_cast<const NameTrans*>(
               &_NameTrans_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(NameTrans* other);
  friend void swap(NameTrans& a, NameTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameTrans* New() const PROTOBUF_FINAL { return New(NULL); }

  NameTrans* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NameTrans& from);
  void MergeFrom(const NameTrans& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NameTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fantasy_name = 10;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 10;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasy_name(::std::string&& value);
  #endif
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional bytes public_key = 20;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 20;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional bytes recovery_key = 40;
  bool has_recovery_key() const;
  void clear_recovery_key();
  static const int kRecoveryKeyFieldNumber = 40;
  const ::std::string& recovery_key() const;
  void set_recovery_key(const ::std::string& value);
  #if LANG_CXX11
  void set_recovery_key(::std::string&& value);
  #endif
  void set_recovery_key(const char* value);
  void set_recovery_key(const void* value, size_t size);
  ::std::string* mutable_recovery_key();
  ::std::string* release_recovery_key();
  void set_allocated_recovery_key(::std::string* recovery_key);

  // optional string my_agent = 60;
  bool has_my_agent() const;
  void clear_my_agent();
  static const int kMyAgentFieldNumber = 60;
  const ::std::string& my_agent() const;
  void set_my_agent(const ::std::string& value);
  #if LANG_CXX11
  void set_my_agent(::std::string&& value);
  #endif
  void set_my_agent(const char* value);
  void set_my_agent(const char* value, size_t size);
  ::std::string* mutable_my_agent();
  ::std::string* release_my_agent();
  void set_allocated_my_agent(::std::string* my_agent);

  // optional .fantasybit.NameProof proof = 30;
  bool has_proof() const;
  void clear_proof();
  static const int kProofFieldNumber = 30;
  const ::fantasybit::NameProof& proof() const;
  ::fantasybit::NameProof* release_proof();
  ::fantasybit::NameProof* mutable_proof();
  void set_allocated_proof(::fantasybit::NameProof* proof);

  // optional bool am_agent = 50;
  bool has_am_agent() const;
  void clear_am_agent();
  static const int kAmAgentFieldNumber = 50;
  bool am_agent() const;
  void set_am_agent(bool value);

  static const int kNameTransFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
    name_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.NameTrans)
 private:
  void set_has_fantasy_name();
  void clear_has_fantasy_name();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_proof();
  void clear_has_proof();
  void set_has_recovery_key();
  void clear_has_recovery_key();
  void set_has_am_agent();
  void clear_has_am_agent();
  void set_has_my_agent();
  void clear_has_my_agent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr recovery_key_;
  ::google::protobuf::internal::ArenaStringPtr my_agent_;
  ::fantasybit::NameProof* proof_;
  bool am_agent_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsNameTransImpl();
};
// -------------------------------------------------------------------

class TransferTrans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TransferTrans) */ {
 public:
  TransferTrans();
  virtual ~TransferTrans();

  TransferTrans(const TransferTrans& from);

  inline TransferTrans& operator=(const TransferTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferTrans(TransferTrans&& from) noexcept
    : TransferTrans() {
    *this = ::std::move(from);
  }

  inline TransferTrans& operator=(TransferTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferTrans* internal_default_instance() {
    return reinterpret_cast<const TransferTrans*>(
               &_TransferTrans_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TransferTrans* other);
  friend void swap(TransferTrans& a, TransferTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferTrans* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferTrans* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransferTrans& from);
  void MergeFrom(const TransferTrans& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string from = 10;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 10;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // optional string to = 20;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 20;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // optional uint64 amount = 30;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 30;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  static const int kTransferTranFieldNumber = 400;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TransferTrans >, 11, false >
    transfer_tran;
  // @@protoc_insertion_point(class_scope:fantasybit.TransferTrans)
 private:
  void set_has_from();
  void clear_has_from();
  void set_has_to();
  void clear_has_to();
  void set_has_amount();
  void clear_has_amount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::uint64 amount_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsTransferTransImpl();
};
// -------------------------------------------------------------------

class SignedTransaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.SignedTransaction) */ {
 public:
  SignedTransaction();
  virtual ~SignedTransaction();

  SignedTransaction(const SignedTransaction& from);

  inline SignedTransaction& operator=(const SignedTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignedTransaction(SignedTransaction&& from) noexcept
    : SignedTransaction() {
    *this = ::std::move(from);
  }

  inline SignedTransaction& operator=(SignedTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedTransaction* internal_default_instance() {
    return reinterpret_cast<const SignedTransaction*>(
               &_SignedTransaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SignedTransaction* other);
  friend void swap(SignedTransaction& a, SignedTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignedTransaction* New() const PROTOBUF_FINAL { return New(NULL); }

  SignedTransaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignedTransaction& from);
  void MergeFrom(const SignedTransaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignedTransaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes id = 20;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 20;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes sig = 30;
  bool has_sig() const;
  void clear_sig();
  static const int kSigFieldNumber = 30;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // optional string fantasy_name = 40;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 40;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasy_name(::std::string&& value);
  #endif
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional .fantasybit.Transaction trans = 10;
  bool has_trans() const;
  void clear_trans();
  static const int kTransFieldNumber = 10;
  const ::fantasybit::Transaction& trans() const;
  ::fantasybit::Transaction* release_trans();
  ::fantasybit::Transaction* mutable_trans();
  void set_allocated_trans(::fantasybit::Transaction* trans);

  // @@protoc_insertion_point(class_scope:fantasybit.SignedTransaction)
 private:
  void set_has_trans();
  void clear_has_trans();
  void set_has_id();
  void clear_has_id();
  void set_has_sig();
  void clear_has_sig();
  void set_has_fantasy_name();
  void clear_has_fantasy_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::fantasybit::Transaction* trans_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsSignedTransactionImpl();
};
// -------------------------------------------------------------------

class BlockHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(BlockHeader* other);
  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BlockHeader_Type Type;
  static const Type NORMAL =
    BlockHeader_Type_NORMAL;
  static const Type DATA =
    BlockHeader_Type_DATA;
  static inline bool Type_IsValid(int value) {
    return BlockHeader_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BlockHeader_Type_Type_MIN;
  static const Type Type_MAX =
    BlockHeader_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BlockHeader_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BlockHeader_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BlockHeader_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BlockHeader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes prev_id = 20;
  bool has_prev_id() const;
  void clear_prev_id();
  static const int kPrevIdFieldNumber = 20;
  const ::std::string& prev_id() const;
  void set_prev_id(const ::std::string& value);
  #if LANG_CXX11
  void set_prev_id(::std::string&& value);
  #endif
  void set_prev_id(const char* value);
  void set_prev_id(const void* value, size_t size);
  ::std::string* mutable_prev_id();
  ::std::string* release_prev_id();
  void set_allocated_prev_id(::std::string* prev_id);

  // optional bytes generator_pk = 30;
  bool has_generator_pk() const;
  void clear_generator_pk();
  static const int kGeneratorPkFieldNumber = 30;
  const ::std::string& generator_pk() const;
  void set_generator_pk(const ::std::string& value);
  #if LANG_CXX11
  void set_generator_pk(::std::string&& value);
  #endif
  void set_generator_pk(const char* value);
  void set_generator_pk(const void* value, size_t size);
  ::std::string* mutable_generator_pk();
  ::std::string* release_generator_pk();
  void set_allocated_generator_pk(::std::string* generator_pk);

  // optional bytes generating_sig = 40;
  bool has_generating_sig() const;
  void clear_generating_sig();
  static const int kGeneratingSigFieldNumber = 40;
  const ::std::string& generating_sig() const;
  void set_generating_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_generating_sig(::std::string&& value);
  #endif
  void set_generating_sig(const char* value);
  void set_generating_sig(const void* value, size_t size);
  ::std::string* mutable_generating_sig();
  ::std::string* release_generating_sig();
  void set_allocated_generating_sig(::std::string* generating_sig);

  // optional bytes transaction_id = 70;
  bool has_transaction_id() const;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 70;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  #if LANG_CXX11
  void set_transaction_id(::std::string&& value);
  #endif
  void set_transaction_id(const char* value);
  void set_transaction_id(const void* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 num = 10;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 10;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 timestamp = 21;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 21;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // optional int32 basetarget = 50;
  bool has_basetarget() const;
  void clear_basetarget();
  static const int kBasetargetFieldNumber = 50;
  ::google::protobuf::int32 basetarget() const;
  void set_basetarget(::google::protobuf::int32 value);

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  bool has_blocktype() const;
  void clear_blocktype();
  static const int kBlocktypeFieldNumber = 60;
  ::fantasybit::BlockHeader_Type blocktype() const;
  void set_blocktype(::fantasybit::BlockHeader_Type value);

  // @@protoc_insertion_point(class_scope:fantasybit.BlockHeader)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_num();
  void clear_has_num();
  void set_has_prev_id();
  void clear_has_prev_id();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_generator_pk();
  void clear_has_generator_pk();
  void set_has_generating_sig();
  void clear_has_generating_sig();
  void set_has_basetarget();
  void clear_has_basetarget();
  void set_has_blocktype();
  void clear_has_blocktype();
  void set_has_transaction_id();
  void clear_has_transaction_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr prev_id_;
  ::google::protobuf::internal::ArenaStringPtr generator_pk_;
  ::google::protobuf::internal::ArenaStringPtr generating_sig_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 basetarget_;
  int blocktype_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsBlockHeaderImpl();
};
// -------------------------------------------------------------------

class SignedBlockHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.SignedBlockHeader) */ {
 public:
  SignedBlockHeader();
  virtual ~SignedBlockHeader();

  SignedBlockHeader(const SignedBlockHeader& from);

  inline SignedBlockHeader& operator=(const SignedBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignedBlockHeader(SignedBlockHeader&& from) noexcept
    : SignedBlockHeader() {
    *this = ::std::move(from);
  }

  inline SignedBlockHeader& operator=(SignedBlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedBlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedBlockHeader* internal_default_instance() {
    return reinterpret_cast<const SignedBlockHeader*>(
               &_SignedBlockHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SignedBlockHeader* other);
  friend void swap(SignedBlockHeader& a, SignedBlockHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignedBlockHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  SignedBlockHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignedBlockHeader& from);
  void MergeFrom(const SignedBlockHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignedBlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sig = 30;
  bool has_sig() const;
  void clear_sig();
  static const int kSigFieldNumber = 30;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // optional .fantasybit.BlockHeader head = 10;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 10;
  const ::fantasybit::BlockHeader& head() const;
  ::fantasybit::BlockHeader* release_head();
  ::fantasybit::BlockHeader* mutable_head();
  void set_allocated_head(::fantasybit::BlockHeader* head);

  // @@protoc_insertion_point(class_scope:fantasybit.SignedBlockHeader)
 private:
  void set_has_head();
  void clear_has_head();
  void set_has_sig();
  void clear_has_sig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::fantasybit::BlockHeader* head_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsSignedBlockHeaderImpl();
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const PROTOBUF_FINAL { return New(NULL); }

  Block* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  int signed_transactions_size() const;
  void clear_signed_transactions();
  static const int kSignedTransactionsFieldNumber = 20;
  const ::fantasybit::SignedTransaction& signed_transactions(int index) const;
  ::fantasybit::SignedTransaction* mutable_signed_transactions(int index);
  ::fantasybit::SignedTransaction* add_signed_transactions();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
      mutable_signed_transactions();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
      signed_transactions() const;

  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  bool has_signedhead() const;
  void clear_signedhead();
  static const int kSignedheadFieldNumber = 10;
  const ::fantasybit::SignedBlockHeader& signedhead() const;
  ::fantasybit::SignedBlockHeader* release_signedhead();
  ::fantasybit::SignedBlockHeader* mutable_signedhead();
  void set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Block)
  // @@protoc_insertion_point(class_scope:fantasybit.Block)
 private:
  void set_has_signedhead();
  void clear_has_signedhead();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction > signed_transactions_;
  ::fantasybit::SignedBlockHeader* signedhead_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsBlockImpl();
};
// -------------------------------------------------------------------

class NodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NodeRequest) */ {
 public:
  NodeRequest();
  virtual ~NodeRequest();

  NodeRequest(const NodeRequest& from);

  inline NodeRequest& operator=(const NodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeRequest(NodeRequest&& from) noexcept
    : NodeRequest() {
    *this = ::std::move(from);
  }

  inline NodeRequest& operator=(NodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeRequest* internal_default_instance() {
    return reinterpret_cast<const NodeRequest*>(
               &_NodeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(NodeRequest* other);
  friend void swap(NodeRequest& a, NodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeRequest& from);
  void MergeFrom(const NodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NodeRequest_Type Type;
  static const Type HANDSHAKE =
    NodeRequest_Type_HANDSHAKE;
  static const Type BLOCK_REQUEST =
    NodeRequest_Type_BLOCK_REQUEST;
  static const Type HIGHT_REQUEST =
    NodeRequest_Type_HIGHT_REQUEST;
  static const Type NAT_TEST =
    NodeRequest_Type_NAT_TEST;
  static inline bool Type_IsValid(int value) {
    return NodeRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NodeRequest_Type_Type_MIN;
  static const Type Type_MAX =
    NodeRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NodeRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NodeRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NodeRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NodeRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string myip = 20;
  bool has_myip() const;
  void clear_myip();
  static const int kMyipFieldNumber = 20;
  const ::std::string& myip() const;
  void set_myip(const ::std::string& value);
  #if LANG_CXX11
  void set_myip(::std::string&& value);
  #endif
  void set_myip(const char* value);
  void set_myip(const char* value, size_t size);
  ::std::string* mutable_myip();
  ::std::string* release_myip();
  void set_allocated_myip(::std::string* myip);

  // optional string myhost = 40;
  bool has_myhost() const;
  void clear_myhost();
  static const int kMyhostFieldNumber = 40;
  const ::std::string& myhost() const;
  void set_myhost(const ::std::string& value);
  #if LANG_CXX11
  void set_myhost(::std::string&& value);
  #endif
  void set_myhost(const char* value);
  void set_myhost(const char* value, size_t size);
  ::std::string* mutable_myhost();
  ::std::string* release_myhost();
  void set_allocated_myhost(::std::string* myhost);

  // optional int32 num = 30;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 30;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional .fantasybit.NodeRequest.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::fantasybit::NodeRequest_Type type() const;
  void set_type(::fantasybit::NodeRequest_Type value);

  // @@protoc_insertion_point(class_scope:fantasybit.NodeRequest)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_myip();
  void clear_has_myip();
  void set_has_num();
  void clear_has_num();
  void set_has_myhost();
  void clear_has_myhost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr myip_;
  ::google::protobuf::internal::ArenaStringPtr myhost_;
  ::google::protobuf::int32 num_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsNodeRequestImpl();
};
// -------------------------------------------------------------------

class NodeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NodeReply) */ {
 public:
  NodeReply();
  virtual ~NodeReply();

  NodeReply(const NodeReply& from);

  inline NodeReply& operator=(const NodeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeReply(NodeReply&& from) noexcept
    : NodeReply() {
    *this = ::std::move(from);
  }

  inline NodeReply& operator=(NodeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeReply* internal_default_instance() {
    return reinterpret_cast<const NodeReply*>(
               &_NodeReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(NodeReply* other);
  friend void swap(NodeReply& a, NodeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeReply* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeReply& from);
  void MergeFrom(const NodeReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ips = 20;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 20;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ips(int index, ::std::string&& value);
  #endif
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  #if LANG_CXX11
  void add_ips(::std::string&& value);
  #endif
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // optional int32 hight = 10;
  bool has_hight() const;
  void clear_hight();
  static const int kHightFieldNumber = 10;
  ::google::protobuf::int32 hight() const;
  void set_hight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.NodeReply)
 private:
  void set_has_hight();
  void clear_has_hight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::int32 hight_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsNodeReplyImpl();
};
// -------------------------------------------------------------------

class FantasyPlayerPoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyPlayerPoints) */ {
 public:
  FantasyPlayerPoints();
  virtual ~FantasyPlayerPoints();

  FantasyPlayerPoints(const FantasyPlayerPoints& from);

  inline FantasyPlayerPoints& operator=(const FantasyPlayerPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyPlayerPoints(FantasyPlayerPoints&& from) noexcept
    : FantasyPlayerPoints() {
    *this = ::std::move(from);
  }

  inline FantasyPlayerPoints& operator=(FantasyPlayerPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyPlayerPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyPlayerPoints* internal_default_instance() {
    return reinterpret_cast<const FantasyPlayerPoints*>(
               &_FantasyPlayerPoints_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(FantasyPlayerPoints* other);
  friend void swap(FantasyPlayerPoints& a, FantasyPlayerPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyPlayerPoints* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyPlayerPoints* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyPlayerPoints& from);
  void MergeFrom(const FantasyPlayerPoints& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyPlayerPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional int32 points = 40;
  bool has_points() const;
  void clear_points();
  static const int kPointsFieldNumber = 40;
  ::google::protobuf::int32 points() const;
  void set_points(::google::protobuf::int32 value);

  // optional float result = 50;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 50;
  float result() const;
  void set_result(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyPlayerPoints)
 private:
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_points();
  void clear_has_points();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::int32 points_;
  float result_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsFantasyPlayerPointsImpl();
};
// -------------------------------------------------------------------

class ProjectionTrans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjectionTrans) */ {
 public:
  ProjectionTrans();
  virtual ~ProjectionTrans();

  ProjectionTrans(const ProjectionTrans& from);

  inline ProjectionTrans& operator=(const ProjectionTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectionTrans(ProjectionTrans&& from) noexcept
    : ProjectionTrans() {
    *this = ::std::move(from);
  }

  inline ProjectionTrans& operator=(ProjectionTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectionTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectionTrans* internal_default_instance() {
    return reinterpret_cast<const ProjectionTrans*>(
               &_ProjectionTrans_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ProjectionTrans* other);
  friend void swap(ProjectionTrans& a, ProjectionTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectionTrans* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectionTrans* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectionTrans& from);
  void MergeFrom(const ProjectionTrans& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectionTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional int32 points = 40;
  bool has_points() const;
  void clear_points();
  static const int kPointsFieldNumber = 40;
  ::google::protobuf::int32 points() const;
  void set_points(::google::protobuf::int32 value);

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  static const int kProjTransFieldNumber = 201;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
    proj_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.ProjectionTrans)
 private:
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_points();
  void clear_has_points();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 points_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsProjectionTransImpl();
};
// -------------------------------------------------------------------

class PlayerPoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerPoints) */ {
 public:
  PlayerPoints();
  virtual ~PlayerPoints();

  PlayerPoints(const PlayerPoints& from);

  inline PlayerPoints& operator=(const PlayerPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerPoints(PlayerPoints&& from) noexcept
    : PlayerPoints() {
    *this = ::std::move(from);
  }

  inline PlayerPoints& operator=(PlayerPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerPoints* internal_default_instance() {
    return reinterpret_cast<const PlayerPoints*>(
               &_PlayerPoints_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(PlayerPoints* other);
  friend void swap(PlayerPoints& a, PlayerPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerPoints* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerPoints* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerPoints& from);
  void MergeFrom(const PlayerPoints& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional int32 points = 40;
  bool has_points() const;
  void clear_points();
  static const int kPointsFieldNumber = 40;
  ::google::protobuf::int32 points() const;
  void set_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerPoints)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_points();
  void clear_has_points();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 points_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsPlayerPointsImpl();
};
// -------------------------------------------------------------------

class ProjectionTransBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjectionTransBlock) */ {
 public:
  ProjectionTransBlock();
  virtual ~ProjectionTransBlock();

  ProjectionTransBlock(const ProjectionTransBlock& from);

  inline ProjectionTransBlock& operator=(const ProjectionTransBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectionTransBlock(ProjectionTransBlock&& from) noexcept
    : ProjectionTransBlock() {
    *this = ::std::move(from);
  }

  inline ProjectionTransBlock& operator=(ProjectionTransBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectionTransBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectionTransBlock* internal_default_instance() {
    return reinterpret_cast<const ProjectionTransBlock*>(
               &_ProjectionTransBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(ProjectionTransBlock* other);
  friend void swap(ProjectionTransBlock& a, ProjectionTransBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectionTransBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectionTransBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectionTransBlock& from);
  void MergeFrom(const ProjectionTransBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectionTransBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.PlayerPoints player_points = 30;
  int player_points_size() const;
  void clear_player_points();
  static const int kPlayerPointsFieldNumber = 30;
  const ::fantasybit::PlayerPoints& player_points(int index) const;
  ::fantasybit::PlayerPoints* mutable_player_points(int index);
  ::fantasybit::PlayerPoints* add_player_points();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerPoints >*
      mutable_player_points();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerPoints >&
      player_points() const;

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  static const int kProjTransBlockFieldNumber = 211;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTransBlock >, 11, false >
    proj_trans_block;
  // @@protoc_insertion_point(class_scope:fantasybit.ProjectionTransBlock)
 private:
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerPoints > player_points_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsProjectionTransBlockImpl();
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Data_Type Type;
  static const Type SCHEDULE =
    Data_Type_SCHEDULE;
  static const Type PLAYER =
    Data_Type_PLAYER;
  static const Type GAME =
    Data_Type_GAME;
  static const Type RESULT =
    Data_Type_RESULT;
  static const Type MESSAGE =
    Data_Type_MESSAGE;
  static inline bool Type_IsValid(int value) {
    return Data_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Data_Type_Type_MIN;
  static const Type Type_MAX =
    Data_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Data_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Data_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Data_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Data_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 version = 10;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 10;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.Data.Type type = 20;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::fantasybit::Data_Type type() const;
  void set_type(::fantasybit::Data_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Data)
  // @@protoc_insertion_point(class_scope:fantasybit.Data)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsDataImpl();
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerData) */ {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(PlayerData* other);
  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerData* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 10;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 10;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional .fantasybit.PlayerBase player_base = 20;
  bool has_player_base() const;
  void clear_player_base();
  static const int kPlayerBaseFieldNumber = 20;
  const ::fantasybit::PlayerBase& player_base() const;
  ::fantasybit::PlayerBase* release_player_base();
  ::fantasybit::PlayerBase* mutable_player_base();
  void set_allocated_player_base(::fantasybit::PlayerBase* player_base);

  // optional .fantasybit.PlayerStatus player_status = 30;
  bool has_player_status() const;
  void clear_player_status();
  static const int kPlayerStatusFieldNumber = 30;
  const ::fantasybit::PlayerStatus& player_status() const;
  ::fantasybit::PlayerStatus* release_player_status();
  ::fantasybit::PlayerStatus* mutable_player_status();
  void set_allocated_player_status(::fantasybit::PlayerStatus* player_status);

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  bool has_player_game_status() const;
  void clear_player_game_status();
  static const int kPlayerGameStatusFieldNumber = 40;
  ::fantasybit::PlayerGameStatus player_game_status() const;
  void set_player_game_status(::fantasybit::PlayerGameStatus value);

  static const int kPlayerDataFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
    player_data;
  // @@protoc_insertion_point(class_scope:fantasybit.PlayerData)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_player_base();
  void clear_has_player_base();
  void set_has_player_status();
  void clear_has_player_status();
  void set_has_player_game_status();
  void clear_has_player_game_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::fantasybit::PlayerBase* player_base_;
  ::fantasybit::PlayerStatus* player_status_;
  int player_game_status_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsPlayerDataImpl();
};
// -------------------------------------------------------------------

class GameData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameData) */ {
 public:
  GameData();
  virtual ~GameData();

  GameData(const GameData& from);

  inline GameData& operator=(const GameData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameData(GameData&& from) noexcept
    : GameData() {
    *this = ::std::move(from);
  }

  inline GameData& operator=(GameData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameData* internal_default_instance() {
    return reinterpret_cast<const GameData*>(
               &_GameData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(GameData* other);
  friend void swap(GameData& a, GameData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameData* New() const PROTOBUF_FINAL { return New(NULL); }

  GameData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameData& from);
  void MergeFrom(const GameData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 10;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 10;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional .fantasybit.GameStatus status = 20;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 20;
  const ::fantasybit::GameStatus& status() const;
  ::fantasybit::GameStatus* release_status();
  ::fantasybit::GameStatus* mutable_status();
  void set_allocated_status(::fantasybit::GameStatus* status);

  static const int kGameDataFieldNumber = 111;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GameData >, 11, false >
    game_data;
  // @@protoc_insertion_point(class_scope:fantasybit.GameData)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::fantasybit::GameStatus* status_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsGameDataImpl();
};
// -------------------------------------------------------------------

class ResultData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ResultData) */ {
 public:
  ResultData();
  virtual ~ResultData();

  ResultData(const ResultData& from);

  inline ResultData& operator=(const ResultData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultData(ResultData&& from) noexcept
    : ResultData() {
    *this = ::std::move(from);
  }

  inline ResultData& operator=(ResultData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultData* internal_default_instance() {
    return reinterpret_cast<const ResultData*>(
               &_ResultData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ResultData* other);
  friend void swap(ResultData& a, ResultData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultData* New() const PROTOBUF_FINAL { return New(NULL); }

  ResultData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResultData& from);
  void MergeFrom(const ResultData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResultData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.GameResult game_result = 10;
  bool has_game_result() const;
  void clear_game_result();
  static const int kGameResultFieldNumber = 10;
  const ::fantasybit::GameResult& game_result() const;
  ::fantasybit::GameResult* release_game_result();
  ::fantasybit::GameResult* mutable_game_result();
  void set_allocated_game_result(::fantasybit::GameResult* game_result);

  static const int kResultDataFieldNumber = 202;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
    result_data;
  // @@protoc_insertion_point(class_scope:fantasybit.ResultData)
 private:
  void set_has_game_result();
  void clear_has_game_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::GameResult* game_result_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsResultDataImpl();
};
// -------------------------------------------------------------------

class ScheduleData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ScheduleData) */ {
 public:
  ScheduleData();
  virtual ~ScheduleData();

  ScheduleData(const ScheduleData& from);

  inline ScheduleData& operator=(const ScheduleData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScheduleData(ScheduleData&& from) noexcept
    : ScheduleData() {
    *this = ::std::move(from);
  }

  inline ScheduleData& operator=(ScheduleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleData* internal_default_instance() {
    return reinterpret_cast<const ScheduleData*>(
               &_ScheduleData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(ScheduleData* other);
  friend void swap(ScheduleData& a, ScheduleData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScheduleData* New() const PROTOBUF_FINAL { return New(NULL); }

  ScheduleData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScheduleData& from);
  void MergeFrom(const ScheduleData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScheduleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.WeeklySchedule weekly = 10;
  bool has_weekly() const;
  void clear_weekly();
  static const int kWeeklyFieldNumber = 10;
  const ::fantasybit::WeeklySchedule& weekly() const;
  ::fantasybit::WeeklySchedule* release_weekly();
  ::fantasybit::WeeklySchedule* mutable_weekly();
  void set_allocated_weekly(::fantasybit::WeeklySchedule* weekly);

  // optional int32 week = 1;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  static const int kScheduleDataFieldNumber = 302;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ScheduleData >, 11, false >
    schedule_data;
  // @@protoc_insertion_point(class_scope:fantasybit.ScheduleData)
 private:
  void set_has_week();
  void clear_has_week();
  void set_has_weekly();
  void clear_has_weekly();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::WeeklySchedule* weekly_;
  ::google::protobuf::int32 week_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsScheduleDataImpl();
};
// -------------------------------------------------------------------

class DataTransition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.DataTransition) */ {
 public:
  DataTransition();
  virtual ~DataTransition();

  DataTransition(const DataTransition& from);

  inline DataTransition& operator=(const DataTransition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataTransition(DataTransition&& from) noexcept
    : DataTransition() {
    *this = ::std::move(from);
  }

  inline DataTransition& operator=(DataTransition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataTransition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTransition* internal_default_instance() {
    return reinterpret_cast<const DataTransition*>(
               &_DataTransition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(DataTransition* other);
  friend void swap(DataTransition& a, DataTransition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataTransition* New() const PROTOBUF_FINAL { return New(NULL); }

  DataTransition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataTransition& from);
  void MergeFrom(const DataTransition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataTransition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.GameData gamedata = 30;
  int gamedata_size() const;
  void clear_gamedata();
  static const int kGamedataFieldNumber = 30;
  const ::fantasybit::GameData& gamedata(int index) const;
  ::fantasybit::GameData* mutable_gamedata(int index);
  ::fantasybit::GameData* add_gamedata();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >*
      mutable_gamedata();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >&
      gamedata() const;

  // repeated .fantasybit.Data data = 40;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 40;
  const ::fantasybit::Data& data(int index) const;
  ::fantasybit::Data* mutable_data(int index);
  ::fantasybit::Data* add_data();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
      data() const;

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional .fantasybit.TrType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::TrType type() const;
  void set_type(::fantasybit::TrType value);

  static const int kDataTransFieldNumber = 203;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
    data_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.DataTransition)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData > gamedata_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data > data_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsDataTransitionImpl();
};
// -------------------------------------------------------------------

class TeamState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamState) */ {
 public:
  TeamState();
  virtual ~TeamState();

  TeamState(const TeamState& from);

  inline TeamState& operator=(const TeamState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamState(TeamState&& from) noexcept
    : TeamState() {
    *this = ::std::move(from);
  }

  inline TeamState& operator=(TeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamState* internal_default_instance() {
    return reinterpret_cast<const TeamState*>(
               &_TeamState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(TeamState* other);
  friend void swap(TeamState& a, TeamState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamState* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamState& from);
  void MergeFrom(const TeamState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TeamState_State State;
  static const State PREGAME =
    TeamState_State_PREGAME;
  static const State INGAME =
    TeamState_State_INGAME;
  static inline bool State_IsValid(int value) {
    return TeamState_State_IsValid(value);
  }
  static const State State_MIN =
    TeamState_State_State_MIN;
  static const State State_MAX =
    TeamState_State_State_MAX;
  static const int State_ARRAYSIZE =
    TeamState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return TeamState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return TeamState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return TeamState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string teamid = 20;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 20;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamid(::std::string&& value);
  #endif
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // optional uint32 week = 10;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 10;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional .fantasybit.TeamState.State state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::fantasybit::TeamState_State state() const;
  void set_state(::fantasybit::TeamState_State value);

  // @@protoc_insertion_point(class_scope:fantasybit.TeamState)
 private:
  void set_has_state();
  void clear_has_state();
  void set_has_week();
  void clear_has_week();
  void set_has_teamid();
  void clear_has_teamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  ::google::protobuf::uint32 week_;
  int state_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsTeamStateImpl();
};
// -------------------------------------------------------------------

class DeltaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.DeltaData) */ {
 public:
  DeltaData();
  virtual ~DeltaData();

  DeltaData(const DeltaData& from);

  inline DeltaData& operator=(const DeltaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeltaData(DeltaData&& from) noexcept
    : DeltaData() {
    *this = ::std::move(from);
  }

  inline DeltaData& operator=(DeltaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeltaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeltaData* internal_default_instance() {
    return reinterpret_cast<const DeltaData*>(
               &_DeltaData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(DeltaData* other);
  friend void swap(DeltaData& a, DeltaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeltaData* New() const PROTOBUF_FINAL { return New(NULL); }

  DeltaData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeltaData& from);
  void MergeFrom(const DeltaData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeltaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DeltaData_Type Type;
  static const Type SNAPSHOT =
    DeltaData_Type_SNAPSHOT;
  static const Type HEARTBEAT =
    DeltaData_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return DeltaData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DeltaData_Type_Type_MIN;
  static const Type Type_MAX =
    DeltaData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DeltaData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DeltaData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DeltaData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DeltaData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  int myfantasyname_size() const;
  void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  const ::fantasybit::MyFantasyName& myfantasyname(int index) const;
  ::fantasybit::MyFantasyName* mutable_myfantasyname(int index);
  ::fantasybit::MyFantasyName* add_myfantasyname();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >*
      mutable_myfantasyname();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >&
      myfantasyname() const;

  // repeated .fantasybit.TeamState teamstates = 20;
  int teamstates_size() const;
  void clear_teamstates();
  static const int kTeamstatesFieldNumber = 20;
  const ::fantasybit::TeamState& teamstates(int index) const;
  ::fantasybit::TeamState* mutable_teamstates(int index);
  ::fantasybit::TeamState* add_teamstates();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >*
      mutable_teamstates();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >&
      teamstates() const;

  // repeated .fantasybit.Data datas = 30;
  int datas_size() const;
  void clear_datas();
  static const int kDatasFieldNumber = 30;
  const ::fantasybit::Data& datas(int index) const;
  ::fantasybit::Data* mutable_datas(int index);
  ::fantasybit::Data* add_datas();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
      mutable_datas();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
      datas() const;

  // repeated .fantasybit.FantasyPlayer players = 40;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 40;
  const ::fantasybit::FantasyPlayer& players(int index) const;
  ::fantasybit::FantasyPlayer* mutable_players(int index);
  ::fantasybit::FantasyPlayer* add_players();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >&
      players() const;

  // optional .fantasybit.GlobalState globalstate = 10;
  bool has_globalstate() const;
  void clear_globalstate();
  static const int kGlobalstateFieldNumber = 10;
  const ::fantasybit::GlobalState& globalstate() const;
  ::fantasybit::GlobalState* release_globalstate();
  ::fantasybit::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::fantasybit::GlobalState* globalstate);

  // optional .fantasybit.DeltaData.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::DeltaData_Type type() const;
  void set_type(::fantasybit::DeltaData_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeltaData)
  // @@protoc_insertion_point(class_scope:fantasybit.DeltaData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_globalstate();
  void clear_has_globalstate();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName > myfantasyname_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState > teamstates_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data > datas_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer > players_;
  ::fantasybit::GlobalState* globalstate_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsDeltaDataImpl();
};
// -------------------------------------------------------------------

class MessageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MessageData) */ {
 public:
  MessageData();
  virtual ~MessageData();

  MessageData(const MessageData& from);

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageData(MessageData&& from) noexcept
    : MessageData() {
    *this = ::std::move(from);
  }

  inline MessageData& operator=(MessageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageData* internal_default_instance() {
    return reinterpret_cast<const MessageData*>(
               &_MessageData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(MessageData* other);
  friend void swap(MessageData& a, MessageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageData* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 10;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 10;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 gt = 20;
  bool has_gt() const;
  void clear_gt();
  static const int kGtFieldNumber = 20;
  ::google::protobuf::int32 gt() const;
  void set_gt(::google::protobuf::int32 value);

  // optional int32 lt = 30;
  bool has_lt() const;
  void clear_lt();
  static const int kLtFieldNumber = 30;
  ::google::protobuf::int32 lt() const;
  void set_lt(::google::protobuf::int32 value);

  static const int kMessageDataFieldNumber = 404;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MessageData >, 11, false >
    message_data;
  // @@protoc_insertion_point(class_scope:fantasybit.MessageData)
 private:
  void set_has_msg();
  void clear_has_msg();
  void set_has_gt();
  void clear_has_gt();
  void set_has_lt();
  void clear_has_lt();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 gt_;
  ::google::protobuf::int32 lt_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsMessageDataImpl();
};
// -------------------------------------------------------------------

class StampedTrans : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.StampedTrans) */ {
 public:
  StampedTrans();
  virtual ~StampedTrans();

  StampedTrans(const StampedTrans& from);

  inline StampedTrans& operator=(const StampedTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StampedTrans(StampedTrans&& from) noexcept
    : StampedTrans() {
    *this = ::std::move(from);
  }

  inline StampedTrans& operator=(StampedTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StampedTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StampedTrans* internal_default_instance() {
    return reinterpret_cast<const StampedTrans*>(
               &_StampedTrans_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(StampedTrans* other);
  friend void swap(StampedTrans& a, StampedTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StampedTrans* New() const PROTOBUF_FINAL { return New(NULL); }

  StampedTrans* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StampedTrans& from);
  void MergeFrom(const StampedTrans& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StampedTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.SignedTransaction signed_orig = 30;
  bool has_signed_orig() const;
  void clear_signed_orig();
  static const int kSignedOrigFieldNumber = 30;
  const ::fantasybit::SignedTransaction& signed_orig() const;
  ::fantasybit::SignedTransaction* release_signed_orig();
  ::fantasybit::SignedTransaction* mutable_signed_orig();
  void set_allocated_signed_orig(::fantasybit::SignedTransaction* signed_orig);

  // optional uint64 timestamp = 10;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional int32 seqnum = 20;
  bool has_seqnum() const;
  void clear_seqnum();
  static const int kSeqnumFieldNumber = 20;
  ::google::protobuf::int32 seqnum() const;
  void set_seqnum(::google::protobuf::int32 value);

  // optional int32 prevseq = 21;
  bool has_prevseq() const;
  void clear_prevseq();
  static const int kPrevseqFieldNumber = 21;
  ::google::protobuf::int32 prevseq() const;
  void set_prevseq(::google::protobuf::int32 value);

  static const int kStampedTransFieldNumber = 300;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::StampedTrans >, 11, false >
    stamped_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.StampedTrans)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_seqnum();
  void clear_has_seqnum();
  void set_has_prevseq();
  void clear_has_prevseq();
  void set_has_signed_orig();
  void clear_has_signed_orig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::SignedTransaction* signed_orig_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 seqnum_;
  ::google::protobuf::int32 prevseq_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsStampedTransImpl();
};
// -------------------------------------------------------------------

class ExchangeOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ExchangeOrder) */ {
 public:
  ExchangeOrder();
  virtual ~ExchangeOrder();

  ExchangeOrder(const ExchangeOrder& from);

  inline ExchangeOrder& operator=(const ExchangeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExchangeOrder(ExchangeOrder&& from) noexcept
    : ExchangeOrder() {
    *this = ::std::move(from);
  }

  inline ExchangeOrder& operator=(ExchangeOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExchangeOrder* internal_default_instance() {
    return reinterpret_cast<const ExchangeOrder*>(
               &_ExchangeOrder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ExchangeOrder* other);
  friend void swap(ExchangeOrder& a, ExchangeOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExchangeOrder* New() const PROTOBUF_FINAL { return New(NULL); }

  ExchangeOrder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExchangeOrder& from);
  void MergeFrom(const ExchangeOrder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExchangeOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ExchangeOrder_Type Type;
  static const Type NEW =
    ExchangeOrder_Type_NEW;
  static const Type CANCEL =
    ExchangeOrder_Type_CANCEL;
  static const Type REPLACE =
    ExchangeOrder_Type_REPLACE;
  static inline bool Type_IsValid(int value) {
    return ExchangeOrder_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ExchangeOrder_Type_Type_MIN;
  static const Type Type_MAX =
    ExchangeOrder_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ExchangeOrder_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ExchangeOrder_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ExchangeOrder_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ExchangeOrder_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string playerid = 40;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 40;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional string symbol = 120;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 120;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional .fantasybit.OrderCore core = 50;
  bool has_core() const;
  void clear_core();
  static const int kCoreFieldNumber = 50;
  const ::fantasybit::OrderCore& core() const;
  ::fantasybit::OrderCore* release_core();
  ::fantasybit::OrderCore* mutable_core();
  void set_allocated_core(::fantasybit::OrderCore* core);

  // optional .fantasybit.FutContract futcontract = 110;
  bool has_futcontract() const;
  void clear_futcontract();
  static const int kFutcontractFieldNumber = 110;
  const ::fantasybit::FutContract& futcontract() const;
  ::fantasybit::FutContract* release_futcontract();
  ::fantasybit::FutContract* mutable_futcontract();
  void set_allocated_futcontract(::fantasybit::FutContract* futcontract);

  // optional int32 cancel_oref = 100;
  bool has_cancel_oref() const;
  void clear_cancel_oref();
  static const int kCancelOrefFieldNumber = 100;
  ::google::protobuf::int32 cancel_oref() const;
  void set_cancel_oref(::google::protobuf::int32 value);

  // optional .fantasybit.ExchangeOrder.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::fantasybit::ExchangeOrder_Type type() const;
  void set_type(::fantasybit::ExchangeOrder_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ExchangeOrder)
  static const int kExchangeOrderFieldNumber = 310;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ExchangeOrder >, 11, false >
    exchange_order;
  // @@protoc_insertion_point(class_scope:fantasybit.ExchangeOrder)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_core();
  void clear_has_core();
  void set_has_cancel_oref();
  void clear_has_cancel_oref();
  void set_has_futcontract();
  void clear_has_futcontract();
  void set_has_symbol();
  void clear_has_symbol();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::fantasybit::OrderCore* core_;
  ::fantasybit::FutContract* futcontract_;
  ::google::protobuf::int32 cancel_oref_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsExchangeOrderImpl();
};
// -------------------------------------------------------------------

class OrderUnique : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderUnique) */ {
 public:
  OrderUnique();
  virtual ~OrderUnique();

  OrderUnique(const OrderUnique& from);

  inline OrderUnique& operator=(const OrderUnique& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderUnique(OrderUnique&& from) noexcept
    : OrderUnique() {
    *this = ::std::move(from);
  }

  inline OrderUnique& operator=(OrderUnique&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderUnique& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderUnique* internal_default_instance() {
    return reinterpret_cast<const OrderUnique*>(
               &_OrderUnique_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(OrderUnique* other);
  friend void swap(OrderUnique& a, OrderUnique& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderUnique* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderUnique* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderUnique& from);
  void MergeFrom(const OrderUnique& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderUnique* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 10;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 10;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional string playerid = 50;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 50;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional uint32 season = 20;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 20;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 30;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 30;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional bool buyside = 40;
  bool has_buyside() const;
  void clear_buyside();
  static const int kBuysideFieldNumber = 40;
  bool buyside() const;
  void set_buyside(bool value);

  // optional int32 price = 70;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 70;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.OrderUnique)
 private:
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_buyside();
  void clear_has_buyside();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_price();
  void clear_has_price();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  bool buyside_;
  ::google::protobuf::int32 price_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsOrderUniqueImpl();
};
// -------------------------------------------------------------------

class OrderDeets : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderDeets) */ {
 public:
  OrderDeets();
  virtual ~OrderDeets();

  OrderDeets(const OrderDeets& from);

  inline OrderDeets& operator=(const OrderDeets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderDeets(OrderDeets&& from) noexcept
    : OrderDeets() {
    *this = ::std::move(from);
  }

  inline OrderDeets& operator=(OrderDeets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderDeets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderDeets* internal_default_instance() {
    return reinterpret_cast<const OrderDeets*>(
               &_OrderDeets_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(OrderDeets* other);
  friend void swap(OrderDeets& a, OrderDeets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderDeets* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderDeets* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderDeets& from);
  void MergeFrom(const OrderDeets& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderDeets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes oid = 10;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 10;
  const ::std::string& oid() const;
  void set_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_oid(::std::string&& value);
  #endif
  void set_oid(const char* value);
  void set_oid(const void* value, size_t size);
  ::std::string* mutable_oid();
  ::std::string* release_oid();
  void set_allocated_oid(::std::string* oid);

  // optional .fantasybit.OrderUnique order = 20;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 20;
  const ::fantasybit::OrderUnique& order() const;
  ::fantasybit::OrderUnique* release_order();
  ::fantasybit::OrderUnique* mutable_order();
  void set_allocated_order(::fantasybit::OrderUnique* order);

  // optional int32 size = 30;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 30;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.OrderDeets)
 private:
  void set_has_oid();
  void clear_has_oid();
  void set_has_order();
  void clear_has_order();
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr oid_;
  ::fantasybit::OrderUnique* order_;
  ::google::protobuf::int32 size_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsOrderDeetsImpl();
};
// -------------------------------------------------------------------

class InsideUnique : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.InsideUnique) */ {
 public:
  InsideUnique();
  virtual ~InsideUnique();

  InsideUnique(const InsideUnique& from);

  inline InsideUnique& operator=(const InsideUnique& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsideUnique(InsideUnique&& from) noexcept
    : InsideUnique() {
    *this = ::std::move(from);
  }

  inline InsideUnique& operator=(InsideUnique&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsideUnique& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsideUnique* internal_default_instance() {
    return reinterpret_cast<const InsideUnique*>(
               &_InsideUnique_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(InsideUnique* other);
  friend void swap(InsideUnique& a, InsideUnique& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsideUnique* New() const PROTOBUF_FINAL { return New(NULL); }

  InsideUnique* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InsideUnique& from);
  void MergeFrom(const InsideUnique& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InsideUnique* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 10;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 10;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional bytes oid = 11;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 11;
  const ::std::string& oid() const;
  void set_oid(const ::std::string& value);
  #if LANG_CXX11
  void set_oid(::std::string&& value);
  #endif
  void set_oid(const char* value);
  void set_oid(const void* value, size_t size);
  ::std::string* mutable_oid();
  ::std::string* release_oid();
  void set_allocated_oid(::std::string* oid);

  // optional string playerid = 50;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 50;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional .fantasybit.OrderUnique order = 20;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 20;
  const ::fantasybit::OrderUnique& order() const;
  ::fantasybit::OrderUnique* release_order();
  ::fantasybit::OrderUnique* mutable_order();
  void set_allocated_order(::fantasybit::OrderUnique* order);

  // optional int32 price = 70;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 70;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // optional int32 size = 30;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 30;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional bool buyside = 40;
  bool has_buyside() const;
  void clear_buyside();
  static const int kBuysideFieldNumber = 40;
  bool buyside() const;
  void set_buyside(bool value);

  // @@protoc_insertion_point(class_scope:fantasybit.InsideUnique)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_buyside();
  void clear_has_buyside();
  void set_has_price();
  void clear_has_price();
  void set_has_oid();
  void clear_has_oid();
  void set_has_order();
  void clear_has_order();
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr oid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::fantasybit::OrderUnique* order_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 size_;
  bool buyside_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsInsideUniqueImpl();
};
// -------------------------------------------------------------------

class TimeTransition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TimeTransition) */ {
 public:
  TimeTransition();
  virtual ~TimeTransition();

  TimeTransition(const TimeTransition& from);

  inline TimeTransition& operator=(const TimeTransition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeTransition(TimeTransition&& from) noexcept
    : TimeTransition() {
    *this = ::std::move(from);
  }

  inline TimeTransition& operator=(TimeTransition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeTransition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeTransition* internal_default_instance() {
    return reinterpret_cast<const TimeTransition*>(
               &_TimeTransition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(TimeTransition* other);
  friend void swap(TimeTransition& a, TimeTransition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeTransition* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeTransition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeTransition& from);
  void MergeFrom(const TimeTransition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeTransition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TimeTransition_Type Type;
  static const Type TRADEOPEN =
    TimeTransition_Type_TRADEOPEN;
  static const Type TRADECLOSE =
    TimeTransition_Type_TRADECLOSE;
  static inline bool Type_IsValid(int value) {
    return TimeTransition_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TimeTransition_Type_Type_MIN;
  static const Type Type_MAX =
    TimeTransition_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TimeTransition_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TimeTransition_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TimeTransition_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TimeTransition_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional .fantasybit.TimeTransition.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::TimeTransition_Type type() const;
  void set_type(::fantasybit::TimeTransition_Type value);

  static const int kTimeTransFieldNumber = 303;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TimeTransition >, 11, false >
    time_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.TimeTransition)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  int type_;
  friend struct ::protobuf_ProtoData_2eproto::TableStruct;
  friend void ::protobuf_ProtoData_2eproto::InitDefaultsTimeTransitionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyFantasyName

// optional string name = 1;
inline bool MyFantasyName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyFantasyName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyFantasyName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyFantasyName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MyFantasyName::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.MyFantasyName.name)
  return name_.GetNoArena();
}
inline void MyFantasyName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MyFantasyName.name)
}
#if LANG_CXX11
inline void MyFantasyName::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MyFantasyName.name)
}
#endif
inline void MyFantasyName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MyFantasyName.name)
}
inline void MyFantasyName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MyFantasyName.name)
}
inline ::std::string* MyFantasyName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.MyFantasyName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyFantasyName::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.MyFantasyName.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyFantasyName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MyFantasyName.name)
}

// optional .fantasybit.MyNameStatus status = 2;
inline bool MyFantasyName::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyFantasyName::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyFantasyName::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyFantasyName::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::fantasybit::MyNameStatus MyFantasyName::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.MyFantasyName.status)
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
inline void MyFantasyName::set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MyFantasyName.status)
}

// -------------------------------------------------------------------

// FantasyPlayer

// optional string name = 10;
inline bool FantasyPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyPlayer::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayer.name)
  return name_.GetNoArena();
}
inline void FantasyPlayer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayer.name)
}
#if LANG_CXX11
inline void FantasyPlayer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyPlayer.name)
}
#endif
inline void FantasyPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyPlayer.name)
}
inline void FantasyPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyPlayer.name)
}
inline ::std::string* FantasyPlayer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyPlayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyPlayer::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyPlayer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyPlayer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyPlayer.name)
}

// optional uint64 bits = 20;
inline bool FantasyPlayer::has_bits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyPlayer::set_has_bits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyPlayer::clear_has_bits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyPlayer::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
  clear_has_bits();
}
inline ::google::protobuf::uint64 FantasyPlayer::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayer.bits)
  return bits_;
}
inline void FantasyPlayer::set_bits(::google::protobuf::uint64 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayer.bits)
}

// -------------------------------------------------------------------

// Secret

// required string private_key = 1;
inline bool Secret::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
inline const ::std::string& Secret::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.private_key)
  return private_key_.GetNoArena();
}
inline void Secret::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret.private_key)
}
#if LANG_CXX11
inline void Secret::set_private_key(::std::string&& value) {
  set_has_private_key();
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret.private_key)
}
#endif
inline void Secret::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret.private_key)
}
inline void Secret::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret.private_key)
}
inline ::std::string* Secret::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_private_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret.private_key)
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.private_key)
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool Secret::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& Secret::myfantasyname() const {
  const ::fantasybit::MyFantasyName* p = myfantasyname_;
  // @@protoc_insertion_point(field_get:fantasybit.Secret.myfantasyname)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MyFantasyName*>(
      &::fantasybit::_MyFantasyName_default_instance_);
}
inline ::fantasybit::MyFantasyName* Secret::release_myfantasyname() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret.myfantasyname)
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline ::fantasybit::MyFantasyName* Secret::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) {
    myfantasyname_ = new ::fantasybit::MyFantasyName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.myfantasyname)
  return myfantasyname_;
}
inline void Secret::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete myfantasyname_;
  }
  if (myfantasyname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      myfantasyname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, myfantasyname, submessage_arena);
    }
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
  myfantasyname_ = myfantasyname;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.myfantasyname)
}

// optional .fantasybit.NameTrans nametran = 10;
inline bool Secret::has_nametran() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Secret::set_has_nametran() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Secret::clear_has_nametran() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Secret::clear_nametran() {
  if (nametran_ != NULL) nametran_->Clear();
  clear_has_nametran();
}
inline const ::fantasybit::NameTrans& Secret::nametran() const {
  const ::fantasybit::NameTrans* p = nametran_;
  // @@protoc_insertion_point(field_get:fantasybit.Secret.nametran)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::NameTrans*>(
      &::fantasybit::_NameTrans_default_instance_);
}
inline ::fantasybit::NameTrans* Secret::release_nametran() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret.nametran)
  clear_has_nametran();
  ::fantasybit::NameTrans* temp = nametran_;
  nametran_ = NULL;
  return temp;
}
inline ::fantasybit::NameTrans* Secret::mutable_nametran() {
  set_has_nametran();
  if (nametran_ == NULL) {
    nametran_ = new ::fantasybit::NameTrans;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.nametran)
  return nametran_;
}
inline void Secret::set_allocated_nametran(::fantasybit::NameTrans* nametran) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nametran_;
  }
  if (nametran) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nametran = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nametran, submessage_arena);
    }
    set_has_nametran();
  } else {
    clear_has_nametran();
  }
  nametran_ = nametran;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.nametran)
}

// -------------------------------------------------------------------

// Secret2

// optional string private_key = 1;
inline bool Secret2::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret2::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret2::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret2::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
inline const ::std::string& Secret2::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.private_key)
  return private_key_.GetNoArena();
}
inline void Secret2::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.private_key)
}
#if LANG_CXX11
inline void Secret2::set_private_key(::std::string&& value) {
  set_has_private_key();
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret2.private_key)
}
#endif
inline void Secret2::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.private_key)
}
inline void Secret2::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.private_key)
}
inline ::std::string* Secret2::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret2::release_private_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret2.private_key)
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.private_key)
}

// optional string fantasy_name = 20;
inline bool Secret2::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret2::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret2::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret2::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& Secret2::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.fantasy_name)
  return fantasy_name_.GetNoArena();
}
inline void Secret2::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.fantasy_name)
}
#if LANG_CXX11
inline void Secret2::set_fantasy_name(::std::string&& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret2.fantasy_name)
}
#endif
inline void Secret2::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.fantasy_name)
}
inline void Secret2::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.fantasy_name)
}
inline ::std::string* Secret2::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret2::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret2.fantasy_name)
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.fantasy_name)
}

// optional string public_key = 30;
inline bool Secret2::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Secret2::set_has_public_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Secret2::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Secret2::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& Secret2::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.public_key)
  return public_key_.GetNoArena();
}
inline void Secret2::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.public_key)
}
#if LANG_CXX11
inline void Secret2::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret2.public_key)
}
#endif
inline void Secret2::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.public_key)
}
inline void Secret2::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.public_key)
}
inline ::std::string* Secret2::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret2::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret2.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.public_key)
}

// -------------------------------------------------------------------

// Secret3

// optional string private_key = 1;
inline bool Secret3::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret3::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret3::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret3::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
inline const ::std::string& Secret3::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret3.private_key)
  return private_key_.GetNoArena();
}
inline void Secret3::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret3.private_key)
}
#if LANG_CXX11
inline void Secret3::set_private_key(::std::string&& value) {
  set_has_private_key();
  private_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret3.private_key)
}
#endif
inline void Secret3::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret3.private_key)
}
inline void Secret3::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret3.private_key)
}
inline ::std::string* Secret3::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret3.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret3::release_private_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret3.private_key)
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret3::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret3.private_key)
}

// optional string mnemonic_key = 3;
inline bool Secret3::has_mnemonic_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret3::set_has_mnemonic_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret3::clear_has_mnemonic_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret3::clear_mnemonic_key() {
  mnemonic_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mnemonic_key();
}
inline const ::std::string& Secret3::mnemonic_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret3.mnemonic_key)
  return mnemonic_key_.GetNoArena();
}
inline void Secret3::set_mnemonic_key(const ::std::string& value) {
  set_has_mnemonic_key();
  mnemonic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret3.mnemonic_key)
}
#if LANG_CXX11
inline void Secret3::set_mnemonic_key(::std::string&& value) {
  set_has_mnemonic_key();
  mnemonic_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret3.mnemonic_key)
}
#endif
inline void Secret3::set_mnemonic_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mnemonic_key();
  mnemonic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret3.mnemonic_key)
}
inline void Secret3::set_mnemonic_key(const char* value, size_t size) {
  set_has_mnemonic_key();
  mnemonic_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret3.mnemonic_key)
}
inline ::std::string* Secret3::mutable_mnemonic_key() {
  set_has_mnemonic_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret3.mnemonic_key)
  return mnemonic_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret3::release_mnemonic_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret3.mnemonic_key)
  clear_has_mnemonic_key();
  return mnemonic_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret3::set_allocated_mnemonic_key(::std::string* mnemonic_key) {
  if (mnemonic_key != NULL) {
    set_has_mnemonic_key();
  } else {
    clear_has_mnemonic_key();
  }
  mnemonic_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnemonic_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret3.mnemonic_key)
}

// optional string fantasy_name = 20;
inline bool Secret3::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Secret3::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Secret3::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Secret3::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& Secret3::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret3.fantasy_name)
  return fantasy_name_.GetNoArena();
}
inline void Secret3::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret3.fantasy_name)
}
#if LANG_CXX11
inline void Secret3::set_fantasy_name(::std::string&& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret3.fantasy_name)
}
#endif
inline void Secret3::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret3.fantasy_name)
}
inline void Secret3::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret3.fantasy_name)
}
inline ::std::string* Secret3::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret3.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret3::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret3.fantasy_name)
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret3::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret3.fantasy_name)
}

// optional string public_key = 30;
inline bool Secret3::has_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Secret3::set_has_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Secret3::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Secret3::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& Secret3::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret3.public_key)
  return public_key_.GetNoArena();
}
inline void Secret3::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret3.public_key)
}
#if LANG_CXX11
inline void Secret3::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Secret3.public_key)
}
#endif
inline void Secret3::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret3.public_key)
}
inline void Secret3::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret3.public_key)
}
inline ::std::string* Secret3::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret3.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret3::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Secret3.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret3::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret3.public_key)
}

// -------------------------------------------------------------------

// OutData

// required .fantasybit.OutData.Type type = 1;
inline bool OutData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::OutData_Type OutData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.OutData.type)
  return static_cast< ::fantasybit::OutData_Type >(type_);
}
inline void OutData::set_type(::fantasybit::OutData_Type value) {
  assert(::fantasybit::OutData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OutData.type)
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool OutData::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutData::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutData::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutData::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& OutData::myfantasyname() const {
  const ::fantasybit::MyFantasyName* p = myfantasyname_;
  // @@protoc_insertion_point(field_get:fantasybit.OutData.myfantasyname)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MyFantasyName*>(
      &::fantasybit::_MyFantasyName_default_instance_);
}
inline ::fantasybit::MyFantasyName* OutData::release_myfantasyname() {
  // @@protoc_insertion_point(field_release:fantasybit.OutData.myfantasyname)
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline ::fantasybit::MyFantasyName* OutData::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) {
    myfantasyname_ = new ::fantasybit::MyFantasyName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.OutData.myfantasyname)
  return myfantasyname_;
}
inline void OutData::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete myfantasyname_;
  }
  if (myfantasyname) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      myfantasyname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, myfantasyname, submessage_arena);
    }
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
  myfantasyname_ = myfantasyname;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OutData.myfantasyname)
}

// -------------------------------------------------------------------

// InData

// required .fantasybit.InData.Type type = 1;
inline bool InData::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InData::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InData::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::InData_Type InData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.type)
  return static_cast< ::fantasybit::InData_Type >(type_);
}
inline void InData::set_type(::fantasybit::InData_Type value) {
  assert(::fantasybit::InData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InData.type)
}

// optional string data = 2;
inline bool InData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& InData::data() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data)
  return data_.GetNoArena();
}
inline void InData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InData.data)
}
#if LANG_CXX11
inline void InData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InData.data)
}
#endif
inline void InData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InData.data)
}
inline void InData::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InData.data)
}
inline ::std::string* InData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InData::release_data() {
  // @@protoc_insertion_point(field_release:fantasybit.InData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data)
}

// optional string data2 = 3;
inline bool InData::has_data2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InData::set_has_data2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InData::clear_has_data2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InData::clear_data2() {
  data2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data2();
}
inline const ::std::string& InData::data2() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data2)
  return data2_.GetNoArena();
}
inline void InData::set_data2(const ::std::string& value) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InData.data2)
}
#if LANG_CXX11
inline void InData::set_data2(::std::string&& value) {
  set_has_data2();
  data2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InData.data2)
}
#endif
inline void InData::set_data2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InData.data2)
}
inline void InData::set_data2(const char* value, size_t size) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InData.data2)
}
inline ::std::string* InData::mutable_data2() {
  set_has_data2();
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data2)
  return data2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InData::release_data2() {
  // @@protoc_insertion_point(field_release:fantasybit.InData.data2)
  clear_has_data2();
  return data2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InData::set_allocated_data2(::std::string* data2) {
  if (data2 != NULL) {
    set_has_data2();
  } else {
    clear_has_data2();
  }
  data2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data2);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data2)
}

// optional int32 num = 4;
inline bool InData::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InData::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InData::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 InData::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.num)
  return num_;
}
inline void InData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InData.num)
}

// optional .fantasybit.DataTransition data_trans = 5;
inline bool InData::has_data_trans() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InData::set_has_data_trans() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InData::clear_has_data_trans() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InData::clear_data_trans() {
  if (data_trans_ != NULL) data_trans_->Clear();
  clear_has_data_trans();
}
inline const ::fantasybit::DataTransition& InData::data_trans() const {
  const ::fantasybit::DataTransition* p = data_trans_;
  // @@protoc_insertion_point(field_get:fantasybit.InData.data_trans)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::DataTransition*>(
      &::fantasybit::_DataTransition_default_instance_);
}
inline ::fantasybit::DataTransition* InData::release_data_trans() {
  // @@protoc_insertion_point(field_release:fantasybit.InData.data_trans)
  clear_has_data_trans();
  ::fantasybit::DataTransition* temp = data_trans_;
  data_trans_ = NULL;
  return temp;
}
inline ::fantasybit::DataTransition* InData::mutable_data_trans() {
  set_has_data_trans();
  if (data_trans_ == NULL) {
    data_trans_ = new ::fantasybit::DataTransition;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data_trans)
  return data_trans_;
}
inline void InData::set_allocated_data_trans(::fantasybit::DataTransition* data_trans) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_trans_;
  }
  if (data_trans) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data_trans = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data_trans, submessage_arena);
    }
    set_has_data_trans();
  } else {
    clear_has_data_trans();
  }
  data_trans_ = data_trans;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data_trans)
}

// -------------------------------------------------------------------

// NameProof

// optional .fantasybit.NameProof.Type type = 1;
inline bool NameProof::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameProof::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameProof::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameProof::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::NameProof_Type NameProof::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameProof.type)
  return static_cast< ::fantasybit::NameProof_Type >(type_);
}
inline void NameProof::set_type(::fantasybit::NameProof_Type value) {
  assert(::fantasybit::NameProof_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NameProof.type)
}

// -------------------------------------------------------------------

// TweetProof

// optional string tweet = 10;
inline bool TweetProof::has_tweet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TweetProof::set_has_tweet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TweetProof::clear_has_tweet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TweetProof::clear_tweet() {
  tweet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tweet();
}
inline const ::std::string& TweetProof::tweet() const {
  // @@protoc_insertion_point(field_get:fantasybit.TweetProof.tweet)
  return tweet_.GetNoArena();
}
inline void TweetProof::set_tweet(const ::std::string& value) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TweetProof.tweet)
}
#if LANG_CXX11
inline void TweetProof::set_tweet(::std::string&& value) {
  set_has_tweet();
  tweet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TweetProof.tweet)
}
#endif
inline void TweetProof::set_tweet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TweetProof.tweet)
}
inline void TweetProof::set_tweet(const char* value, size_t size) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TweetProof.tweet)
}
inline ::std::string* TweetProof::mutable_tweet() {
  set_has_tweet();
  // @@protoc_insertion_point(field_mutable:fantasybit.TweetProof.tweet)
  return tweet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TweetProof::release_tweet() {
  // @@protoc_insertion_point(field_release:fantasybit.TweetProof.tweet)
  clear_has_tweet();
  return tweet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TweetProof::set_allocated_tweet(::std::string* tweet) {
  if (tweet != NULL) {
    set_has_tweet();
  } else {
    clear_has_tweet();
  }
  tweet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tweet);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TweetProof.tweet)
}

// -------------------------------------------------------------------

// MasterProof

// optional string season = 10;
inline bool MasterProof::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterProof::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterProof::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterProof::clear_season() {
  season_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_season();
}
inline const ::std::string& MasterProof::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.MasterProof.season)
  return season_.GetNoArena();
}
inline void MasterProof::set_season(const ::std::string& value) {
  set_has_season();
  season_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MasterProof.season)
}
#if LANG_CXX11
inline void MasterProof::set_season(::std::string&& value) {
  set_has_season();
  season_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MasterProof.season)
}
#endif
inline void MasterProof::set_season(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_season();
  season_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MasterProof.season)
}
inline void MasterProof::set_season(const char* value, size_t size) {
  set_has_season();
  season_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MasterProof.season)
}
inline ::std::string* MasterProof::mutable_season() {
  set_has_season();
  // @@protoc_insertion_point(field_mutable:fantasybit.MasterProof.season)
  return season_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterProof::release_season() {
  // @@protoc_insertion_point(field_release:fantasybit.MasterProof.season)
  clear_has_season();
  return season_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterProof::set_allocated_season(::std::string* season) {
  if (season != NULL) {
    set_has_season();
  } else {
    clear_has_season();
  }
  season_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), season);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MasterProof.season)
}

// optional int32 week = 20;
inline bool MasterProof::has_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterProof::set_has_week() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterProof::clear_has_week() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterProof::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 MasterProof::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.MasterProof.week)
  return week_;
}
inline void MasterProof::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MasterProof.week)
}

// optional int32 timestamp = 21;
inline bool MasterProof::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MasterProof::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MasterProof::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MasterProof::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 MasterProof::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.MasterProof.timestamp)
  return timestamp_;
}
inline void MasterProof::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MasterProof.timestamp)
}

// optional .fantasybit.SignedTransaction new_oracle_name = 66;
inline bool MasterProof::has_new_oracle_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterProof::set_has_new_oracle_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterProof::clear_has_new_oracle_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterProof::clear_new_oracle_name() {
  if (new_oracle_name_ != NULL) new_oracle_name_->Clear();
  clear_has_new_oracle_name();
}
inline const ::fantasybit::SignedTransaction& MasterProof::new_oracle_name() const {
  const ::fantasybit::SignedTransaction* p = new_oracle_name_;
  // @@protoc_insertion_point(field_get:fantasybit.MasterProof.new_oracle_name)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::SignedTransaction*>(
      &::fantasybit::_SignedTransaction_default_instance_);
}
inline ::fantasybit::SignedTransaction* MasterProof::release_new_oracle_name() {
  // @@protoc_insertion_point(field_release:fantasybit.MasterProof.new_oracle_name)
  clear_has_new_oracle_name();
  ::fantasybit::SignedTransaction* temp = new_oracle_name_;
  new_oracle_name_ = NULL;
  return temp;
}
inline ::fantasybit::SignedTransaction* MasterProof::mutable_new_oracle_name() {
  set_has_new_oracle_name();
  if (new_oracle_name_ == NULL) {
    new_oracle_name_ = new ::fantasybit::SignedTransaction;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.MasterProof.new_oracle_name)
  return new_oracle_name_;
}
inline void MasterProof::set_allocated_new_oracle_name(::fantasybit::SignedTransaction* new_oracle_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_oracle_name_;
  }
  if (new_oracle_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_oracle_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_oracle_name, submessage_arena);
    }
    set_has_new_oracle_name();
  } else {
    clear_has_new_oracle_name();
  }
  new_oracle_name_ = new_oracle_name;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MasterProof.new_oracle_name)
}

// -------------------------------------------------------------------

// Transaction

// optional int32 version = 1;
inline bool Transaction::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Transaction::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.version)
  return version_;
}
inline void Transaction::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.version)
}

// optional .fantasybit.TransType type = 2;
inline bool Transaction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::TransType Transaction::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.type)
  return static_cast< ::fantasybit::TransType >(type_);
}
inline void Transaction::set_type(::fantasybit::TransType value) {
  assert(::fantasybit::TransType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.type)
}

// optional uint64 nonce = 10;
inline bool Transaction::has_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction::set_has_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transaction::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transaction::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::uint64 Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.nonce)
  return nonce_;
}
inline void Transaction::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.nonce)
}

// -------------------------------------------------------------------

// NameTrans

// optional string fantasy_name = 10;
inline bool NameTrans::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameTrans::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameTrans::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameTrans::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& NameTrans::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.fantasy_name)
  return fantasy_name_.GetNoArena();
}
inline void NameTrans::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.fantasy_name)
}
#if LANG_CXX11
inline void NameTrans::set_fantasy_name(::std::string&& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameTrans.fantasy_name)
}
#endif
inline void NameTrans::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.fantasy_name)
}
inline void NameTrans::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.fantasy_name)
}
inline ::std::string* NameTrans::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameTrans::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.NameTrans.fantasy_name)
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.fantasy_name)
}

// optional bytes public_key = 20;
inline bool NameTrans::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameTrans::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameTrans::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameTrans::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& NameTrans::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.public_key)
  return public_key_.GetNoArena();
}
inline void NameTrans::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.public_key)
}
#if LANG_CXX11
inline void NameTrans::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameTrans.public_key)
}
#endif
inline void NameTrans::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.public_key)
}
inline void NameTrans::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.public_key)
}
inline ::std::string* NameTrans::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameTrans::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.NameTrans.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.public_key)
}

// optional .fantasybit.NameProof proof = 30;
inline bool NameTrans::has_proof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NameTrans::set_has_proof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NameTrans::clear_has_proof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NameTrans::clear_proof() {
  if (proof_ != NULL) proof_->Clear();
  clear_has_proof();
}
inline const ::fantasybit::NameProof& NameTrans::proof() const {
  const ::fantasybit::NameProof* p = proof_;
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.proof)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::NameProof*>(
      &::fantasybit::_NameProof_default_instance_);
}
inline ::fantasybit::NameProof* NameTrans::release_proof() {
  // @@protoc_insertion_point(field_release:fantasybit.NameTrans.proof)
  clear_has_proof();
  ::fantasybit::NameProof* temp = proof_;
  proof_ = NULL;
  return temp;
}
inline ::fantasybit::NameProof* NameTrans::mutable_proof() {
  set_has_proof();
  if (proof_ == NULL) {
    proof_ = new ::fantasybit::NameProof;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.proof)
  return proof_;
}
inline void NameTrans::set_allocated_proof(::fantasybit::NameProof* proof) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete proof_;
  }
  if (proof) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      proof = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    set_has_proof();
  } else {
    clear_has_proof();
  }
  proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.proof)
}

// optional bytes recovery_key = 40;
inline bool NameTrans::has_recovery_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameTrans::set_has_recovery_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameTrans::clear_has_recovery_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameTrans::clear_recovery_key() {
  recovery_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recovery_key();
}
inline const ::std::string& NameTrans::recovery_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.recovery_key)
  return recovery_key_.GetNoArena();
}
inline void NameTrans::set_recovery_key(const ::std::string& value) {
  set_has_recovery_key();
  recovery_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.recovery_key)
}
#if LANG_CXX11
inline void NameTrans::set_recovery_key(::std::string&& value) {
  set_has_recovery_key();
  recovery_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameTrans.recovery_key)
}
#endif
inline void NameTrans::set_recovery_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_recovery_key();
  recovery_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.recovery_key)
}
inline void NameTrans::set_recovery_key(const void* value, size_t size) {
  set_has_recovery_key();
  recovery_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.recovery_key)
}
inline ::std::string* NameTrans::mutable_recovery_key() {
  set_has_recovery_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.recovery_key)
  return recovery_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameTrans::release_recovery_key() {
  // @@protoc_insertion_point(field_release:fantasybit.NameTrans.recovery_key)
  clear_has_recovery_key();
  return recovery_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_allocated_recovery_key(::std::string* recovery_key) {
  if (recovery_key != NULL) {
    set_has_recovery_key();
  } else {
    clear_has_recovery_key();
  }
  recovery_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recovery_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.recovery_key)
}

// optional bool am_agent = 50;
inline bool NameTrans::has_am_agent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NameTrans::set_has_am_agent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NameTrans::clear_has_am_agent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NameTrans::clear_am_agent() {
  am_agent_ = false;
  clear_has_am_agent();
}
inline bool NameTrans::am_agent() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.am_agent)
  return am_agent_;
}
inline void NameTrans::set_am_agent(bool value) {
  set_has_am_agent();
  am_agent_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.am_agent)
}

// optional string my_agent = 60;
inline bool NameTrans::has_my_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NameTrans::set_has_my_agent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NameTrans::clear_has_my_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NameTrans::clear_my_agent() {
  my_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_my_agent();
}
inline const ::std::string& NameTrans::my_agent() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.my_agent)
  return my_agent_.GetNoArena();
}
inline void NameTrans::set_my_agent(const ::std::string& value) {
  set_has_my_agent();
  my_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.my_agent)
}
#if LANG_CXX11
inline void NameTrans::set_my_agent(::std::string&& value) {
  set_has_my_agent();
  my_agent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameTrans.my_agent)
}
#endif
inline void NameTrans::set_my_agent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_my_agent();
  my_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.my_agent)
}
inline void NameTrans::set_my_agent(const char* value, size_t size) {
  set_has_my_agent();
  my_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.my_agent)
}
inline ::std::string* NameTrans::mutable_my_agent() {
  set_has_my_agent();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.my_agent)
  return my_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameTrans::release_my_agent() {
  // @@protoc_insertion_point(field_release:fantasybit.NameTrans.my_agent)
  clear_has_my_agent();
  return my_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_allocated_my_agent(::std::string* my_agent) {
  if (my_agent != NULL) {
    set_has_my_agent();
  } else {
    clear_has_my_agent();
  }
  my_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), my_agent);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.my_agent)
}

// -------------------------------------------------------------------

// TransferTrans

// optional string from = 10;
inline bool TransferTrans::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferTrans::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferTrans::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferTrans::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& TransferTrans::from() const {
  // @@protoc_insertion_point(field_get:fantasybit.TransferTrans.from)
  return from_.GetNoArena();
}
inline void TransferTrans::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TransferTrans.from)
}
#if LANG_CXX11
inline void TransferTrans::set_from(::std::string&& value) {
  set_has_from();
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TransferTrans.from)
}
#endif
inline void TransferTrans::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TransferTrans.from)
}
inline void TransferTrans::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TransferTrans.from)
}
inline ::std::string* TransferTrans::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:fantasybit.TransferTrans.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferTrans::release_from() {
  // @@protoc_insertion_point(field_release:fantasybit.TransferTrans.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferTrans::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TransferTrans.from)
}

// optional string to = 20;
inline bool TransferTrans::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferTrans::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferTrans::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferTrans::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& TransferTrans::to() const {
  // @@protoc_insertion_point(field_get:fantasybit.TransferTrans.to)
  return to_.GetNoArena();
}
inline void TransferTrans::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TransferTrans.to)
}
#if LANG_CXX11
inline void TransferTrans::set_to(::std::string&& value) {
  set_has_to();
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TransferTrans.to)
}
#endif
inline void TransferTrans::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TransferTrans.to)
}
inline void TransferTrans::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TransferTrans.to)
}
inline ::std::string* TransferTrans::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:fantasybit.TransferTrans.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferTrans::release_to() {
  // @@protoc_insertion_point(field_release:fantasybit.TransferTrans.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferTrans::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TransferTrans.to)
}

// optional uint64 amount = 30;
inline bool TransferTrans::has_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferTrans::set_has_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferTrans::clear_has_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferTrans::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 TransferTrans::amount() const {
  // @@protoc_insertion_point(field_get:fantasybit.TransferTrans.amount)
  return amount_;
}
inline void TransferTrans::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TransferTrans.amount)
}

// -------------------------------------------------------------------

// SignedTransaction

// optional .fantasybit.Transaction trans = 10;
inline bool SignedTransaction::has_trans() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignedTransaction::set_has_trans() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignedTransaction::clear_has_trans() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignedTransaction::clear_trans() {
  if (trans_ != NULL) trans_->Clear();
  clear_has_trans();
}
inline const ::fantasybit::Transaction& SignedTransaction::trans() const {
  const ::fantasybit::Transaction* p = trans_;
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.trans)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::Transaction*>(
      &::fantasybit::_Transaction_default_instance_);
}
inline ::fantasybit::Transaction* SignedTransaction::release_trans() {
  // @@protoc_insertion_point(field_release:fantasybit.SignedTransaction.trans)
  clear_has_trans();
  ::fantasybit::Transaction* temp = trans_;
  trans_ = NULL;
  return temp;
}
inline ::fantasybit::Transaction* SignedTransaction::mutable_trans() {
  set_has_trans();
  if (trans_ == NULL) {
    trans_ = new ::fantasybit::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.trans)
  return trans_;
}
inline void SignedTransaction::set_allocated_trans(::fantasybit::Transaction* trans) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trans_;
  }
  if (trans) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trans = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    set_has_trans();
  } else {
    clear_has_trans();
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.trans)
}

// optional bytes id = 20;
inline bool SignedTransaction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedTransaction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedTransaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& SignedTransaction::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.id)
  return id_.GetNoArena();
}
inline void SignedTransaction::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.id)
}
#if LANG_CXX11
inline void SignedTransaction::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SignedTransaction.id)
}
#endif
inline void SignedTransaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.id)
}
inline void SignedTransaction::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.id)
}
inline ::std::string* SignedTransaction::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedTransaction::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.SignedTransaction.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.id)
}

// optional bytes sig = 30;
inline bool SignedTransaction::has_sig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedTransaction::set_has_sig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedTransaction::clear_has_sig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedTransaction::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
inline const ::std::string& SignedTransaction::sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.sig)
  return sig_.GetNoArena();
}
inline void SignedTransaction::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.sig)
}
#if LANG_CXX11
inline void SignedTransaction::set_sig(::std::string&& value) {
  set_has_sig();
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SignedTransaction.sig)
}
#endif
inline void SignedTransaction::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.sig)
}
inline void SignedTransaction::set_sig(const void* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.sig)
}
inline ::std::string* SignedTransaction::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedTransaction::release_sig() {
  // @@protoc_insertion_point(field_release:fantasybit.SignedTransaction.sig)
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.sig)
}

// optional string fantasy_name = 40;
inline bool SignedTransaction::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignedTransaction::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignedTransaction::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignedTransaction::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& SignedTransaction::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.fantasy_name)
  return fantasy_name_.GetNoArena();
}
inline void SignedTransaction::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.fantasy_name)
}
#if LANG_CXX11
inline void SignedTransaction::set_fantasy_name(::std::string&& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SignedTransaction.fantasy_name)
}
#endif
inline void SignedTransaction::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.fantasy_name)
}
inline void SignedTransaction::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.fantasy_name)
}
inline ::std::string* SignedTransaction::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedTransaction::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.SignedTransaction.fantasy_name)
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.fantasy_name)
}

// -------------------------------------------------------------------

// BlockHeader

// optional int32 version = 1;
inline bool BlockHeader::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockHeader::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockHeader::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BlockHeader::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.version)
  return version_;
}
inline void BlockHeader::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.version)
}

// optional int32 num = 10;
inline bool BlockHeader::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockHeader::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockHeader::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockHeader::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlockHeader::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.num)
  return num_;
}
inline void BlockHeader::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.num)
}

// optional bytes prev_id = 20;
inline bool BlockHeader::has_prev_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockHeader::set_has_prev_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockHeader::clear_has_prev_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockHeader::clear_prev_id() {
  prev_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_id();
}
inline const ::std::string& BlockHeader::prev_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.prev_id)
  return prev_id_.GetNoArena();
}
inline void BlockHeader::set_prev_id(const ::std::string& value) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.prev_id)
}
#if LANG_CXX11
inline void BlockHeader::set_prev_id(::std::string&& value) {
  set_has_prev_id();
  prev_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockHeader.prev_id)
}
#endif
inline void BlockHeader::set_prev_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.prev_id)
}
inline void BlockHeader::set_prev_id(const void* value, size_t size) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.prev_id)
}
inline ::std::string* BlockHeader::mutable_prev_id() {
  set_has_prev_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.prev_id)
  return prev_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_prev_id() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockHeader.prev_id)
  clear_has_prev_id();
  return prev_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_prev_id(::std::string* prev_id) {
  if (prev_id != NULL) {
    set_has_prev_id();
  } else {
    clear_has_prev_id();
  }
  prev_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.prev_id)
}

// optional int32 timestamp = 21;
inline bool BlockHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockHeader::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.timestamp)
  return timestamp_;
}
inline void BlockHeader::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.timestamp)
}

// optional bytes generator_pk = 30;
inline bool BlockHeader::has_generator_pk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockHeader::set_has_generator_pk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockHeader::clear_has_generator_pk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockHeader::clear_generator_pk() {
  generator_pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generator_pk();
}
inline const ::std::string& BlockHeader::generator_pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.generator_pk)
  return generator_pk_.GetNoArena();
}
inline void BlockHeader::set_generator_pk(const ::std::string& value) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.generator_pk)
}
#if LANG_CXX11
inline void BlockHeader::set_generator_pk(::std::string&& value) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockHeader.generator_pk)
}
#endif
inline void BlockHeader::set_generator_pk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.generator_pk)
}
inline void BlockHeader::set_generator_pk(const void* value, size_t size) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.generator_pk)
}
inline ::std::string* BlockHeader::mutable_generator_pk() {
  set_has_generator_pk();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.generator_pk)
  return generator_pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_generator_pk() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockHeader.generator_pk)
  clear_has_generator_pk();
  return generator_pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_generator_pk(::std::string* generator_pk) {
  if (generator_pk != NULL) {
    set_has_generator_pk();
  } else {
    clear_has_generator_pk();
  }
  generator_pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generator_pk);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.generator_pk)
}

// optional bytes generating_sig = 40;
inline bool BlockHeader::has_generating_sig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockHeader::set_has_generating_sig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockHeader::clear_has_generating_sig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockHeader::clear_generating_sig() {
  generating_sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generating_sig();
}
inline const ::std::string& BlockHeader::generating_sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.generating_sig)
  return generating_sig_.GetNoArena();
}
inline void BlockHeader::set_generating_sig(const ::std::string& value) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.generating_sig)
}
#if LANG_CXX11
inline void BlockHeader::set_generating_sig(::std::string&& value) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockHeader.generating_sig)
}
#endif
inline void BlockHeader::set_generating_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.generating_sig)
}
inline void BlockHeader::set_generating_sig(const void* value, size_t size) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.generating_sig)
}
inline ::std::string* BlockHeader::mutable_generating_sig() {
  set_has_generating_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.generating_sig)
  return generating_sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_generating_sig() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockHeader.generating_sig)
  clear_has_generating_sig();
  return generating_sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_generating_sig(::std::string* generating_sig) {
  if (generating_sig != NULL) {
    set_has_generating_sig();
  } else {
    clear_has_generating_sig();
  }
  generating_sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generating_sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.generating_sig)
}

// optional int32 basetarget = 50;
inline bool BlockHeader::has_basetarget() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockHeader::set_has_basetarget() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockHeader::clear_has_basetarget() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockHeader::clear_basetarget() {
  basetarget_ = 0;
  clear_has_basetarget();
}
inline ::google::protobuf::int32 BlockHeader::basetarget() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.basetarget)
  return basetarget_;
}
inline void BlockHeader::set_basetarget(::google::protobuf::int32 value) {
  set_has_basetarget();
  basetarget_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.basetarget)
}

// optional .fantasybit.BlockHeader.Type blocktype = 60;
inline bool BlockHeader::has_blocktype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockHeader::set_has_blocktype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockHeader::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockHeader::clear_blocktype() {
  blocktype_ = 1;
  clear_has_blocktype();
}
inline ::fantasybit::BlockHeader_Type BlockHeader::blocktype() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.blocktype)
  return static_cast< ::fantasybit::BlockHeader_Type >(blocktype_);
}
inline void BlockHeader::set_blocktype(::fantasybit::BlockHeader_Type value) {
  assert(::fantasybit::BlockHeader_Type_IsValid(value));
  set_has_blocktype();
  blocktype_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.blocktype)
}

// optional bytes transaction_id = 70;
inline bool BlockHeader::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockHeader::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockHeader::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockHeader::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_id();
}
inline const ::std::string& BlockHeader::transaction_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.transaction_id)
  return transaction_id_.GetNoArena();
}
inline void BlockHeader::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.transaction_id)
}
#if LANG_CXX11
inline void BlockHeader::set_transaction_id(::std::string&& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockHeader.transaction_id)
}
#endif
inline void BlockHeader::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.transaction_id)
}
inline void BlockHeader::set_transaction_id(const void* value, size_t size) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.transaction_id)
}
inline ::std::string* BlockHeader::mutable_transaction_id() {
  set_has_transaction_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_transaction_id() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockHeader.transaction_id)
  clear_has_transaction_id();
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    set_has_transaction_id();
  } else {
    clear_has_transaction_id();
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.transaction_id)
}

// -------------------------------------------------------------------

// SignedBlockHeader

// optional .fantasybit.BlockHeader head = 10;
inline bool SignedBlockHeader::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedBlockHeader::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedBlockHeader::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedBlockHeader::clear_head() {
  if (head_ != NULL) head_->Clear();
  clear_has_head();
}
inline const ::fantasybit::BlockHeader& SignedBlockHeader::head() const {
  const ::fantasybit::BlockHeader* p = head_;
  // @@protoc_insertion_point(field_get:fantasybit.SignedBlockHeader.head)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::BlockHeader*>(
      &::fantasybit::_BlockHeader_default_instance_);
}
inline ::fantasybit::BlockHeader* SignedBlockHeader::release_head() {
  // @@protoc_insertion_point(field_release:fantasybit.SignedBlockHeader.head)
  clear_has_head();
  ::fantasybit::BlockHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::fantasybit::BlockHeader* SignedBlockHeader::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::fantasybit::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedBlockHeader.head)
  return head_;
}
inline void SignedBlockHeader::set_allocated_head(::fantasybit::BlockHeader* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    set_has_head();
  } else {
    clear_has_head();
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedBlockHeader.head)
}

// optional string sig = 30;
inline bool SignedBlockHeader::has_sig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedBlockHeader::set_has_sig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedBlockHeader::clear_has_sig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedBlockHeader::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
inline const ::std::string& SignedBlockHeader::sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedBlockHeader.sig)
  return sig_.GetNoArena();
}
inline void SignedBlockHeader::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedBlockHeader.sig)
}
#if LANG_CXX11
inline void SignedBlockHeader::set_sig(::std::string&& value) {
  set_has_sig();
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SignedBlockHeader.sig)
}
#endif
inline void SignedBlockHeader::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedBlockHeader.sig)
}
inline void SignedBlockHeader::set_sig(const char* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedBlockHeader.sig)
}
inline ::std::string* SignedBlockHeader::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedBlockHeader.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedBlockHeader::release_sig() {
  // @@protoc_insertion_point(field_release:fantasybit.SignedBlockHeader.sig)
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedBlockHeader::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedBlockHeader.sig)
}

// -------------------------------------------------------------------

// Block

// optional .fantasybit.SignedBlockHeader signedhead = 10;
inline bool Block::has_signedhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_signedhead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_signedhead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_signedhead() {
  if (signedhead_ != NULL) signedhead_->Clear();
  clear_has_signedhead();
}
inline const ::fantasybit::SignedBlockHeader& Block::signedhead() const {
  const ::fantasybit::SignedBlockHeader* p = signedhead_;
  // @@protoc_insertion_point(field_get:fantasybit.Block.signedhead)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::SignedBlockHeader*>(
      &::fantasybit::_SignedBlockHeader_default_instance_);
}
inline ::fantasybit::SignedBlockHeader* Block::release_signedhead() {
  // @@protoc_insertion_point(field_release:fantasybit.Block.signedhead)
  clear_has_signedhead();
  ::fantasybit::SignedBlockHeader* temp = signedhead_;
  signedhead_ = NULL;
  return temp;
}
inline ::fantasybit::SignedBlockHeader* Block::mutable_signedhead() {
  set_has_signedhead();
  if (signedhead_ == NULL) {
    signedhead_ = new ::fantasybit::SignedBlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Block.signedhead)
  return signedhead_;
}
inline void Block::set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signedhead_;
  }
  if (signedhead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signedhead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signedhead, submessage_arena);
    }
    set_has_signedhead();
  } else {
    clear_has_signedhead();
  }
  signedhead_ = signedhead;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Block.signedhead)
}

// repeated .fantasybit.SignedTransaction signed_transactions = 20;
inline int Block::signed_transactions_size() const {
  return signed_transactions_.size();
}
inline void Block::clear_signed_transactions() {
  signed_transactions_.Clear();
}
inline const ::fantasybit::SignedTransaction& Block::signed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.Block.signed_transactions)
  return signed_transactions_.Get(index);
}
inline ::fantasybit::SignedTransaction* Block::mutable_signed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.Block.signed_transactions)
  return signed_transactions_.Mutable(index);
}
inline ::fantasybit::SignedTransaction* Block::add_signed_transactions() {
  // @@protoc_insertion_point(field_add:fantasybit.Block.signed_transactions)
  return signed_transactions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
Block::mutable_signed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.Block.signed_transactions)
  return &signed_transactions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
Block::signed_transactions() const {
  // @@protoc_insertion_point(field_list:fantasybit.Block.signed_transactions)
  return signed_transactions_;
}

// -------------------------------------------------------------------

// NodeRequest

// optional .fantasybit.NodeRequest.Type type = 10;
inline bool NodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::NodeRequest_Type NodeRequest::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.type)
  return static_cast< ::fantasybit::NodeRequest_Type >(type_);
}
inline void NodeRequest::set_type(::fantasybit::NodeRequest_Type value) {
  assert(::fantasybit::NodeRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.type)
}

// optional string myip = 20;
inline bool NodeRequest::has_myip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeRequest::set_has_myip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeRequest::clear_has_myip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeRequest::clear_myip() {
  myip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myip();
}
inline const ::std::string& NodeRequest::myip() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.myip)
  return myip_.GetNoArena();
}
inline void NodeRequest::set_myip(const ::std::string& value) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.myip)
}
#if LANG_CXX11
inline void NodeRequest::set_myip(::std::string&& value) {
  set_has_myip();
  myip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NodeRequest.myip)
}
#endif
inline void NodeRequest::set_myip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeRequest.myip)
}
inline void NodeRequest::set_myip(const char* value, size_t size) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeRequest.myip)
}
inline ::std::string* NodeRequest::mutable_myip() {
  set_has_myip();
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeRequest.myip)
  return myip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRequest::release_myip() {
  // @@protoc_insertion_point(field_release:fantasybit.NodeRequest.myip)
  clear_has_myip();
  return myip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRequest::set_allocated_myip(::std::string* myip) {
  if (myip != NULL) {
    set_has_myip();
  } else {
    clear_has_myip();
  }
  myip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myip);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NodeRequest.myip)
}

// optional int32 num = 30;
inline bool NodeRequest::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeRequest::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 NodeRequest::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.num)
  return num_;
}
inline void NodeRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.num)
}

// optional string myhost = 40;
inline bool NodeRequest::has_myhost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeRequest::set_has_myhost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeRequest::clear_has_myhost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeRequest::clear_myhost() {
  myhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myhost();
}
inline const ::std::string& NodeRequest::myhost() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.myhost)
  return myhost_.GetNoArena();
}
inline void NodeRequest::set_myhost(const ::std::string& value) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.myhost)
}
#if LANG_CXX11
inline void NodeRequest::set_myhost(::std::string&& value) {
  set_has_myhost();
  myhost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NodeRequest.myhost)
}
#endif
inline void NodeRequest::set_myhost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeRequest.myhost)
}
inline void NodeRequest::set_myhost(const char* value, size_t size) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeRequest.myhost)
}
inline ::std::string* NodeRequest::mutable_myhost() {
  set_has_myhost();
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeRequest.myhost)
  return myhost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRequest::release_myhost() {
  // @@protoc_insertion_point(field_release:fantasybit.NodeRequest.myhost)
  clear_has_myhost();
  return myhost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRequest::set_allocated_myhost(::std::string* myhost) {
  if (myhost != NULL) {
    set_has_myhost();
  } else {
    clear_has_myhost();
  }
  myhost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myhost);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NodeRequest.myhost)
}

// -------------------------------------------------------------------

// NodeReply

// optional int32 hight = 10;
inline bool NodeReply::has_hight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeReply::set_has_hight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeReply::clear_has_hight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeReply::clear_hight() {
  hight_ = 0;
  clear_has_hight();
}
inline ::google::protobuf::int32 NodeReply::hight() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeReply.hight)
  return hight_;
}
inline void NodeReply::set_hight(::google::protobuf::int32 value) {
  set_has_hight();
  hight_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.hight)
}

// repeated string ips = 20;
inline int NodeReply::ips_size() const {
  return ips_.size();
}
inline void NodeReply::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& NodeReply::ips(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeReply.ips)
  return ips_.Get(index);
}
inline ::std::string* NodeReply::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeReply.ips)
  return ips_.Mutable(index);
}
inline void NodeReply::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.ips)
  ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeReply::set_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.ips)
  ips_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeReply::set_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeReply.ips)
}
inline void NodeReply::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeReply.ips)
}
inline ::std::string* NodeReply::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:fantasybit.NodeReply.ips)
  return ips_.Add();
}
inline void NodeReply::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.NodeReply.ips)
}
#if LANG_CXX11
inline void NodeReply::add_ips(::std::string&& value) {
  ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fantasybit.NodeReply.ips)
}
#endif
inline void NodeReply::add_ips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.NodeReply.ips)
}
inline void NodeReply::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.NodeReply.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeReply::ips() const {
  // @@protoc_insertion_point(field_list:fantasybit.NodeReply.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeReply::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.NodeReply.ips)
  return &ips_;
}

// -------------------------------------------------------------------

// FantasyPlayerPoints

// optional uint32 season = 10;
inline bool FantasyPlayerPoints::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyPlayerPoints::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyPlayerPoints::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyPlayerPoints::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.season)
  return season_;
}
inline void FantasyPlayerPoints::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.season)
}

// optional uint32 week = 20;
inline bool FantasyPlayerPoints::has_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyPlayerPoints::set_has_week() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyPlayerPoints::clear_has_week() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyPlayerPoints::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.week)
  return week_;
}
inline void FantasyPlayerPoints::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.week)
}

// optional string playerid = 30;
inline bool FantasyPlayerPoints::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyPlayerPoints::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyPlayerPoints::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyPlayerPoints::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& FantasyPlayerPoints::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.playerid)
  return playerid_.GetNoArena();
}
inline void FantasyPlayerPoints::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.playerid)
}
#if LANG_CXX11
inline void FantasyPlayerPoints::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyPlayerPoints.playerid)
}
#endif
inline void FantasyPlayerPoints::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyPlayerPoints.playerid)
}
inline void FantasyPlayerPoints::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyPlayerPoints.playerid)
}
inline ::std::string* FantasyPlayerPoints::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyPlayerPoints.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyPlayerPoints::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyPlayerPoints.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyPlayerPoints::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyPlayerPoints.playerid)
}

// optional int32 points = 40;
inline bool FantasyPlayerPoints::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyPlayerPoints::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyPlayerPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyPlayerPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 FantasyPlayerPoints::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.points)
  return points_;
}
inline void FantasyPlayerPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.points)
}

// optional float result = 50;
inline bool FantasyPlayerPoints::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FantasyPlayerPoints::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FantasyPlayerPoints::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FantasyPlayerPoints::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float FantasyPlayerPoints::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.result)
  return result_;
}
inline void FantasyPlayerPoints::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.result)
}

// -------------------------------------------------------------------

// ProjectionTrans

// optional uint32 season = 10;
inline bool ProjectionTrans::has_season() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjectionTrans::set_has_season() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjectionTrans::clear_has_season() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjectionTrans::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 ProjectionTrans::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.season)
  return season_;
}
inline void ProjectionTrans::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.season)
}

// optional uint32 week = 20;
inline bool ProjectionTrans::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjectionTrans::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjectionTrans::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjectionTrans::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 ProjectionTrans::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.week)
  return week_;
}
inline void ProjectionTrans::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.week)
}

// optional string playerid = 30;
inline bool ProjectionTrans::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionTrans::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjectionTrans::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjectionTrans::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& ProjectionTrans::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.playerid)
  return playerid_.GetNoArena();
}
inline void ProjectionTrans::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.playerid)
}
#if LANG_CXX11
inline void ProjectionTrans::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjectionTrans.playerid)
}
#endif
inline void ProjectionTrans::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjectionTrans.playerid)
}
inline void ProjectionTrans::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjectionTrans.playerid)
}
inline ::std::string* ProjectionTrans::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjectionTrans.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectionTrans::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjectionTrans.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectionTrans::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjectionTrans.playerid)
}

// optional int32 points = 40;
inline bool ProjectionTrans::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectionTrans::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjectionTrans::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjectionTrans::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 ProjectionTrans::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.points)
  return points_;
}
inline void ProjectionTrans::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.points)
}

// -------------------------------------------------------------------

// PlayerPoints

// optional string playerid = 30;
inline bool PlayerPoints::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPoints::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPoints::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPoints::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerPoints::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerPoints.playerid)
  return playerid_.GetNoArena();
}
inline void PlayerPoints::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerPoints.playerid)
}
#if LANG_CXX11
inline void PlayerPoints::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerPoints.playerid)
}
#endif
inline void PlayerPoints::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerPoints.playerid)
}
inline void PlayerPoints::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerPoints.playerid)
}
inline ::std::string* PlayerPoints::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerPoints.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerPoints::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerPoints.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerPoints::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerPoints.playerid)
}

// optional int32 points = 40;
inline bool PlayerPoints::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPoints::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 PlayerPoints::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerPoints.points)
  return points_;
}
inline void PlayerPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerPoints.points)
}

// -------------------------------------------------------------------

// ProjectionTransBlock

// optional uint32 season = 10;
inline bool ProjectionTransBlock::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionTransBlock::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjectionTransBlock::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjectionTransBlock::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 ProjectionTransBlock::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTransBlock.season)
  return season_;
}
inline void ProjectionTransBlock::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTransBlock.season)
}

// optional uint32 week = 20;
inline bool ProjectionTransBlock::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectionTransBlock::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjectionTransBlock::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjectionTransBlock::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 ProjectionTransBlock::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTransBlock.week)
  return week_;
}
inline void ProjectionTransBlock::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTransBlock.week)
}

// repeated .fantasybit.PlayerPoints player_points = 30;
inline int ProjectionTransBlock::player_points_size() const {
  return player_points_.size();
}
inline void ProjectionTransBlock::clear_player_points() {
  player_points_.Clear();
}
inline const ::fantasybit::PlayerPoints& ProjectionTransBlock::player_points(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTransBlock.player_points)
  return player_points_.Get(index);
}
inline ::fantasybit::PlayerPoints* ProjectionTransBlock::mutable_player_points(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjectionTransBlock.player_points)
  return player_points_.Mutable(index);
}
inline ::fantasybit::PlayerPoints* ProjectionTransBlock::add_player_points() {
  // @@protoc_insertion_point(field_add:fantasybit.ProjectionTransBlock.player_points)
  return player_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerPoints >*
ProjectionTransBlock::mutable_player_points() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.ProjectionTransBlock.player_points)
  return &player_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerPoints >&
ProjectionTransBlock::player_points() const {
  // @@protoc_insertion_point(field_list:fantasybit.ProjectionTransBlock.player_points)
  return player_points_;
}

// -------------------------------------------------------------------

// Data

// optional int32 version = 10;
inline bool Data::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Data::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.Data.version)
  return version_;
}
inline void Data::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Data.version)
}

// optional .fantasybit.Data.Type type = 20;
inline bool Data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::Data_Type Data::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.Data.type)
  return static_cast< ::fantasybit::Data_Type >(type_);
}
inline void Data::set_type(::fantasybit::Data_Type value) {
  assert(::fantasybit::Data_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Data.type)
}

// -------------------------------------------------------------------

// PlayerData

// optional string playerid = 10;
inline bool PlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.playerid)
  return playerid_.GetNoArena();
}
inline void PlayerData::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerData.playerid)
}
#if LANG_CXX11
inline void PlayerData::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerData.playerid)
}
#endif
inline void PlayerData::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerData.playerid)
}
inline void PlayerData::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerData.playerid)
}
inline ::std::string* PlayerData::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerData::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerData.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.playerid)
}

// optional .fantasybit.PlayerBase player_base = 20;
inline bool PlayerData::has_player_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::set_has_player_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerData::clear_has_player_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::PlayerBase& PlayerData::player_base() const {
  const ::fantasybit::PlayerBase* p = player_base_;
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_base)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::PlayerBase*>(
      &::fantasybit::_PlayerBase_default_instance_);
}
inline ::fantasybit::PlayerBase* PlayerData::release_player_base() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerData.player_base)
  clear_has_player_base();
  ::fantasybit::PlayerBase* temp = player_base_;
  player_base_ = NULL;
  return temp;
}
inline ::fantasybit::PlayerBase* PlayerData::mutable_player_base() {
  set_has_player_base();
  if (player_base_ == NULL) {
    player_base_ = new ::fantasybit::PlayerBase;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.player_base)
  return player_base_;
}
inline void PlayerData::set_allocated_player_base(::fantasybit::PlayerBase* player_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_base_);
  }
  if (player_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_base, submessage_arena);
    }
    set_has_player_base();
  } else {
    clear_has_player_base();
  }
  player_base_ = player_base;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.player_base)
}

// optional .fantasybit.PlayerStatus player_status = 30;
inline bool PlayerData::has_player_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerData::set_has_player_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerData::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::PlayerStatus& PlayerData::player_status() const {
  const ::fantasybit::PlayerStatus* p = player_status_;
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_status)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::PlayerStatus*>(
      &::fantasybit::_PlayerStatus_default_instance_);
}
inline ::fantasybit::PlayerStatus* PlayerData::release_player_status() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerData.player_status)
  clear_has_player_status();
  ::fantasybit::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
inline ::fantasybit::PlayerStatus* PlayerData::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) {
    player_status_ = new ::fantasybit::PlayerStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.player_status)
  return player_status_;
}
inline void PlayerData::set_allocated_player_status(::fantasybit::PlayerStatus* player_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_status_);
  }
  if (player_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_status, submessage_arena);
    }
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  player_status_ = player_status;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.player_status)
}

// optional .fantasybit.PlayerGameStatus player_game_status = 40;
inline bool PlayerData::has_player_game_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerData::set_has_player_game_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerData::clear_has_player_game_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerData::clear_player_game_status() {
  player_game_status_ = 0;
  clear_has_player_game_status();
}
inline ::fantasybit::PlayerGameStatus PlayerData::player_game_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_game_status)
  return static_cast< ::fantasybit::PlayerGameStatus >(player_game_status_);
}
inline void PlayerData::set_player_game_status(::fantasybit::PlayerGameStatus value) {
  assert(::fantasybit::PlayerGameStatus_IsValid(value));
  set_has_player_game_status();
  player_game_status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerData.player_game_status)
}

// -------------------------------------------------------------------

// GameData

// optional string gameid = 10;
inline bool GameData::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameData::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameData::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameData::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& GameData::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameData.gameid)
  return gameid_.GetNoArena();
}
inline void GameData::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameData.gameid)
}
#if LANG_CXX11
inline void GameData::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameData.gameid)
}
#endif
inline void GameData::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameData.gameid)
}
inline void GameData::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameData.gameid)
}
inline ::std::string* GameData::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameData.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameData::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameData.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameData::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameData.gameid)
}

// optional .fantasybit.GameStatus status = 20;
inline bool GameData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::GameStatus& GameData::status() const {
  const ::fantasybit::GameStatus* p = status_;
  // @@protoc_insertion_point(field_get:fantasybit.GameData.status)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GameStatus*>(
      &::fantasybit::_GameStatus_default_instance_);
}
inline ::fantasybit::GameStatus* GameData::release_status() {
  // @@protoc_insertion_point(field_release:fantasybit.GameData.status)
  clear_has_status();
  ::fantasybit::GameStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::fantasybit::GameStatus* GameData::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::fantasybit::GameStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameData.status)
  return status_;
}
inline void GameData::set_allocated_status(::fantasybit::GameStatus* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameData.status)
}

// -------------------------------------------------------------------

// ResultData

// optional .fantasybit.GameResult game_result = 10;
inline bool ResultData::has_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultData::set_has_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultData::clear_has_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::GameResult& ResultData::game_result() const {
  const ::fantasybit::GameResult* p = game_result_;
  // @@protoc_insertion_point(field_get:fantasybit.ResultData.game_result)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GameResult*>(
      &::fantasybit::_GameResult_default_instance_);
}
inline ::fantasybit::GameResult* ResultData::release_game_result() {
  // @@protoc_insertion_point(field_release:fantasybit.ResultData.game_result)
  clear_has_game_result();
  ::fantasybit::GameResult* temp = game_result_;
  game_result_ = NULL;
  return temp;
}
inline ::fantasybit::GameResult* ResultData::mutable_game_result() {
  set_has_game_result();
  if (game_result_ == NULL) {
    game_result_ = new ::fantasybit::GameResult;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ResultData.game_result)
  return game_result_;
}
inline void ResultData::set_allocated_game_result(::fantasybit::GameResult* game_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(game_result_);
  }
  if (game_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_result, submessage_arena);
    }
    set_has_game_result();
  } else {
    clear_has_game_result();
  }
  game_result_ = game_result;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ResultData.game_result)
}

// -------------------------------------------------------------------

// ScheduleData

// optional int32 week = 1;
inline bool ScheduleData::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScheduleData::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScheduleData::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScheduleData::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 ScheduleData::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ScheduleData.week)
  return week_;
}
inline void ScheduleData::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ScheduleData.week)
}

// optional .fantasybit.WeeklySchedule weekly = 10;
inline bool ScheduleData::has_weekly() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScheduleData::set_has_weekly() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScheduleData::clear_has_weekly() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::WeeklySchedule& ScheduleData::weekly() const {
  const ::fantasybit::WeeklySchedule* p = weekly_;
  // @@protoc_insertion_point(field_get:fantasybit.ScheduleData.weekly)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::WeeklySchedule*>(
      &::fantasybit::_WeeklySchedule_default_instance_);
}
inline ::fantasybit::WeeklySchedule* ScheduleData::release_weekly() {
  // @@protoc_insertion_point(field_release:fantasybit.ScheduleData.weekly)
  clear_has_weekly();
  ::fantasybit::WeeklySchedule* temp = weekly_;
  weekly_ = NULL;
  return temp;
}
inline ::fantasybit::WeeklySchedule* ScheduleData::mutable_weekly() {
  set_has_weekly();
  if (weekly_ == NULL) {
    weekly_ = new ::fantasybit::WeeklySchedule;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ScheduleData.weekly)
  return weekly_;
}
inline void ScheduleData::set_allocated_weekly(::fantasybit::WeeklySchedule* weekly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(weekly_);
  }
  if (weekly) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      weekly = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, weekly, submessage_arena);
    }
    set_has_weekly();
  } else {
    clear_has_weekly();
  }
  weekly_ = weekly;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ScheduleData.weekly)
}

// -------------------------------------------------------------------

// DataTransition

// optional .fantasybit.TrType type = 1;
inline bool DataTransition::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataTransition::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataTransition::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataTransition::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::fantasybit::TrType DataTransition::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.type)
  return static_cast< ::fantasybit::TrType >(type_);
}
inline void DataTransition::set_type(::fantasybit::TrType value) {
  assert(::fantasybit::TrType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.type)
}

// optional uint32 season = 10;
inline bool DataTransition::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTransition::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataTransition::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataTransition::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 DataTransition::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.season)
  return season_;
}
inline void DataTransition::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.season)
}

// optional uint32 week = 20;
inline bool DataTransition::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataTransition::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataTransition::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataTransition::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 DataTransition::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.week)
  return week_;
}
inline void DataTransition::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.week)
}

// repeated .fantasybit.GameData gamedata = 30;
inline int DataTransition::gamedata_size() const {
  return gamedata_.size();
}
inline void DataTransition::clear_gamedata() {
  gamedata_.Clear();
}
inline const ::fantasybit::GameData& DataTransition::gamedata(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.gamedata)
  return gamedata_.Get(index);
}
inline ::fantasybit::GameData* DataTransition::mutable_gamedata(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataTransition.gamedata)
  return gamedata_.Mutable(index);
}
inline ::fantasybit::GameData* DataTransition::add_gamedata() {
  // @@protoc_insertion_point(field_add:fantasybit.DataTransition.gamedata)
  return gamedata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >*
DataTransition::mutable_gamedata() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DataTransition.gamedata)
  return &gamedata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >&
DataTransition::gamedata() const {
  // @@protoc_insertion_point(field_list:fantasybit.DataTransition.gamedata)
  return gamedata_;
}

// repeated .fantasybit.Data data = 40;
inline int DataTransition::data_size() const {
  return data_.size();
}
inline void DataTransition::clear_data() {
  data_.Clear();
}
inline const ::fantasybit::Data& DataTransition::data(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.data)
  return data_.Get(index);
}
inline ::fantasybit::Data* DataTransition::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataTransition.data)
  return data_.Mutable(index);
}
inline ::fantasybit::Data* DataTransition::add_data() {
  // @@protoc_insertion_point(field_add:fantasybit.DataTransition.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DataTransition::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DataTransition.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DataTransition::data() const {
  // @@protoc_insertion_point(field_list:fantasybit.DataTransition.data)
  return data_;
}

// -------------------------------------------------------------------

// TeamState

// optional .fantasybit.TeamState.State state = 1;
inline bool TeamState::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamState::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamState::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamState::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::fantasybit::TeamState_State TeamState::state() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.state)
  return static_cast< ::fantasybit::TeamState_State >(state_);
}
inline void TeamState::set_state(::fantasybit::TeamState_State value) {
  assert(::fantasybit::TeamState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.state)
}

// optional uint32 week = 10;
inline bool TeamState::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamState::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamState::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamState::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 TeamState::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.week)
  return week_;
}
inline void TeamState::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.week)
}

// optional string teamid = 20;
inline bool TeamState::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamState::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamState::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamState::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& TeamState::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.teamid)
  return teamid_.GetNoArena();
}
inline void TeamState::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.teamid)
}
#if LANG_CXX11
inline void TeamState::set_teamid(::std::string&& value) {
  set_has_teamid();
  teamid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamState.teamid)
}
#endif
inline void TeamState::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamState.teamid)
}
inline void TeamState::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamState.teamid)
}
inline ::std::string* TeamState::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamState.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamState::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamState.teamid)
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamState::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamState.teamid)
}

// -------------------------------------------------------------------

// DeltaData

// optional .fantasybit.DeltaData.Type type = 1;
inline bool DeltaData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeltaData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeltaData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeltaData::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::fantasybit::DeltaData_Type DeltaData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.type)
  return static_cast< ::fantasybit::DeltaData_Type >(type_);
}
inline void DeltaData::set_type(::fantasybit::DeltaData_Type value) {
  assert(::fantasybit::DeltaData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DeltaData.type)
}

// repeated .fantasybit.MyFantasyName myfantasyname = 2;
inline int DeltaData::myfantasyname_size() const {
  return myfantasyname_.size();
}
inline void DeltaData::clear_myfantasyname() {
  myfantasyname_.Clear();
}
inline const ::fantasybit::MyFantasyName& DeltaData::myfantasyname(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Get(index);
}
inline ::fantasybit::MyFantasyName* DeltaData::mutable_myfantasyname(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Mutable(index);
}
inline ::fantasybit::MyFantasyName* DeltaData::add_myfantasyname() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >*
DeltaData::mutable_myfantasyname() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.myfantasyname)
  return &myfantasyname_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >&
DeltaData::myfantasyname() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_;
}

// optional .fantasybit.GlobalState globalstate = 10;
inline bool DeltaData::has_globalstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeltaData::set_has_globalstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeltaData::clear_has_globalstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::GlobalState& DeltaData::globalstate() const {
  const ::fantasybit::GlobalState* p = globalstate_;
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.globalstate)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GlobalState*>(
      &::fantasybit::_GlobalState_default_instance_);
}
inline ::fantasybit::GlobalState* DeltaData::release_globalstate() {
  // @@protoc_insertion_point(field_release:fantasybit.DeltaData.globalstate)
  clear_has_globalstate();
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = NULL;
  return temp;
}
inline ::fantasybit::GlobalState* DeltaData::mutable_globalstate() {
  set_has_globalstate();
  if (globalstate_ == NULL) {
    globalstate_ = new ::fantasybit::GlobalState;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.globalstate)
  return globalstate_;
}
inline void DeltaData::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(globalstate_);
  }
  if (globalstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      globalstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    set_has_globalstate();
  } else {
    clear_has_globalstate();
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DeltaData.globalstate)
}

// repeated .fantasybit.TeamState teamstates = 20;
inline int DeltaData::teamstates_size() const {
  return teamstates_.size();
}
inline void DeltaData::clear_teamstates() {
  teamstates_.Clear();
}
inline const ::fantasybit::TeamState& DeltaData::teamstates(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.teamstates)
  return teamstates_.Get(index);
}
inline ::fantasybit::TeamState* DeltaData::mutable_teamstates(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.teamstates)
  return teamstates_.Mutable(index);
}
inline ::fantasybit::TeamState* DeltaData::add_teamstates() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.teamstates)
  return teamstates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >*
DeltaData::mutable_teamstates() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.teamstates)
  return &teamstates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >&
DeltaData::teamstates() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.teamstates)
  return teamstates_;
}

// repeated .fantasybit.Data datas = 30;
inline int DeltaData::datas_size() const {
  return datas_.size();
}
inline void DeltaData::clear_datas() {
  datas_.Clear();
}
inline const ::fantasybit::Data& DeltaData::datas(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.datas)
  return datas_.Get(index);
}
inline ::fantasybit::Data* DeltaData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.datas)
  return datas_.Mutable(index);
}
inline ::fantasybit::Data* DeltaData::add_datas() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.datas)
  return datas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DeltaData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.datas)
  return &datas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DeltaData::datas() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.datas)
  return datas_;
}

// repeated .fantasybit.FantasyPlayer players = 40;
inline int DeltaData::players_size() const {
  return players_.size();
}
inline void DeltaData::clear_players() {
  players_.Clear();
}
inline const ::fantasybit::FantasyPlayer& DeltaData::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.players)
  return players_.Get(index);
}
inline ::fantasybit::FantasyPlayer* DeltaData::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.players)
  return players_.Mutable(index);
}
inline ::fantasybit::FantasyPlayer* DeltaData::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >*
DeltaData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >&
DeltaData::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.players)
  return players_;
}

// -------------------------------------------------------------------

// MessageData

// optional string msg = 10;
inline bool MessageData::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageData::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageData::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& MessageData::msg() const {
  // @@protoc_insertion_point(field_get:fantasybit.MessageData.msg)
  return msg_.GetNoArena();
}
inline void MessageData::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MessageData.msg)
}
#if LANG_CXX11
inline void MessageData::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MessageData.msg)
}
#endif
inline void MessageData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MessageData.msg)
}
inline void MessageData::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MessageData.msg)
}
inline ::std::string* MessageData::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:fantasybit.MessageData.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageData::release_msg() {
  // @@protoc_insertion_point(field_release:fantasybit.MessageData.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MessageData.msg)
}

// optional int32 gt = 20;
inline bool MessageData::has_gt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageData::set_has_gt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageData::clear_has_gt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageData::clear_gt() {
  gt_ = 0;
  clear_has_gt();
}
inline ::google::protobuf::int32 MessageData::gt() const {
  // @@protoc_insertion_point(field_get:fantasybit.MessageData.gt)
  return gt_;
}
inline void MessageData::set_gt(::google::protobuf::int32 value) {
  set_has_gt();
  gt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MessageData.gt)
}

// optional int32 lt = 30;
inline bool MessageData::has_lt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageData::set_has_lt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageData::clear_has_lt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageData::clear_lt() {
  lt_ = 0;
  clear_has_lt();
}
inline ::google::protobuf::int32 MessageData::lt() const {
  // @@protoc_insertion_point(field_get:fantasybit.MessageData.lt)
  return lt_;
}
inline void MessageData::set_lt(::google::protobuf::int32 value) {
  set_has_lt();
  lt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MessageData.lt)
}

// -------------------------------------------------------------------

// StampedTrans

// optional uint64 timestamp = 10;
inline bool StampedTrans::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StampedTrans::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StampedTrans::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StampedTrans::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 StampedTrans::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.StampedTrans.timestamp)
  return timestamp_;
}
inline void StampedTrans::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.StampedTrans.timestamp)
}

// optional int32 seqnum = 20;
inline bool StampedTrans::has_seqnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StampedTrans::set_has_seqnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StampedTrans::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StampedTrans::clear_seqnum() {
  seqnum_ = 0;
  clear_has_seqnum();
}
inline ::google::protobuf::int32 StampedTrans::seqnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.StampedTrans.seqnum)
  return seqnum_;
}
inline void StampedTrans::set_seqnum(::google::protobuf::int32 value) {
  set_has_seqnum();
  seqnum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.StampedTrans.seqnum)
}

// optional int32 prevseq = 21;
inline bool StampedTrans::has_prevseq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StampedTrans::set_has_prevseq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StampedTrans::clear_has_prevseq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StampedTrans::clear_prevseq() {
  prevseq_ = 0;
  clear_has_prevseq();
}
inline ::google::protobuf::int32 StampedTrans::prevseq() const {
  // @@protoc_insertion_point(field_get:fantasybit.StampedTrans.prevseq)
  return prevseq_;
}
inline void StampedTrans::set_prevseq(::google::protobuf::int32 value) {
  set_has_prevseq();
  prevseq_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.StampedTrans.prevseq)
}

// optional .fantasybit.SignedTransaction signed_orig = 30;
inline bool StampedTrans::has_signed_orig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StampedTrans::set_has_signed_orig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StampedTrans::clear_has_signed_orig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StampedTrans::clear_signed_orig() {
  if (signed_orig_ != NULL) signed_orig_->Clear();
  clear_has_signed_orig();
}
inline const ::fantasybit::SignedTransaction& StampedTrans::signed_orig() const {
  const ::fantasybit::SignedTransaction* p = signed_orig_;
  // @@protoc_insertion_point(field_get:fantasybit.StampedTrans.signed_orig)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::SignedTransaction*>(
      &::fantasybit::_SignedTransaction_default_instance_);
}
inline ::fantasybit::SignedTransaction* StampedTrans::release_signed_orig() {
  // @@protoc_insertion_point(field_release:fantasybit.StampedTrans.signed_orig)
  clear_has_signed_orig();
  ::fantasybit::SignedTransaction* temp = signed_orig_;
  signed_orig_ = NULL;
  return temp;
}
inline ::fantasybit::SignedTransaction* StampedTrans::mutable_signed_orig() {
  set_has_signed_orig();
  if (signed_orig_ == NULL) {
    signed_orig_ = new ::fantasybit::SignedTransaction;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.StampedTrans.signed_orig)
  return signed_orig_;
}
inline void StampedTrans::set_allocated_signed_orig(::fantasybit::SignedTransaction* signed_orig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signed_orig_;
  }
  if (signed_orig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signed_orig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signed_orig, submessage_arena);
    }
    set_has_signed_orig();
  } else {
    clear_has_signed_orig();
  }
  signed_orig_ = signed_orig;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.StampedTrans.signed_orig)
}

// -------------------------------------------------------------------

// ExchangeOrder

// optional .fantasybit.ExchangeOrder.Type type = 10;
inline bool ExchangeOrder::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExchangeOrder::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExchangeOrder::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExchangeOrder::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::ExchangeOrder_Type ExchangeOrder::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.ExchangeOrder.type)
  return static_cast< ::fantasybit::ExchangeOrder_Type >(type_);
}
inline void ExchangeOrder::set_type(::fantasybit::ExchangeOrder_Type value) {
  assert(::fantasybit::ExchangeOrder_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ExchangeOrder.type)
}

// optional string playerid = 40;
inline bool ExchangeOrder::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeOrder::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeOrder::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeOrder::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& ExchangeOrder::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ExchangeOrder.playerid)
  return playerid_.GetNoArena();
}
inline void ExchangeOrder::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ExchangeOrder.playerid)
}
#if LANG_CXX11
inline void ExchangeOrder::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ExchangeOrder.playerid)
}
#endif
inline void ExchangeOrder::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ExchangeOrder.playerid)
}
inline void ExchangeOrder::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ExchangeOrder.playerid)
}
inline ::std::string* ExchangeOrder::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ExchangeOrder.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExchangeOrder::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.ExchangeOrder.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangeOrder::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ExchangeOrder.playerid)
}

// optional .fantasybit.OrderCore core = 50;
inline bool ExchangeOrder::has_core() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeOrder::set_has_core() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeOrder::clear_has_core() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::OrderCore& ExchangeOrder::core() const {
  const ::fantasybit::OrderCore* p = core_;
  // @@protoc_insertion_point(field_get:fantasybit.ExchangeOrder.core)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::OrderCore*>(
      &::fantasybit::_OrderCore_default_instance_);
}
inline ::fantasybit::OrderCore* ExchangeOrder::release_core() {
  // @@protoc_insertion_point(field_release:fantasybit.ExchangeOrder.core)
  clear_has_core();
  ::fantasybit::OrderCore* temp = core_;
  core_ = NULL;
  return temp;
}
inline ::fantasybit::OrderCore* ExchangeOrder::mutable_core() {
  set_has_core();
  if (core_ == NULL) {
    core_ = new ::fantasybit::OrderCore;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ExchangeOrder.core)
  return core_;
}
inline void ExchangeOrder::set_allocated_core(::fantasybit::OrderCore* core) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(core_);
  }
  if (core) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      core = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, core, submessage_arena);
    }
    set_has_core();
  } else {
    clear_has_core();
  }
  core_ = core;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ExchangeOrder.core)
}

// optional int32 cancel_oref = 100;
inline bool ExchangeOrder::has_cancel_oref() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExchangeOrder::set_has_cancel_oref() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExchangeOrder::clear_has_cancel_oref() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExchangeOrder::clear_cancel_oref() {
  cancel_oref_ = 0;
  clear_has_cancel_oref();
}
inline ::google::protobuf::int32 ExchangeOrder::cancel_oref() const {
  // @@protoc_insertion_point(field_get:fantasybit.ExchangeOrder.cancel_oref)
  return cancel_oref_;
}
inline void ExchangeOrder::set_cancel_oref(::google::protobuf::int32 value) {
  set_has_cancel_oref();
  cancel_oref_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ExchangeOrder.cancel_oref)
}

// optional .fantasybit.FutContract futcontract = 110;
inline bool ExchangeOrder::has_futcontract() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeOrder::set_has_futcontract() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeOrder::clear_has_futcontract() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::fantasybit::FutContract& ExchangeOrder::futcontract() const {
  const ::fantasybit::FutContract* p = futcontract_;
  // @@protoc_insertion_point(field_get:fantasybit.ExchangeOrder.futcontract)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::FutContract*>(
      &::fantasybit::_FutContract_default_instance_);
}
inline ::fantasybit::FutContract* ExchangeOrder::release_futcontract() {
  // @@protoc_insertion_point(field_release:fantasybit.ExchangeOrder.futcontract)
  clear_has_futcontract();
  ::fantasybit::FutContract* temp = futcontract_;
  futcontract_ = NULL;
  return temp;
}
inline ::fantasybit::FutContract* ExchangeOrder::mutable_futcontract() {
  set_has_futcontract();
  if (futcontract_ == NULL) {
    futcontract_ = new ::fantasybit::FutContract;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ExchangeOrder.futcontract)
  return futcontract_;
}
inline void ExchangeOrder::set_allocated_futcontract(::fantasybit::FutContract* futcontract) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(futcontract_);
  }
  if (futcontract) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      futcontract = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, futcontract, submessage_arena);
    }
    set_has_futcontract();
  } else {
    clear_has_futcontract();
  }
  futcontract_ = futcontract;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ExchangeOrder.futcontract)
}

// optional string symbol = 120;
inline bool ExchangeOrder::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeOrder::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeOrder::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeOrder::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& ExchangeOrder::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.ExchangeOrder.symbol)
  return symbol_.GetNoArena();
}
inline void ExchangeOrder::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ExchangeOrder.symbol)
}
#if LANG_CXX11
inline void ExchangeOrder::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ExchangeOrder.symbol)
}
#endif
inline void ExchangeOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ExchangeOrder.symbol)
}
inline void ExchangeOrder::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ExchangeOrder.symbol)
}
inline ::std::string* ExchangeOrder::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:fantasybit.ExchangeOrder.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExchangeOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.ExchangeOrder.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExchangeOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ExchangeOrder.symbol)
}

// -------------------------------------------------------------------

// OrderUnique

// optional string public_key = 10;
inline bool OrderUnique::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderUnique::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderUnique::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderUnique::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& OrderUnique::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderUnique.public_key)
  return public_key_.GetNoArena();
}
inline void OrderUnique::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderUnique.public_key)
}
#if LANG_CXX11
inline void OrderUnique::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderUnique.public_key)
}
#endif
inline void OrderUnique::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderUnique.public_key)
}
inline void OrderUnique::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderUnique.public_key)
}
inline ::std::string* OrderUnique::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderUnique.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderUnique::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderUnique.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderUnique::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderUnique.public_key)
}

// optional uint32 season = 20;
inline bool OrderUnique::has_season() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderUnique::set_has_season() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderUnique::clear_has_season() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderUnique::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 OrderUnique::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderUnique.season)
  return season_;
}
inline void OrderUnique::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderUnique.season)
}

// optional uint32 week = 30;
inline bool OrderUnique::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderUnique::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderUnique::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderUnique::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 OrderUnique::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderUnique.week)
  return week_;
}
inline void OrderUnique::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderUnique.week)
}

// optional bool buyside = 40;
inline bool OrderUnique::has_buyside() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderUnique::set_has_buyside() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderUnique::clear_has_buyside() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderUnique::clear_buyside() {
  buyside_ = false;
  clear_has_buyside();
}
inline bool OrderUnique::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderUnique.buyside)
  return buyside_;
}
inline void OrderUnique::set_buyside(bool value) {
  set_has_buyside();
  buyside_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderUnique.buyside)
}

// optional string playerid = 50;
inline bool OrderUnique::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderUnique::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderUnique::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderUnique::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& OrderUnique::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderUnique.playerid)
  return playerid_.GetNoArena();
}
inline void OrderUnique::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderUnique.playerid)
}
#if LANG_CXX11
inline void OrderUnique::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderUnique.playerid)
}
#endif
inline void OrderUnique::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderUnique.playerid)
}
inline void OrderUnique::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderUnique.playerid)
}
inline ::std::string* OrderUnique::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderUnique.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderUnique::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderUnique.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderUnique::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderUnique.playerid)
}

// optional int32 price = 70;
inline bool OrderUnique::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderUnique::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderUnique::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderUnique::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 OrderUnique::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderUnique.price)
  return price_;
}
inline void OrderUnique::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderUnique.price)
}

// -------------------------------------------------------------------

// OrderDeets

// optional bytes oid = 10;
inline bool OrderDeets::has_oid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderDeets::set_has_oid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderDeets::clear_has_oid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderDeets::clear_oid() {
  oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oid();
}
inline const ::std::string& OrderDeets::oid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderDeets.oid)
  return oid_.GetNoArena();
}
inline void OrderDeets::set_oid(const ::std::string& value) {
  set_has_oid();
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderDeets.oid)
}
#if LANG_CXX11
inline void OrderDeets::set_oid(::std::string&& value) {
  set_has_oid();
  oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderDeets.oid)
}
#endif
inline void OrderDeets::set_oid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oid();
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderDeets.oid)
}
inline void OrderDeets::set_oid(const void* value, size_t size) {
  set_has_oid();
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderDeets.oid)
}
inline ::std::string* OrderDeets::mutable_oid() {
  set_has_oid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderDeets.oid)
  return oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderDeets::release_oid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderDeets.oid)
  clear_has_oid();
  return oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderDeets::set_allocated_oid(::std::string* oid) {
  if (oid != NULL) {
    set_has_oid();
  } else {
    clear_has_oid();
  }
  oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderDeets.oid)
}

// optional .fantasybit.OrderUnique order = 20;
inline bool OrderDeets::has_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderDeets::set_has_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderDeets::clear_has_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderDeets::clear_order() {
  if (order_ != NULL) order_->Clear();
  clear_has_order();
}
inline const ::fantasybit::OrderUnique& OrderDeets::order() const {
  const ::fantasybit::OrderUnique* p = order_;
  // @@protoc_insertion_point(field_get:fantasybit.OrderDeets.order)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::OrderUnique*>(
      &::fantasybit::_OrderUnique_default_instance_);
}
inline ::fantasybit::OrderUnique* OrderDeets::release_order() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderDeets.order)
  clear_has_order();
  ::fantasybit::OrderUnique* temp = order_;
  order_ = NULL;
  return temp;
}
inline ::fantasybit::OrderUnique* OrderDeets::mutable_order() {
  set_has_order();
  if (order_ == NULL) {
    order_ = new ::fantasybit::OrderUnique;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderDeets.order)
  return order_;
}
inline void OrderDeets::set_allocated_order(::fantasybit::OrderUnique* order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete order_;
  }
  if (order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    set_has_order();
  } else {
    clear_has_order();
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderDeets.order)
}

// optional int32 size = 30;
inline bool OrderDeets::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderDeets::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderDeets::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderDeets::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 OrderDeets::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderDeets.size)
  return size_;
}
inline void OrderDeets::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderDeets.size)
}

// -------------------------------------------------------------------

// InsideUnique

// optional string playerid = 50;
inline bool InsideUnique::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InsideUnique::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InsideUnique::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InsideUnique::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& InsideUnique::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.playerid)
  return playerid_.GetNoArena();
}
inline void InsideUnique::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InsideUnique.playerid)
}
#if LANG_CXX11
inline void InsideUnique::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InsideUnique.playerid)
}
#endif
inline void InsideUnique::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InsideUnique.playerid)
}
inline void InsideUnique::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InsideUnique.playerid)
}
inline ::std::string* InsideUnique::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.InsideUnique.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsideUnique::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.InsideUnique.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsideUnique::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InsideUnique.playerid)
}

// optional string public_key = 10;
inline bool InsideUnique::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsideUnique::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsideUnique::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsideUnique::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& InsideUnique::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.public_key)
  return public_key_.GetNoArena();
}
inline void InsideUnique::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InsideUnique.public_key)
}
#if LANG_CXX11
inline void InsideUnique::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InsideUnique.public_key)
}
#endif
inline void InsideUnique::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InsideUnique.public_key)
}
inline void InsideUnique::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InsideUnique.public_key)
}
inline ::std::string* InsideUnique::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.InsideUnique.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsideUnique::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.InsideUnique.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsideUnique::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InsideUnique.public_key)
}

// optional bool buyside = 40;
inline bool InsideUnique::has_buyside() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InsideUnique::set_has_buyside() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InsideUnique::clear_has_buyside() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InsideUnique::clear_buyside() {
  buyside_ = false;
  clear_has_buyside();
}
inline bool InsideUnique::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.buyside)
  return buyside_;
}
inline void InsideUnique::set_buyside(bool value) {
  set_has_buyside();
  buyside_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InsideUnique.buyside)
}

// optional int32 price = 70;
inline bool InsideUnique::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InsideUnique::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InsideUnique::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InsideUnique::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 InsideUnique::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.price)
  return price_;
}
inline void InsideUnique::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InsideUnique.price)
}

// optional bytes oid = 11;
inline bool InsideUnique::has_oid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsideUnique::set_has_oid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsideUnique::clear_has_oid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsideUnique::clear_oid() {
  oid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_oid();
}
inline const ::std::string& InsideUnique::oid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.oid)
  return oid_.GetNoArena();
}
inline void InsideUnique::set_oid(const ::std::string& value) {
  set_has_oid();
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InsideUnique.oid)
}
#if LANG_CXX11
inline void InsideUnique::set_oid(::std::string&& value) {
  set_has_oid();
  oid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InsideUnique.oid)
}
#endif
inline void InsideUnique::set_oid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_oid();
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InsideUnique.oid)
}
inline void InsideUnique::set_oid(const void* value, size_t size) {
  set_has_oid();
  oid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InsideUnique.oid)
}
inline ::std::string* InsideUnique::mutable_oid() {
  set_has_oid();
  // @@protoc_insertion_point(field_mutable:fantasybit.InsideUnique.oid)
  return oid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsideUnique::release_oid() {
  // @@protoc_insertion_point(field_release:fantasybit.InsideUnique.oid)
  clear_has_oid();
  return oid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsideUnique::set_allocated_oid(::std::string* oid) {
  if (oid != NULL) {
    set_has_oid();
  } else {
    clear_has_oid();
  }
  oid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), oid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InsideUnique.oid)
}

// optional .fantasybit.OrderUnique order = 20;
inline bool InsideUnique::has_order() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InsideUnique::set_has_order() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InsideUnique::clear_has_order() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InsideUnique::clear_order() {
  if (order_ != NULL) order_->Clear();
  clear_has_order();
}
inline const ::fantasybit::OrderUnique& InsideUnique::order() const {
  const ::fantasybit::OrderUnique* p = order_;
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.order)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::OrderUnique*>(
      &::fantasybit::_OrderUnique_default_instance_);
}
inline ::fantasybit::OrderUnique* InsideUnique::release_order() {
  // @@protoc_insertion_point(field_release:fantasybit.InsideUnique.order)
  clear_has_order();
  ::fantasybit::OrderUnique* temp = order_;
  order_ = NULL;
  return temp;
}
inline ::fantasybit::OrderUnique* InsideUnique::mutable_order() {
  set_has_order();
  if (order_ == NULL) {
    order_ = new ::fantasybit::OrderUnique;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.InsideUnique.order)
  return order_;
}
inline void InsideUnique::set_allocated_order(::fantasybit::OrderUnique* order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete order_;
  }
  if (order) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    set_has_order();
  } else {
    clear_has_order();
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InsideUnique.order)
}

// optional int32 size = 30;
inline bool InsideUnique::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InsideUnique::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InsideUnique::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InsideUnique::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 InsideUnique::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.InsideUnique.size)
  return size_;
}
inline void InsideUnique::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InsideUnique.size)
}

// -------------------------------------------------------------------

// TimeTransition

// optional .fantasybit.TimeTransition.Type type = 1;
inline bool TimeTransition::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeTransition::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeTransition::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeTransition::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::fantasybit::TimeTransition_Type TimeTransition::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.TimeTransition.type)
  return static_cast< ::fantasybit::TimeTransition_Type >(type_);
}
inline void TimeTransition::set_type(::fantasybit::TimeTransition_Type value) {
  assert(::fantasybit::TimeTransition_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TimeTransition.type)
}

// optional uint32 season = 10;
inline bool TimeTransition::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeTransition::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeTransition::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeTransition::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 TimeTransition::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.TimeTransition.season)
  return season_;
}
inline void TimeTransition::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TimeTransition.season)
}

// optional uint32 week = 20;
inline bool TimeTransition::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeTransition::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeTransition::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeTransition::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 TimeTransition::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TimeTransition.week)
  return week_;
}
inline void TimeTransition::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TimeTransition.week)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fantasybit::OutData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::OutData_Type>() {
  return ::fantasybit::OutData_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::InData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::InData_Type>() {
  return ::fantasybit::InData_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::NameProof_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::NameProof_Type>() {
  return ::fantasybit::NameProof_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::BlockHeader_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::BlockHeader_Type>() {
  return ::fantasybit::BlockHeader_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::NodeRequest_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::NodeRequest_Type>() {
  return ::fantasybit::NodeRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::Data_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::Data_Type>() {
  return ::fantasybit::Data_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::TeamState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TeamState_State>() {
  return ::fantasybit::TeamState_State_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::DeltaData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::DeltaData_Type>() {
  return ::fantasybit::DeltaData_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::ExchangeOrder_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::ExchangeOrder_Type>() {
  return ::fantasybit::ExchangeOrder_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::TimeTransition_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TimeTransition_Type>() {
  return ::fantasybit::TimeTransition_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::MyNameStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MyNameStatus>() {
  return ::fantasybit::MyNameStatus_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::TransType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TransType>() {
  return ::fantasybit::TransType_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::TrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TrType>() {
  return ::fantasybit::TrType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoData_2eproto__INCLUDED
