// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateData.proto

#ifndef PROTOBUF_StateData_2eproto__INCLUDED
#define PROTOBUF_StateData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoData.pb.h"
#include "NameData.pb.h"
#include "StaticData.pb.h"
#include "StatusData.pb.h"
#include "ExData.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_StateData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[61];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBlockMetaImpl();
void InitDefaultsBlockMeta();
void InitDefaultsTxMetaImpl();
void InitDefaultsTxMeta();
void InitDefaultsTrMetaImpl();
void InitDefaultsTrMeta();
void InitDefaultsGameMetaImpl();
void InitDefaultsGameMeta();
void InitDefaultsDataMetaImpl();
void InitDefaultsDataMeta();
void InitDefaultsLeaderBoardMetaImpl();
void InitDefaultsLeaderBoardMeta();
void InitDefaultsFantasyNameBalMetaImpl();
void InitDefaultsFantasyNameBalMeta();
void InitDefaultsFantasyNameStateImpl();
void InitDefaultsFantasyNameState();
void InitDefaultsWeekGameStatusMetaImpl();
void InitDefaultsWeekGameStatusMeta();
void InitDefaultsInGameProjMetaImpl();
void InitDefaultsInGameProjMeta();
void InitDefaultsGameResultsMetaImpl();
void InitDefaultsGameResultsMeta();
void InitDefaultsGameStatusMetaImpl();
void InitDefaultsGameStatusMeta();
void InitDefaultsTeamProjMetaImpl();
void InitDefaultsTeamProjMeta();
void InitDefaultsTeamResultMetaImpl();
void InitDefaultsTeamResultMeta();
void InitDefaultsGamePlayerProjMetaImpl();
void InitDefaultsGamePlayerProjMeta();
void InitDefaultsProjMetaImpl();
void InitDefaultsProjMeta();
void InitDefaultsPosMetaImpl();
void InitDefaultsPosMeta();
void InitDefaultsPlayerResultMetaImpl();
void InitDefaultsPlayerResultMeta();
void InitDefaultsPlayerGameStatsImpl();
void InitDefaultsPlayerGameStats();
void InitDefaultsAwardMetaImpl();
void InitDefaultsAwardMeta();
void InitDefaultsPnlMetaImpl();
void InitDefaultsPnlMeta();
void InitDefaultsPlayerMarketStateImpl();
void InitDefaultsPlayerMarketState();
void InitDefaultsLimitBookMetaImpl();
void InitDefaultsLimitBookMeta();
void InitDefaultsMarketTicMetaImpl();
void InitDefaultsMarketTicMeta();
void InitDefaultsOrderMetaImpl();
void InitDefaultsOrderMeta();
void InitDefaultsOrderFillMetaImpl();
void InitDefaultsOrderFillMeta();
void InitDefaultsGlobalStateMetaImpl();
void InitDefaultsGlobalStateMeta();
void InitDefaultsPlayerMetaImpl();
void InitDefaultsPlayerMeta();
void InitDefaultsTeamMetaImpl();
void InitDefaultsTeamMeta();
void InitDefaultspbstateImpl();
void InitDefaultspbstate();
void InitDefaultsMerkleTreeImpl();
void InitDefaultsMerkleTree();
void InitDefaultsNewPlayerModelImpl();
void InitDefaultsNewPlayerModel();
void InitDefaultsWsReqImpl();
void InitDefaultsWsReq();
void InitDefaultsWSReplyImpl();
void InitDefaultsWSReply();
void InitDefaultsGetGlobalStateRepImpl();
void InitDefaultsGetGlobalStateRep();
void InitDefaultsGetScheduleRepImpl();
void InitDefaultsGetScheduleRep();
void InitDefaultsCheckNameReqImpl();
void InitDefaultsCheckNameReq();
void InitDefaultsCheckNameRepImpl();
void InitDefaultsCheckNameRep();
void InitDefaultsPk2FnameReqImpl();
void InitDefaultsPk2FnameReq();
void InitDefaultsPk2FnameRepImpl();
void InitDefaultsPk2FnameRep();
void InitDefaultsSubscribeReqImpl();
void InitDefaultsSubscribeReq();
void InitDefaultsNameStatusReqImpl();
void InitDefaultsNameStatusReq();
void InitDefaultsNameStatusRepImpl();
void InitDefaultsNameStatusRep();
void InitDefaultsGetAllNamesRepImpl();
void InitDefaultsGetAllNamesRep();
void InitDefaultsTeamRosterImpl();
void InitDefaultsTeamRoster();
void InitDefaultsGameDataRosterImpl();
void InitDefaultsGameDataRoster();
void InitDefaultsGetCurrRostersRepImpl();
void InitDefaultsGetCurrRostersRep();
void InitDefaultsROWMarketImpl();
void InitDefaultsROWMarket();
void InitDefaultsGetROWMarketRepImpl();
void InitDefaultsGetROWMarketRep();
void InitDefaultsGetDepthReqImpl();
void InitDefaultsGetDepthReq();
void InitDefaultsGetDepthRepImpl();
void InitDefaultsGetDepthRep();
void InitDefaultsAllOdersSymbolImpl();
void InitDefaultsAllOdersSymbol();
void InitDefaultsAllOdersFnameImpl();
void InitDefaultsAllOdersFname();
void InitDefaultsGetOrdersRepImpl();
void InitDefaultsGetOrdersRep();
void InitDefaultsGetOrdersReqImpl();
void InitDefaultsGetOrdersReq();
void InitDefaultsGetProjectionReqImpl();
void InitDefaultsGetProjectionReq();
void InitDefaultsPlayerProjImpl();
void InitDefaultsPlayerProj();
void InitDefaultsProjByNameImpl();
void InitDefaultsProjByName();
void InitDefaultsGetProjectionRepImpl();
void InitDefaultsGetProjectionRep();
void InitDefaultsKeyValueImpl();
void InitDefaultsKeyValue();
void InitDefaultsBootstrapImpl();
void InitDefaultsBootstrap();
inline void InitDefaults() {
  InitDefaultsBlockMeta();
  InitDefaultsTxMeta();
  InitDefaultsTrMeta();
  InitDefaultsGameMeta();
  InitDefaultsDataMeta();
  InitDefaultsLeaderBoardMeta();
  InitDefaultsFantasyNameBalMeta();
  InitDefaultsFantasyNameState();
  InitDefaultsWeekGameStatusMeta();
  InitDefaultsInGameProjMeta();
  InitDefaultsGameResultsMeta();
  InitDefaultsGameStatusMeta();
  InitDefaultsTeamProjMeta();
  InitDefaultsTeamResultMeta();
  InitDefaultsGamePlayerProjMeta();
  InitDefaultsProjMeta();
  InitDefaultsPosMeta();
  InitDefaultsPlayerResultMeta();
  InitDefaultsPlayerGameStats();
  InitDefaultsAwardMeta();
  InitDefaultsPnlMeta();
  InitDefaultsPlayerMarketState();
  InitDefaultsLimitBookMeta();
  InitDefaultsMarketTicMeta();
  InitDefaultsOrderMeta();
  InitDefaultsOrderFillMeta();
  InitDefaultsGlobalStateMeta();
  InitDefaultsPlayerMeta();
  InitDefaultsTeamMeta();
  InitDefaultspbstate();
  InitDefaultsMerkleTree();
  InitDefaultsNewPlayerModel();
  InitDefaultsWsReq();
  InitDefaultsWSReply();
  InitDefaultsGetGlobalStateRep();
  InitDefaultsGetScheduleRep();
  InitDefaultsCheckNameReq();
  InitDefaultsCheckNameRep();
  InitDefaultsPk2FnameReq();
  InitDefaultsPk2FnameRep();
  InitDefaultsSubscribeReq();
  InitDefaultsNameStatusReq();
  InitDefaultsNameStatusRep();
  InitDefaultsGetAllNamesRep();
  InitDefaultsTeamRoster();
  InitDefaultsGameDataRoster();
  InitDefaultsGetCurrRostersRep();
  InitDefaultsROWMarket();
  InitDefaultsGetROWMarketRep();
  InitDefaultsGetDepthReq();
  InitDefaultsGetDepthRep();
  InitDefaultsAllOdersSymbol();
  InitDefaultsAllOdersFname();
  InitDefaultsGetOrdersRep();
  InitDefaultsGetOrdersReq();
  InitDefaultsGetProjectionReq();
  InitDefaultsPlayerProj();
  InitDefaultsProjByName();
  InitDefaultsGetProjectionRep();
  InitDefaultsKeyValue();
  InitDefaultsBootstrap();
}
}  // namespace protobuf_StateData_2eproto
namespace fantasybit {
class AllOdersFname;
class AllOdersFnameDefaultTypeInternal;
extern AllOdersFnameDefaultTypeInternal _AllOdersFname_default_instance_;
class AllOdersSymbol;
class AllOdersSymbolDefaultTypeInternal;
extern AllOdersSymbolDefaultTypeInternal _AllOdersSymbol_default_instance_;
class AwardMeta;
class AwardMetaDefaultTypeInternal;
extern AwardMetaDefaultTypeInternal _AwardMeta_default_instance_;
class BlockMeta;
class BlockMetaDefaultTypeInternal;
extern BlockMetaDefaultTypeInternal _BlockMeta_default_instance_;
class Bootstrap;
class BootstrapDefaultTypeInternal;
extern BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
class CheckNameRep;
class CheckNameRepDefaultTypeInternal;
extern CheckNameRepDefaultTypeInternal _CheckNameRep_default_instance_;
class CheckNameReq;
class CheckNameReqDefaultTypeInternal;
extern CheckNameReqDefaultTypeInternal _CheckNameReq_default_instance_;
class DataMeta;
class DataMetaDefaultTypeInternal;
extern DataMetaDefaultTypeInternal _DataMeta_default_instance_;
class FantasyNameBalMeta;
class FantasyNameBalMetaDefaultTypeInternal;
extern FantasyNameBalMetaDefaultTypeInternal _FantasyNameBalMeta_default_instance_;
class FantasyNameState;
class FantasyNameStateDefaultTypeInternal;
extern FantasyNameStateDefaultTypeInternal _FantasyNameState_default_instance_;
class GameDataRoster;
class GameDataRosterDefaultTypeInternal;
extern GameDataRosterDefaultTypeInternal _GameDataRoster_default_instance_;
class GameMeta;
class GameMetaDefaultTypeInternal;
extern GameMetaDefaultTypeInternal _GameMeta_default_instance_;
class GamePlayerProjMeta;
class GamePlayerProjMetaDefaultTypeInternal;
extern GamePlayerProjMetaDefaultTypeInternal _GamePlayerProjMeta_default_instance_;
class GameResultsMeta;
class GameResultsMetaDefaultTypeInternal;
extern GameResultsMetaDefaultTypeInternal _GameResultsMeta_default_instance_;
class GameStatusMeta;
class GameStatusMetaDefaultTypeInternal;
extern GameStatusMetaDefaultTypeInternal _GameStatusMeta_default_instance_;
class GetAllNamesRep;
class GetAllNamesRepDefaultTypeInternal;
extern GetAllNamesRepDefaultTypeInternal _GetAllNamesRep_default_instance_;
class GetCurrRostersRep;
class GetCurrRostersRepDefaultTypeInternal;
extern GetCurrRostersRepDefaultTypeInternal _GetCurrRostersRep_default_instance_;
class GetDepthRep;
class GetDepthRepDefaultTypeInternal;
extern GetDepthRepDefaultTypeInternal _GetDepthRep_default_instance_;
class GetDepthReq;
class GetDepthReqDefaultTypeInternal;
extern GetDepthReqDefaultTypeInternal _GetDepthReq_default_instance_;
class GetGlobalStateRep;
class GetGlobalStateRepDefaultTypeInternal;
extern GetGlobalStateRepDefaultTypeInternal _GetGlobalStateRep_default_instance_;
class GetOrdersRep;
class GetOrdersRepDefaultTypeInternal;
extern GetOrdersRepDefaultTypeInternal _GetOrdersRep_default_instance_;
class GetOrdersReq;
class GetOrdersReqDefaultTypeInternal;
extern GetOrdersReqDefaultTypeInternal _GetOrdersReq_default_instance_;
class GetProjectionRep;
class GetProjectionRepDefaultTypeInternal;
extern GetProjectionRepDefaultTypeInternal _GetProjectionRep_default_instance_;
class GetProjectionReq;
class GetProjectionReqDefaultTypeInternal;
extern GetProjectionReqDefaultTypeInternal _GetProjectionReq_default_instance_;
class GetROWMarketRep;
class GetROWMarketRepDefaultTypeInternal;
extern GetROWMarketRepDefaultTypeInternal _GetROWMarketRep_default_instance_;
class GetScheduleRep;
class GetScheduleRepDefaultTypeInternal;
extern GetScheduleRepDefaultTypeInternal _GetScheduleRep_default_instance_;
class GlobalStateMeta;
class GlobalStateMetaDefaultTypeInternal;
extern GlobalStateMetaDefaultTypeInternal _GlobalStateMeta_default_instance_;
class InGameProjMeta;
class InGameProjMetaDefaultTypeInternal;
extern InGameProjMetaDefaultTypeInternal _InGameProjMeta_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class LeaderBoardMeta;
class LeaderBoardMetaDefaultTypeInternal;
extern LeaderBoardMetaDefaultTypeInternal _LeaderBoardMeta_default_instance_;
class LimitBookMeta;
class LimitBookMetaDefaultTypeInternal;
extern LimitBookMetaDefaultTypeInternal _LimitBookMeta_default_instance_;
class MarketTicMeta;
class MarketTicMetaDefaultTypeInternal;
extern MarketTicMetaDefaultTypeInternal _MarketTicMeta_default_instance_;
class MerkleTree;
class MerkleTreeDefaultTypeInternal;
extern MerkleTreeDefaultTypeInternal _MerkleTree_default_instance_;
class NameStatusRep;
class NameStatusRepDefaultTypeInternal;
extern NameStatusRepDefaultTypeInternal _NameStatusRep_default_instance_;
class NameStatusReq;
class NameStatusReqDefaultTypeInternal;
extern NameStatusReqDefaultTypeInternal _NameStatusReq_default_instance_;
class NewPlayerModel;
class NewPlayerModelDefaultTypeInternal;
extern NewPlayerModelDefaultTypeInternal _NewPlayerModel_default_instance_;
class OrderFillMeta;
class OrderFillMetaDefaultTypeInternal;
extern OrderFillMetaDefaultTypeInternal _OrderFillMeta_default_instance_;
class OrderMeta;
class OrderMetaDefaultTypeInternal;
extern OrderMetaDefaultTypeInternal _OrderMeta_default_instance_;
class Pk2FnameRep;
class Pk2FnameRepDefaultTypeInternal;
extern Pk2FnameRepDefaultTypeInternal _Pk2FnameRep_default_instance_;
class Pk2FnameReq;
class Pk2FnameReqDefaultTypeInternal;
extern Pk2FnameReqDefaultTypeInternal _Pk2FnameReq_default_instance_;
class PlayerGameStats;
class PlayerGameStatsDefaultTypeInternal;
extern PlayerGameStatsDefaultTypeInternal _PlayerGameStats_default_instance_;
class PlayerMarketState;
class PlayerMarketStateDefaultTypeInternal;
extern PlayerMarketStateDefaultTypeInternal _PlayerMarketState_default_instance_;
class PlayerMeta;
class PlayerMetaDefaultTypeInternal;
extern PlayerMetaDefaultTypeInternal _PlayerMeta_default_instance_;
class PlayerProj;
class PlayerProjDefaultTypeInternal;
extern PlayerProjDefaultTypeInternal _PlayerProj_default_instance_;
class PlayerResultMeta;
class PlayerResultMetaDefaultTypeInternal;
extern PlayerResultMetaDefaultTypeInternal _PlayerResultMeta_default_instance_;
class PnlMeta;
class PnlMetaDefaultTypeInternal;
extern PnlMetaDefaultTypeInternal _PnlMeta_default_instance_;
class PosMeta;
class PosMetaDefaultTypeInternal;
extern PosMetaDefaultTypeInternal _PosMeta_default_instance_;
class ProjByName;
class ProjByNameDefaultTypeInternal;
extern ProjByNameDefaultTypeInternal _ProjByName_default_instance_;
class ProjMeta;
class ProjMetaDefaultTypeInternal;
extern ProjMetaDefaultTypeInternal _ProjMeta_default_instance_;
class ROWMarket;
class ROWMarketDefaultTypeInternal;
extern ROWMarketDefaultTypeInternal _ROWMarket_default_instance_;
class SubscribeReq;
class SubscribeReqDefaultTypeInternal;
extern SubscribeReqDefaultTypeInternal _SubscribeReq_default_instance_;
class TeamMeta;
class TeamMetaDefaultTypeInternal;
extern TeamMetaDefaultTypeInternal _TeamMeta_default_instance_;
class TeamProjMeta;
class TeamProjMetaDefaultTypeInternal;
extern TeamProjMetaDefaultTypeInternal _TeamProjMeta_default_instance_;
class TeamResultMeta;
class TeamResultMetaDefaultTypeInternal;
extern TeamResultMetaDefaultTypeInternal _TeamResultMeta_default_instance_;
class TeamRoster;
class TeamRosterDefaultTypeInternal;
extern TeamRosterDefaultTypeInternal _TeamRoster_default_instance_;
class TrMeta;
class TrMetaDefaultTypeInternal;
extern TrMetaDefaultTypeInternal _TrMeta_default_instance_;
class TxMeta;
class TxMetaDefaultTypeInternal;
extern TxMetaDefaultTypeInternal _TxMeta_default_instance_;
class WSReply;
class WSReplyDefaultTypeInternal;
extern WSReplyDefaultTypeInternal _WSReply_default_instance_;
class WeekGameStatusMeta;
class WeekGameStatusMetaDefaultTypeInternal;
extern WeekGameStatusMetaDefaultTypeInternal _WeekGameStatusMeta_default_instance_;
class WsReq;
class WsReqDefaultTypeInternal;
extern WsReqDefaultTypeInternal _WsReq_default_instance_;
class pbstate;
class pbstateDefaultTypeInternal;
extern pbstateDefaultTypeInternal _pbstate_default_instance_;
}  // namespace fantasybit
namespace fantasybit {

enum CType {
  NONE = 0,
  CHECKNAME = 1,
  NEWTX = 2,
  PK2FNAME = 3,
  GETSTATUS = 4,
  GETALLNAMES = 5,
  GETROWMARKET = 6,
  GETDEPTH = 7,
  GETORDERS = 8,
  GETPOSITIONS = 9,
  SUBSCRIBEFNAME = 10,
  GETGLOBALSTATE = 11,
  GETSCHEDULE = 12,
  GETGAMEROSTER = 13,
  GETPROJECTIONS = 15,
  GETGAMESTART = 16
};
bool CType_IsValid(int value);
const CType CType_MIN = NONE;
const CType CType_MAX = GETGAMESTART;
const int CType_ARRAYSIZE = CType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CType_descriptor();
inline const ::std::string& CType_Name(CType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CType_descriptor(), value);
}
inline bool CType_Parse(
    const ::std::string& name, CType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CType>(
    CType_descriptor(), name, value);
}
// ===================================================================

class BlockMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.BlockMeta) */ {
 public:
  BlockMeta();
  virtual ~BlockMeta();

  BlockMeta(const BlockMeta& from);

  inline BlockMeta& operator=(const BlockMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockMeta(BlockMeta&& from) noexcept
    : BlockMeta() {
    *this = ::std::move(from);
  }

  inline BlockMeta& operator=(BlockMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockMeta* internal_default_instance() {
    return reinterpret_cast<const BlockMeta*>(
               &_BlockMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlockMeta* other);
  friend void swap(BlockMeta& a, BlockMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  BlockMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockMeta& from);
  void MergeFrom(const BlockMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes txmetaroot = 10;
  bool has_txmetaroot() const;
  void clear_txmetaroot();
  static const int kTxmetarootFieldNumber = 10;
  const ::std::string& txmetaroot() const;
  void set_txmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaroot(::std::string&& value);
  #endif
  void set_txmetaroot(const char* value);
  void set_txmetaroot(const void* value, size_t size);
  ::std::string* mutable_txmetaroot();
  ::std::string* release_txmetaroot();
  void set_allocated_txmetaroot(::std::string* txmetaroot);

  // optional bytes prev = 20;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 20;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 30;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 30;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional bytes trmetaid = 50;
  bool has_trmetaid() const;
  void clear_trmetaid();
  static const int kTrmetaidFieldNumber = 50;
  const ::std::string& trmetaid() const;
  void set_trmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_trmetaid(::std::string&& value);
  #endif
  void set_trmetaid(const char* value);
  void set_trmetaid(const void* value, size_t size);
  ::std::string* mutable_trmetaid();
  ::std::string* release_trmetaid();
  void set_allocated_trmetaid(::std::string* trmetaid);

  // optional bytes pbstateid = 60;
  bool has_pbstateid() const;
  void clear_pbstateid();
  static const int kPbstateidFieldNumber = 60;
  const ::std::string& pbstateid() const;
  void set_pbstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_pbstateid(::std::string&& value);
  #endif
  void set_pbstateid(const char* value);
  void set_pbstateid(const void* value, size_t size);
  ::std::string* mutable_pbstateid();
  ::std::string* release_pbstateid();
  void set_allocated_pbstateid(::std::string* pbstateid);

  // optional int32 blocknum = 40;
  bool has_blocknum() const;
  void clear_blocknum();
  static const int kBlocknumFieldNumber = 40;
  ::google::protobuf::int32 blocknum() const;
  void set_blocknum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.BlockMeta)
 private:
  void set_has_blocknum();
  void clear_has_blocknum();
  void set_has_trmetaid();
  void clear_has_trmetaid();
  void set_has_txmetaroot();
  void clear_has_txmetaroot();
  void set_has_pbstateid();
  void clear_has_pbstateid();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr txmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::google::protobuf::internal::ArenaStringPtr trmetaid_;
  ::google::protobuf::internal::ArenaStringPtr pbstateid_;
  ::google::protobuf::int32 blocknum_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsBlockMetaImpl();
};
// -------------------------------------------------------------------

class TxMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TxMeta) */ {
 public:
  TxMeta();
  virtual ~TxMeta();

  TxMeta(const TxMeta& from);

  inline TxMeta& operator=(const TxMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TxMeta(TxMeta&& from) noexcept
    : TxMeta() {
    *this = ::std::move(from);
  }

  inline TxMeta& operator=(TxMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TxMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxMeta* internal_default_instance() {
    return reinterpret_cast<const TxMeta*>(
               &_TxMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TxMeta* other);
  friend void swap(TxMeta& a, TxMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TxMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TxMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TxMeta& from);
  void MergeFrom(const TxMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TxMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fantasy_name = 60;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 60;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasy_name(::std::string&& value);
  #endif
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional bytes id = 70;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 70;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .fantasybit.Transaction tx = 50;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 50;
  const ::fantasybit::Transaction& tx() const;
  ::fantasybit::Transaction* release_tx();
  ::fantasybit::Transaction* mutable_tx();
  void set_allocated_tx(::fantasybit::Transaction* tx);

  // optional .fantasybit.TransType txtype = 40;
  bool has_txtype() const;
  void clear_txtype();
  static const int kTxtypeFieldNumber = 40;
  ::fantasybit::TransType txtype() const;
  void set_txtype(::fantasybit::TransType value);

  // optional int32 blocknum = 10;
  bool has_blocknum() const;
  void clear_blocknum();
  static const int kBlocknumFieldNumber = 10;
  ::google::protobuf::int32 blocknum() const;
  void set_blocknum(::google::protobuf::int32 value);

  // optional int32 txnum = 20;
  bool has_txnum() const;
  void clear_txnum();
  static const int kTxnumFieldNumber = 20;
  ::google::protobuf::int32 txnum() const;
  void set_txnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.TxMeta)
 private:
  void set_has_blocknum();
  void clear_has_blocknum();
  void set_has_txnum();
  void clear_has_txnum();
  void set_has_txtype();
  void clear_has_txtype();
  void set_has_tx();
  void clear_has_tx();
  void set_has_fantasy_name();
  void clear_has_fantasy_name();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::fantasybit::Transaction* tx_;
  int txtype_;
  ::google::protobuf::int32 blocknum_;
  ::google::protobuf::int32 txnum_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsTxMetaImpl();
};
// -------------------------------------------------------------------

class TrMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TrMeta) */ {
 public:
  TrMeta();
  virtual ~TrMeta();

  TrMeta(const TrMeta& from);

  inline TrMeta& operator=(const TrMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrMeta(TrMeta&& from) noexcept
    : TrMeta() {
    *this = ::std::move(from);
  }

  inline TrMeta& operator=(TrMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrMeta* internal_default_instance() {
    return reinterpret_cast<const TrMeta*>(
               &_TrMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(TrMeta* other);
  friend void swap(TrMeta& a, TrMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TrMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrMeta& from);
  void MergeFrom(const TrMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gamemetaroot = 70;
  bool has_gamemetaroot() const;
  void clear_gamemetaroot();
  static const int kGamemetarootFieldNumber = 70;
  const ::std::string& gamemetaroot() const;
  void set_gamemetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_gamemetaroot(::std::string&& value);
  #endif
  void set_gamemetaroot(const char* value);
  void set_gamemetaroot(const void* value, size_t size);
  ::std::string* mutable_gamemetaroot();
  ::std::string* release_gamemetaroot();
  void set_allocated_gamemetaroot(::std::string* gamemetaroot);

  // optional bytes datametaroot = 80;
  bool has_datametaroot() const;
  void clear_datametaroot();
  static const int kDatametarootFieldNumber = 80;
  const ::std::string& datametaroot() const;
  void set_datametaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_datametaroot(::std::string&& value);
  #endif
  void set_datametaroot(const char* value);
  void set_datametaroot(const void* value, size_t size);
  ::std::string* mutable_datametaroot();
  ::std::string* release_datametaroot();
  void set_allocated_datametaroot(::std::string* datametaroot);

  // optional bytes txmetaid = 100;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 100;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional uint32 week = 60;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 60;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional int32 blocknum = 10;
  bool has_blocknum() const;
  void clear_blocknum();
  static const int kBlocknumFieldNumber = 10;
  ::google::protobuf::int32 blocknum() const;
  void set_blocknum(::google::protobuf::int32 value);

  // optional uint32 season = 50;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 50;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional .fantasybit.TrType type = 40;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  ::fantasybit::TrType type() const;
  void set_type(::fantasybit::TrType value);

  // @@protoc_insertion_point(class_scope:fantasybit.TrMeta)
 private:
  void set_has_blocknum();
  void clear_has_blocknum();
  void set_has_type();
  void clear_has_type();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_gamemetaroot();
  void clear_has_gamemetaroot();
  void set_has_datametaroot();
  void clear_has_datametaroot();
  void set_has_txmetaid();
  void clear_has_txmetaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gamemetaroot_;
  ::google::protobuf::internal::ArenaStringPtr datametaroot_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::int32 blocknum_;
  ::google::protobuf::uint32 season_;
  int type_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsTrMetaImpl();
};
// -------------------------------------------------------------------

class GameMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameMeta) */ {
 public:
  GameMeta();
  virtual ~GameMeta();

  GameMeta(const GameMeta& from);

  inline GameMeta& operator=(const GameMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameMeta(GameMeta&& from) noexcept
    : GameMeta() {
    *this = ::std::move(from);
  }

  inline GameMeta& operator=(GameMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameMeta* internal_default_instance() {
    return reinterpret_cast<const GameMeta*>(
               &_GameMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GameMeta* other);
  friend void swap(GameMeta& a, GameMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  GameMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameMeta& from);
  void MergeFrom(const GameMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes txmetaid = 10;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 10;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional .fantasybit.GameData gamedata = 20;
  bool has_gamedata() const;
  void clear_gamedata();
  static const int kGamedataFieldNumber = 20;
  const ::fantasybit::GameData& gamedata() const;
  ::fantasybit::GameData* release_gamedata();
  ::fantasybit::GameData* mutable_gamedata();
  void set_allocated_gamedata(::fantasybit::GameData* gamedata);

  // @@protoc_insertion_point(class_scope:fantasybit.GameMeta)
 private:
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_gamedata();
  void clear_has_gamedata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::fantasybit::GameData* gamedata_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGameMetaImpl();
};
// -------------------------------------------------------------------

class DataMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.DataMeta) */ {
 public:
  DataMeta();
  virtual ~DataMeta();

  DataMeta(const DataMeta& from);

  inline DataMeta& operator=(const DataMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataMeta(DataMeta&& from) noexcept
    : DataMeta() {
    *this = ::std::move(from);
  }

  inline DataMeta& operator=(DataMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataMeta* internal_default_instance() {
    return reinterpret_cast<const DataMeta*>(
               &_DataMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DataMeta* other);
  friend void swap(DataMeta& a, DataMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  DataMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataMeta& from);
  void MergeFrom(const DataMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes txmetaid = 10;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 10;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional .fantasybit.Data data = 20;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 20;
  const ::fantasybit::Data& data() const;
  ::fantasybit::Data* release_data();
  ::fantasybit::Data* mutable_data();
  void set_allocated_data(::fantasybit::Data* data);

  // @@protoc_insertion_point(class_scope:fantasybit.DataMeta)
 private:
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::fantasybit::Data* data_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsDataMetaImpl();
};
// -------------------------------------------------------------------

class LeaderBoardMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.LeaderBoardMeta) */ {
 public:
  LeaderBoardMeta();
  virtual ~LeaderBoardMeta();

  LeaderBoardMeta(const LeaderBoardMeta& from);

  inline LeaderBoardMeta& operator=(const LeaderBoardMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaderBoardMeta(LeaderBoardMeta&& from) noexcept
    : LeaderBoardMeta() {
    *this = ::std::move(from);
  }

  inline LeaderBoardMeta& operator=(LeaderBoardMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaderBoardMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderBoardMeta* internal_default_instance() {
    return reinterpret_cast<const LeaderBoardMeta*>(
               &_LeaderBoardMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LeaderBoardMeta* other);
  friend void swap(LeaderBoardMeta& a, LeaderBoardMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaderBoardMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaderBoardMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeaderBoardMeta& from);
  void MergeFrom(const LeaderBoardMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaderBoardMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes fnbalmetaroot = 20;
  bool has_fnbalmetaroot() const;
  void clear_fnbalmetaroot();
  static const int kFnbalmetarootFieldNumber = 20;
  const ::std::string& fnbalmetaroot() const;
  void set_fnbalmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_fnbalmetaroot(::std::string&& value);
  #endif
  void set_fnbalmetaroot(const char* value);
  void set_fnbalmetaroot(const void* value, size_t size);
  ::std::string* mutable_fnbalmetaroot();
  ::std::string* release_fnbalmetaroot();
  void set_allocated_fnbalmetaroot(::std::string* fnbalmetaroot);

  // optional bytes prev = 30;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 30;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 40;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 40;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional uint32 week = 10;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 10;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.LeaderBoardMeta)
 private:
  void set_has_week();
  void clear_has_week();
  void set_has_fnbalmetaroot();
  void clear_has_fnbalmetaroot();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fnbalmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsLeaderBoardMetaImpl();
};
// -------------------------------------------------------------------

class FantasyNameBalMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameBalMeta) */ {
 public:
  FantasyNameBalMeta();
  virtual ~FantasyNameBalMeta();

  FantasyNameBalMeta(const FantasyNameBalMeta& from);

  inline FantasyNameBalMeta& operator=(const FantasyNameBalMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyNameBalMeta(FantasyNameBalMeta&& from) noexcept
    : FantasyNameBalMeta() {
    *this = ::std::move(from);
  }

  inline FantasyNameBalMeta& operator=(FantasyNameBalMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameBalMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameBalMeta* internal_default_instance() {
    return reinterpret_cast<const FantasyNameBalMeta*>(
               &_FantasyNameBalMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FantasyNameBalMeta* other);
  friend void swap(FantasyNameBalMeta& a, FantasyNameBalMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameBalMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyNameBalMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyNameBalMeta& from);
  void MergeFrom(const FantasyNameBalMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyNameBalMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes txmetaid = 10;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 10;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional bytes trmetaid = 20;
  bool has_trmetaid() const;
  void clear_trmetaid();
  static const int kTrmetaidFieldNumber = 20;
  const ::std::string& trmetaid() const;
  void set_trmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_trmetaid(::std::string&& value);
  #endif
  void set_trmetaid(const char* value);
  void set_trmetaid(const void* value, size_t size);
  ::std::string* mutable_trmetaid();
  ::std::string* release_trmetaid();
  void set_allocated_trmetaid(::std::string* trmetaid);

  // optional string name = 25;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 25;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string public_key = 30;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 30;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  #if LANG_CXX11
  void set_public_key(::std::string&& value);
  #endif
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional bytes awardmetaroot = 50;
  bool has_awardmetaroot() const;
  void clear_awardmetaroot();
  static const int kAwardmetarootFieldNumber = 50;
  const ::std::string& awardmetaroot() const;
  void set_awardmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_awardmetaroot(::std::string&& value);
  #endif
  void set_awardmetaroot(const char* value);
  void set_awardmetaroot(const void* value, size_t size);
  ::std::string* mutable_awardmetaroot();
  ::std::string* release_awardmetaroot();
  void set_allocated_awardmetaroot(::std::string* awardmetaroot);

  // optional bytes pnlmetaroot = 60;
  bool has_pnlmetaroot() const;
  void clear_pnlmetaroot();
  static const int kPnlmetarootFieldNumber = 60;
  const ::std::string& pnlmetaroot() const;
  void set_pnlmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_pnlmetaroot(::std::string&& value);
  #endif
  void set_pnlmetaroot(const char* value);
  void set_pnlmetaroot(const void* value, size_t size);
  ::std::string* mutable_pnlmetaroot();
  ::std::string* release_pnlmetaroot();
  void set_allocated_pnlmetaroot(::std::string* pnlmetaroot);

  // optional bytes prev = 70;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 70;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 80;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 80;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional uint64 bits = 35;
  bool has_bits() const;
  void clear_bits();
  static const int kBitsFieldNumber = 35;
  ::google::protobuf::uint64 bits() const;
  void set_bits(::google::protobuf::uint64 value);

  // optional int64 stake = 40;
  bool has_stake() const;
  void clear_stake();
  static const int kStakeFieldNumber = 40;
  ::google::protobuf::int64 stake() const;
  void set_stake(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameBalMeta)
 private:
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_trmetaid();
  void clear_has_trmetaid();
  void set_has_name();
  void clear_has_name();
  void set_has_public_key();
  void clear_has_public_key();
  void set_has_bits();
  void clear_has_bits();
  void set_has_stake();
  void clear_has_stake();
  void set_has_awardmetaroot();
  void clear_has_awardmetaroot();
  void set_has_pnlmetaroot();
  void clear_has_pnlmetaroot();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::internal::ArenaStringPtr trmetaid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::internal::ArenaStringPtr awardmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr pnlmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::google::protobuf::uint64 bits_;
  ::google::protobuf::int64 stake_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsFantasyNameBalMetaImpl();
};
// -------------------------------------------------------------------

class FantasyNameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameState) */ {
 public:
  FantasyNameState();
  virtual ~FantasyNameState();

  FantasyNameState(const FantasyNameState& from);

  inline FantasyNameState& operator=(const FantasyNameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyNameState(FantasyNameState&& from) noexcept
    : FantasyNameState() {
    *this = ::std::move(from);
  }

  inline FantasyNameState& operator=(FantasyNameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameState* internal_default_instance() {
    return reinterpret_cast<const FantasyNameState*>(
               &_FantasyNameState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FantasyNameState* other);
  friend void swap(FantasyNameState& a, FantasyNameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameState* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyNameState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyNameState& from);
  void MergeFrom(const FantasyNameState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyNameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes fantasynamebalmetaid = 10;
  bool has_fantasynamebalmetaid() const;
  void clear_fantasynamebalmetaid();
  static const int kFantasynamebalmetaidFieldNumber = 10;
  const ::std::string& fantasynamebalmetaid() const;
  void set_fantasynamebalmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasynamebalmetaid(::std::string&& value);
  #endif
  void set_fantasynamebalmetaid(const char* value);
  void set_fantasynamebalmetaid(const void* value, size_t size);
  ::std::string* mutable_fantasynamebalmetaid();
  ::std::string* release_fantasynamebalmetaid();
  void set_allocated_fantasynamebalmetaid(::std::string* fantasynamebalmetaid);

  // optional bytes posmetaroot = 20;
  bool has_posmetaroot() const;
  void clear_posmetaroot();
  static const int kPosmetarootFieldNumber = 20;
  const ::std::string& posmetaroot() const;
  void set_posmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_posmetaroot(::std::string&& value);
  #endif
  void set_posmetaroot(const char* value);
  void set_posmetaroot(const void* value, size_t size);
  ::std::string* mutable_posmetaroot();
  ::std::string* release_posmetaroot();
  void set_allocated_posmetaroot(::std::string* posmetaroot);

  // optional bytes ordersmetaroot = 30;
  bool has_ordersmetaroot() const;
  void clear_ordersmetaroot();
  static const int kOrdersmetarootFieldNumber = 30;
  const ::std::string& ordersmetaroot() const;
  void set_ordersmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_ordersmetaroot(::std::string&& value);
  #endif
  void set_ordersmetaroot(const char* value);
  void set_ordersmetaroot(const void* value, size_t size);
  ::std::string* mutable_ordersmetaroot();
  ::std::string* release_ordersmetaroot();
  void set_allocated_ordersmetaroot(::std::string* ordersmetaroot);

  // optional bytes projmetaroot = 40;
  bool has_projmetaroot() const;
  void clear_projmetaroot();
  static const int kProjmetarootFieldNumber = 40;
  const ::std::string& projmetaroot() const;
  void set_projmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_projmetaroot(::std::string&& value);
  #endif
  void set_projmetaroot(const char* value);
  void set_projmetaroot(const void* value, size_t size);
  ::std::string* mutable_projmetaroot();
  ::std::string* release_projmetaroot();
  void set_allocated_projmetaroot(::std::string* projmetaroot);

  // optional bytes txmetaid = 50;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 50;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional bytes prev = 70;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 70;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 80;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 80;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameState)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_fantasynamebalmetaid();
  void clear_has_fantasynamebalmetaid();
  void set_has_posmetaroot();
  void clear_has_posmetaroot();
  void set_has_ordersmetaroot();
  void clear_has_ordersmetaroot();
  void set_has_projmetaroot();
  void clear_has_projmetaroot();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();
  void set_has_txmetaid();
  void clear_has_txmetaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr fantasynamebalmetaid_;
  ::google::protobuf::internal::ArenaStringPtr posmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr ordersmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr projmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsFantasyNameStateImpl();
};
// -------------------------------------------------------------------

class WeekGameStatusMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.WeekGameStatusMeta) */ {
 public:
  WeekGameStatusMeta();
  virtual ~WeekGameStatusMeta();

  WeekGameStatusMeta(const WeekGameStatusMeta& from);

  inline WeekGameStatusMeta& operator=(const WeekGameStatusMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WeekGameStatusMeta(WeekGameStatusMeta&& from) noexcept
    : WeekGameStatusMeta() {
    *this = ::std::move(from);
  }

  inline WeekGameStatusMeta& operator=(WeekGameStatusMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeekGameStatusMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeekGameStatusMeta* internal_default_instance() {
    return reinterpret_cast<const WeekGameStatusMeta*>(
               &_WeekGameStatusMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(WeekGameStatusMeta* other);
  friend void swap(WeekGameStatusMeta& a, WeekGameStatusMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WeekGameStatusMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  WeekGameStatusMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeekGameStatusMeta& from);
  void MergeFrom(const WeekGameStatusMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeekGameStatusMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes gameresultmetaroot = 20;
  bool has_gameresultmetaroot() const;
  void clear_gameresultmetaroot();
  static const int kGameresultmetarootFieldNumber = 20;
  const ::std::string& gameresultmetaroot() const;
  void set_gameresultmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_gameresultmetaroot(::std::string&& value);
  #endif
  void set_gameresultmetaroot(const char* value);
  void set_gameresultmetaroot(const void* value, size_t size);
  ::std::string* mutable_gameresultmetaroot();
  ::std::string* release_gameresultmetaroot();
  void set_allocated_gameresultmetaroot(::std::string* gameresultmetaroot);

  // optional bytes ingameprojmetaroot = 30;
  bool has_ingameprojmetaroot() const;
  void clear_ingameprojmetaroot();
  static const int kIngameprojmetarootFieldNumber = 30;
  const ::std::string& ingameprojmetaroot() const;
  void set_ingameprojmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_ingameprojmetaroot(::std::string&& value);
  #endif
  void set_ingameprojmetaroot(const char* value);
  void set_ingameprojmetaroot(const void* value, size_t size);
  ::std::string* mutable_ingameprojmetaroot();
  ::std::string* release_ingameprojmetaroot();
  void set_allocated_ingameprojmetaroot(::std::string* ingameprojmetaroot);

  // optional bytes opengamestatusroot = 40;
  bool has_opengamestatusroot() const;
  void clear_opengamestatusroot();
  static const int kOpengamestatusrootFieldNumber = 40;
  const ::std::string& opengamestatusroot() const;
  void set_opengamestatusroot(const ::std::string& value);
  #if LANG_CXX11
  void set_opengamestatusroot(::std::string&& value);
  #endif
  void set_opengamestatusroot(const char* value);
  void set_opengamestatusroot(const void* value, size_t size);
  ::std::string* mutable_opengamestatusroot();
  ::std::string* release_opengamestatusroot();
  void set_allocated_opengamestatusroot(::std::string* opengamestatusroot);

  // optional bytes prev = 50;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 50;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 60;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 60;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional uint32 week = 10;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 10;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.WeekGameStatusMeta)
 private:
  void set_has_week();
  void clear_has_week();
  void set_has_gameresultmetaroot();
  void clear_has_gameresultmetaroot();
  void set_has_ingameprojmetaroot();
  void clear_has_ingameprojmetaroot();
  void set_has_opengamestatusroot();
  void clear_has_opengamestatusroot();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameresultmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr ingameprojmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr opengamestatusroot_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsWeekGameStatusMetaImpl();
};
// -------------------------------------------------------------------

class InGameProjMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.InGameProjMeta) */ {
 public:
  InGameProjMeta();
  virtual ~InGameProjMeta();

  InGameProjMeta(const InGameProjMeta& from);

  inline InGameProjMeta& operator=(const InGameProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InGameProjMeta(InGameProjMeta&& from) noexcept
    : InGameProjMeta() {
    *this = ::std::move(from);
  }

  inline InGameProjMeta& operator=(InGameProjMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InGameProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InGameProjMeta* internal_default_instance() {
    return reinterpret_cast<const InGameProjMeta*>(
               &_InGameProjMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(InGameProjMeta* other);
  friend void swap(InGameProjMeta& a, InGameProjMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InGameProjMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  InGameProjMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InGameProjMeta& from);
  void MergeFrom(const InGameProjMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InGameProjMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 20;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 20;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional bytes gamestatusmetaid = 40;
  bool has_gamestatusmetaid() const;
  void clear_gamestatusmetaid();
  static const int kGamestatusmetaidFieldNumber = 40;
  const ::std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamestatusmetaid(::std::string&& value);
  #endif
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  ::std::string* mutable_gamestatusmetaid();
  ::std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid);

  // optional bytes gamedatametaid = 50;
  bool has_gamedatametaid() const;
  void clear_gamedatametaid();
  static const int kGamedatametaidFieldNumber = 50;
  const ::std::string& gamedatametaid() const;
  void set_gamedatametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamedatametaid(::std::string&& value);
  #endif
  void set_gamedatametaid(const char* value);
  void set_gamedatametaid(const void* value, size_t size);
  ::std::string* mutable_gamedatametaid();
  ::std::string* release_gamedatametaid();
  void set_allocated_gamedatametaid(::std::string* gamedatametaid);

  // optional bytes homeprojmeta = 60;
  bool has_homeprojmeta() const;
  void clear_homeprojmeta();
  static const int kHomeprojmetaFieldNumber = 60;
  const ::std::string& homeprojmeta() const;
  void set_homeprojmeta(const ::std::string& value);
  #if LANG_CXX11
  void set_homeprojmeta(::std::string&& value);
  #endif
  void set_homeprojmeta(const char* value);
  void set_homeprojmeta(const void* value, size_t size);
  ::std::string* mutable_homeprojmeta();
  ::std::string* release_homeprojmeta();
  void set_allocated_homeprojmeta(::std::string* homeprojmeta);

  // optional bytes awayprojmeta = 70;
  bool has_awayprojmeta() const;
  void clear_awayprojmeta();
  static const int kAwayprojmetaFieldNumber = 70;
  const ::std::string& awayprojmeta() const;
  void set_awayprojmeta(const ::std::string& value);
  #if LANG_CXX11
  void set_awayprojmeta(::std::string&& value);
  #endif
  void set_awayprojmeta(const char* value);
  void set_awayprojmeta(const void* value, size_t size);
  ::std::string* mutable_awayprojmeta();
  ::std::string* release_awayprojmeta();
  void set_allocated_awayprojmeta(::std::string* awayprojmeta);

  // @@protoc_insertion_point(class_scope:fantasybit.InGameProjMeta)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_gamestatusmetaid();
  void clear_has_gamestatusmetaid();
  void set_has_homeprojmeta();
  void clear_has_homeprojmeta();
  void set_has_awayprojmeta();
  void clear_has_awayprojmeta();
  void set_has_gamedatametaid();
  void clear_has_gamedatametaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr gamestatusmetaid_;
  ::google::protobuf::internal::ArenaStringPtr gamedatametaid_;
  ::google::protobuf::internal::ArenaStringPtr homeprojmeta_;
  ::google::protobuf::internal::ArenaStringPtr awayprojmeta_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsInGameProjMetaImpl();
};
// -------------------------------------------------------------------

class GameResultsMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameResultsMeta) */ {
 public:
  GameResultsMeta();
  virtual ~GameResultsMeta();

  GameResultsMeta(const GameResultsMeta& from);

  inline GameResultsMeta& operator=(const GameResultsMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameResultsMeta(GameResultsMeta&& from) noexcept
    : GameResultsMeta() {
    *this = ::std::move(from);
  }

  inline GameResultsMeta& operator=(GameResultsMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResultsMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResultsMeta* internal_default_instance() {
    return reinterpret_cast<const GameResultsMeta*>(
               &_GameResultsMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GameResultsMeta* other);
  friend void swap(GameResultsMeta& a, GameResultsMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameResultsMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  GameResultsMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameResultsMeta& from);
  void MergeFrom(const GameResultsMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameResultsMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 20;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 20;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional bytes gamestatusmetaid = 40;
  bool has_gamestatusmetaid() const;
  void clear_gamestatusmetaid();
  static const int kGamestatusmetaidFieldNumber = 40;
  const ::std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamestatusmetaid(::std::string&& value);
  #endif
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  ::std::string* mutable_gamestatusmetaid();
  ::std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid);

  // optional bytes resultdatametaid = 50;
  bool has_resultdatametaid() const;
  void clear_resultdatametaid();
  static const int kResultdatametaidFieldNumber = 50;
  const ::std::string& resultdatametaid() const;
  void set_resultdatametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_resultdatametaid(::std::string&& value);
  #endif
  void set_resultdatametaid(const char* value);
  void set_resultdatametaid(const void* value, size_t size);
  ::std::string* mutable_resultdatametaid();
  ::std::string* release_resultdatametaid();
  void set_allocated_resultdatametaid(::std::string* resultdatametaid);

  // optional bytes homeresultmeta = 60;
  bool has_homeresultmeta() const;
  void clear_homeresultmeta();
  static const int kHomeresultmetaFieldNumber = 60;
  const ::std::string& homeresultmeta() const;
  void set_homeresultmeta(const ::std::string& value);
  #if LANG_CXX11
  void set_homeresultmeta(::std::string&& value);
  #endif
  void set_homeresultmeta(const char* value);
  void set_homeresultmeta(const void* value, size_t size);
  ::std::string* mutable_homeresultmeta();
  ::std::string* release_homeresultmeta();
  void set_allocated_homeresultmeta(::std::string* homeresultmeta);

  // optional bytes awayresultmeta = 70;
  bool has_awayresultmeta() const;
  void clear_awayresultmeta();
  static const int kAwayresultmetaFieldNumber = 70;
  const ::std::string& awayresultmeta() const;
  void set_awayresultmeta(const ::std::string& value);
  #if LANG_CXX11
  void set_awayresultmeta(::std::string&& value);
  #endif
  void set_awayresultmeta(const char* value);
  void set_awayresultmeta(const void* value, size_t size);
  ::std::string* mutable_awayresultmeta();
  ::std::string* release_awayresultmeta();
  void set_allocated_awayresultmeta(::std::string* awayresultmeta);

  // @@protoc_insertion_point(class_scope:fantasybit.GameResultsMeta)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_gamestatusmetaid();
  void clear_has_gamestatusmetaid();
  void set_has_homeresultmeta();
  void clear_has_homeresultmeta();
  void set_has_awayresultmeta();
  void clear_has_awayresultmeta();
  void set_has_resultdatametaid();
  void clear_has_resultdatametaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr gamestatusmetaid_;
  ::google::protobuf::internal::ArenaStringPtr resultdatametaid_;
  ::google::protobuf::internal::ArenaStringPtr homeresultmeta_;
  ::google::protobuf::internal::ArenaStringPtr awayresultmeta_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGameResultsMetaImpl();
};
// -------------------------------------------------------------------

class GameStatusMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameStatusMeta) */ {
 public:
  GameStatusMeta();
  virtual ~GameStatusMeta();

  GameStatusMeta(const GameStatusMeta& from);

  inline GameStatusMeta& operator=(const GameStatusMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameStatusMeta(GameStatusMeta&& from) noexcept
    : GameStatusMeta() {
    *this = ::std::move(from);
  }

  inline GameStatusMeta& operator=(GameStatusMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStatusMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStatusMeta* internal_default_instance() {
    return reinterpret_cast<const GameStatusMeta*>(
               &_GameStatusMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GameStatusMeta* other);
  friend void swap(GameStatusMeta& a, GameStatusMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStatusMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  GameStatusMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameStatusMeta& from);
  void MergeFrom(const GameStatusMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameStatusMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes gamemetaid = 30;
  bool has_gamemetaid() const;
  void clear_gamemetaid();
  static const int kGamemetaidFieldNumber = 30;
  const ::std::string& gamemetaid() const;
  void set_gamemetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamemetaid(::std::string&& value);
  #endif
  void set_gamemetaid(const char* value);
  void set_gamemetaid(const void* value, size_t size);
  ::std::string* mutable_gamemetaid();
  ::std::string* release_gamemetaid();
  void set_allocated_gamemetaid(::std::string* gamemetaid);

  // optional bytes datametaid = 40;
  bool has_datametaid() const;
  void clear_datametaid();
  static const int kDatametaidFieldNumber = 40;
  const ::std::string& datametaid() const;
  void set_datametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_datametaid(::std::string&& value);
  #endif
  void set_datametaid(const char* value);
  void set_datametaid(const void* value, size_t size);
  ::std::string* mutable_datametaid();
  ::std::string* release_datametaid();
  void set_allocated_datametaid(::std::string* datametaid);

  // optional bytes prev = 50;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 50;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 60;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 60;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional .fantasybit.GameInfo gameinfo = 10;
  bool has_gameinfo() const;
  void clear_gameinfo();
  static const int kGameinfoFieldNumber = 10;
  const ::fantasybit::GameInfo& gameinfo() const;
  ::fantasybit::GameInfo* release_gameinfo();
  ::fantasybit::GameInfo* mutable_gameinfo();
  void set_allocated_gameinfo(::fantasybit::GameInfo* gameinfo);

  // optional .fantasybit.GameStatus gamesatus = 20;
  bool has_gamesatus() const;
  void clear_gamesatus();
  static const int kGamesatusFieldNumber = 20;
  const ::fantasybit::GameStatus& gamesatus() const;
  ::fantasybit::GameStatus* release_gamesatus();
  ::fantasybit::GameStatus* mutable_gamesatus();
  void set_allocated_gamesatus(::fantasybit::GameStatus* gamesatus);

  // optional int32 week = 2;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 2;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 season = 70;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 70;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.GameStatusMeta)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_week();
  void clear_has_week();
  void set_has_gameinfo();
  void clear_has_gameinfo();
  void set_has_gamesatus();
  void clear_has_gamesatus();
  void set_has_gamemetaid();
  void clear_has_gamemetaid();
  void set_has_datametaid();
  void clear_has_datametaid();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();
  void set_has_season();
  void clear_has_season();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr gamemetaid_;
  ::google::protobuf::internal::ArenaStringPtr datametaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::fantasybit::GameInfo* gameinfo_;
  ::fantasybit::GameStatus* gamesatus_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 season_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGameStatusMetaImpl();
};
// -------------------------------------------------------------------

class TeamProjMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamProjMeta) */ {
 public:
  TeamProjMeta();
  virtual ~TeamProjMeta();

  TeamProjMeta(const TeamProjMeta& from);

  inline TeamProjMeta& operator=(const TeamProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamProjMeta(TeamProjMeta&& from) noexcept
    : TeamProjMeta() {
    *this = ::std::move(from);
  }

  inline TeamProjMeta& operator=(TeamProjMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamProjMeta* internal_default_instance() {
    return reinterpret_cast<const TeamProjMeta*>(
               &_TeamProjMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TeamProjMeta* other);
  friend void swap(TeamProjMeta& a, TeamProjMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamProjMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamProjMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamProjMeta& from);
  void MergeFrom(const TeamProjMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamProjMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 20;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 20;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional string team = 30;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 30;
  const ::std::string& team() const;
  void set_team(const ::std::string& value);
  #if LANG_CXX11
  void set_team(::std::string&& value);
  #endif
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  ::std::string* mutable_team();
  ::std::string* release_team();
  void set_allocated_team(::std::string* team);

  // optional bytes gameplayerprojmetaroot = 60;
  bool has_gameplayerprojmetaroot() const;
  void clear_gameplayerprojmetaroot();
  static const int kGameplayerprojmetarootFieldNumber = 60;
  const ::std::string& gameplayerprojmetaroot() const;
  void set_gameplayerprojmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_gameplayerprojmetaroot(::std::string&& value);
  #endif
  void set_gameplayerprojmetaroot(const char* value);
  void set_gameplayerprojmetaroot(const void* value, size_t size);
  ::std::string* mutable_gameplayerprojmetaroot();
  ::std::string* release_gameplayerprojmetaroot();
  void set_allocated_gameplayerprojmetaroot(::std::string* gameplayerprojmetaroot);

  // optional bytes gamedatametaid = 70;
  bool has_gamedatametaid() const;
  void clear_gamedatametaid();
  static const int kGamedatametaidFieldNumber = 70;
  const ::std::string& gamedatametaid() const;
  void set_gamedatametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamedatametaid(::std::string&& value);
  #endif
  void set_gamedatametaid(const char* value);
  void set_gamedatametaid(const void* value, size_t size);
  ::std::string* mutable_gamedatametaid();
  ::std::string* release_gamedatametaid();
  void set_allocated_gamedatametaid(::std::string* gamedatametaid);

  // optional uint32 kickofftime = 40;
  bool has_kickofftime() const;
  void clear_kickofftime();
  static const int kKickofftimeFieldNumber = 40;
  ::google::protobuf::uint32 kickofftime() const;
  void set_kickofftime(::google::protobuf::uint32 value);

  // optional uint32 week = 50;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 50;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.TeamProjMeta)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_team();
  void clear_has_team();
  void set_has_kickofftime();
  void clear_has_kickofftime();
  void set_has_week();
  void clear_has_week();
  void set_has_gameplayerprojmetaroot();
  void clear_has_gameplayerprojmetaroot();
  void set_has_gamedatametaid();
  void clear_has_gamedatametaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr team_;
  ::google::protobuf::internal::ArenaStringPtr gameplayerprojmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr gamedatametaid_;
  ::google::protobuf::uint32 kickofftime_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsTeamProjMetaImpl();
};
// -------------------------------------------------------------------

class TeamResultMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamResultMeta) */ {
 public:
  TeamResultMeta();
  virtual ~TeamResultMeta();

  TeamResultMeta(const TeamResultMeta& from);

  inline TeamResultMeta& operator=(const TeamResultMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamResultMeta(TeamResultMeta&& from) noexcept
    : TeamResultMeta() {
    *this = ::std::move(from);
  }

  inline TeamResultMeta& operator=(TeamResultMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamResultMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamResultMeta* internal_default_instance() {
    return reinterpret_cast<const TeamResultMeta*>(
               &_TeamResultMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TeamResultMeta* other);
  friend void swap(TeamResultMeta& a, TeamResultMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamResultMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamResultMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamResultMeta& from);
  void MergeFrom(const TeamResultMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamResultMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 20;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 20;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional string team = 30;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 30;
  const ::std::string& team() const;
  void set_team(const ::std::string& value);
  #if LANG_CXX11
  void set_team(::std::string&& value);
  #endif
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  ::std::string* mutable_team();
  ::std::string* release_team();
  void set_allocated_team(::std::string* team);

  // optional bytes playerresultmetaroot = 60;
  bool has_playerresultmetaroot() const;
  void clear_playerresultmetaroot();
  static const int kPlayerresultmetarootFieldNumber = 60;
  const ::std::string& playerresultmetaroot() const;
  void set_playerresultmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_playerresultmetaroot(::std::string&& value);
  #endif
  void set_playerresultmetaroot(const char* value);
  void set_playerresultmetaroot(const void* value, size_t size);
  ::std::string* mutable_playerresultmetaroot();
  ::std::string* release_playerresultmetaroot();
  void set_allocated_playerresultmetaroot(::std::string* playerresultmetaroot);

  // optional bytes resultdatametaid = 70;
  bool has_resultdatametaid() const;
  void clear_resultdatametaid();
  static const int kResultdatametaidFieldNumber = 70;
  const ::std::string& resultdatametaid() const;
  void set_resultdatametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_resultdatametaid(::std::string&& value);
  #endif
  void set_resultdatametaid(const char* value);
  void set_resultdatametaid(const void* value, size_t size);
  ::std::string* mutable_resultdatametaid();
  ::std::string* release_resultdatametaid();
  void set_allocated_resultdatametaid(::std::string* resultdatametaid);

  // optional uint32 kickofftime = 40;
  bool has_kickofftime() const;
  void clear_kickofftime();
  static const int kKickofftimeFieldNumber = 40;
  ::google::protobuf::uint32 kickofftime() const;
  void set_kickofftime(::google::protobuf::uint32 value);

  // optional uint32 week = 50;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 50;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.TeamResultMeta)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_team();
  void clear_has_team();
  void set_has_kickofftime();
  void clear_has_kickofftime();
  void set_has_week();
  void clear_has_week();
  void set_has_playerresultmetaroot();
  void clear_has_playerresultmetaroot();
  void set_has_resultdatametaid();
  void clear_has_resultdatametaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr team_;
  ::google::protobuf::internal::ArenaStringPtr playerresultmetaroot_;
  ::google::protobuf::internal::ArenaStringPtr resultdatametaid_;
  ::google::protobuf::uint32 kickofftime_;
  ::google::protobuf::uint32 week_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsTeamResultMetaImpl();
};
// -------------------------------------------------------------------

class GamePlayerProjMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GamePlayerProjMeta) */ {
 public:
  GamePlayerProjMeta();
  virtual ~GamePlayerProjMeta();

  GamePlayerProjMeta(const GamePlayerProjMeta& from);

  inline GamePlayerProjMeta& operator=(const GamePlayerProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GamePlayerProjMeta(GamePlayerProjMeta&& from) noexcept
    : GamePlayerProjMeta() {
    *this = ::std::move(from);
  }

  inline GamePlayerProjMeta& operator=(GamePlayerProjMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GamePlayerProjMeta* internal_default_instance() {
    return reinterpret_cast<const GamePlayerProjMeta*>(
               &_GamePlayerProjMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GamePlayerProjMeta* other);
  friend void swap(GamePlayerProjMeta& a, GamePlayerProjMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GamePlayerProjMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  GamePlayerProjMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GamePlayerProjMeta& from);
  void MergeFrom(const GamePlayerProjMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GamePlayerProjMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 20;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 20;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes gamestatusmetaid = 30;
  bool has_gamestatusmetaid() const;
  void clear_gamestatusmetaid();
  static const int kGamestatusmetaidFieldNumber = 30;
  const ::std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamestatusmetaid(::std::string&& value);
  #endif
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  ::std::string* mutable_gamestatusmetaid();
  ::std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid);

  // optional bytes projmetaplayerroot = 60;
  bool has_projmetaplayerroot() const;
  void clear_projmetaplayerroot();
  static const int kProjmetaplayerrootFieldNumber = 60;
  const ::std::string& projmetaplayerroot() const;
  void set_projmetaplayerroot(const ::std::string& value);
  #if LANG_CXX11
  void set_projmetaplayerroot(::std::string&& value);
  #endif
  void set_projmetaplayerroot(const char* value);
  void set_projmetaplayerroot(const void* value, size_t size);
  ::std::string* mutable_projmetaplayerroot();
  ::std::string* release_projmetaplayerroot();
  void set_allocated_projmetaplayerroot(::std::string* projmetaplayerroot);

  // optional bytes posmetaplayerroot = 70;
  bool has_posmetaplayerroot() const;
  void clear_posmetaplayerroot();
  static const int kPosmetaplayerrootFieldNumber = 70;
  const ::std::string& posmetaplayerroot() const;
  void set_posmetaplayerroot(const ::std::string& value);
  #if LANG_CXX11
  void set_posmetaplayerroot(::std::string&& value);
  #endif
  void set_posmetaplayerroot(const char* value);
  void set_posmetaplayerroot(const void* value, size_t size);
  ::std::string* mutable_posmetaplayerroot();
  ::std::string* release_posmetaplayerroot();
  void set_allocated_posmetaplayerroot(::std::string* posmetaplayerroot);

  // optional bytes gamedatametaid = 80;
  bool has_gamedatametaid() const;
  void clear_gamedatametaid();
  static const int kGamedatametaidFieldNumber = 80;
  const ::std::string& gamedatametaid() const;
  void set_gamedatametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamedatametaid(::std::string&& value);
  #endif
  void set_gamedatametaid(const char* value);
  void set_gamedatametaid(const void* value, size_t size);
  ::std::string* mutable_gamedatametaid();
  ::std::string* release_gamedatametaid();
  void set_allocated_gamedatametaid(::std::string* gamedatametaid);

  // @@protoc_insertion_point(class_scope:fantasybit.GamePlayerProjMeta)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_gamestatusmetaid();
  void clear_has_gamestatusmetaid();
  void set_has_projmetaplayerroot();
  void clear_has_projmetaplayerroot();
  void set_has_posmetaplayerroot();
  void clear_has_posmetaplayerroot();
  void set_has_gamedatametaid();
  void clear_has_gamedatametaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr gamestatusmetaid_;
  ::google::protobuf::internal::ArenaStringPtr projmetaplayerroot_;
  ::google::protobuf::internal::ArenaStringPtr posmetaplayerroot_;
  ::google::protobuf::internal::ArenaStringPtr gamedatametaid_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGamePlayerProjMetaImpl();
};
// -------------------------------------------------------------------

class ProjMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjMeta) */ {
 public:
  ProjMeta();
  virtual ~ProjMeta();

  ProjMeta(const ProjMeta& from);

  inline ProjMeta& operator=(const ProjMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjMeta(ProjMeta&& from) noexcept
    : ProjMeta() {
    *this = ::std::move(from);
  }

  inline ProjMeta& operator=(ProjMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjMeta* internal_default_instance() {
    return reinterpret_cast<const ProjMeta*>(
               &_ProjMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ProjMeta* other);
  friend void swap(ProjMeta& a, ProjMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjMeta& from);
  void MergeFrom(const ProjMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes txmetaid = 40;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 40;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional bytes prev = 50;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 50;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjMeta)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_proj();
  void clear_has_proj();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::int32 proj_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsProjMetaImpl();
};
// -------------------------------------------------------------------

class PosMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PosMeta) */ {
 public:
  PosMeta();
  virtual ~PosMeta();

  PosMeta(const PosMeta& from);

  inline PosMeta& operator=(const PosMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PosMeta(PosMeta&& from) noexcept
    : PosMeta() {
    *this = ::std::move(from);
  }

  inline PosMeta& operator=(PosMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PosMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PosMeta* internal_default_instance() {
    return reinterpret_cast<const PosMeta*>(
               &_PosMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(PosMeta* other);
  friend void swap(PosMeta& a, PosMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PosMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  PosMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PosMeta& from);
  void MergeFrom(const PosMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PosMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string playerid = 40;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 40;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes txmetaid = 50;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 50;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional bytes prev = 60;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 60;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional int32 qty = 20;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 20;
  ::google::protobuf::int32 qty() const;
  void set_qty(::google::protobuf::int32 value);

  // optional int32 price = 30;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 30;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.PosMeta)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_qty();
  void clear_has_qty();
  void set_has_price();
  void clear_has_price();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::int32 qty_;
  ::google::protobuf::int32 price_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPosMetaImpl();
};
// -------------------------------------------------------------------

class PlayerResultMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerResultMeta) */ {
 public:
  PlayerResultMeta();
  virtual ~PlayerResultMeta();

  PlayerResultMeta(const PlayerResultMeta& from);

  inline PlayerResultMeta& operator=(const PlayerResultMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerResultMeta(PlayerResultMeta&& from) noexcept
    : PlayerResultMeta() {
    *this = ::std::move(from);
  }

  inline PlayerResultMeta& operator=(PlayerResultMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerResultMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerResultMeta* internal_default_instance() {
    return reinterpret_cast<const PlayerResultMeta*>(
               &_PlayerResultMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(PlayerResultMeta* other);
  friend void swap(PlayerResultMeta& a, PlayerResultMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerResultMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerResultMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerResultMeta& from);
  void MergeFrom(const PlayerResultMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerResultMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes playergamestatsid = 10;
  bool has_playergamestatsid() const;
  void clear_playergamestatsid();
  static const int kPlayergamestatsidFieldNumber = 10;
  const ::std::string& playergamestatsid() const;
  void set_playergamestatsid(const ::std::string& value);
  #if LANG_CXX11
  void set_playergamestatsid(::std::string&& value);
  #endif
  void set_playergamestatsid(const char* value);
  void set_playergamestatsid(const void* value, size_t size);
  ::std::string* mutable_playergamestatsid();
  ::std::string* release_playergamestatsid();
  void set_allocated_playergamestatsid(::std::string* playergamestatsid);

  // optional bytes gamestatusmetaid = 30;
  bool has_gamestatusmetaid() const;
  void clear_gamestatusmetaid();
  static const int kGamestatusmetaidFieldNumber = 30;
  const ::std::string& gamestatusmetaid() const;
  void set_gamestatusmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamestatusmetaid(::std::string&& value);
  #endif
  void set_gamestatusmetaid(const char* value);
  void set_gamestatusmetaid(const void* value, size_t size);
  ::std::string* mutable_gamestatusmetaid();
  ::std::string* release_gamestatusmetaid();
  void set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid);

  // optional bytes awardmetaplayerroot = 60;
  bool has_awardmetaplayerroot() const;
  void clear_awardmetaplayerroot();
  static const int kAwardmetaplayerrootFieldNumber = 60;
  const ::std::string& awardmetaplayerroot() const;
  void set_awardmetaplayerroot(const ::std::string& value);
  #if LANG_CXX11
  void set_awardmetaplayerroot(::std::string&& value);
  #endif
  void set_awardmetaplayerroot(const char* value);
  void set_awardmetaplayerroot(const void* value, size_t size);
  ::std::string* mutable_awardmetaplayerroot();
  ::std::string* release_awardmetaplayerroot();
  void set_allocated_awardmetaplayerroot(::std::string* awardmetaplayerroot);

  // optional bytes pnlmetaplayerroot = 70;
  bool has_pnlmetaplayerroot() const;
  void clear_pnlmetaplayerroot();
  static const int kPnlmetaplayerrootFieldNumber = 70;
  const ::std::string& pnlmetaplayerroot() const;
  void set_pnlmetaplayerroot(const ::std::string& value);
  #if LANG_CXX11
  void set_pnlmetaplayerroot(::std::string&& value);
  #endif
  void set_pnlmetaplayerroot(const char* value);
  void set_pnlmetaplayerroot(const void* value, size_t size);
  ::std::string* mutable_pnlmetaplayerroot();
  ::std::string* release_pnlmetaplayerroot();
  void set_allocated_pnlmetaplayerroot(::std::string* pnlmetaplayerroot);

  // optional bytes resultdatametaid = 80;
  bool has_resultdatametaid() const;
  void clear_resultdatametaid();
  static const int kResultdatametaidFieldNumber = 80;
  const ::std::string& resultdatametaid() const;
  void set_resultdatametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_resultdatametaid(::std::string&& value);
  #endif
  void set_resultdatametaid(const char* value);
  void set_resultdatametaid(const void* value, size_t size);
  ::std::string* mutable_resultdatametaid();
  ::std::string* release_resultdatametaid();
  void set_allocated_resultdatametaid(::std::string* resultdatametaid);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerResultMeta)
 private:
  void set_has_playergamestatsid();
  void clear_has_playergamestatsid();
  void set_has_gamestatusmetaid();
  void clear_has_gamestatusmetaid();
  void set_has_awardmetaplayerroot();
  void clear_has_awardmetaplayerroot();
  void set_has_pnlmetaplayerroot();
  void clear_has_pnlmetaplayerroot();
  void set_has_resultdatametaid();
  void clear_has_resultdatametaid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playergamestatsid_;
  ::google::protobuf::internal::ArenaStringPtr gamestatusmetaid_;
  ::google::protobuf::internal::ArenaStringPtr awardmetaplayerroot_;
  ::google::protobuf::internal::ArenaStringPtr pnlmetaplayerroot_;
  ::google::protobuf::internal::ArenaStringPtr resultdatametaid_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPlayerResultMetaImpl();
};
// -------------------------------------------------------------------

class PlayerGameStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerGameStats) */ {
 public:
  PlayerGameStats();
  virtual ~PlayerGameStats();

  PlayerGameStats(const PlayerGameStats& from);

  inline PlayerGameStats& operator=(const PlayerGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerGameStats(PlayerGameStats&& from) noexcept
    : PlayerGameStats() {
    *this = ::std::move(from);
  }

  inline PlayerGameStats& operator=(PlayerGameStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGameStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerGameStats* internal_default_instance() {
    return reinterpret_cast<const PlayerGameStats*>(
               &_PlayerGameStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(PlayerGameStats* other);
  friend void swap(PlayerGameStats& a, PlayerGameStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerGameStats* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerGameStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerGameStats& from);
  void MergeFrom(const PlayerGameStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerGameStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 20;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 20;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional string gameid = 60;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 60;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional .fantasybit.Stats stats = 50;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 50;
  const ::fantasybit::Stats& stats() const;
  ::fantasybit::Stats* release_stats();
  ::fantasybit::Stats* mutable_stats();
  void set_allocated_stats(::fantasybit::Stats* stats);

  // optional float result = 40;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 40;
  float result() const;
  void set_result(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerGameStats)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_result();
  void clear_has_result();
  void set_has_stats();
  void clear_has_stats();
  void set_has_gameid();
  void clear_has_gameid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::fantasybit::Stats* stats_;
  float result_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPlayerGameStatsImpl();
};
// -------------------------------------------------------------------

class AwardMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.AwardMeta) */ {
 public:
  AwardMeta();
  virtual ~AwardMeta();

  AwardMeta(const AwardMeta& from);

  inline AwardMeta& operator=(const AwardMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AwardMeta(AwardMeta&& from) noexcept
    : AwardMeta() {
    *this = ::std::move(from);
  }

  inline AwardMeta& operator=(AwardMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AwardMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AwardMeta* internal_default_instance() {
    return reinterpret_cast<const AwardMeta*>(
               &_AwardMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AwardMeta* other);
  friend void swap(AwardMeta& a, AwardMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AwardMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  AwardMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AwardMeta& from);
  void MergeFrom(const AwardMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AwardMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes projmetaid = 40;
  bool has_projmetaid() const;
  void clear_projmetaid();
  static const int kProjmetaidFieldNumber = 40;
  const ::std::string& projmetaid() const;
  void set_projmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_projmetaid(::std::string&& value);
  #endif
  void set_projmetaid(const char* value);
  void set_projmetaid(const void* value, size_t size);
  ::std::string* mutable_projmetaid();
  ::std::string* release_projmetaid();
  void set_allocated_projmetaid(::std::string* projmetaid);

  // optional bytes playergamestatsid = 50;
  bool has_playergamestatsid() const;
  void clear_playergamestatsid();
  static const int kPlayergamestatsidFieldNumber = 50;
  const ::std::string& playergamestatsid() const;
  void set_playergamestatsid(const ::std::string& value);
  #if LANG_CXX11
  void set_playergamestatsid(::std::string&& value);
  #endif
  void set_playergamestatsid(const char* value);
  void set_playergamestatsid(const void* value, size_t size);
  ::std::string* mutable_playergamestatsid();
  ::std::string* release_playergamestatsid();
  void set_allocated_playergamestatsid(::std::string* playergamestatsid);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // optional uint64 award = 30;
  bool has_award() const;
  void clear_award();
  static const int kAwardFieldNumber = 30;
  ::google::protobuf::uint64 award() const;
  void set_award(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.AwardMeta)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_proj();
  void clear_has_proj();
  void set_has_award();
  void clear_has_award();
  void set_has_projmetaid();
  void clear_has_projmetaid();
  void set_has_playergamestatsid();
  void clear_has_playergamestatsid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr projmetaid_;
  ::google::protobuf::internal::ArenaStringPtr playergamestatsid_;
  ::google::protobuf::int32 proj_;
  ::google::protobuf::uint64 award_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsAwardMetaImpl();
};
// -------------------------------------------------------------------

class PnlMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PnlMeta) */ {
 public:
  PnlMeta();
  virtual ~PnlMeta();

  PnlMeta(const PnlMeta& from);

  inline PnlMeta& operator=(const PnlMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PnlMeta(PnlMeta&& from) noexcept
    : PnlMeta() {
    *this = ::std::move(from);
  }

  inline PnlMeta& operator=(PnlMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PnlMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PnlMeta* internal_default_instance() {
    return reinterpret_cast<const PnlMeta*>(
               &_PnlMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(PnlMeta* other);
  friend void swap(PnlMeta& a, PnlMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PnlMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  PnlMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PnlMeta& from);
  void MergeFrom(const PnlMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PnlMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes posmetaid = 50;
  bool has_posmetaid() const;
  void clear_posmetaid();
  static const int kPosmetaidFieldNumber = 50;
  const ::std::string& posmetaid() const;
  void set_posmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_posmetaid(::std::string&& value);
  #endif
  void set_posmetaid(const char* value);
  void set_posmetaid(const void* value, size_t size);
  ::std::string* mutable_posmetaid();
  ::std::string* release_posmetaid();
  void set_allocated_posmetaid(::std::string* posmetaid);

  // optional bytes playergamestatsid = 60;
  bool has_playergamestatsid() const;
  void clear_playergamestatsid();
  static const int kPlayergamestatsidFieldNumber = 60;
  const ::std::string& playergamestatsid() const;
  void set_playergamestatsid(const ::std::string& value);
  #if LANG_CXX11
  void set_playergamestatsid(::std::string&& value);
  #endif
  void set_playergamestatsid(const char* value);
  void set_playergamestatsid(const void* value, size_t size);
  ::std::string* mutable_playergamestatsid();
  ::std::string* release_playergamestatsid();
  void set_allocated_playergamestatsid(::std::string* playergamestatsid);

  // optional int32 qty = 20;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 20;
  ::google::protobuf::int32 qty() const;
  void set_qty(::google::protobuf::int32 value);

  // optional int32 price = 30;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 30;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // optional int64 pnl = 40;
  bool has_pnl() const;
  void clear_pnl();
  static const int kPnlFieldNumber = 40;
  ::google::protobuf::int64 pnl() const;
  void set_pnl(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.PnlMeta)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_qty();
  void clear_has_qty();
  void set_has_price();
  void clear_has_price();
  void set_has_pnl();
  void clear_has_pnl();
  void set_has_posmetaid();
  void clear_has_posmetaid();
  void set_has_playergamestatsid();
  void clear_has_playergamestatsid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr posmetaid_;
  ::google::protobuf::internal::ArenaStringPtr playergamestatsid_;
  ::google::protobuf::int32 qty_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int64 pnl_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPnlMetaImpl();
};
// -------------------------------------------------------------------

class PlayerMarketState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerMarketState) */ {
 public:
  PlayerMarketState();
  virtual ~PlayerMarketState();

  PlayerMarketState(const PlayerMarketState& from);

  inline PlayerMarketState& operator=(const PlayerMarketState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMarketState(PlayerMarketState&& from) noexcept
    : PlayerMarketState() {
    *this = ::std::move(from);
  }

  inline PlayerMarketState& operator=(PlayerMarketState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMarketState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMarketState* internal_default_instance() {
    return reinterpret_cast<const PlayerMarketState*>(
               &_PlayerMarketState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(PlayerMarketState* other);
  friend void swap(PlayerMarketState& a, PlayerMarketState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMarketState* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMarketState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMarketState& from);
  void MergeFrom(const PlayerMarketState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMarketState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes limitbookmetaid = 10;
  bool has_limitbookmetaid() const;
  void clear_limitbookmetaid();
  static const int kLimitbookmetaidFieldNumber = 10;
  const ::std::string& limitbookmetaid() const;
  void set_limitbookmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_limitbookmetaid(::std::string&& value);
  #endif
  void set_limitbookmetaid(const char* value);
  void set_limitbookmetaid(const void* value, size_t size);
  ::std::string* mutable_limitbookmetaid();
  ::std::string* release_limitbookmetaid();
  void set_allocated_limitbookmetaid(::std::string* limitbookmetaid);

  // optional string playerid = 20;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 20;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes marketticmetaid = 30;
  bool has_marketticmetaid() const;
  void clear_marketticmetaid();
  static const int kMarketticmetaidFieldNumber = 30;
  const ::std::string& marketticmetaid() const;
  void set_marketticmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketticmetaid(::std::string&& value);
  #endif
  void set_marketticmetaid(const char* value);
  void set_marketticmetaid(const void* value, size_t size);
  ::std::string* mutable_marketticmetaid();
  ::std::string* release_marketticmetaid();
  void set_allocated_marketticmetaid(::std::string* marketticmetaid);

  // optional bytes prev = 40;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 40;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 50;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 50;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional bool locked = 31;
  bool has_locked() const;
  void clear_locked();
  static const int kLockedFieldNumber = 31;
  bool locked() const;
  void set_locked(bool value);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerMarketState)
 private:
  void set_has_limitbookmetaid();
  void clear_has_limitbookmetaid();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_marketticmetaid();
  void clear_has_marketticmetaid();
  void set_has_locked();
  void clear_has_locked();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr limitbookmetaid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr marketticmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  bool locked_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPlayerMarketStateImpl();
};
// -------------------------------------------------------------------

class LimitBookMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.LimitBookMeta) */ {
 public:
  LimitBookMeta();
  virtual ~LimitBookMeta();

  LimitBookMeta(const LimitBookMeta& from);

  inline LimitBookMeta& operator=(const LimitBookMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LimitBookMeta(LimitBookMeta&& from) noexcept
    : LimitBookMeta() {
    *this = ::std::move(from);
  }

  inline LimitBookMeta& operator=(LimitBookMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitBookMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitBookMeta* internal_default_instance() {
    return reinterpret_cast<const LimitBookMeta*>(
               &_LimitBookMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(LimitBookMeta* other);
  friend void swap(LimitBookMeta& a, LimitBookMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LimitBookMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  LimitBookMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LimitBookMeta& from);
  void MergeFrom(const LimitBookMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LimitBookMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bidordermetaroot = 50;
  bool has_bidordermetaroot() const;
  void clear_bidordermetaroot();
  static const int kBidordermetarootFieldNumber = 50;
  const ::std::string& bidordermetaroot() const;
  void set_bidordermetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_bidordermetaroot(::std::string&& value);
  #endif
  void set_bidordermetaroot(const char* value);
  void set_bidordermetaroot(const void* value, size_t size);
  ::std::string* mutable_bidordermetaroot();
  ::std::string* release_bidordermetaroot();
  void set_allocated_bidordermetaroot(::std::string* bidordermetaroot);

  // optional bytes askordermetaroot = 60;
  bool has_askordermetaroot() const;
  void clear_askordermetaroot();
  static const int kAskordermetarootFieldNumber = 60;
  const ::std::string& askordermetaroot() const;
  void set_askordermetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_askordermetaroot(::std::string&& value);
  #endif
  void set_askordermetaroot(const char* value);
  void set_askordermetaroot(const void* value, size_t size);
  ::std::string* mutable_askordermetaroot();
  ::std::string* release_askordermetaroot();
  void set_allocated_askordermetaroot(::std::string* askordermetaroot);

  // optional int32 bid = 10;
  bool has_bid() const;
  void clear_bid();
  static const int kBidFieldNumber = 10;
  ::google::protobuf::int32 bid() const;
  void set_bid(::google::protobuf::int32 value);

  // optional int32 bidsize = 20;
  bool has_bidsize() const;
  void clear_bidsize();
  static const int kBidsizeFieldNumber = 20;
  ::google::protobuf::int32 bidsize() const;
  void set_bidsize(::google::protobuf::int32 value);

  // optional int32 asksize = 30;
  bool has_asksize() const;
  void clear_asksize();
  static const int kAsksizeFieldNumber = 30;
  ::google::protobuf::int32 asksize() const;
  void set_asksize(::google::protobuf::int32 value);

  // optional int32 ask = 40;
  bool has_ask() const;
  void clear_ask();
  static const int kAskFieldNumber = 40;
  ::google::protobuf::int32 ask() const;
  void set_ask(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.LimitBookMeta)
 private:
  void set_has_bid();
  void clear_has_bid();
  void set_has_bidsize();
  void clear_has_bidsize();
  void set_has_asksize();
  void clear_has_asksize();
  void set_has_ask();
  void clear_has_ask();
  void set_has_bidordermetaroot();
  void clear_has_bidordermetaroot();
  void set_has_askordermetaroot();
  void clear_has_askordermetaroot();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bidordermetaroot_;
  ::google::protobuf::internal::ArenaStringPtr askordermetaroot_;
  ::google::protobuf::int32 bid_;
  ::google::protobuf::int32 bidsize_;
  ::google::protobuf::int32 asksize_;
  ::google::protobuf::int32 ask_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsLimitBookMetaImpl();
};
// -------------------------------------------------------------------

class MarketTicMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MarketTicMeta) */ {
 public:
  MarketTicMeta();
  virtual ~MarketTicMeta();

  MarketTicMeta(const MarketTicMeta& from);

  inline MarketTicMeta& operator=(const MarketTicMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketTicMeta(MarketTicMeta&& from) noexcept
    : MarketTicMeta() {
    *this = ::std::move(from);
  }

  inline MarketTicMeta& operator=(MarketTicMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketTicMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketTicMeta* internal_default_instance() {
    return reinterpret_cast<const MarketTicMeta*>(
               &_MarketTicMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(MarketTicMeta* other);
  friend void swap(MarketTicMeta& a, MarketTicMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketTicMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  MarketTicMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MarketTicMeta& from);
  void MergeFrom(const MarketTicMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MarketTicMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes orderfillhead = 40;
  bool has_orderfillhead() const;
  void clear_orderfillhead();
  static const int kOrderfillheadFieldNumber = 40;
  const ::std::string& orderfillhead() const;
  void set_orderfillhead(const ::std::string& value);
  #if LANG_CXX11
  void set_orderfillhead(::std::string&& value);
  #endif
  void set_orderfillhead(const char* value);
  void set_orderfillhead(const void* value, size_t size);
  ::std::string* mutable_orderfillhead();
  ::std::string* release_orderfillhead();
  void set_allocated_orderfillhead(::std::string* orderfillhead);

  // optional bytes prev = 50;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 50;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional int32 price = 20;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 20;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // optional int32 size = 30;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 30;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.MarketTicMeta)
 private:
  void set_has_price();
  void clear_has_price();
  void set_has_size();
  void clear_has_size();
  void set_has_orderfillhead();
  void clear_has_orderfillhead();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr orderfillhead_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 size_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsMarketTicMetaImpl();
};
// -------------------------------------------------------------------

class OrderMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderMeta) */ {
 public:
  OrderMeta();
  virtual ~OrderMeta();

  OrderMeta(const OrderMeta& from);

  inline OrderMeta& operator=(const OrderMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderMeta(OrderMeta&& from) noexcept
    : OrderMeta() {
    *this = ::std::move(from);
  }

  inline OrderMeta& operator=(OrderMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderMeta* internal_default_instance() {
    return reinterpret_cast<const OrderMeta*>(
               &_OrderMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(OrderMeta* other);
  friend void swap(OrderMeta& a, OrderMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderMeta& from);
  void MergeFrom(const OrderMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fname = 10;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 10;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // optional string playerid = 20;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 20;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes txmetaid = 60;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 60;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional bytes orderfillmetaid = 70;
  bool has_orderfillmetaid() const;
  void clear_orderfillmetaid();
  static const int kOrderfillmetaidFieldNumber = 70;
  const ::std::string& orderfillmetaid() const;
  void set_orderfillmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderfillmetaid(::std::string&& value);
  #endif
  void set_orderfillmetaid(const char* value);
  void set_orderfillmetaid(const void* value, size_t size);
  ::std::string* mutable_orderfillmetaid();
  ::std::string* release_orderfillmetaid();
  void set_allocated_orderfillmetaid(::std::string* orderfillmetaid);

  // optional bytes prev = 80;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 80;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional int32 timestamp = 75;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 75;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // optional int32 refnum = 1;
  bool has_refnum() const;
  void clear_refnum();
  static const int kRefnumFieldNumber = 1;
  ::google::protobuf::int32 refnum() const;
  void set_refnum(::google::protobuf::int32 value);

  // optional bool buyside = 30;
  bool has_buyside() const;
  void clear_buyside();
  static const int kBuysideFieldNumber = 30;
  bool buyside() const;
  void set_buyside(bool value);

  // optional int32 size = 40;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 40;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional int32 price = 50;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 50;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.OrderMeta)
 private:
  void set_has_refnum();
  void clear_has_refnum();
  void set_has_fname();
  void clear_has_fname();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_buyside();
  void clear_has_buyside();
  void set_has_size();
  void clear_has_size();
  void set_has_price();
  void clear_has_price();
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_orderfillmetaid();
  void clear_has_orderfillmetaid();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::internal::ArenaStringPtr orderfillmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 refnum_;
  bool buyside_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 price_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsOrderMetaImpl();
};
// -------------------------------------------------------------------

class OrderFillMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.OrderFillMeta) */ {
 public:
  OrderFillMeta();
  virtual ~OrderFillMeta();

  OrderFillMeta(const OrderFillMeta& from);

  inline OrderFillMeta& operator=(const OrderFillMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderFillMeta(OrderFillMeta&& from) noexcept
    : OrderFillMeta() {
    *this = ::std::move(from);
  }

  inline OrderFillMeta& operator=(OrderFillMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderFillMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderFillMeta* internal_default_instance() {
    return reinterpret_cast<const OrderFillMeta*>(
               &_OrderFillMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(OrderFillMeta* other);
  friend void swap(OrderFillMeta& a, OrderFillMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderFillMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderFillMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderFillMeta& from);
  void MergeFrom(const OrderFillMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderFillMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fname = 10;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 10;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // optional string playerid = 15;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 15;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes txmetaid = 60;
  bool has_txmetaid() const;
  void clear_txmetaid();
  static const int kTxmetaidFieldNumber = 60;
  const ::std::string& txmetaid() const;
  void set_txmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_txmetaid(::std::string&& value);
  #endif
  void set_txmetaid(const char* value);
  void set_txmetaid(const void* value, size_t size);
  ::std::string* mutable_txmetaid();
  ::std::string* release_txmetaid();
  void set_allocated_txmetaid(::std::string* txmetaid);

  // optional bytes prev = 70;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 70;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional int32 refnum = 1;
  bool has_refnum() const;
  void clear_refnum();
  static const int kRefnumFieldNumber = 1;
  ::google::protobuf::int32 refnum() const;
  void set_refnum(::google::protobuf::int32 value);

  // optional int32 fillprice = 20;
  bool has_fillprice() const;
  void clear_fillprice();
  static const int kFillpriceFieldNumber = 20;
  ::google::protobuf::int32 fillprice() const;
  void set_fillprice(::google::protobuf::int32 value);

  // optional int32 fillsize = 30;
  bool has_fillsize() const;
  void clear_fillsize();
  static const int kFillsizeFieldNumber = 30;
  ::google::protobuf::int32 fillsize() const;
  void set_fillsize(::google::protobuf::int32 value);

  // optional bool buyside = 35;
  bool has_buyside() const;
  void clear_buyside();
  static const int kBuysideFieldNumber = 35;
  bool buyside() const;
  void set_buyside(bool value);

  // optional uint64 timestamp = 40;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 40;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.OrderFillMeta)
 private:
  void set_has_refnum();
  void clear_has_refnum();
  void set_has_fname();
  void clear_has_fname();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_fillprice();
  void clear_has_fillprice();
  void set_has_fillsize();
  void clear_has_fillsize();
  void set_has_buyside();
  void clear_has_buyside();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_txmetaid();
  void clear_has_txmetaid();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr txmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::int32 refnum_;
  ::google::protobuf::int32 fillprice_;
  ::google::protobuf::int32 fillsize_;
  bool buyside_;
  ::google::protobuf::uint64 timestamp_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsOrderFillMetaImpl();
};
// -------------------------------------------------------------------

class GlobalStateMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GlobalStateMeta) */ {
 public:
  GlobalStateMeta();
  virtual ~GlobalStateMeta();

  GlobalStateMeta(const GlobalStateMeta& from);

  inline GlobalStateMeta& operator=(const GlobalStateMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalStateMeta(GlobalStateMeta&& from) noexcept
    : GlobalStateMeta() {
    *this = ::std::move(from);
  }

  inline GlobalStateMeta& operator=(GlobalStateMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalStateMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalStateMeta* internal_default_instance() {
    return reinterpret_cast<const GlobalStateMeta*>(
               &_GlobalStateMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(GlobalStateMeta* other);
  friend void swap(GlobalStateMeta& a, GlobalStateMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalStateMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalStateMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalStateMeta& from);
  void MergeFrom(const GlobalStateMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalStateMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes trmetaid = 20;
  bool has_trmetaid() const;
  void clear_trmetaid();
  static const int kTrmetaidFieldNumber = 20;
  const ::std::string& trmetaid() const;
  void set_trmetaid(const ::std::string& value);
  #if LANG_CXX11
  void set_trmetaid(::std::string&& value);
  #endif
  void set_trmetaid(const char* value);
  void set_trmetaid(const void* value, size_t size);
  ::std::string* mutable_trmetaid();
  ::std::string* release_trmetaid();
  void set_allocated_trmetaid(::std::string* trmetaid);

  // optional bytes prev = 30;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 30;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional bytes next = 40;
  bool has_next() const;
  void clear_next();
  static const int kNextFieldNumber = 40;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // optional .fantasybit.GlobalState globalstate = 10;
  bool has_globalstate() const;
  void clear_globalstate();
  static const int kGlobalstateFieldNumber = 10;
  const ::fantasybit::GlobalState& globalstate() const;
  ::fantasybit::GlobalState* release_globalstate();
  ::fantasybit::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::fantasybit::GlobalState* globalstate);

  // @@protoc_insertion_point(class_scope:fantasybit.GlobalStateMeta)
 private:
  void set_has_globalstate();
  void clear_has_globalstate();
  void set_has_trmetaid();
  void clear_has_trmetaid();
  void set_has_prev();
  void clear_has_prev();
  void set_has_next();
  void clear_has_next();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trmetaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::fantasybit::GlobalState* globalstate_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGlobalStateMetaImpl();
};
// -------------------------------------------------------------------

class PlayerMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerMeta) */ {
 public:
  PlayerMeta();
  virtual ~PlayerMeta();

  PlayerMeta(const PlayerMeta& from);

  inline PlayerMeta& operator=(const PlayerMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMeta(PlayerMeta&& from) noexcept
    : PlayerMeta() {
    *this = ::std::move(from);
  }

  inline PlayerMeta& operator=(PlayerMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMeta* internal_default_instance() {
    return reinterpret_cast<const PlayerMeta*>(
               &_PlayerMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(PlayerMeta* other);
  friend void swap(PlayerMeta& a, PlayerMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMeta& from);
  void MergeFrom(const PlayerMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 10;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 10;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional bytes datametaid = 40;
  bool has_datametaid() const;
  void clear_datametaid();
  static const int kDatametaidFieldNumber = 40;
  const ::std::string& datametaid() const;
  void set_datametaid(const ::std::string& value);
  #if LANG_CXX11
  void set_datametaid(::std::string&& value);
  #endif
  void set_datametaid(const char* value);
  void set_datametaid(const void* value, size_t size);
  ::std::string* mutable_datametaid();
  ::std::string* release_datametaid();
  void set_allocated_datametaid(::std::string* datametaid);

  // optional bytes prev = 50;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 50;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // optional .fantasybit.PlayerBase player_base = 20;
  bool has_player_base() const;
  void clear_player_base();
  static const int kPlayerBaseFieldNumber = 20;
  const ::fantasybit::PlayerBase& player_base() const;
  ::fantasybit::PlayerBase* release_player_base();
  ::fantasybit::PlayerBase* mutable_player_base();
  void set_allocated_player_base(::fantasybit::PlayerBase* player_base);

  // optional .fantasybit.PlayerStatus player_status = 30;
  bool has_player_status() const;
  void clear_player_status();
  static const int kPlayerStatusFieldNumber = 30;
  const ::fantasybit::PlayerStatus& player_status() const;
  ::fantasybit::PlayerStatus* release_player_status();
  ::fantasybit::PlayerStatus* mutable_player_status();
  void set_allocated_player_status(::fantasybit::PlayerStatus* player_status);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerMeta)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_player_base();
  void clear_has_player_base();
  void set_has_player_status();
  void clear_has_player_status();
  void set_has_datametaid();
  void clear_has_datametaid();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr datametaid_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  ::fantasybit::PlayerBase* player_base_;
  ::fantasybit::PlayerStatus* player_status_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPlayerMetaImpl();
};
// -------------------------------------------------------------------

class TeamMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamMeta) */ {
 public:
  TeamMeta();
  virtual ~TeamMeta();

  TeamMeta(const TeamMeta& from);

  inline TeamMeta& operator=(const TeamMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamMeta(TeamMeta&& from) noexcept
    : TeamMeta() {
    *this = ::std::move(from);
  }

  inline TeamMeta& operator=(TeamMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamMeta* internal_default_instance() {
    return reinterpret_cast<const TeamMeta*>(
               &_TeamMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(TeamMeta* other);
  friend void swap(TeamMeta& a, TeamMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamMeta& from);
  void MergeFrom(const TeamMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string teamid = 10;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 10;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamid(::std::string&& value);
  #endif
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // optional bytes playermetaidroot = 20;
  bool has_playermetaidroot() const;
  void clear_playermetaidroot();
  static const int kPlayermetaidrootFieldNumber = 20;
  const ::std::string& playermetaidroot() const;
  void set_playermetaidroot(const ::std::string& value);
  #if LANG_CXX11
  void set_playermetaidroot(::std::string&& value);
  #endif
  void set_playermetaidroot(const char* value);
  void set_playermetaidroot(const void* value, size_t size);
  ::std::string* mutable_playermetaidroot();
  ::std::string* release_playermetaidroot();
  void set_allocated_playermetaidroot(::std::string* playermetaidroot);

  // optional bytes prev = 30;
  bool has_prev() const;
  void clear_prev();
  static const int kPrevFieldNumber = 30;
  const ::std::string& prev() const;
  void set_prev(const ::std::string& value);
  #if LANG_CXX11
  void set_prev(::std::string&& value);
  #endif
  void set_prev(const char* value);
  void set_prev(const void* value, size_t size);
  ::std::string* mutable_prev();
  ::std::string* release_prev();
  void set_allocated_prev(::std::string* prev);

  // @@protoc_insertion_point(class_scope:fantasybit.TeamMeta)
 private:
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_playermetaidroot();
  void clear_has_playermetaidroot();
  void set_has_prev();
  void clear_has_prev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  ::google::protobuf::internal::ArenaStringPtr playermetaidroot_;
  ::google::protobuf::internal::ArenaStringPtr prev_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsTeamMetaImpl();
};
// -------------------------------------------------------------------

class pbstate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.pbstate) */ {
 public:
  pbstate();
  virtual ~pbstate();

  pbstate(const pbstate& from);

  inline pbstate& operator=(const pbstate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbstate(pbstate&& from) noexcept
    : pbstate() {
    *this = ::std::move(from);
  }

  inline pbstate& operator=(pbstate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pbstate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbstate* internal_default_instance() {
    return reinterpret_cast<const pbstate*>(
               &_pbstate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(pbstate* other);
  friend void swap(pbstate& a, pbstate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbstate* New() const PROTOBUF_FINAL { return New(NULL); }

  pbstate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const pbstate& from);
  void MergeFrom(const pbstate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(pbstate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes schedulestateid = 10;
  bool has_schedulestateid() const;
  void clear_schedulestateid();
  static const int kSchedulestateidFieldNumber = 10;
  const ::std::string& schedulestateid() const;
  void set_schedulestateid(const ::std::string& value);
  #if LANG_CXX11
  void set_schedulestateid(::std::string&& value);
  #endif
  void set_schedulestateid(const char* value);
  void set_schedulestateid(const void* value, size_t size);
  ::std::string* mutable_schedulestateid();
  ::std::string* release_schedulestateid();
  void set_allocated_schedulestateid(::std::string* schedulestateid);

  // optional bytes leaderboardstateid = 20;
  bool has_leaderboardstateid() const;
  void clear_leaderboardstateid();
  static const int kLeaderboardstateidFieldNumber = 20;
  const ::std::string& leaderboardstateid() const;
  void set_leaderboardstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderboardstateid(::std::string&& value);
  #endif
  void set_leaderboardstateid(const char* value);
  void set_leaderboardstateid(const void* value, size_t size);
  ::std::string* mutable_leaderboardstateid();
  ::std::string* release_leaderboardstateid();
  void set_allocated_leaderboardstateid(::std::string* leaderboardstateid);

  // optional bytes projstateid = 30;
  bool has_projstateid() const;
  void clear_projstateid();
  static const int kProjstateidFieldNumber = 30;
  const ::std::string& projstateid() const;
  void set_projstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_projstateid(::std::string&& value);
  #endif
  void set_projstateid(const char* value);
  void set_projstateid(const void* value, size_t size);
  ::std::string* mutable_projstateid();
  ::std::string* release_projstateid();
  void set_allocated_projstateid(::std::string* projstateid);

  // optional bytes posstateid = 35;
  bool has_posstateid() const;
  void clear_posstateid();
  static const int kPosstateidFieldNumber = 35;
  const ::std::string& posstateid() const;
  void set_posstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_posstateid(::std::string&& value);
  #endif
  void set_posstateid(const char* value);
  void set_posstateid(const void* value, size_t size);
  ::std::string* mutable_posstateid();
  ::std::string* release_posstateid();
  void set_allocated_posstateid(::std::string* posstateid);

  // optional bytes orderstateid = 40;
  bool has_orderstateid() const;
  void clear_orderstateid();
  static const int kOrderstateidFieldNumber = 40;
  const ::std::string& orderstateid() const;
  void set_orderstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_orderstateid(::std::string&& value);
  #endif
  void set_orderstateid(const char* value);
  void set_orderstateid(const void* value, size_t size);
  ::std::string* mutable_orderstateid();
  ::std::string* release_orderstateid();
  void set_allocated_orderstateid(::std::string* orderstateid);

  // optional bytes marketstateid = 50;
  bool has_marketstateid() const;
  void clear_marketstateid();
  static const int kMarketstateidFieldNumber = 50;
  const ::std::string& marketstateid() const;
  void set_marketstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_marketstateid(::std::string&& value);
  #endif
  void set_marketstateid(const char* value);
  void set_marketstateid(const void* value, size_t size);
  ::std::string* mutable_marketstateid();
  ::std::string* release_marketstateid();
  void set_allocated_marketstateid(::std::string* marketstateid);

  // optional bytes globalstateid = 60;
  bool has_globalstateid() const;
  void clear_globalstateid();
  static const int kGlobalstateidFieldNumber = 60;
  const ::std::string& globalstateid() const;
  void set_globalstateid(const ::std::string& value);
  #if LANG_CXX11
  void set_globalstateid(::std::string&& value);
  #endif
  void set_globalstateid(const char* value);
  void set_globalstateid(const void* value, size_t size);
  ::std::string* mutable_globalstateid();
  ::std::string* release_globalstateid();
  void set_allocated_globalstateid(::std::string* globalstateid);

  // optional bytes teamstatemid = 70;
  bool has_teamstatemid() const;
  void clear_teamstatemid();
  static const int kTeamstatemidFieldNumber = 70;
  const ::std::string& teamstatemid() const;
  void set_teamstatemid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamstatemid(::std::string&& value);
  #endif
  void set_teamstatemid(const char* value);
  void set_teamstatemid(const void* value, size_t size);
  ::std::string* mutable_teamstatemid();
  ::std::string* release_teamstatemid();
  void set_allocated_teamstatemid(::std::string* teamstatemid);

  // optional bytes fantasynamestateid = 80;
  bool has_fantasynamestateid() const;
  void clear_fantasynamestateid();
  static const int kFantasynamestateidFieldNumber = 80;
  const ::std::string& fantasynamestateid() const;
  void set_fantasynamestateid(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasynamestateid(::std::string&& value);
  #endif
  void set_fantasynamestateid(const char* value);
  void set_fantasynamestateid(const void* value, size_t size);
  ::std::string* mutable_fantasynamestateid();
  ::std::string* release_fantasynamestateid();
  void set_allocated_fantasynamestateid(::std::string* fantasynamestateid);

  // @@protoc_insertion_point(class_scope:fantasybit.pbstate)
 private:
  void set_has_schedulestateid();
  void clear_has_schedulestateid();
  void set_has_leaderboardstateid();
  void clear_has_leaderboardstateid();
  void set_has_projstateid();
  void clear_has_projstateid();
  void set_has_posstateid();
  void clear_has_posstateid();
  void set_has_orderstateid();
  void clear_has_orderstateid();
  void set_has_marketstateid();
  void clear_has_marketstateid();
  void set_has_globalstateid();
  void clear_has_globalstateid();
  void set_has_teamstatemid();
  void clear_has_teamstatemid();
  void set_has_fantasynamestateid();
  void clear_has_fantasynamestateid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr schedulestateid_;
  ::google::protobuf::internal::ArenaStringPtr leaderboardstateid_;
  ::google::protobuf::internal::ArenaStringPtr projstateid_;
  ::google::protobuf::internal::ArenaStringPtr posstateid_;
  ::google::protobuf::internal::ArenaStringPtr orderstateid_;
  ::google::protobuf::internal::ArenaStringPtr marketstateid_;
  ::google::protobuf::internal::ArenaStringPtr globalstateid_;
  ::google::protobuf::internal::ArenaStringPtr teamstatemid_;
  ::google::protobuf::internal::ArenaStringPtr fantasynamestateid_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultspbstateImpl();
};
// -------------------------------------------------------------------

class MerkleTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.MerkleTree) */ {
 public:
  MerkleTree();
  virtual ~MerkleTree();

  MerkleTree(const MerkleTree& from);

  inline MerkleTree& operator=(const MerkleTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MerkleTree(MerkleTree&& from) noexcept
    : MerkleTree() {
    *this = ::std::move(from);
  }

  inline MerkleTree& operator=(MerkleTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MerkleTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MerkleTree* internal_default_instance() {
    return reinterpret_cast<const MerkleTree*>(
               &_MerkleTree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(MerkleTree* other);
  friend void swap(MerkleTree& a, MerkleTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MerkleTree* New() const PROTOBUF_FINAL { return New(NULL); }

  MerkleTree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MerkleTree& from);
  void MergeFrom(const MerkleTree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MerkleTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes leaves = 20;
  int leaves_size() const;
  void clear_leaves();
  static const int kLeavesFieldNumber = 20;
  const ::std::string& leaves(int index) const;
  ::std::string* mutable_leaves(int index);
  void set_leaves(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_leaves(int index, ::std::string&& value);
  #endif
  void set_leaves(int index, const char* value);
  void set_leaves(int index, const void* value, size_t size);
  ::std::string* add_leaves();
  void add_leaves(const ::std::string& value);
  #if LANG_CXX11
  void add_leaves(::std::string&& value);
  #endif
  void add_leaves(const char* value);
  void add_leaves(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& leaves() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_leaves();

  // optional bytes root = 10;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 10;
  const ::std::string& root() const;
  void set_root(const ::std::string& value);
  #if LANG_CXX11
  void set_root(::std::string&& value);
  #endif
  void set_root(const char* value);
  void set_root(const void* value, size_t size);
  ::std::string* mutable_root();
  ::std::string* release_root();
  void set_allocated_root(::std::string* root);

  // @@protoc_insertion_point(class_scope:fantasybit.MerkleTree)
 private:
  void set_has_root();
  void clear_has_root();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> leaves_;
  ::google::protobuf::internal::ArenaStringPtr root_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsMerkleTreeImpl();
};
// -------------------------------------------------------------------

class NewPlayerModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NewPlayerModel) */ {
 public:
  NewPlayerModel();
  virtual ~NewPlayerModel();

  NewPlayerModel(const NewPlayerModel& from);

  inline NewPlayerModel& operator=(const NewPlayerModel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewPlayerModel(NewPlayerModel&& from) noexcept
    : NewPlayerModel() {
    *this = ::std::move(from);
  }

  inline NewPlayerModel& operator=(NewPlayerModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewPlayerModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewPlayerModel* internal_default_instance() {
    return reinterpret_cast<const NewPlayerModel*>(
               &_NewPlayerModel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(NewPlayerModel* other);
  friend void swap(NewPlayerModel& a, NewPlayerModel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewPlayerModel* New() const PROTOBUF_FINAL { return New(NULL); }

  NewPlayerModel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewPlayerModel& from);
  void MergeFrom(const NewPlayerModel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewPlayerModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.PlayerMeta players = 10;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 10;
  const ::fantasybit::PlayerMeta& players(int index) const;
  ::fantasybit::PlayerMeta* mutable_players(int index);
  ::fantasybit::PlayerMeta* add_players();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerMeta >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerMeta >&
      players() const;

  // @@protoc_insertion_point(class_scope:fantasybit.NewPlayerModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerMeta > players_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsNewPlayerModelImpl();
};
// -------------------------------------------------------------------

class WsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.WsReq) */ {
 public:
  WsReq();
  virtual ~WsReq();

  WsReq(const WsReq& from);

  inline WsReq& operator=(const WsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WsReq(WsReq&& from) noexcept
    : WsReq() {
    *this = ::std::move(from);
  }

  inline WsReq& operator=(WsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WsReq* internal_default_instance() {
    return reinterpret_cast<const WsReq*>(
               &_WsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(WsReq* other);
  friend void swap(WsReq& a, WsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  WsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WsReq& from);
  void MergeFrom(const WsReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.CType ctype = 2;
  bool has_ctype() const;
  void clear_ctype();
  static const int kCtypeFieldNumber = 2;
  ::fantasybit::CType ctype() const;
  void set_ctype(::fantasybit::CType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(WsReq)
  // @@protoc_insertion_point(class_scope:fantasybit.WsReq)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_ctype();
  void clear_has_ctype();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  int ctype_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsWsReqImpl();
};
// -------------------------------------------------------------------

class WSReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.WSReply) */ {
 public:
  WSReply();
  virtual ~WSReply();

  WSReply(const WSReply& from);

  inline WSReply& operator=(const WSReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WSReply(WSReply&& from) noexcept
    : WSReply() {
    *this = ::std::move(from);
  }

  inline WSReply& operator=(WSReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WSReply* internal_default_instance() {
    return reinterpret_cast<const WSReply*>(
               &_WSReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(WSReply* other);
  friend void swap(WSReply& a, WSReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WSReply* New() const PROTOBUF_FINAL { return New(NULL); }

  WSReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WSReply& from);
  void MergeFrom(const WSReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WSReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string data = 30;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 30;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .fantasybit.WsReq req = 20;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 20;
  const ::fantasybit::WsReq& req() const;
  ::fantasybit::WsReq* release_req();
  ::fantasybit::WsReq* mutable_req();
  void set_allocated_req(::fantasybit::WsReq* req);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.CType ctype = 2;
  bool has_ctype() const;
  void clear_ctype();
  static const int kCtypeFieldNumber = 2;
  ::fantasybit::CType ctype() const;
  void set_ctype(::fantasybit::CType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(WSReply)
  // @@protoc_insertion_point(class_scope:fantasybit.WSReply)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_ctype();
  void clear_has_ctype();
  void set_has_req();
  void clear_has_req();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::fantasybit::WsReq* req_;
  ::google::protobuf::int32 version_;
  int ctype_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsWSReplyImpl();
};
// -------------------------------------------------------------------

class GetGlobalStateRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetGlobalStateRep) */ {
 public:
  GetGlobalStateRep();
  virtual ~GetGlobalStateRep();

  GetGlobalStateRep(const GetGlobalStateRep& from);

  inline GetGlobalStateRep& operator=(const GetGlobalStateRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGlobalStateRep(GetGlobalStateRep&& from) noexcept
    : GetGlobalStateRep() {
    *this = ::std::move(from);
  }

  inline GetGlobalStateRep& operator=(GetGlobalStateRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGlobalStateRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGlobalStateRep* internal_default_instance() {
    return reinterpret_cast<const GetGlobalStateRep*>(
               &_GetGlobalStateRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(GetGlobalStateRep* other);
  friend void swap(GetGlobalStateRep& a, GetGlobalStateRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGlobalStateRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGlobalStateRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGlobalStateRep& from);
  void MergeFrom(const GetGlobalStateRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGlobalStateRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.GlobalState globalstate = 10;
  bool has_globalstate() const;
  void clear_globalstate();
  static const int kGlobalstateFieldNumber = 10;
  const ::fantasybit::GlobalState& globalstate() const;
  ::fantasybit::GlobalState* release_globalstate();
  ::fantasybit::GlobalState* mutable_globalstate();
  void set_allocated_globalstate(::fantasybit::GlobalState* globalstate);

  static const int kRepFieldNumber = 900;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetGlobalStateRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetGlobalStateRep)
 private:
  void set_has_globalstate();
  void clear_has_globalstate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::GlobalState* globalstate_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetGlobalStateRepImpl();
};
// -------------------------------------------------------------------

class GetScheduleRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetScheduleRep) */ {
 public:
  GetScheduleRep();
  virtual ~GetScheduleRep();

  GetScheduleRep(const GetScheduleRep& from);

  inline GetScheduleRep& operator=(const GetScheduleRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetScheduleRep(GetScheduleRep&& from) noexcept
    : GetScheduleRep() {
    *this = ::std::move(from);
  }

  inline GetScheduleRep& operator=(GetScheduleRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetScheduleRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScheduleRep* internal_default_instance() {
    return reinterpret_cast<const GetScheduleRep*>(
               &_GetScheduleRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(GetScheduleRep* other);
  friend void swap(GetScheduleRep& a, GetScheduleRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetScheduleRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetScheduleRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetScheduleRep& from);
  void MergeFrom(const GetScheduleRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetScheduleRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.ScheduleData scheduledata = 10;
  bool has_scheduledata() const;
  void clear_scheduledata();
  static const int kScheduledataFieldNumber = 10;
  const ::fantasybit::ScheduleData& scheduledata() const;
  ::fantasybit::ScheduleData* release_scheduledata();
  ::fantasybit::ScheduleData* mutable_scheduledata();
  void set_allocated_scheduledata(::fantasybit::ScheduleData* scheduledata);

  static const int kRepFieldNumber = 910;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetScheduleRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetScheduleRep)
 private:
  void set_has_scheduledata();
  void clear_has_scheduledata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::ScheduleData* scheduledata_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetScheduleRepImpl();
};
// -------------------------------------------------------------------

class CheckNameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.CheckNameReq) */ {
 public:
  CheckNameReq();
  virtual ~CheckNameReq();

  CheckNameReq(const CheckNameReq& from);

  inline CheckNameReq& operator=(const CheckNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckNameReq(CheckNameReq&& from) noexcept
    : CheckNameReq() {
    *this = ::std::move(from);
  }

  inline CheckNameReq& operator=(CheckNameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckNameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckNameReq* internal_default_instance() {
    return reinterpret_cast<const CheckNameReq*>(
               &_CheckNameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(CheckNameReq* other);
  friend void swap(CheckNameReq& a, CheckNameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckNameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckNameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckNameReq& from);
  void MergeFrom(const CheckNameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckNameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fantasy_name = 10;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 10;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fantasy_name(::std::string&& value);
  #endif
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  static const int kReqFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::CheckNameReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.CheckNameReq)
 private:
  void set_has_fantasy_name();
  void clear_has_fantasy_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsCheckNameReqImpl();
};
// -------------------------------------------------------------------

class CheckNameRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.CheckNameRep) */ {
 public:
  CheckNameRep();
  virtual ~CheckNameRep();

  CheckNameRep(const CheckNameRep& from);

  inline CheckNameRep& operator=(const CheckNameRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckNameRep(CheckNameRep&& from) noexcept
    : CheckNameRep() {
    *this = ::std::move(from);
  }

  inline CheckNameRep& operator=(CheckNameRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckNameRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckNameRep* internal_default_instance() {
    return reinterpret_cast<const CheckNameRep*>(
               &_CheckNameRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(CheckNameRep* other);
  friend void swap(CheckNameRep& a, CheckNameRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckNameRep* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckNameRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckNameRep& from);
  void MergeFrom(const CheckNameRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckNameRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string isavail = 10;
  bool has_isavail() const;
  void clear_isavail();
  static const int kIsavailFieldNumber = 10;
  const ::std::string& isavail() const;
  void set_isavail(const ::std::string& value);
  #if LANG_CXX11
  void set_isavail(::std::string&& value);
  #endif
  void set_isavail(const char* value);
  void set_isavail(const char* value, size_t size);
  ::std::string* mutable_isavail();
  ::std::string* release_isavail();
  void set_allocated_isavail(::std::string* isavail);

  // optional .fantasybit.CheckNameReq req = 20;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 20;
  const ::fantasybit::CheckNameReq& req() const;
  ::fantasybit::CheckNameReq* release_req();
  ::fantasybit::CheckNameReq* mutable_req();
  void set_allocated_req(::fantasybit::CheckNameReq* req);

  static const int kRepFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::CheckNameRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.CheckNameRep)
 private:
  void set_has_isavail();
  void clear_has_isavail();
  void set_has_req();
  void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr isavail_;
  ::fantasybit::CheckNameReq* req_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsCheckNameRepImpl();
};
// -------------------------------------------------------------------

class Pk2FnameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Pk2FnameReq) */ {
 public:
  Pk2FnameReq();
  virtual ~Pk2FnameReq();

  Pk2FnameReq(const Pk2FnameReq& from);

  inline Pk2FnameReq& operator=(const Pk2FnameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pk2FnameReq(Pk2FnameReq&& from) noexcept
    : Pk2FnameReq() {
    *this = ::std::move(from);
  }

  inline Pk2FnameReq& operator=(Pk2FnameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pk2FnameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pk2FnameReq* internal_default_instance() {
    return reinterpret_cast<const Pk2FnameReq*>(
               &_Pk2FnameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(Pk2FnameReq* other);
  friend void swap(Pk2FnameReq& a, Pk2FnameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pk2FnameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  Pk2FnameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pk2FnameReq& from);
  void MergeFrom(const Pk2FnameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pk2FnameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pk = 10;
  bool has_pk() const;
  void clear_pk();
  static const int kPkFieldNumber = 10;
  const ::std::string& pk() const;
  void set_pk(const ::std::string& value);
  #if LANG_CXX11
  void set_pk(::std::string&& value);
  #endif
  void set_pk(const char* value);
  void set_pk(const char* value, size_t size);
  ::std::string* mutable_pk();
  ::std::string* release_pk();
  void set_allocated_pk(::std::string* pk);

  static const int kReqFieldNumber = 300;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::Pk2FnameReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.Pk2FnameReq)
 private:
  void set_has_pk();
  void clear_has_pk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pk_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPk2FnameReqImpl();
};
// -------------------------------------------------------------------

class Pk2FnameRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Pk2FnameRep) */ {
 public:
  Pk2FnameRep();
  virtual ~Pk2FnameRep();

  Pk2FnameRep(const Pk2FnameRep& from);

  inline Pk2FnameRep& operator=(const Pk2FnameRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pk2FnameRep(Pk2FnameRep&& from) noexcept
    : Pk2FnameRep() {
    *this = ::std::move(from);
  }

  inline Pk2FnameRep& operator=(Pk2FnameRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pk2FnameRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pk2FnameRep* internal_default_instance() {
    return reinterpret_cast<const Pk2FnameRep*>(
               &_Pk2FnameRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(Pk2FnameRep* other);
  friend void swap(Pk2FnameRep& a, Pk2FnameRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pk2FnameRep* New() const PROTOBUF_FINAL { return New(NULL); }

  Pk2FnameRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pk2FnameRep& from);
  void MergeFrom(const Pk2FnameRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pk2FnameRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fname = 10;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 10;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // optional .fantasybit.Pk2FnameReq req = 20;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 20;
  const ::fantasybit::Pk2FnameReq& req() const;
  ::fantasybit::Pk2FnameReq* release_req();
  ::fantasybit::Pk2FnameReq* mutable_req();
  void set_allocated_req(::fantasybit::Pk2FnameReq* req);

  // optional .fantasybit.FantasyNameBal fnb = 30;
  bool has_fnb() const;
  void clear_fnb();
  static const int kFnbFieldNumber = 30;
  const ::fantasybit::FantasyNameBal& fnb() const;
  ::fantasybit::FantasyNameBal* release_fnb();
  ::fantasybit::FantasyNameBal* mutable_fnb();
  void set_allocated_fnb(::fantasybit::FantasyNameBal* fnb);

  static const int kRepFieldNumber = 300;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::Pk2FnameRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.Pk2FnameRep)
 private:
  void set_has_fname();
  void clear_has_fname();
  void set_has_req();
  void clear_has_req();
  void set_has_fnb();
  void clear_has_fnb();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::fantasybit::Pk2FnameReq* req_;
  ::fantasybit::FantasyNameBal* fnb_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPk2FnameRepImpl();
};
// -------------------------------------------------------------------

class SubscribeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.SubscribeReq) */ {
 public:
  SubscribeReq();
  virtual ~SubscribeReq();

  SubscribeReq(const SubscribeReq& from);

  inline SubscribeReq& operator=(const SubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeReq(SubscribeReq&& from) noexcept
    : SubscribeReq() {
    *this = ::std::move(from);
  }

  inline SubscribeReq& operator=(SubscribeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeReq*>(
               &_SubscribeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(SubscribeReq* other);
  friend void swap(SubscribeReq& a, SubscribeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribeReq& from);
  void MergeFrom(const SubscribeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 fchash = 30;
  bool has_fchash() const;
  void clear_fchash();
  static const int kFchashFieldNumber = 30;
  ::google::protobuf::uint64 fchash() const;
  void set_fchash(::google::protobuf::uint64 value);

  static const int kReqFieldNumber = 350;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::SubscribeReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.SubscribeReq)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_fchash();
  void clear_has_fchash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 fchash_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsSubscribeReqImpl();
};
// -------------------------------------------------------------------

class NameStatusReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NameStatusReq) */ {
 public:
  NameStatusReq();
  virtual ~NameStatusReq();

  NameStatusReq(const NameStatusReq& from);

  inline NameStatusReq& operator=(const NameStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameStatusReq(NameStatusReq&& from) noexcept
    : NameStatusReq() {
    *this = ::std::move(from);
  }

  inline NameStatusReq& operator=(NameStatusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameStatusReq* internal_default_instance() {
    return reinterpret_cast<const NameStatusReq*>(
               &_NameStatusReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(NameStatusReq* other);
  friend void swap(NameStatusReq& a, NameStatusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameStatusReq* New() const PROTOBUF_FINAL { return New(NULL); }

  NameStatusReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NameStatusReq& from);
  void MergeFrom(const NameStatusReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NameStatusReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string pk = 20;
  bool has_pk() const;
  void clear_pk();
  static const int kPkFieldNumber = 20;
  const ::std::string& pk() const;
  void set_pk(const ::std::string& value);
  #if LANG_CXX11
  void set_pk(::std::string&& value);
  #endif
  void set_pk(const char* value);
  void set_pk(const char* value, size_t size);
  ::std::string* mutable_pk();
  ::std::string* release_pk();
  void set_allocated_pk(::std::string* pk);

  static const int kReqFieldNumber = 400;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameStatusReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.NameStatusReq)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pk();
  void clear_has_pk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pk_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsNameStatusReqImpl();
};
// -------------------------------------------------------------------

class NameStatusRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.NameStatusRep) */ {
 public:
  NameStatusRep();
  virtual ~NameStatusRep();

  NameStatusRep(const NameStatusRep& from);

  inline NameStatusRep& operator=(const NameStatusRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameStatusRep(NameStatusRep&& from) noexcept
    : NameStatusRep() {
    *this = ::std::move(from);
  }

  inline NameStatusRep& operator=(NameStatusRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameStatusRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameStatusRep* internal_default_instance() {
    return reinterpret_cast<const NameStatusRep*>(
               &_NameStatusRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(NameStatusRep* other);
  friend void swap(NameStatusRep& a, NameStatusRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameStatusRep* New() const PROTOBUF_FINAL { return New(NULL); }

  NameStatusRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NameStatusRep& from);
  void MergeFrom(const NameStatusRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NameStatusRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.NameStatusReq req = 20;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 20;
  const ::fantasybit::NameStatusReq& req() const;
  ::fantasybit::NameStatusReq* release_req();
  ::fantasybit::NameStatusReq* mutable_req();
  void set_allocated_req(::fantasybit::NameStatusReq* req);

  // optional .fantasybit.MyNameStatus status = 10;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  ::fantasybit::MyNameStatus status() const;
  void set_status(::fantasybit::MyNameStatus value);

  static const int kRepFieldNumber = 400;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameStatusRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.NameStatusRep)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_req();
  void clear_has_req();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::NameStatusReq* req_;
  int status_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsNameStatusRepImpl();
};
// -------------------------------------------------------------------

class GetAllNamesRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetAllNamesRep) */ {
 public:
  GetAllNamesRep();
  virtual ~GetAllNamesRep();

  GetAllNamesRep(const GetAllNamesRep& from);

  inline GetAllNamesRep& operator=(const GetAllNamesRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllNamesRep(GetAllNamesRep&& from) noexcept
    : GetAllNamesRep() {
    *this = ::std::move(from);
  }

  inline GetAllNamesRep& operator=(GetAllNamesRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllNamesRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllNamesRep* internal_default_instance() {
    return reinterpret_cast<const GetAllNamesRep*>(
               &_GetAllNamesRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(GetAllNamesRep* other);
  friend void swap(GetAllNamesRep& a, GetAllNamesRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllNamesRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetAllNamesRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetAllNamesRep& from);
  void MergeFrom(const GetAllNamesRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetAllNamesRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 10;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 10;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_names(int index, ::std::string&& value);
  #endif
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  #if LANG_CXX11
  void add_names(::std::string&& value);
  #endif
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated .fantasybit.FantasyNameBal fnb = 20;
  int fnb_size() const;
  void clear_fnb();
  static const int kFnbFieldNumber = 20;
  const ::fantasybit::FantasyNameBal& fnb(int index) const;
  ::fantasybit::FantasyNameBal* mutable_fnb(int index);
  ::fantasybit::FantasyNameBal* add_fnb();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyNameBal >*
      mutable_fnb();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyNameBal >&
      fnb() const;

  static const int kRepFieldNumber = 500;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetAllNamesRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetAllNamesRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyNameBal > fnb_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetAllNamesRepImpl();
};
// -------------------------------------------------------------------

class TeamRoster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.TeamRoster) */ {
 public:
  TeamRoster();
  virtual ~TeamRoster();

  TeamRoster(const TeamRoster& from);

  inline TeamRoster& operator=(const TeamRoster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamRoster(TeamRoster&& from) noexcept
    : TeamRoster() {
    *this = ::std::move(from);
  }

  inline TeamRoster& operator=(TeamRoster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamRoster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamRoster* internal_default_instance() {
    return reinterpret_cast<const TeamRoster*>(
               &_TeamRoster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(TeamRoster* other);
  friend void swap(TeamRoster& a, TeamRoster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamRoster* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamRoster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamRoster& from);
  void MergeFrom(const TeamRoster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamRoster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.PlayerData players = 20;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 20;
  const ::fantasybit::PlayerData& players(int index) const;
  ::fantasybit::PlayerData* mutable_players(int index);
  ::fantasybit::PlayerData* add_players();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerData >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerData >&
      players() const;

  // optional string teamid = 10;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 10;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamid(::std::string&& value);
  #endif
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // @@protoc_insertion_point(class_scope:fantasybit.TeamRoster)
 private:
  void set_has_teamid();
  void clear_has_teamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerData > players_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsTeamRosterImpl();
};
// -------------------------------------------------------------------

class GameDataRoster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GameDataRoster) */ {
 public:
  GameDataRoster();
  virtual ~GameDataRoster();

  GameDataRoster(const GameDataRoster& from);

  inline GameDataRoster& operator=(const GameDataRoster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameDataRoster(GameDataRoster&& from) noexcept
    : GameDataRoster() {
    *this = ::std::move(from);
  }

  inline GameDataRoster& operator=(GameDataRoster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameDataRoster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameDataRoster* internal_default_instance() {
    return reinterpret_cast<const GameDataRoster*>(
               &_GameDataRoster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(GameDataRoster* other);
  friend void swap(GameDataRoster& a, GameDataRoster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameDataRoster* New() const PROTOBUF_FINAL { return New(NULL); }

  GameDataRoster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameDataRoster& from);
  void MergeFrom(const GameDataRoster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameDataRoster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.GameData game_data = 10;
  bool has_game_data() const;
  void clear_game_data();
  static const int kGameDataFieldNumber = 10;
  const ::fantasybit::GameData& game_data() const;
  ::fantasybit::GameData* release_game_data();
  ::fantasybit::GameData* mutable_game_data();
  void set_allocated_game_data(::fantasybit::GameData* game_data);

  // optional .fantasybit.TeamRoster homeroster = 20;
  bool has_homeroster() const;
  void clear_homeroster();
  static const int kHomerosterFieldNumber = 20;
  const ::fantasybit::TeamRoster& homeroster() const;
  ::fantasybit::TeamRoster* release_homeroster();
  ::fantasybit::TeamRoster* mutable_homeroster();
  void set_allocated_homeroster(::fantasybit::TeamRoster* homeroster);

  // optional .fantasybit.TeamRoster awayroster = 30;
  bool has_awayroster() const;
  void clear_awayroster();
  static const int kAwayrosterFieldNumber = 30;
  const ::fantasybit::TeamRoster& awayroster() const;
  ::fantasybit::TeamRoster* release_awayroster();
  ::fantasybit::TeamRoster* mutable_awayroster();
  void set_allocated_awayroster(::fantasybit::TeamRoster* awayroster);

  // @@protoc_insertion_point(class_scope:fantasybit.GameDataRoster)
 private:
  void set_has_game_data();
  void clear_has_game_data();
  void set_has_homeroster();
  void clear_has_homeroster();
  void set_has_awayroster();
  void clear_has_awayroster();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::GameData* game_data_;
  ::fantasybit::TeamRoster* homeroster_;
  ::fantasybit::TeamRoster* awayroster_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGameDataRosterImpl();
};
// -------------------------------------------------------------------

class GetCurrRostersRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetCurrRostersRep) */ {
 public:
  GetCurrRostersRep();
  virtual ~GetCurrRostersRep();

  GetCurrRostersRep(const GetCurrRostersRep& from);

  inline GetCurrRostersRep& operator=(const GetCurrRostersRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCurrRostersRep(GetCurrRostersRep&& from) noexcept
    : GetCurrRostersRep() {
    *this = ::std::move(from);
  }

  inline GetCurrRostersRep& operator=(GetCurrRostersRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCurrRostersRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCurrRostersRep* internal_default_instance() {
    return reinterpret_cast<const GetCurrRostersRep*>(
               &_GetCurrRostersRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(GetCurrRostersRep* other);
  friend void swap(GetCurrRostersRep& a, GetCurrRostersRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCurrRostersRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCurrRostersRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCurrRostersRep& from);
  void MergeFrom(const GetCurrRostersRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCurrRostersRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.GameDataRoster gamerosters = 20;
  int gamerosters_size() const;
  void clear_gamerosters();
  static const int kGamerostersFieldNumber = 20;
  const ::fantasybit::GameDataRoster& gamerosters(int index) const;
  ::fantasybit::GameDataRoster* mutable_gamerosters(int index);
  ::fantasybit::GameDataRoster* add_gamerosters();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameDataRoster >*
      mutable_gamerosters();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameDataRoster >&
      gamerosters() const;

  // optional int32 week = 10;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 10;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  static const int kRepFieldNumber = 920;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetCurrRostersRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetCurrRostersRep)
 private:
  void set_has_week();
  void clear_has_week();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameDataRoster > gamerosters_;
  ::google::protobuf::int32 week_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetCurrRostersRepImpl();
};
// -------------------------------------------------------------------

class ROWMarket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ROWMarket) */ {
 public:
  ROWMarket();
  virtual ~ROWMarket();

  ROWMarket(const ROWMarket& from);

  inline ROWMarket& operator=(const ROWMarket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ROWMarket(ROWMarket&& from) noexcept
    : ROWMarket() {
    *this = ::std::move(from);
  }

  inline ROWMarket& operator=(ROWMarket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROWMarket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROWMarket* internal_default_instance() {
    return reinterpret_cast<const ROWMarket*>(
               &_ROWMarket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(ROWMarket* other);
  friend void swap(ROWMarket& a, ROWMarket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ROWMarket* New() const PROTOBUF_FINAL { return New(NULL); }

  ROWMarket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ROWMarket& from);
  void MergeFrom(const ROWMarket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ROWMarket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pid = 10;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 10;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // optional .fantasybit.MarketQuote quote = 30;
  bool has_quote() const;
  void clear_quote();
  static const int kQuoteFieldNumber = 30;
  const ::fantasybit::MarketQuote& quote() const;
  ::fantasybit::MarketQuote* release_quote();
  ::fantasybit::MarketQuote* mutable_quote();
  void set_allocated_quote(::fantasybit::MarketQuote* quote);

  // optional .fantasybit.PlayerData playerdata = 40;
  bool has_playerdata() const;
  void clear_playerdata();
  static const int kPlayerdataFieldNumber = 40;
  const ::fantasybit::PlayerData& playerdata() const;
  ::fantasybit::PlayerData* release_playerdata();
  ::fantasybit::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::fantasybit::PlayerData* playerdata);

  // optional .fantasybit.ContractOHLC ohlc = 50;
  bool has_ohlc() const;
  void clear_ohlc();
  static const int kOhlcFieldNumber = 50;
  const ::fantasybit::ContractOHLC& ohlc() const;
  ::fantasybit::ContractOHLC* release_ohlc();
  ::fantasybit::ContractOHLC* mutable_ohlc();
  void set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc);

  // @@protoc_insertion_point(class_scope:fantasybit.ROWMarket)
 private:
  void set_has_pid();
  void clear_has_pid();
  void set_has_quote();
  void clear_has_quote();
  void set_has_playerdata();
  void clear_has_playerdata();
  void set_has_ohlc();
  void clear_has_ohlc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::fantasybit::MarketQuote* quote_;
  ::fantasybit::PlayerData* playerdata_;
  ::fantasybit::ContractOHLC* ohlc_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsROWMarketImpl();
};
// -------------------------------------------------------------------

class GetROWMarketRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetROWMarketRep) */ {
 public:
  GetROWMarketRep();
  virtual ~GetROWMarketRep();

  GetROWMarketRep(const GetROWMarketRep& from);

  inline GetROWMarketRep& operator=(const GetROWMarketRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetROWMarketRep(GetROWMarketRep&& from) noexcept
    : GetROWMarketRep() {
    *this = ::std::move(from);
  }

  inline GetROWMarketRep& operator=(GetROWMarketRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetROWMarketRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetROWMarketRep* internal_default_instance() {
    return reinterpret_cast<const GetROWMarketRep*>(
               &_GetROWMarketRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(GetROWMarketRep* other);
  friend void swap(GetROWMarketRep& a, GetROWMarketRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetROWMarketRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetROWMarketRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetROWMarketRep& from);
  void MergeFrom(const GetROWMarketRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetROWMarketRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.ROWMarket rowmarket = 10;
  int rowmarket_size() const;
  void clear_rowmarket();
  static const int kRowmarketFieldNumber = 10;
  const ::fantasybit::ROWMarket& rowmarket(int index) const;
  ::fantasybit::ROWMarket* mutable_rowmarket(int index);
  ::fantasybit::ROWMarket* add_rowmarket();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::ROWMarket >*
      mutable_rowmarket();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::ROWMarket >&
      rowmarket() const;

  static const int kRepFieldNumber = 600;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetROWMarketRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetROWMarketRep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::ROWMarket > rowmarket_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetROWMarketRepImpl();
};
// -------------------------------------------------------------------

class GetDepthReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetDepthReq) */ {
 public:
  GetDepthReq();
  virtual ~GetDepthReq();

  GetDepthReq(const GetDepthReq& from);

  inline GetDepthReq& operator=(const GetDepthReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDepthReq(GetDepthReq&& from) noexcept
    : GetDepthReq() {
    *this = ::std::move(from);
  }

  inline GetDepthReq& operator=(GetDepthReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDepthReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDepthReq* internal_default_instance() {
    return reinterpret_cast<const GetDepthReq*>(
               &_GetDepthReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(GetDepthReq* other);
  friend void swap(GetDepthReq& a, GetDepthReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDepthReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDepthReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDepthReq& from);
  void MergeFrom(const GetDepthReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDepthReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pid = 10;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 10;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  static const int kReqFieldNumber = 700;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetDepthReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.GetDepthReq)
 private:
  void set_has_pid();
  void clear_has_pid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetDepthReqImpl();
};
// -------------------------------------------------------------------

class GetDepthRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetDepthRep) */ {
 public:
  GetDepthRep();
  virtual ~GetDepthRep();

  GetDepthRep(const GetDepthRep& from);

  inline GetDepthRep& operator=(const GetDepthRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDepthRep(GetDepthRep&& from) noexcept
    : GetDepthRep() {
    *this = ::std::move(from);
  }

  inline GetDepthRep& operator=(GetDepthRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDepthRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDepthRep* internal_default_instance() {
    return reinterpret_cast<const GetDepthRep*>(
               &_GetDepthRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(GetDepthRep* other);
  friend void swap(GetDepthRep& a, GetDepthRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDepthRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDepthRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDepthRep& from);
  void MergeFrom(const GetDepthRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDepthRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.DepthItem depthitems = 20;
  int depthitems_size() const;
  void clear_depthitems();
  static const int kDepthitemsFieldNumber = 20;
  const ::fantasybit::DepthItem& depthitems(int index) const;
  ::fantasybit::DepthItem* mutable_depthitems(int index);
  ::fantasybit::DepthItem* add_depthitems();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::DepthItem >*
      mutable_depthitems();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::DepthItem >&
      depthitems() const;

  // optional string pid = 10;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 10;
  const ::std::string& pid() const;
  void set_pid(const ::std::string& value);
  #if LANG_CXX11
  void set_pid(::std::string&& value);
  #endif
  void set_pid(const char* value);
  void set_pid(const char* value, size_t size);
  ::std::string* mutable_pid();
  ::std::string* release_pid();
  void set_allocated_pid(::std::string* pid);

  // optional .fantasybit.ROWMarket rowmarket = 30;
  bool has_rowmarket() const;
  void clear_rowmarket();
  static const int kRowmarketFieldNumber = 30;
  const ::fantasybit::ROWMarket& rowmarket() const;
  ::fantasybit::ROWMarket* release_rowmarket();
  ::fantasybit::ROWMarket* mutable_rowmarket();
  void set_allocated_rowmarket(::fantasybit::ROWMarket* rowmarket);

  static const int kRepFieldNumber = 700;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetDepthRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetDepthRep)
 private:
  void set_has_pid();
  void clear_has_pid();
  void set_has_rowmarket();
  void clear_has_rowmarket();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::DepthItem > depthitems_;
  ::google::protobuf::internal::ArenaStringPtr pid_;
  ::fantasybit::ROWMarket* rowmarket_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetDepthRepImpl();
};
// -------------------------------------------------------------------

class AllOdersSymbol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.AllOdersSymbol) */ {
 public:
  AllOdersSymbol();
  virtual ~AllOdersSymbol();

  AllOdersSymbol(const AllOdersSymbol& from);

  inline AllOdersSymbol& operator=(const AllOdersSymbol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllOdersSymbol(AllOdersSymbol&& from) noexcept
    : AllOdersSymbol() {
    *this = ::std::move(from);
  }

  inline AllOdersSymbol& operator=(AllOdersSymbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllOdersSymbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllOdersSymbol* internal_default_instance() {
    return reinterpret_cast<const AllOdersSymbol*>(
               &_AllOdersSymbol_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(AllOdersSymbol* other);
  friend void swap(AllOdersSymbol& a, AllOdersSymbol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllOdersSymbol* New() const PROTOBUF_FINAL { return New(NULL); }

  AllOdersSymbol* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllOdersSymbol& from);
  void MergeFrom(const AllOdersSymbol& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllOdersSymbol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.Order orders = 20;
  int orders_size() const;
  void clear_orders();
  static const int kOrdersFieldNumber = 20;
  const ::fantasybit::Order& orders(int index) const;
  ::fantasybit::Order* mutable_orders(int index);
  ::fantasybit::Order* add_orders();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >*
      mutable_orders();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >&
      orders() const;

  // optional string symbol = 10;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 10;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional int32 netqty = 30;
  bool has_netqty() const;
  void clear_netqty();
  static const int kNetqtyFieldNumber = 30;
  ::google::protobuf::int32 netqty() const;
  void set_netqty(::google::protobuf::int32 value);

  // optional int32 netprice = 40;
  bool has_netprice() const;
  void clear_netprice();
  static const int kNetpriceFieldNumber = 40;
  ::google::protobuf::int32 netprice() const;
  void set_netprice(::google::protobuf::int32 value);

  // optional double avg = 50;
  bool has_avg() const;
  void clear_avg();
  static const int kAvgFieldNumber = 50;
  double avg() const;
  void set_avg(double value);

  // optional double pnl = 60;
  bool has_pnl() const;
  void clear_pnl();
  static const int kPnlFieldNumber = 60;
  double pnl() const;
  void set_pnl(double value);

  // @@protoc_insertion_point(class_scope:fantasybit.AllOdersSymbol)
 private:
  void set_has_symbol();
  void clear_has_symbol();
  void set_has_netqty();
  void clear_has_netqty();
  void set_has_netprice();
  void clear_has_netprice();
  void set_has_avg();
  void clear_has_avg();
  void set_has_pnl();
  void clear_has_pnl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Order > orders_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::int32 netqty_;
  ::google::protobuf::int32 netprice_;
  double avg_;
  double pnl_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsAllOdersSymbolImpl();
};
// -------------------------------------------------------------------

class AllOdersFname : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.AllOdersFname) */ {
 public:
  AllOdersFname();
  virtual ~AllOdersFname();

  AllOdersFname(const AllOdersFname& from);

  inline AllOdersFname& operator=(const AllOdersFname& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllOdersFname(AllOdersFname&& from) noexcept
    : AllOdersFname() {
    *this = ::std::move(from);
  }

  inline AllOdersFname& operator=(AllOdersFname&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllOdersFname& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllOdersFname* internal_default_instance() {
    return reinterpret_cast<const AllOdersFname*>(
               &_AllOdersFname_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(AllOdersFname* other);
  friend void swap(AllOdersFname& a, AllOdersFname& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllOdersFname* New() const PROTOBUF_FINAL { return New(NULL); }

  AllOdersFname* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AllOdersFname& from);
  void MergeFrom(const AllOdersFname& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AllOdersFname* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.AllOdersSymbol pidorders = 20;
  int pidorders_size() const;
  void clear_pidorders();
  static const int kPidordersFieldNumber = 20;
  const ::fantasybit::AllOdersSymbol& pidorders(int index) const;
  ::fantasybit::AllOdersSymbol* mutable_pidorders(int index);
  ::fantasybit::AllOdersSymbol* add_pidorders();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::AllOdersSymbol >*
      mutable_pidorders();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::AllOdersSymbol >&
      pidorders() const;

  // optional string fname = 10;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 10;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // @@protoc_insertion_point(class_scope:fantasybit.AllOdersFname)
 private:
  void set_has_fname();
  void clear_has_fname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::AllOdersSymbol > pidorders_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsAllOdersFnameImpl();
};
// -------------------------------------------------------------------

class GetOrdersRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetOrdersRep) */ {
 public:
  GetOrdersRep();
  virtual ~GetOrdersRep();

  GetOrdersRep(const GetOrdersRep& from);

  inline GetOrdersRep& operator=(const GetOrdersRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOrdersRep(GetOrdersRep&& from) noexcept
    : GetOrdersRep() {
    *this = ::std::move(from);
  }

  inline GetOrdersRep& operator=(GetOrdersRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOrdersRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrdersRep* internal_default_instance() {
    return reinterpret_cast<const GetOrdersRep*>(
               &_GetOrdersRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(GetOrdersRep* other);
  friend void swap(GetOrdersRep& a, GetOrdersRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOrdersRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOrdersRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOrdersRep& from);
  void MergeFrom(const GetOrdersRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOrdersRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.GetOrdersReq req = 10;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 10;
  const ::fantasybit::GetOrdersReq& req() const;
  ::fantasybit::GetOrdersReq* release_req();
  ::fantasybit::GetOrdersReq* mutable_req();
  void set_allocated_req(::fantasybit::GetOrdersReq* req);

  // optional .fantasybit.AllOdersFname oorders = 20;
  bool has_oorders() const;
  void clear_oorders();
  static const int kOordersFieldNumber = 20;
  const ::fantasybit::AllOdersFname& oorders() const;
  ::fantasybit::AllOdersFname* release_oorders();
  ::fantasybit::AllOdersFname* mutable_oorders();
  void set_allocated_oorders(::fantasybit::AllOdersFname* oorders);

  static const int kRepFieldNumber = 800;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetOrdersRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetOrdersRep)
 private:
  void set_has_req();
  void clear_has_req();
  void set_has_oorders();
  void clear_has_oorders();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::GetOrdersReq* req_;
  ::fantasybit::AllOdersFname* oorders_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetOrdersRepImpl();
};
// -------------------------------------------------------------------

class GetOrdersReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetOrdersReq) */ {
 public:
  GetOrdersReq();
  virtual ~GetOrdersReq();

  GetOrdersReq(const GetOrdersReq& from);

  inline GetOrdersReq& operator=(const GetOrdersReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOrdersReq(GetOrdersReq&& from) noexcept
    : GetOrdersReq() {
    *this = ::std::move(from);
  }

  inline GetOrdersReq& operator=(GetOrdersReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOrdersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOrdersReq* internal_default_instance() {
    return reinterpret_cast<const GetOrdersReq*>(
               &_GetOrdersReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(GetOrdersReq* other);
  friend void swap(GetOrdersReq& a, GetOrdersReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOrdersReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOrdersReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOrdersReq& from);
  void MergeFrom(const GetOrdersReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOrdersReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 10;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 10;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string fname = 20;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 20;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // optional uint64 fchash = 30;
  bool has_fchash() const;
  void clear_fchash();
  static const int kFchashFieldNumber = 30;
  ::google::protobuf::uint64 fchash() const;
  void set_fchash(::google::protobuf::uint64 value);

  static const int kReqFieldNumber = 800;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetOrdersReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.GetOrdersReq)
 private:
  void set_has_symbol();
  void clear_has_symbol();
  void set_has_fname();
  void clear_has_fname();
  void set_has_fchash();
  void clear_has_fchash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  ::google::protobuf::uint64 fchash_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetOrdersReqImpl();
};
// -------------------------------------------------------------------

class GetProjectionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetProjectionReq) */ {
 public:
  GetProjectionReq();
  virtual ~GetProjectionReq();

  GetProjectionReq(const GetProjectionReq& from);

  inline GetProjectionReq& operator=(const GetProjectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetProjectionReq(GetProjectionReq&& from) noexcept
    : GetProjectionReq() {
    *this = ::std::move(from);
  }

  inline GetProjectionReq& operator=(GetProjectionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProjectionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectionReq* internal_default_instance() {
    return reinterpret_cast<const GetProjectionReq*>(
               &_GetProjectionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(GetProjectionReq* other);
  friend void swap(GetProjectionReq& a, GetProjectionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetProjectionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetProjectionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetProjectionReq& from);
  void MergeFrom(const GetProjectionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetProjectionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fname = 20;
  bool has_fname() const;
  void clear_fname();
  static const int kFnameFieldNumber = 20;
  const ::std::string& fname() const;
  void set_fname(const ::std::string& value);
  #if LANG_CXX11
  void set_fname(::std::string&& value);
  #endif
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  ::std::string* mutable_fname();
  ::std::string* release_fname();
  void set_allocated_fname(::std::string* fname);

  // optional bool getavg = 30;
  bool has_getavg() const;
  void clear_getavg();
  static const int kGetavgFieldNumber = 30;
  bool getavg() const;
  void set_getavg(bool value);

  static const int kReqFieldNumber = 900;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WsReq,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetProjectionReq >, 11, false >
    req;
  // @@protoc_insertion_point(class_scope:fantasybit.GetProjectionReq)
 private:
  void set_has_fname();
  void clear_has_fname();
  void set_has_getavg();
  void clear_has_getavg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fname_;
  bool getavg_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetProjectionReqImpl();
};
// -------------------------------------------------------------------

class PlayerProj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.PlayerProj) */ {
 public:
  PlayerProj();
  virtual ~PlayerProj();

  PlayerProj(const PlayerProj& from);

  inline PlayerProj& operator=(const PlayerProj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerProj(PlayerProj&& from) noexcept
    : PlayerProj() {
    *this = ::std::move(from);
  }

  inline PlayerProj& operator=(PlayerProj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerProj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerProj* internal_default_instance() {
    return reinterpret_cast<const PlayerProj*>(
               &_PlayerProj_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(PlayerProj* other);
  friend void swap(PlayerProj& a, PlayerProj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerProj* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerProj* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerProj& from);
  void MergeFrom(const PlayerProj& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerProj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 10;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 10;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerProj)
 private:
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_proj();
  void clear_has_proj();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 proj_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsPlayerProjImpl();
};
// -------------------------------------------------------------------

class ProjByName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjByName) */ {
 public:
  ProjByName();
  virtual ~ProjByName();

  ProjByName(const ProjByName& from);

  inline ProjByName& operator=(const ProjByName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjByName(ProjByName&& from) noexcept
    : ProjByName() {
    *this = ::std::move(from);
  }

  inline ProjByName& operator=(ProjByName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjByName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjByName* internal_default_instance() {
    return reinterpret_cast<const ProjByName*>(
               &_ProjByName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(ProjByName* other);
  friend void swap(ProjByName& a, ProjByName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjByName* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjByName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjByName& from);
  void MergeFrom(const ProjByName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjByName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.PlayerProj playerproj = 20;
  int playerproj_size() const;
  void clear_playerproj();
  static const int kPlayerprojFieldNumber = 20;
  const ::fantasybit::PlayerProj& playerproj(int index) const;
  ::fantasybit::PlayerProj* mutable_playerproj(int index);
  ::fantasybit::PlayerProj* add_playerproj();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerProj >*
      mutable_playerproj();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerProj >&
      playerproj() const;

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 count = 40;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 40;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional int32 block = 50;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 50;
  ::google::protobuf::int32 block() const;
  void set_block(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjByName)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_count();
  void clear_has_count();
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerProj > playerproj_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 block_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsProjByNameImpl();
};
// -------------------------------------------------------------------

class GetProjectionRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.GetProjectionRep) */ {
 public:
  GetProjectionRep();
  virtual ~GetProjectionRep();

  GetProjectionRep(const GetProjectionRep& from);

  inline GetProjectionRep& operator=(const GetProjectionRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetProjectionRep(GetProjectionRep&& from) noexcept
    : GetProjectionRep() {
    *this = ::std::move(from);
  }

  inline GetProjectionRep& operator=(GetProjectionRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetProjectionRep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetProjectionRep* internal_default_instance() {
    return reinterpret_cast<const GetProjectionRep*>(
               &_GetProjectionRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(GetProjectionRep* other);
  friend void swap(GetProjectionRep& a, GetProjectionRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetProjectionRep* New() const PROTOBUF_FINAL { return New(NULL); }

  GetProjectionRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetProjectionRep& from);
  void MergeFrom(const GetProjectionRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetProjectionRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.ProjByName projs = 20;
  bool has_projs() const;
  void clear_projs();
  static const int kProjsFieldNumber = 20;
  const ::fantasybit::ProjByName& projs() const;
  ::fantasybit::ProjByName* release_projs();
  ::fantasybit::ProjByName* mutable_projs();
  void set_allocated_projs(::fantasybit::ProjByName* projs);

  // optional .fantasybit.ProjByName avg = 30;
  bool has_avg() const;
  void clear_avg();
  static const int kAvgFieldNumber = 30;
  const ::fantasybit::ProjByName& avg() const;
  ::fantasybit::ProjByName* release_avg();
  ::fantasybit::ProjByName* mutable_avg();
  void set_allocated_avg(::fantasybit::ProjByName* avg);

  static const int kRepFieldNumber = 940;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::WSReply,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GetProjectionRep >, 11, false >
    rep;
  // @@protoc_insertion_point(class_scope:fantasybit.GetProjectionRep)
 private:
  void set_has_projs();
  void clear_has_projs();
  void set_has_avg();
  void clear_has_avg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::ProjByName* projs_;
  ::fantasybit::ProjByName* avg_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsGetProjectionRepImpl();
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(KeyValue* other);
  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 10;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 10;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 20;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 20;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:fantasybit.KeyValue)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsKeyValueImpl();
};
// -------------------------------------------------------------------

class Bootstrap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Bootstrap) */ {
 public:
  Bootstrap();
  virtual ~Bootstrap();

  Bootstrap(const Bootstrap& from);

  inline Bootstrap& operator=(const Bootstrap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bootstrap(Bootstrap&& from) noexcept
    : Bootstrap() {
    *this = ::std::move(from);
  }

  inline Bootstrap& operator=(Bootstrap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bootstrap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bootstrap* internal_default_instance() {
    return reinterpret_cast<const Bootstrap*>(
               &_Bootstrap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(Bootstrap* other);
  friend void swap(Bootstrap& a, Bootstrap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bootstrap* New() const PROTOBUF_FINAL { return New(NULL); }

  Bootstrap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bootstrap& from);
  void MergeFrom(const Bootstrap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bootstrap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes gamemetaroot = 10;
  bool has_gamemetaroot() const;
  void clear_gamemetaroot();
  static const int kGamemetarootFieldNumber = 10;
  const ::std::string& gamemetaroot() const;
  void set_gamemetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_gamemetaroot(::std::string&& value);
  #endif
  void set_gamemetaroot(const char* value);
  void set_gamemetaroot(const void* value, size_t size);
  ::std::string* mutable_gamemetaroot();
  ::std::string* release_gamemetaroot();
  void set_allocated_gamemetaroot(::std::string* gamemetaroot);

  // optional bytes playermetaroot = 20;
  bool has_playermetaroot() const;
  void clear_playermetaroot();
  static const int kPlayermetarootFieldNumber = 20;
  const ::std::string& playermetaroot() const;
  void set_playermetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_playermetaroot(::std::string&& value);
  #endif
  void set_playermetaroot(const char* value);
  void set_playermetaroot(const void* value, size_t size);
  ::std::string* mutable_playermetaroot();
  ::std::string* release_playermetaroot();
  void set_allocated_playermetaroot(::std::string* playermetaroot);

  // optional bytes fnamemetaroot = 30;
  bool has_fnamemetaroot() const;
  void clear_fnamemetaroot();
  static const int kFnamemetarootFieldNumber = 30;
  const ::std::string& fnamemetaroot() const;
  void set_fnamemetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_fnamemetaroot(::std::string&& value);
  #endif
  void set_fnamemetaroot(const char* value);
  void set_fnamemetaroot(const void* value, size_t size);
  ::std::string* mutable_fnamemetaroot();
  ::std::string* release_fnamemetaroot();
  void set_allocated_fnamemetaroot(::std::string* fnamemetaroot);

  // optional bytes previd = 40;
  bool has_previd() const;
  void clear_previd();
  static const int kPrevidFieldNumber = 40;
  const ::std::string& previd() const;
  void set_previd(const ::std::string& value);
  #if LANG_CXX11
  void set_previd(::std::string&& value);
  #endif
  void set_previd(const char* value);
  void set_previd(const void* value, size_t size);
  ::std::string* mutable_previd();
  ::std::string* release_previd();
  void set_allocated_previd(::std::string* previd);

  // optional bytes gameresultroot = 50;
  bool has_gameresultroot() const;
  void clear_gameresultroot();
  static const int kGameresultrootFieldNumber = 50;
  const ::std::string& gameresultroot() const;
  void set_gameresultroot(const ::std::string& value);
  #if LANG_CXX11
  void set_gameresultroot(::std::string&& value);
  #endif
  void set_gameresultroot(const char* value);
  void set_gameresultroot(const void* value, size_t size);
  ::std::string* mutable_gameresultroot();
  ::std::string* release_gameresultroot();
  void set_allocated_gameresultroot(::std::string* gameresultroot);

  // optional bytes posmetaroot = 60;
  bool has_posmetaroot() const;
  void clear_posmetaroot();
  static const int kPosmetarootFieldNumber = 60;
  const ::std::string& posmetaroot() const;
  void set_posmetaroot(const ::std::string& value);
  #if LANG_CXX11
  void set_posmetaroot(::std::string&& value);
  #endif
  void set_posmetaroot(const char* value);
  void set_posmetaroot(const void* value, size_t size);
  ::std::string* mutable_posmetaroot();
  ::std::string* release_posmetaroot();
  void set_allocated_posmetaroot(::std::string* posmetaroot);

  // optional int32 blocknum = 2;
  bool has_blocknum() const;
  void clear_blocknum();
  static const int kBlocknumFieldNumber = 2;
  ::google::protobuf::int32 blocknum() const;
  void set_blocknum(::google::protobuf::int32 value);

  // optional int32 week = 3;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 3;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 season = 4;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 4;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.Bootstrap)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_blocknum();
  void clear_has_blocknum();
  void set_has_week();
  void clear_has_week();
  void set_has_season();
  void clear_has_season();
  void set_has_gamemetaroot();
  void clear_has_gamemetaroot();
  void set_has_playermetaroot();
  void clear_has_playermetaroot();
  void set_has_fnamemetaroot();
  void clear_has_fnamemetaroot();
  void set_has_previd();
  void clear_has_previd();
  void set_has_gameresultroot();
  void clear_has_gameresultroot();
  void set_has_posmetaroot();
  void clear_has_posmetaroot();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr gamemetaroot_;
  ::google::protobuf::internal::ArenaStringPtr playermetaroot_;
  ::google::protobuf::internal::ArenaStringPtr fnamemetaroot_;
  ::google::protobuf::internal::ArenaStringPtr previd_;
  ::google::protobuf::internal::ArenaStringPtr gameresultroot_;
  ::google::protobuf::internal::ArenaStringPtr posmetaroot_;
  ::google::protobuf::int32 blocknum_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 season_;
  friend struct ::protobuf_StateData_2eproto::TableStruct;
  friend void ::protobuf_StateData_2eproto::InitDefaultsBootstrapImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockMeta

// optional int32 blocknum = 40;
inline bool BlockMeta::has_blocknum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockMeta::set_has_blocknum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockMeta::clear_has_blocknum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockMeta::clear_blocknum() {
  blocknum_ = 0;
  clear_has_blocknum();
}
inline ::google::protobuf::int32 BlockMeta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.blocknum)
  return blocknum_;
}
inline void BlockMeta::set_blocknum(::google::protobuf::int32 value) {
  set_has_blocknum();
  blocknum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.blocknum)
}

// optional bytes trmetaid = 50;
inline bool BlockMeta::has_trmetaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockMeta::set_has_trmetaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockMeta::clear_has_trmetaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockMeta::clear_trmetaid() {
  trmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trmetaid();
}
inline const ::std::string& BlockMeta::trmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.trmetaid)
  return trmetaid_.GetNoArena();
}
inline void BlockMeta::set_trmetaid(const ::std::string& value) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.trmetaid)
}
#if LANG_CXX11
inline void BlockMeta::set_trmetaid(::std::string&& value) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.trmetaid)
}
#endif
inline void BlockMeta::set_trmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.trmetaid)
}
inline void BlockMeta::set_trmetaid(const void* value, size_t size) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.trmetaid)
}
inline ::std::string* BlockMeta::mutable_trmetaid() {
  set_has_trmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.trmetaid)
  return trmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMeta::release_trmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.trmetaid)
  clear_has_trmetaid();
  return trmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMeta::set_allocated_trmetaid(::std::string* trmetaid) {
  if (trmetaid != NULL) {
    set_has_trmetaid();
  } else {
    clear_has_trmetaid();
  }
  trmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.trmetaid)
}

// optional bytes txmetaroot = 10;
inline bool BlockMeta::has_txmetaroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMeta::set_has_txmetaroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMeta::clear_has_txmetaroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMeta::clear_txmetaroot() {
  txmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaroot();
}
inline const ::std::string& BlockMeta::txmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.txmetaroot)
  return txmetaroot_.GetNoArena();
}
inline void BlockMeta::set_txmetaroot(const ::std::string& value) {
  set_has_txmetaroot();
  txmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.txmetaroot)
}
#if LANG_CXX11
inline void BlockMeta::set_txmetaroot(::std::string&& value) {
  set_has_txmetaroot();
  txmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.txmetaroot)
}
#endif
inline void BlockMeta::set_txmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaroot();
  txmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.txmetaroot)
}
inline void BlockMeta::set_txmetaroot(const void* value, size_t size) {
  set_has_txmetaroot();
  txmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.txmetaroot)
}
inline ::std::string* BlockMeta::mutable_txmetaroot() {
  set_has_txmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.txmetaroot)
  return txmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMeta::release_txmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.txmetaroot)
  clear_has_txmetaroot();
  return txmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMeta::set_allocated_txmetaroot(::std::string* txmetaroot) {
  if (txmetaroot != NULL) {
    set_has_txmetaroot();
  } else {
    clear_has_txmetaroot();
  }
  txmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.txmetaroot)
}

// optional bytes pbstateid = 60;
inline bool BlockMeta::has_pbstateid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockMeta::set_has_pbstateid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockMeta::clear_has_pbstateid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockMeta::clear_pbstateid() {
  pbstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pbstateid();
}
inline const ::std::string& BlockMeta::pbstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.pbstateid)
  return pbstateid_.GetNoArena();
}
inline void BlockMeta::set_pbstateid(const ::std::string& value) {
  set_has_pbstateid();
  pbstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.pbstateid)
}
#if LANG_CXX11
inline void BlockMeta::set_pbstateid(::std::string&& value) {
  set_has_pbstateid();
  pbstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.pbstateid)
}
#endif
inline void BlockMeta::set_pbstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pbstateid();
  pbstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.pbstateid)
}
inline void BlockMeta::set_pbstateid(const void* value, size_t size) {
  set_has_pbstateid();
  pbstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.pbstateid)
}
inline ::std::string* BlockMeta::mutable_pbstateid() {
  set_has_pbstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.pbstateid)
  return pbstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMeta::release_pbstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.pbstateid)
  clear_has_pbstateid();
  return pbstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMeta::set_allocated_pbstateid(::std::string* pbstateid) {
  if (pbstateid != NULL) {
    set_has_pbstateid();
  } else {
    clear_has_pbstateid();
  }
  pbstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.pbstateid)
}

// optional bytes prev = 20;
inline bool BlockMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& BlockMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.prev)
  return prev_.GetNoArena();
}
inline void BlockMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.prev)
}
#if LANG_CXX11
inline void BlockMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.prev)
}
#endif
inline void BlockMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.prev)
}
inline void BlockMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.prev)
}
inline ::std::string* BlockMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.prev)
}

// optional bytes next = 30;
inline bool BlockMeta::has_next() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockMeta::set_has_next() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockMeta::clear_has_next() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockMeta::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& BlockMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockMeta.next)
  return next_.GetNoArena();
}
inline void BlockMeta::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockMeta.next)
}
#if LANG_CXX11
inline void BlockMeta::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.BlockMeta.next)
}
#endif
inline void BlockMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockMeta.next)
}
inline void BlockMeta::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockMeta.next)
}
inline ::std::string* BlockMeta::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockMeta.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.BlockMeta.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMeta::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockMeta.next)
}

// -------------------------------------------------------------------

// TxMeta

// optional int32 blocknum = 10;
inline bool TxMeta::has_blocknum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TxMeta::set_has_blocknum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TxMeta::clear_has_blocknum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TxMeta::clear_blocknum() {
  blocknum_ = 0;
  clear_has_blocknum();
}
inline ::google::protobuf::int32 TxMeta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.blocknum)
  return blocknum_;
}
inline void TxMeta::set_blocknum(::google::protobuf::int32 value) {
  set_has_blocknum();
  blocknum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.blocknum)
}

// optional int32 txnum = 20;
inline bool TxMeta::has_txnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TxMeta::set_has_txnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TxMeta::clear_has_txnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TxMeta::clear_txnum() {
  txnum_ = 0;
  clear_has_txnum();
}
inline ::google::protobuf::int32 TxMeta::txnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.txnum)
  return txnum_;
}
inline void TxMeta::set_txnum(::google::protobuf::int32 value) {
  set_has_txnum();
  txnum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.txnum)
}

// optional .fantasybit.TransType txtype = 40;
inline bool TxMeta::has_txtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TxMeta::set_has_txtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TxMeta::clear_has_txtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TxMeta::clear_txtype() {
  txtype_ = 0;
  clear_has_txtype();
}
inline ::fantasybit::TransType TxMeta::txtype() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.txtype)
  return static_cast< ::fantasybit::TransType >(txtype_);
}
inline void TxMeta::set_txtype(::fantasybit::TransType value) {
  assert(::fantasybit::TransType_IsValid(value));
  set_has_txtype();
  txtype_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.txtype)
}

// optional .fantasybit.Transaction tx = 50;
inline bool TxMeta::has_tx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TxMeta::set_has_tx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TxMeta::clear_has_tx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::Transaction& TxMeta::tx() const {
  const ::fantasybit::Transaction* p = tx_;
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.tx)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::Transaction*>(
      &::fantasybit::_Transaction_default_instance_);
}
inline ::fantasybit::Transaction* TxMeta::release_tx() {
  // @@protoc_insertion_point(field_release:fantasybit.TxMeta.tx)
  clear_has_tx();
  ::fantasybit::Transaction* temp = tx_;
  tx_ = NULL;
  return temp;
}
inline ::fantasybit::Transaction* TxMeta::mutable_tx() {
  set_has_tx();
  if (tx_ == NULL) {
    tx_ = new ::fantasybit::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.TxMeta.tx)
  return tx_;
}
inline void TxMeta::set_allocated_tx(::fantasybit::Transaction* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_);
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    set_has_tx();
  } else {
    clear_has_tx();
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TxMeta.tx)
}

// optional string fantasy_name = 60;
inline bool TxMeta::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TxMeta::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TxMeta::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TxMeta::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& TxMeta::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.fantasy_name)
  return fantasy_name_.GetNoArena();
}
inline void TxMeta::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.fantasy_name)
}
#if LANG_CXX11
inline void TxMeta::set_fantasy_name(::std::string&& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TxMeta.fantasy_name)
}
#endif
inline void TxMeta::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TxMeta.fantasy_name)
}
inline void TxMeta::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TxMeta.fantasy_name)
}
inline ::std::string* TxMeta::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.TxMeta.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMeta::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.TxMeta.fantasy_name)
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMeta::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TxMeta.fantasy_name)
}

// optional bytes id = 70;
inline bool TxMeta::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TxMeta::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TxMeta::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TxMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TxMeta::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.TxMeta.id)
  return id_.GetNoArena();
}
inline void TxMeta::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TxMeta.id)
}
#if LANG_CXX11
inline void TxMeta::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TxMeta.id)
}
#endif
inline void TxMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TxMeta.id)
}
inline void TxMeta::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TxMeta.id)
}
inline ::std::string* TxMeta::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.TxMeta.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TxMeta::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.TxMeta.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TxMeta::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TxMeta.id)
}

// -------------------------------------------------------------------

// TrMeta

// optional int32 blocknum = 10;
inline bool TrMeta::has_blocknum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrMeta::set_has_blocknum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrMeta::clear_has_blocknum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrMeta::clear_blocknum() {
  blocknum_ = 0;
  clear_has_blocknum();
}
inline ::google::protobuf::int32 TrMeta::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.blocknum)
  return blocknum_;
}
inline void TrMeta::set_blocknum(::google::protobuf::int32 value) {
  set_has_blocknum();
  blocknum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.blocknum)
}

// optional .fantasybit.TrType type = 40;
inline bool TrMeta::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrMeta::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrMeta::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::fantasybit::TrType TrMeta::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.type)
  return static_cast< ::fantasybit::TrType >(type_);
}
inline void TrMeta::set_type(::fantasybit::TrType value) {
  assert(::fantasybit::TrType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.type)
}

// optional uint32 season = 50;
inline bool TrMeta::has_season() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrMeta::set_has_season() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrMeta::clear_has_season() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrMeta::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 TrMeta::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.season)
  return season_;
}
inline void TrMeta::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.season)
}

// optional uint32 week = 60;
inline bool TrMeta::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrMeta::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrMeta::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrMeta::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 TrMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.week)
  return week_;
}
inline void TrMeta::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.week)
}

// optional bytes gamemetaroot = 70;
inline bool TrMeta::has_gamemetaroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrMeta::set_has_gamemetaroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrMeta::clear_has_gamemetaroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrMeta::clear_gamemetaroot() {
  gamemetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamemetaroot();
}
inline const ::std::string& TrMeta::gamemetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.gamemetaroot)
  return gamemetaroot_.GetNoArena();
}
inline void TrMeta::set_gamemetaroot(const ::std::string& value) {
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.gamemetaroot)
}
#if LANG_CXX11
inline void TrMeta::set_gamemetaroot(::std::string&& value) {
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TrMeta.gamemetaroot)
}
#endif
inline void TrMeta::set_gamemetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TrMeta.gamemetaroot)
}
inline void TrMeta::set_gamemetaroot(const void* value, size_t size) {
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TrMeta.gamemetaroot)
}
inline ::std::string* TrMeta::mutable_gamemetaroot() {
  set_has_gamemetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.TrMeta.gamemetaroot)
  return gamemetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrMeta::release_gamemetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TrMeta.gamemetaroot)
  clear_has_gamemetaroot();
  return gamemetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrMeta::set_allocated_gamemetaroot(::std::string* gamemetaroot) {
  if (gamemetaroot != NULL) {
    set_has_gamemetaroot();
  } else {
    clear_has_gamemetaroot();
  }
  gamemetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamemetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TrMeta.gamemetaroot)
}

// optional bytes datametaroot = 80;
inline bool TrMeta::has_datametaroot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrMeta::set_has_datametaroot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrMeta::clear_has_datametaroot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrMeta::clear_datametaroot() {
  datametaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datametaroot();
}
inline const ::std::string& TrMeta::datametaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.datametaroot)
  return datametaroot_.GetNoArena();
}
inline void TrMeta::set_datametaroot(const ::std::string& value) {
  set_has_datametaroot();
  datametaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.datametaroot)
}
#if LANG_CXX11
inline void TrMeta::set_datametaroot(::std::string&& value) {
  set_has_datametaroot();
  datametaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TrMeta.datametaroot)
}
#endif
inline void TrMeta::set_datametaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_datametaroot();
  datametaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TrMeta.datametaroot)
}
inline void TrMeta::set_datametaroot(const void* value, size_t size) {
  set_has_datametaroot();
  datametaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TrMeta.datametaroot)
}
inline ::std::string* TrMeta::mutable_datametaroot() {
  set_has_datametaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.TrMeta.datametaroot)
  return datametaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrMeta::release_datametaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TrMeta.datametaroot)
  clear_has_datametaroot();
  return datametaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrMeta::set_allocated_datametaroot(::std::string* datametaroot) {
  if (datametaroot != NULL) {
    set_has_datametaroot();
  } else {
    clear_has_datametaroot();
  }
  datametaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datametaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TrMeta.datametaroot)
}

// optional bytes txmetaid = 100;
inline bool TrMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& TrMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TrMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void TrMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TrMeta.txmetaid)
}
#if LANG_CXX11
inline void TrMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TrMeta.txmetaid)
}
#endif
inline void TrMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TrMeta.txmetaid)
}
inline void TrMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TrMeta.txmetaid)
}
inline ::std::string* TrMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TrMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.TrMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TrMeta.txmetaid)
}

// -------------------------------------------------------------------

// GameMeta

// optional bytes txmetaid = 10;
inline bool GameMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& GameMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void GameMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameMeta.txmetaid)
}
#if LANG_CXX11
inline void GameMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameMeta.txmetaid)
}
#endif
inline void GameMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameMeta.txmetaid)
}
inline void GameMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameMeta.txmetaid)
}
inline ::std::string* GameMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameMeta.txmetaid)
}

// optional .fantasybit.GameData gamedata = 20;
inline bool GameMeta::has_gamedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameMeta::set_has_gamedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameMeta::clear_has_gamedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::GameData& GameMeta::gamedata() const {
  const ::fantasybit::GameData* p = gamedata_;
  // @@protoc_insertion_point(field_get:fantasybit.GameMeta.gamedata)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GameData*>(
      &::fantasybit::_GameData_default_instance_);
}
inline ::fantasybit::GameData* GameMeta::release_gamedata() {
  // @@protoc_insertion_point(field_release:fantasybit.GameMeta.gamedata)
  clear_has_gamedata();
  ::fantasybit::GameData* temp = gamedata_;
  gamedata_ = NULL;
  return temp;
}
inline ::fantasybit::GameData* GameMeta::mutable_gamedata() {
  set_has_gamedata();
  if (gamedata_ == NULL) {
    gamedata_ = new ::fantasybit::GameData;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameMeta.gamedata)
  return gamedata_;
}
inline void GameMeta::set_allocated_gamedata(::fantasybit::GameData* gamedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gamedata_);
  }
  if (gamedata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gamedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gamedata, submessage_arena);
    }
    set_has_gamedata();
  } else {
    clear_has_gamedata();
  }
  gamedata_ = gamedata;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameMeta.gamedata)
}

// -------------------------------------------------------------------

// DataMeta

// optional bytes txmetaid = 10;
inline bool DataMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& DataMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void DataMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.DataMeta.txmetaid)
}
#if LANG_CXX11
inline void DataMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.DataMeta.txmetaid)
}
#endif
inline void DataMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.DataMeta.txmetaid)
}
inline void DataMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.DataMeta.txmetaid)
}
inline ::std::string* DataMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.DataMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.DataMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DataMeta.txmetaid)
}

// optional .fantasybit.Data data = 20;
inline bool DataMeta::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataMeta::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataMeta::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::Data& DataMeta::data() const {
  const ::fantasybit::Data* p = data_;
  // @@protoc_insertion_point(field_get:fantasybit.DataMeta.data)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::Data*>(
      &::fantasybit::_Data_default_instance_);
}
inline ::fantasybit::Data* DataMeta::release_data() {
  // @@protoc_insertion_point(field_release:fantasybit.DataMeta.data)
  clear_has_data();
  ::fantasybit::Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::fantasybit::Data* DataMeta::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::fantasybit::Data;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.DataMeta.data)
  return data_;
}
inline void DataMeta::set_allocated_data(::fantasybit::Data* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DataMeta.data)
}

// -------------------------------------------------------------------

// LeaderBoardMeta

// optional uint32 week = 10;
inline bool LeaderBoardMeta::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeaderBoardMeta::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeaderBoardMeta::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeaderBoardMeta::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 LeaderBoardMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.week)
  return week_;
}
inline void LeaderBoardMeta::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.week)
}

// optional bytes fnbalmetaroot = 20;
inline bool LeaderBoardMeta::has_fnbalmetaroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaderBoardMeta::set_has_fnbalmetaroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaderBoardMeta::clear_has_fnbalmetaroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaderBoardMeta::clear_fnbalmetaroot() {
  fnbalmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fnbalmetaroot();
}
inline const ::std::string& LeaderBoardMeta::fnbalmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.fnbalmetaroot)
  return fnbalmetaroot_.GetNoArena();
}
inline void LeaderBoardMeta::set_fnbalmetaroot(const ::std::string& value) {
  set_has_fnbalmetaroot();
  fnbalmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
#if LANG_CXX11
inline void LeaderBoardMeta::set_fnbalmetaroot(::std::string&& value) {
  set_has_fnbalmetaroot();
  fnbalmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
#endif
inline void LeaderBoardMeta::set_fnbalmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fnbalmetaroot();
  fnbalmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
inline void LeaderBoardMeta::set_fnbalmetaroot(const void* value, size_t size) {
  set_has_fnbalmetaroot();
  fnbalmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}
inline ::std::string* LeaderBoardMeta::mutable_fnbalmetaroot() {
  set_has_fnbalmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.LeaderBoardMeta.fnbalmetaroot)
  return fnbalmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderBoardMeta::release_fnbalmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.LeaderBoardMeta.fnbalmetaroot)
  clear_has_fnbalmetaroot();
  return fnbalmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderBoardMeta::set_allocated_fnbalmetaroot(::std::string* fnbalmetaroot) {
  if (fnbalmetaroot != NULL) {
    set_has_fnbalmetaroot();
  } else {
    clear_has_fnbalmetaroot();
  }
  fnbalmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fnbalmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LeaderBoardMeta.fnbalmetaroot)
}

// optional bytes prev = 30;
inline bool LeaderBoardMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaderBoardMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaderBoardMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaderBoardMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& LeaderBoardMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.prev)
  return prev_.GetNoArena();
}
inline void LeaderBoardMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.prev)
}
#if LANG_CXX11
inline void LeaderBoardMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LeaderBoardMeta.prev)
}
#endif
inline void LeaderBoardMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.LeaderBoardMeta.prev)
}
inline void LeaderBoardMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LeaderBoardMeta.prev)
}
inline ::std::string* LeaderBoardMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.LeaderBoardMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderBoardMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.LeaderBoardMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderBoardMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LeaderBoardMeta.prev)
}

// optional bytes next = 40;
inline bool LeaderBoardMeta::has_next() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaderBoardMeta::set_has_next() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaderBoardMeta::clear_has_next() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaderBoardMeta::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& LeaderBoardMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.LeaderBoardMeta.next)
  return next_.GetNoArena();
}
inline void LeaderBoardMeta::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.LeaderBoardMeta.next)
}
#if LANG_CXX11
inline void LeaderBoardMeta::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LeaderBoardMeta.next)
}
#endif
inline void LeaderBoardMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.LeaderBoardMeta.next)
}
inline void LeaderBoardMeta::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LeaderBoardMeta.next)
}
inline ::std::string* LeaderBoardMeta::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.LeaderBoardMeta.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaderBoardMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.LeaderBoardMeta.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderBoardMeta::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LeaderBoardMeta.next)
}

// -------------------------------------------------------------------

// FantasyNameBalMeta

// optional bytes txmetaid = 10;
inline bool FantasyNameBalMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameBalMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameBalMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameBalMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& FantasyNameBalMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void FantasyNameBalMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.txmetaid)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.txmetaid)
}
#endif
inline void FantasyNameBalMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.txmetaid)
}
inline void FantasyNameBalMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.txmetaid)
}
inline ::std::string* FantasyNameBalMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.txmetaid)
}

// optional bytes trmetaid = 20;
inline bool FantasyNameBalMeta::has_trmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameBalMeta::set_has_trmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameBalMeta::clear_has_trmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameBalMeta::clear_trmetaid() {
  trmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trmetaid();
}
inline const ::std::string& FantasyNameBalMeta::trmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.trmetaid)
  return trmetaid_.GetNoArena();
}
inline void FantasyNameBalMeta::set_trmetaid(const ::std::string& value) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.trmetaid)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_trmetaid(::std::string&& value) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.trmetaid)
}
#endif
inline void FantasyNameBalMeta::set_trmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.trmetaid)
}
inline void FantasyNameBalMeta::set_trmetaid(const void* value, size_t size) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.trmetaid)
}
inline ::std::string* FantasyNameBalMeta::mutable_trmetaid() {
  set_has_trmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.trmetaid)
  return trmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_trmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.trmetaid)
  clear_has_trmetaid();
  return trmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_trmetaid(::std::string* trmetaid) {
  if (trmetaid != NULL) {
    set_has_trmetaid();
  } else {
    clear_has_trmetaid();
  }
  trmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.trmetaid)
}

// optional string name = 25;
inline bool FantasyNameBalMeta::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyNameBalMeta::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyNameBalMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyNameBalMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyNameBalMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.name)
  return name_.GetNoArena();
}
inline void FantasyNameBalMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.name)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.name)
}
#endif
inline void FantasyNameBalMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.name)
}
inline void FantasyNameBalMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.name)
}
inline ::std::string* FantasyNameBalMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.name)
}

// optional string public_key = 30;
inline bool FantasyNameBalMeta::has_public_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyNameBalMeta::set_has_public_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyNameBalMeta::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyNameBalMeta::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& FantasyNameBalMeta::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.public_key)
  return public_key_.GetNoArena();
}
inline void FantasyNameBalMeta::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.public_key)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_public_key(::std::string&& value) {
  set_has_public_key();
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.public_key)
}
#endif
inline void FantasyNameBalMeta::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.public_key)
}
inline void FantasyNameBalMeta::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.public_key)
}
inline ::std::string* FantasyNameBalMeta::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_public_key() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.public_key)
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.public_key)
}

// optional uint64 bits = 35;
inline bool FantasyNameBalMeta::has_bits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FantasyNameBalMeta::set_has_bits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FantasyNameBalMeta::clear_has_bits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FantasyNameBalMeta::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
  clear_has_bits();
}
inline ::google::protobuf::uint64 FantasyNameBalMeta::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.bits)
  return bits_;
}
inline void FantasyNameBalMeta::set_bits(::google::protobuf::uint64 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.bits)
}

// optional int64 stake = 40;
inline bool FantasyNameBalMeta::has_stake() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FantasyNameBalMeta::set_has_stake() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FantasyNameBalMeta::clear_has_stake() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FantasyNameBalMeta::clear_stake() {
  stake_ = GOOGLE_LONGLONG(0);
  clear_has_stake();
}
inline ::google::protobuf::int64 FantasyNameBalMeta::stake() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.stake)
  return stake_;
}
inline void FantasyNameBalMeta::set_stake(::google::protobuf::int64 value) {
  set_has_stake();
  stake_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.stake)
}

// optional bytes awardmetaroot = 50;
inline bool FantasyNameBalMeta::has_awardmetaroot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FantasyNameBalMeta::set_has_awardmetaroot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FantasyNameBalMeta::clear_has_awardmetaroot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FantasyNameBalMeta::clear_awardmetaroot() {
  awardmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_awardmetaroot();
}
inline const ::std::string& FantasyNameBalMeta::awardmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.awardmetaroot)
  return awardmetaroot_.GetNoArena();
}
inline void FantasyNameBalMeta::set_awardmetaroot(const ::std::string& value) {
  set_has_awardmetaroot();
  awardmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_awardmetaroot(::std::string&& value) {
  set_has_awardmetaroot();
  awardmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
#endif
inline void FantasyNameBalMeta::set_awardmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_awardmetaroot();
  awardmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
inline void FantasyNameBalMeta::set_awardmetaroot(const void* value, size_t size) {
  set_has_awardmetaroot();
  awardmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.awardmetaroot)
}
inline ::std::string* FantasyNameBalMeta::mutable_awardmetaroot() {
  set_has_awardmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.awardmetaroot)
  return awardmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_awardmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.awardmetaroot)
  clear_has_awardmetaroot();
  return awardmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_awardmetaroot(::std::string* awardmetaroot) {
  if (awardmetaroot != NULL) {
    set_has_awardmetaroot();
  } else {
    clear_has_awardmetaroot();
  }
  awardmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), awardmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.awardmetaroot)
}

// optional bytes pnlmetaroot = 60;
inline bool FantasyNameBalMeta::has_pnlmetaroot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FantasyNameBalMeta::set_has_pnlmetaroot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FantasyNameBalMeta::clear_has_pnlmetaroot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FantasyNameBalMeta::clear_pnlmetaroot() {
  pnlmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pnlmetaroot();
}
inline const ::std::string& FantasyNameBalMeta::pnlmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.pnlmetaroot)
  return pnlmetaroot_.GetNoArena();
}
inline void FantasyNameBalMeta::set_pnlmetaroot(const ::std::string& value) {
  set_has_pnlmetaroot();
  pnlmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_pnlmetaroot(::std::string&& value) {
  set_has_pnlmetaroot();
  pnlmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
#endif
inline void FantasyNameBalMeta::set_pnlmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pnlmetaroot();
  pnlmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
inline void FantasyNameBalMeta::set_pnlmetaroot(const void* value, size_t size) {
  set_has_pnlmetaroot();
  pnlmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}
inline ::std::string* FantasyNameBalMeta::mutable_pnlmetaroot() {
  set_has_pnlmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.pnlmetaroot)
  return pnlmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_pnlmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.pnlmetaroot)
  clear_has_pnlmetaroot();
  return pnlmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_pnlmetaroot(::std::string* pnlmetaroot) {
  if (pnlmetaroot != NULL) {
    set_has_pnlmetaroot();
  } else {
    clear_has_pnlmetaroot();
  }
  pnlmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pnlmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.pnlmetaroot)
}

// optional bytes prev = 70;
inline bool FantasyNameBalMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FantasyNameBalMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FantasyNameBalMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FantasyNameBalMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& FantasyNameBalMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.prev)
  return prev_.GetNoArena();
}
inline void FantasyNameBalMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.prev)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.prev)
}
#endif
inline void FantasyNameBalMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.prev)
}
inline void FantasyNameBalMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.prev)
}
inline ::std::string* FantasyNameBalMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.prev)
}

// optional bytes next = 80;
inline bool FantasyNameBalMeta::has_next() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FantasyNameBalMeta::set_has_next() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FantasyNameBalMeta::clear_has_next() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FantasyNameBalMeta::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& FantasyNameBalMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBalMeta.next)
  return next_.GetNoArena();
}
inline void FantasyNameBalMeta::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBalMeta.next)
}
#if LANG_CXX11
inline void FantasyNameBalMeta::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameBalMeta.next)
}
#endif
inline void FantasyNameBalMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBalMeta.next)
}
inline void FantasyNameBalMeta::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBalMeta.next)
}
inline ::std::string* FantasyNameBalMeta::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBalMeta.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBalMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameBalMeta.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBalMeta::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBalMeta.next)
}

// -------------------------------------------------------------------

// FantasyNameState

// optional string name = 1;
inline bool FantasyNameState::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameState::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameState::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameState::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyNameState::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.name)
  return name_.GetNoArena();
}
inline void FantasyNameState::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.name)
}
#if LANG_CXX11
inline void FantasyNameState::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.name)
}
#endif
inline void FantasyNameState::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.name)
}
inline void FantasyNameState::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.name)
}
inline ::std::string* FantasyNameState::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.name)
}

// optional bytes fantasynamebalmetaid = 10;
inline bool FantasyNameState::has_fantasynamebalmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameState::set_has_fantasynamebalmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameState::clear_has_fantasynamebalmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameState::clear_fantasynamebalmetaid() {
  fantasynamebalmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasynamebalmetaid();
}
inline const ::std::string& FantasyNameState::fantasynamebalmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.fantasynamebalmetaid)
  return fantasynamebalmetaid_.GetNoArena();
}
inline void FantasyNameState::set_fantasynamebalmetaid(const ::std::string& value) {
  set_has_fantasynamebalmetaid();
  fantasynamebalmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
#if LANG_CXX11
inline void FantasyNameState::set_fantasynamebalmetaid(::std::string&& value) {
  set_has_fantasynamebalmetaid();
  fantasynamebalmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
#endif
inline void FantasyNameState::set_fantasynamebalmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasynamebalmetaid();
  fantasynamebalmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
inline void FantasyNameState::set_fantasynamebalmetaid(const void* value, size_t size) {
  set_has_fantasynamebalmetaid();
  fantasynamebalmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.fantasynamebalmetaid)
}
inline ::std::string* FantasyNameState::mutable_fantasynamebalmetaid() {
  set_has_fantasynamebalmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.fantasynamebalmetaid)
  return fantasynamebalmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_fantasynamebalmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.fantasynamebalmetaid)
  clear_has_fantasynamebalmetaid();
  return fantasynamebalmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_fantasynamebalmetaid(::std::string* fantasynamebalmetaid) {
  if (fantasynamebalmetaid != NULL) {
    set_has_fantasynamebalmetaid();
  } else {
    clear_has_fantasynamebalmetaid();
  }
  fantasynamebalmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasynamebalmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.fantasynamebalmetaid)
}

// optional bytes posmetaroot = 20;
inline bool FantasyNameState::has_posmetaroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyNameState::set_has_posmetaroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyNameState::clear_has_posmetaroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyNameState::clear_posmetaroot() {
  posmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posmetaroot();
}
inline const ::std::string& FantasyNameState::posmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.posmetaroot)
  return posmetaroot_.GetNoArena();
}
inline void FantasyNameState::set_posmetaroot(const ::std::string& value) {
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.posmetaroot)
}
#if LANG_CXX11
inline void FantasyNameState::set_posmetaroot(::std::string&& value) {
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.posmetaroot)
}
#endif
inline void FantasyNameState::set_posmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.posmetaroot)
}
inline void FantasyNameState::set_posmetaroot(const void* value, size_t size) {
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.posmetaroot)
}
inline ::std::string* FantasyNameState::mutable_posmetaroot() {
  set_has_posmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.posmetaroot)
  return posmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_posmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.posmetaroot)
  clear_has_posmetaroot();
  return posmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_posmetaroot(::std::string* posmetaroot) {
  if (posmetaroot != NULL) {
    set_has_posmetaroot();
  } else {
    clear_has_posmetaroot();
  }
  posmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.posmetaroot)
}

// optional bytes ordersmetaroot = 30;
inline bool FantasyNameState::has_ordersmetaroot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyNameState::set_has_ordersmetaroot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyNameState::clear_has_ordersmetaroot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyNameState::clear_ordersmetaroot() {
  ordersmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ordersmetaroot();
}
inline const ::std::string& FantasyNameState::ordersmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.ordersmetaroot)
  return ordersmetaroot_.GetNoArena();
}
inline void FantasyNameState::set_ordersmetaroot(const ::std::string& value) {
  set_has_ordersmetaroot();
  ordersmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.ordersmetaroot)
}
#if LANG_CXX11
inline void FantasyNameState::set_ordersmetaroot(::std::string&& value) {
  set_has_ordersmetaroot();
  ordersmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.ordersmetaroot)
}
#endif
inline void FantasyNameState::set_ordersmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ordersmetaroot();
  ordersmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.ordersmetaroot)
}
inline void FantasyNameState::set_ordersmetaroot(const void* value, size_t size) {
  set_has_ordersmetaroot();
  ordersmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.ordersmetaroot)
}
inline ::std::string* FantasyNameState::mutable_ordersmetaroot() {
  set_has_ordersmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.ordersmetaroot)
  return ordersmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_ordersmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.ordersmetaroot)
  clear_has_ordersmetaroot();
  return ordersmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_ordersmetaroot(::std::string* ordersmetaroot) {
  if (ordersmetaroot != NULL) {
    set_has_ordersmetaroot();
  } else {
    clear_has_ordersmetaroot();
  }
  ordersmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordersmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.ordersmetaroot)
}

// optional bytes projmetaroot = 40;
inline bool FantasyNameState::has_projmetaroot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FantasyNameState::set_has_projmetaroot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FantasyNameState::clear_has_projmetaroot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FantasyNameState::clear_projmetaroot() {
  projmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projmetaroot();
}
inline const ::std::string& FantasyNameState::projmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.projmetaroot)
  return projmetaroot_.GetNoArena();
}
inline void FantasyNameState::set_projmetaroot(const ::std::string& value) {
  set_has_projmetaroot();
  projmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.projmetaroot)
}
#if LANG_CXX11
inline void FantasyNameState::set_projmetaroot(::std::string&& value) {
  set_has_projmetaroot();
  projmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.projmetaroot)
}
#endif
inline void FantasyNameState::set_projmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_projmetaroot();
  projmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.projmetaroot)
}
inline void FantasyNameState::set_projmetaroot(const void* value, size_t size) {
  set_has_projmetaroot();
  projmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.projmetaroot)
}
inline ::std::string* FantasyNameState::mutable_projmetaroot() {
  set_has_projmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.projmetaroot)
  return projmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_projmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.projmetaroot)
  clear_has_projmetaroot();
  return projmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_projmetaroot(::std::string* projmetaroot) {
  if (projmetaroot != NULL) {
    set_has_projmetaroot();
  } else {
    clear_has_projmetaroot();
  }
  projmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.projmetaroot)
}

// optional bytes prev = 70;
inline bool FantasyNameState::has_prev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FantasyNameState::set_has_prev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FantasyNameState::clear_has_prev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FantasyNameState::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& FantasyNameState::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.prev)
  return prev_.GetNoArena();
}
inline void FantasyNameState::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.prev)
}
#if LANG_CXX11
inline void FantasyNameState::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.prev)
}
#endif
inline void FantasyNameState::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.prev)
}
inline void FantasyNameState::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.prev)
}
inline ::std::string* FantasyNameState::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.prev)
}

// optional bytes next = 80;
inline bool FantasyNameState::has_next() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FantasyNameState::set_has_next() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FantasyNameState::clear_has_next() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FantasyNameState::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& FantasyNameState::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.next)
  return next_.GetNoArena();
}
inline void FantasyNameState::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.next)
}
#if LANG_CXX11
inline void FantasyNameState::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.next)
}
#endif
inline void FantasyNameState::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.next)
}
inline void FantasyNameState::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.next)
}
inline ::std::string* FantasyNameState::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.next)
}

// optional bytes txmetaid = 50;
inline bool FantasyNameState::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FantasyNameState::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FantasyNameState::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FantasyNameState::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& FantasyNameState::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameState.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void FantasyNameState::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameState.txmetaid)
}
#if LANG_CXX11
inline void FantasyNameState::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameState.txmetaid)
}
#endif
inline void FantasyNameState::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameState.txmetaid)
}
inline void FantasyNameState::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameState.txmetaid)
}
inline ::std::string* FantasyNameState::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameState.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameState::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameState.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameState::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameState.txmetaid)
}

// -------------------------------------------------------------------

// WeekGameStatusMeta

// optional uint32 week = 10;
inline bool WeekGameStatusMeta::has_week() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeekGameStatusMeta::set_has_week() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeekGameStatusMeta::clear_has_week() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeekGameStatusMeta::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 WeekGameStatusMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.week)
  return week_;
}
inline void WeekGameStatusMeta::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.week)
}

// optional bytes gameresultmetaroot = 20;
inline bool WeekGameStatusMeta::has_gameresultmetaroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeekGameStatusMeta::set_has_gameresultmetaroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeekGameStatusMeta::clear_has_gameresultmetaroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeekGameStatusMeta::clear_gameresultmetaroot() {
  gameresultmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameresultmetaroot();
}
inline const ::std::string& WeekGameStatusMeta::gameresultmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
  return gameresultmetaroot_.GetNoArena();
}
inline void WeekGameStatusMeta::set_gameresultmetaroot(const ::std::string& value) {
  set_has_gameresultmetaroot();
  gameresultmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
#if LANG_CXX11
inline void WeekGameStatusMeta::set_gameresultmetaroot(::std::string&& value) {
  set_has_gameresultmetaroot();
  gameresultmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
#endif
inline void WeekGameStatusMeta::set_gameresultmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameresultmetaroot();
  gameresultmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
inline void WeekGameStatusMeta::set_gameresultmetaroot(const void* value, size_t size) {
  set_has_gameresultmetaroot();
  gameresultmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}
inline ::std::string* WeekGameStatusMeta::mutable_gameresultmetaroot() {
  set_has_gameresultmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
  return gameresultmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeekGameStatusMeta::release_gameresultmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
  clear_has_gameresultmetaroot();
  return gameresultmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeekGameStatusMeta::set_allocated_gameresultmetaroot(::std::string* gameresultmetaroot) {
  if (gameresultmetaroot != NULL) {
    set_has_gameresultmetaroot();
  } else {
    clear_has_gameresultmetaroot();
  }
  gameresultmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameresultmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.gameresultmetaroot)
}

// optional bytes ingameprojmetaroot = 30;
inline bool WeekGameStatusMeta::has_ingameprojmetaroot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeekGameStatusMeta::set_has_ingameprojmetaroot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeekGameStatusMeta::clear_has_ingameprojmetaroot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeekGameStatusMeta::clear_ingameprojmetaroot() {
  ingameprojmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ingameprojmetaroot();
}
inline const ::std::string& WeekGameStatusMeta::ingameprojmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
  return ingameprojmetaroot_.GetNoArena();
}
inline void WeekGameStatusMeta::set_ingameprojmetaroot(const ::std::string& value) {
  set_has_ingameprojmetaroot();
  ingameprojmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
#if LANG_CXX11
inline void WeekGameStatusMeta::set_ingameprojmetaroot(::std::string&& value) {
  set_has_ingameprojmetaroot();
  ingameprojmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
#endif
inline void WeekGameStatusMeta::set_ingameprojmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ingameprojmetaroot();
  ingameprojmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
inline void WeekGameStatusMeta::set_ingameprojmetaroot(const void* value, size_t size) {
  set_has_ingameprojmetaroot();
  ingameprojmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}
inline ::std::string* WeekGameStatusMeta::mutable_ingameprojmetaroot() {
  set_has_ingameprojmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
  return ingameprojmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeekGameStatusMeta::release_ingameprojmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
  clear_has_ingameprojmetaroot();
  return ingameprojmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeekGameStatusMeta::set_allocated_ingameprojmetaroot(::std::string* ingameprojmetaroot) {
  if (ingameprojmetaroot != NULL) {
    set_has_ingameprojmetaroot();
  } else {
    clear_has_ingameprojmetaroot();
  }
  ingameprojmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ingameprojmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.ingameprojmetaroot)
}

// optional bytes opengamestatusroot = 40;
inline bool WeekGameStatusMeta::has_opengamestatusroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeekGameStatusMeta::set_has_opengamestatusroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeekGameStatusMeta::clear_has_opengamestatusroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeekGameStatusMeta::clear_opengamestatusroot() {
  opengamestatusroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opengamestatusroot();
}
inline const ::std::string& WeekGameStatusMeta::opengamestatusroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.opengamestatusroot)
  return opengamestatusroot_.GetNoArena();
}
inline void WeekGameStatusMeta::set_opengamestatusroot(const ::std::string& value) {
  set_has_opengamestatusroot();
  opengamestatusroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
#if LANG_CXX11
inline void WeekGameStatusMeta::set_opengamestatusroot(::std::string&& value) {
  set_has_opengamestatusroot();
  opengamestatusroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
#endif
inline void WeekGameStatusMeta::set_opengamestatusroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_opengamestatusroot();
  opengamestatusroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
inline void WeekGameStatusMeta::set_opengamestatusroot(const void* value, size_t size) {
  set_has_opengamestatusroot();
  opengamestatusroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}
inline ::std::string* WeekGameStatusMeta::mutable_opengamestatusroot() {
  set_has_opengamestatusroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.opengamestatusroot)
  return opengamestatusroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeekGameStatusMeta::release_opengamestatusroot() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.opengamestatusroot)
  clear_has_opengamestatusroot();
  return opengamestatusroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeekGameStatusMeta::set_allocated_opengamestatusroot(::std::string* opengamestatusroot) {
  if (opengamestatusroot != NULL) {
    set_has_opengamestatusroot();
  } else {
    clear_has_opengamestatusroot();
  }
  opengamestatusroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opengamestatusroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.opengamestatusroot)
}

// optional bytes prev = 50;
inline bool WeekGameStatusMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeekGameStatusMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeekGameStatusMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeekGameStatusMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& WeekGameStatusMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.prev)
  return prev_.GetNoArena();
}
inline void WeekGameStatusMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.prev)
}
#if LANG_CXX11
inline void WeekGameStatusMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.prev)
}
#endif
inline void WeekGameStatusMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.prev)
}
inline void WeekGameStatusMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.prev)
}
inline ::std::string* WeekGameStatusMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeekGameStatusMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeekGameStatusMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.prev)
}

// optional bytes next = 60;
inline bool WeekGameStatusMeta::has_next() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeekGameStatusMeta::set_has_next() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeekGameStatusMeta::clear_has_next() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeekGameStatusMeta::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& WeekGameStatusMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.WeekGameStatusMeta.next)
  return next_.GetNoArena();
}
inline void WeekGameStatusMeta::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.WeekGameStatusMeta.next)
}
#if LANG_CXX11
inline void WeekGameStatusMeta::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WeekGameStatusMeta.next)
}
#endif
inline void WeekGameStatusMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.WeekGameStatusMeta.next)
}
inline void WeekGameStatusMeta::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeekGameStatusMeta.next)
}
inline ::std::string* WeekGameStatusMeta::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.WeekGameStatusMeta.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WeekGameStatusMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.WeekGameStatusMeta.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WeekGameStatusMeta::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WeekGameStatusMeta.next)
}

// -------------------------------------------------------------------

// InGameProjMeta

// optional string gameid = 20;
inline bool InGameProjMeta::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InGameProjMeta::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InGameProjMeta::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InGameProjMeta::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& InGameProjMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.gameid)
  return gameid_.GetNoArena();
}
inline void InGameProjMeta::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.gameid)
}
#if LANG_CXX11
inline void InGameProjMeta::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.gameid)
}
#endif
inline void InGameProjMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.gameid)
}
inline void InGameProjMeta::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.gameid)
}
inline ::std::string* InGameProjMeta::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InGameProjMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InGameProjMeta::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.gameid)
}

// optional bytes gamestatusmetaid = 40;
inline bool InGameProjMeta::has_gamestatusmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InGameProjMeta::set_has_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InGameProjMeta::clear_has_gamestatusmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InGameProjMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamestatusmetaid();
}
inline const ::std::string& InGameProjMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.gamestatusmetaid)
  return gamestatusmetaid_.GetNoArena();
}
inline void InGameProjMeta::set_gamestatusmetaid(const ::std::string& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.gamestatusmetaid)
}
#if LANG_CXX11
inline void InGameProjMeta::set_gamestatusmetaid(::std::string&& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.gamestatusmetaid)
}
#endif
inline void InGameProjMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.gamestatusmetaid)
}
inline void InGameProjMeta::set_gamestatusmetaid(const void* value, size_t size) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.gamestatusmetaid)
}
inline ::std::string* InGameProjMeta::mutable_gamestatusmetaid() {
  set_has_gamestatusmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.gamestatusmetaid)
  return gamestatusmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InGameProjMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.gamestatusmetaid)
  clear_has_gamestatusmetaid();
  return gamestatusmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InGameProjMeta::set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid) {
  if (gamestatusmetaid != NULL) {
    set_has_gamestatusmetaid();
  } else {
    clear_has_gamestatusmetaid();
  }
  gamestatusmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.gamestatusmetaid)
}

// optional bytes homeprojmeta = 60;
inline bool InGameProjMeta::has_homeprojmeta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InGameProjMeta::set_has_homeprojmeta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InGameProjMeta::clear_has_homeprojmeta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InGameProjMeta::clear_homeprojmeta() {
  homeprojmeta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homeprojmeta();
}
inline const ::std::string& InGameProjMeta::homeprojmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.homeprojmeta)
  return homeprojmeta_.GetNoArena();
}
inline void InGameProjMeta::set_homeprojmeta(const ::std::string& value) {
  set_has_homeprojmeta();
  homeprojmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.homeprojmeta)
}
#if LANG_CXX11
inline void InGameProjMeta::set_homeprojmeta(::std::string&& value) {
  set_has_homeprojmeta();
  homeprojmeta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.homeprojmeta)
}
#endif
inline void InGameProjMeta::set_homeprojmeta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homeprojmeta();
  homeprojmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.homeprojmeta)
}
inline void InGameProjMeta::set_homeprojmeta(const void* value, size_t size) {
  set_has_homeprojmeta();
  homeprojmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.homeprojmeta)
}
inline ::std::string* InGameProjMeta::mutable_homeprojmeta() {
  set_has_homeprojmeta();
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.homeprojmeta)
  return homeprojmeta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InGameProjMeta::release_homeprojmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.homeprojmeta)
  clear_has_homeprojmeta();
  return homeprojmeta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InGameProjMeta::set_allocated_homeprojmeta(::std::string* homeprojmeta) {
  if (homeprojmeta != NULL) {
    set_has_homeprojmeta();
  } else {
    clear_has_homeprojmeta();
  }
  homeprojmeta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homeprojmeta);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.homeprojmeta)
}

// optional bytes awayprojmeta = 70;
inline bool InGameProjMeta::has_awayprojmeta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InGameProjMeta::set_has_awayprojmeta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InGameProjMeta::clear_has_awayprojmeta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InGameProjMeta::clear_awayprojmeta() {
  awayprojmeta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_awayprojmeta();
}
inline const ::std::string& InGameProjMeta::awayprojmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.awayprojmeta)
  return awayprojmeta_.GetNoArena();
}
inline void InGameProjMeta::set_awayprojmeta(const ::std::string& value) {
  set_has_awayprojmeta();
  awayprojmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.awayprojmeta)
}
#if LANG_CXX11
inline void InGameProjMeta::set_awayprojmeta(::std::string&& value) {
  set_has_awayprojmeta();
  awayprojmeta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.awayprojmeta)
}
#endif
inline void InGameProjMeta::set_awayprojmeta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_awayprojmeta();
  awayprojmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.awayprojmeta)
}
inline void InGameProjMeta::set_awayprojmeta(const void* value, size_t size) {
  set_has_awayprojmeta();
  awayprojmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.awayprojmeta)
}
inline ::std::string* InGameProjMeta::mutable_awayprojmeta() {
  set_has_awayprojmeta();
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.awayprojmeta)
  return awayprojmeta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InGameProjMeta::release_awayprojmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.awayprojmeta)
  clear_has_awayprojmeta();
  return awayprojmeta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InGameProjMeta::set_allocated_awayprojmeta(::std::string* awayprojmeta) {
  if (awayprojmeta != NULL) {
    set_has_awayprojmeta();
  } else {
    clear_has_awayprojmeta();
  }
  awayprojmeta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), awayprojmeta);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.awayprojmeta)
}

// optional bytes gamedatametaid = 50;
inline bool InGameProjMeta::has_gamedatametaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InGameProjMeta::set_has_gamedatametaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InGameProjMeta::clear_has_gamedatametaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InGameProjMeta::clear_gamedatametaid() {
  gamedatametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamedatametaid();
}
inline const ::std::string& InGameProjMeta::gamedatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.InGameProjMeta.gamedatametaid)
  return gamedatametaid_.GetNoArena();
}
inline void InGameProjMeta::set_gamedatametaid(const ::std::string& value) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InGameProjMeta.gamedatametaid)
}
#if LANG_CXX11
inline void InGameProjMeta::set_gamedatametaid(::std::string&& value) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.InGameProjMeta.gamedatametaid)
}
#endif
inline void InGameProjMeta::set_gamedatametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InGameProjMeta.gamedatametaid)
}
inline void InGameProjMeta::set_gamedatametaid(const void* value, size_t size) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InGameProjMeta.gamedatametaid)
}
inline ::std::string* InGameProjMeta::mutable_gamedatametaid() {
  set_has_gamedatametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.InGameProjMeta.gamedatametaid)
  return gamedatametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InGameProjMeta::release_gamedatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.InGameProjMeta.gamedatametaid)
  clear_has_gamedatametaid();
  return gamedatametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InGameProjMeta::set_allocated_gamedatametaid(::std::string* gamedatametaid) {
  if (gamedatametaid != NULL) {
    set_has_gamedatametaid();
  } else {
    clear_has_gamedatametaid();
  }
  gamedatametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedatametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InGameProjMeta.gamedatametaid)
}

// -------------------------------------------------------------------

// GameResultsMeta

// optional string gameid = 20;
inline bool GameResultsMeta::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameResultsMeta::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameResultsMeta::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameResultsMeta::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& GameResultsMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.gameid)
  return gameid_.GetNoArena();
}
inline void GameResultsMeta::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.gameid)
}
#if LANG_CXX11
inline void GameResultsMeta::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.gameid)
}
#endif
inline void GameResultsMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.gameid)
}
inline void GameResultsMeta::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.gameid)
}
inline ::std::string* GameResultsMeta::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameResultsMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResultsMeta::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.gameid)
}

// optional bytes gamestatusmetaid = 40;
inline bool GameResultsMeta::has_gamestatusmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameResultsMeta::set_has_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameResultsMeta::clear_has_gamestatusmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameResultsMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamestatusmetaid();
}
inline const ::std::string& GameResultsMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.gamestatusmetaid)
  return gamestatusmetaid_.GetNoArena();
}
inline void GameResultsMeta::set_gamestatusmetaid(const ::std::string& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.gamestatusmetaid)
}
#if LANG_CXX11
inline void GameResultsMeta::set_gamestatusmetaid(::std::string&& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.gamestatusmetaid)
}
#endif
inline void GameResultsMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.gamestatusmetaid)
}
inline void GameResultsMeta::set_gamestatusmetaid(const void* value, size_t size) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.gamestatusmetaid)
}
inline ::std::string* GameResultsMeta::mutable_gamestatusmetaid() {
  set_has_gamestatusmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.gamestatusmetaid)
  return gamestatusmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameResultsMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.gamestatusmetaid)
  clear_has_gamestatusmetaid();
  return gamestatusmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResultsMeta::set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid) {
  if (gamestatusmetaid != NULL) {
    set_has_gamestatusmetaid();
  } else {
    clear_has_gamestatusmetaid();
  }
  gamestatusmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.gamestatusmetaid)
}

// optional bytes homeresultmeta = 60;
inline bool GameResultsMeta::has_homeresultmeta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameResultsMeta::set_has_homeresultmeta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameResultsMeta::clear_has_homeresultmeta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameResultsMeta::clear_homeresultmeta() {
  homeresultmeta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_homeresultmeta();
}
inline const ::std::string& GameResultsMeta::homeresultmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.homeresultmeta)
  return homeresultmeta_.GetNoArena();
}
inline void GameResultsMeta::set_homeresultmeta(const ::std::string& value) {
  set_has_homeresultmeta();
  homeresultmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.homeresultmeta)
}
#if LANG_CXX11
inline void GameResultsMeta::set_homeresultmeta(::std::string&& value) {
  set_has_homeresultmeta();
  homeresultmeta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.homeresultmeta)
}
#endif
inline void GameResultsMeta::set_homeresultmeta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_homeresultmeta();
  homeresultmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.homeresultmeta)
}
inline void GameResultsMeta::set_homeresultmeta(const void* value, size_t size) {
  set_has_homeresultmeta();
  homeresultmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.homeresultmeta)
}
inline ::std::string* GameResultsMeta::mutable_homeresultmeta() {
  set_has_homeresultmeta();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.homeresultmeta)
  return homeresultmeta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameResultsMeta::release_homeresultmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.homeresultmeta)
  clear_has_homeresultmeta();
  return homeresultmeta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResultsMeta::set_allocated_homeresultmeta(::std::string* homeresultmeta) {
  if (homeresultmeta != NULL) {
    set_has_homeresultmeta();
  } else {
    clear_has_homeresultmeta();
  }
  homeresultmeta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homeresultmeta);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.homeresultmeta)
}

// optional bytes awayresultmeta = 70;
inline bool GameResultsMeta::has_awayresultmeta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameResultsMeta::set_has_awayresultmeta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameResultsMeta::clear_has_awayresultmeta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameResultsMeta::clear_awayresultmeta() {
  awayresultmeta_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_awayresultmeta();
}
inline const ::std::string& GameResultsMeta::awayresultmeta() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.awayresultmeta)
  return awayresultmeta_.GetNoArena();
}
inline void GameResultsMeta::set_awayresultmeta(const ::std::string& value) {
  set_has_awayresultmeta();
  awayresultmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.awayresultmeta)
}
#if LANG_CXX11
inline void GameResultsMeta::set_awayresultmeta(::std::string&& value) {
  set_has_awayresultmeta();
  awayresultmeta_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.awayresultmeta)
}
#endif
inline void GameResultsMeta::set_awayresultmeta(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_awayresultmeta();
  awayresultmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.awayresultmeta)
}
inline void GameResultsMeta::set_awayresultmeta(const void* value, size_t size) {
  set_has_awayresultmeta();
  awayresultmeta_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.awayresultmeta)
}
inline ::std::string* GameResultsMeta::mutable_awayresultmeta() {
  set_has_awayresultmeta();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.awayresultmeta)
  return awayresultmeta_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameResultsMeta::release_awayresultmeta() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.awayresultmeta)
  clear_has_awayresultmeta();
  return awayresultmeta_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResultsMeta::set_allocated_awayresultmeta(::std::string* awayresultmeta) {
  if (awayresultmeta != NULL) {
    set_has_awayresultmeta();
  } else {
    clear_has_awayresultmeta();
  }
  awayresultmeta_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), awayresultmeta);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.awayresultmeta)
}

// optional bytes resultdatametaid = 50;
inline bool GameResultsMeta::has_resultdatametaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameResultsMeta::set_has_resultdatametaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameResultsMeta::clear_has_resultdatametaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameResultsMeta::clear_resultdatametaid() {
  resultdatametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultdatametaid();
}
inline const ::std::string& GameResultsMeta::resultdatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResultsMeta.resultdatametaid)
  return resultdatametaid_.GetNoArena();
}
inline void GameResultsMeta::set_resultdatametaid(const ::std::string& value) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResultsMeta.resultdatametaid)
}
#if LANG_CXX11
inline void GameResultsMeta::set_resultdatametaid(::std::string&& value) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameResultsMeta.resultdatametaid)
}
#endif
inline void GameResultsMeta::set_resultdatametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResultsMeta.resultdatametaid)
}
inline void GameResultsMeta::set_resultdatametaid(const void* value, size_t size) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResultsMeta.resultdatametaid)
}
inline ::std::string* GameResultsMeta::mutable_resultdatametaid() {
  set_has_resultdatametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResultsMeta.resultdatametaid)
  return resultdatametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameResultsMeta::release_resultdatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameResultsMeta.resultdatametaid)
  clear_has_resultdatametaid();
  return resultdatametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResultsMeta::set_allocated_resultdatametaid(::std::string* resultdatametaid) {
  if (resultdatametaid != NULL) {
    set_has_resultdatametaid();
  } else {
    clear_has_resultdatametaid();
  }
  resultdatametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultdatametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResultsMeta.resultdatametaid)
}

// -------------------------------------------------------------------

// GameStatusMeta

// optional string id = 1;
inline bool GameStatusMeta::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStatusMeta::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStatusMeta::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStatusMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& GameStatusMeta::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.id)
  return id_.GetNoArena();
}
inline void GameStatusMeta::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.id)
}
#if LANG_CXX11
inline void GameStatusMeta::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.id)
}
#endif
inline void GameStatusMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.id)
}
inline void GameStatusMeta::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.id)
}
inline ::std::string* GameStatusMeta::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStatusMeta::release_id() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStatusMeta::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.id)
}

// optional int32 week = 2;
inline bool GameStatusMeta::has_week() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameStatusMeta::set_has_week() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameStatusMeta::clear_has_week() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameStatusMeta::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 GameStatusMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.week)
  return week_;
}
inline void GameStatusMeta::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.week)
}

// optional .fantasybit.GameInfo gameinfo = 10;
inline bool GameStatusMeta::has_gameinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameStatusMeta::set_has_gameinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameStatusMeta::clear_has_gameinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::fantasybit::GameInfo& GameStatusMeta::gameinfo() const {
  const ::fantasybit::GameInfo* p = gameinfo_;
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.gameinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GameInfo*>(
      &::fantasybit::_GameInfo_default_instance_);
}
inline ::fantasybit::GameInfo* GameStatusMeta::release_gameinfo() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.gameinfo)
  clear_has_gameinfo();
  ::fantasybit::GameInfo* temp = gameinfo_;
  gameinfo_ = NULL;
  return temp;
}
inline ::fantasybit::GameInfo* GameStatusMeta::mutable_gameinfo() {
  set_has_gameinfo();
  if (gameinfo_ == NULL) {
    gameinfo_ = new ::fantasybit::GameInfo;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.gameinfo)
  return gameinfo_;
}
inline void GameStatusMeta::set_allocated_gameinfo(::fantasybit::GameInfo* gameinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gameinfo_);
  }
  if (gameinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gameinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gameinfo, submessage_arena);
    }
    set_has_gameinfo();
  } else {
    clear_has_gameinfo();
  }
  gameinfo_ = gameinfo;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.gameinfo)
}

// optional .fantasybit.GameStatus gamesatus = 20;
inline bool GameStatusMeta::has_gamesatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameStatusMeta::set_has_gamesatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameStatusMeta::clear_has_gamesatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::fantasybit::GameStatus& GameStatusMeta::gamesatus() const {
  const ::fantasybit::GameStatus* p = gamesatus_;
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.gamesatus)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GameStatus*>(
      &::fantasybit::_GameStatus_default_instance_);
}
inline ::fantasybit::GameStatus* GameStatusMeta::release_gamesatus() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.gamesatus)
  clear_has_gamesatus();
  ::fantasybit::GameStatus* temp = gamesatus_;
  gamesatus_ = NULL;
  return temp;
}
inline ::fantasybit::GameStatus* GameStatusMeta::mutable_gamesatus() {
  set_has_gamesatus();
  if (gamesatus_ == NULL) {
    gamesatus_ = new ::fantasybit::GameStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.gamesatus)
  return gamesatus_;
}
inline void GameStatusMeta::set_allocated_gamesatus(::fantasybit::GameStatus* gamesatus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gamesatus_);
  }
  if (gamesatus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gamesatus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gamesatus, submessage_arena);
    }
    set_has_gamesatus();
  } else {
    clear_has_gamesatus();
  }
  gamesatus_ = gamesatus;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.gamesatus)
}

// optional bytes gamemetaid = 30;
inline bool GameStatusMeta::has_gamemetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStatusMeta::set_has_gamemetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStatusMeta::clear_has_gamemetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStatusMeta::clear_gamemetaid() {
  gamemetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamemetaid();
}
inline const ::std::string& GameStatusMeta::gamemetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.gamemetaid)
  return gamemetaid_.GetNoArena();
}
inline void GameStatusMeta::set_gamemetaid(const ::std::string& value) {
  set_has_gamemetaid();
  gamemetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.gamemetaid)
}
#if LANG_CXX11
inline void GameStatusMeta::set_gamemetaid(::std::string&& value) {
  set_has_gamemetaid();
  gamemetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.gamemetaid)
}
#endif
inline void GameStatusMeta::set_gamemetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamemetaid();
  gamemetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.gamemetaid)
}
inline void GameStatusMeta::set_gamemetaid(const void* value, size_t size) {
  set_has_gamemetaid();
  gamemetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.gamemetaid)
}
inline ::std::string* GameStatusMeta::mutable_gamemetaid() {
  set_has_gamemetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.gamemetaid)
  return gamemetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStatusMeta::release_gamemetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.gamemetaid)
  clear_has_gamemetaid();
  return gamemetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStatusMeta::set_allocated_gamemetaid(::std::string* gamemetaid) {
  if (gamemetaid != NULL) {
    set_has_gamemetaid();
  } else {
    clear_has_gamemetaid();
  }
  gamemetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamemetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.gamemetaid)
}

// optional bytes datametaid = 40;
inline bool GameStatusMeta::has_datametaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStatusMeta::set_has_datametaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStatusMeta::clear_has_datametaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStatusMeta::clear_datametaid() {
  datametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datametaid();
}
inline const ::std::string& GameStatusMeta::datametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.datametaid)
  return datametaid_.GetNoArena();
}
inline void GameStatusMeta::set_datametaid(const ::std::string& value) {
  set_has_datametaid();
  datametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.datametaid)
}
#if LANG_CXX11
inline void GameStatusMeta::set_datametaid(::std::string&& value) {
  set_has_datametaid();
  datametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.datametaid)
}
#endif
inline void GameStatusMeta::set_datametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_datametaid();
  datametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.datametaid)
}
inline void GameStatusMeta::set_datametaid(const void* value, size_t size) {
  set_has_datametaid();
  datametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.datametaid)
}
inline ::std::string* GameStatusMeta::mutable_datametaid() {
  set_has_datametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.datametaid)
  return datametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStatusMeta::release_datametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.datametaid)
  clear_has_datametaid();
  return datametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStatusMeta::set_allocated_datametaid(::std::string* datametaid) {
  if (datametaid != NULL) {
    set_has_datametaid();
  } else {
    clear_has_datametaid();
  }
  datametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.datametaid)
}

// optional bytes prev = 50;
inline bool GameStatusMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameStatusMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameStatusMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameStatusMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& GameStatusMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.prev)
  return prev_.GetNoArena();
}
inline void GameStatusMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.prev)
}
#if LANG_CXX11
inline void GameStatusMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.prev)
}
#endif
inline void GameStatusMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.prev)
}
inline void GameStatusMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.prev)
}
inline ::std::string* GameStatusMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStatusMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStatusMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.prev)
}

// optional bytes next = 60;
inline bool GameStatusMeta::has_next() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameStatusMeta::set_has_next() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameStatusMeta::clear_has_next() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameStatusMeta::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& GameStatusMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.next)
  return next_.GetNoArena();
}
inline void GameStatusMeta::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.next)
}
#if LANG_CXX11
inline void GameStatusMeta::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GameStatusMeta.next)
}
#endif
inline void GameStatusMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameStatusMeta.next)
}
inline void GameStatusMeta::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameStatusMeta.next)
}
inline ::std::string* GameStatusMeta::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameStatusMeta.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStatusMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.GameStatusMeta.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStatusMeta::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameStatusMeta.next)
}

// optional int32 season = 70;
inline bool GameStatusMeta::has_season() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameStatusMeta::set_has_season() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameStatusMeta::clear_has_season() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameStatusMeta::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 GameStatusMeta::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatusMeta.season)
  return season_;
}
inline void GameStatusMeta::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameStatusMeta.season)
}

// -------------------------------------------------------------------

// TeamProjMeta

// optional string gameid = 20;
inline bool TeamProjMeta::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamProjMeta::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamProjMeta::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamProjMeta::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& TeamProjMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.gameid)
  return gameid_.GetNoArena();
}
inline void TeamProjMeta::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.gameid)
}
#if LANG_CXX11
inline void TeamProjMeta::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.gameid)
}
#endif
inline void TeamProjMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.gameid)
}
inline void TeamProjMeta::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.gameid)
}
inline ::std::string* TeamProjMeta::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamProjMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamProjMeta::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.gameid)
}

// optional string team = 30;
inline bool TeamProjMeta::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamProjMeta::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamProjMeta::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamProjMeta::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team();
}
inline const ::std::string& TeamProjMeta::team() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.team)
  return team_.GetNoArena();
}
inline void TeamProjMeta::set_team(const ::std::string& value) {
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.team)
}
#if LANG_CXX11
inline void TeamProjMeta::set_team(::std::string&& value) {
  set_has_team();
  team_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.team)
}
#endif
inline void TeamProjMeta::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.team)
}
inline void TeamProjMeta::set_team(const char* value, size_t size) {
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.team)
}
inline ::std::string* TeamProjMeta::mutable_team() {
  set_has_team();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamProjMeta::release_team() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.team)
  clear_has_team();
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamProjMeta::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    set_has_team();
  } else {
    clear_has_team();
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.team)
}

// optional uint32 kickofftime = 40;
inline bool TeamProjMeta::has_kickofftime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamProjMeta::set_has_kickofftime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamProjMeta::clear_has_kickofftime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamProjMeta::clear_kickofftime() {
  kickofftime_ = 0u;
  clear_has_kickofftime();
}
inline ::google::protobuf::uint32 TeamProjMeta::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.kickofftime)
  return kickofftime_;
}
inline void TeamProjMeta::set_kickofftime(::google::protobuf::uint32 value) {
  set_has_kickofftime();
  kickofftime_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.kickofftime)
}

// optional uint32 week = 50;
inline bool TeamProjMeta::has_week() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamProjMeta::set_has_week() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamProjMeta::clear_has_week() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamProjMeta::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 TeamProjMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.week)
  return week_;
}
inline void TeamProjMeta::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.week)
}

// optional bytes gameplayerprojmetaroot = 60;
inline bool TeamProjMeta::has_gameplayerprojmetaroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamProjMeta::set_has_gameplayerprojmetaroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamProjMeta::clear_has_gameplayerprojmetaroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamProjMeta::clear_gameplayerprojmetaroot() {
  gameplayerprojmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameplayerprojmetaroot();
}
inline const ::std::string& TeamProjMeta::gameplayerprojmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
  return gameplayerprojmetaroot_.GetNoArena();
}
inline void TeamProjMeta::set_gameplayerprojmetaroot(const ::std::string& value) {
  set_has_gameplayerprojmetaroot();
  gameplayerprojmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
#if LANG_CXX11
inline void TeamProjMeta::set_gameplayerprojmetaroot(::std::string&& value) {
  set_has_gameplayerprojmetaroot();
  gameplayerprojmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
#endif
inline void TeamProjMeta::set_gameplayerprojmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameplayerprojmetaroot();
  gameplayerprojmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
inline void TeamProjMeta::set_gameplayerprojmetaroot(const void* value, size_t size) {
  set_has_gameplayerprojmetaroot();
  gameplayerprojmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}
inline ::std::string* TeamProjMeta::mutable_gameplayerprojmetaroot() {
  set_has_gameplayerprojmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
  return gameplayerprojmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamProjMeta::release_gameplayerprojmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
  clear_has_gameplayerprojmetaroot();
  return gameplayerprojmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamProjMeta::set_allocated_gameplayerprojmetaroot(::std::string* gameplayerprojmetaroot) {
  if (gameplayerprojmetaroot != NULL) {
    set_has_gameplayerprojmetaroot();
  } else {
    clear_has_gameplayerprojmetaroot();
  }
  gameplayerprojmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameplayerprojmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.gameplayerprojmetaroot)
}

// optional bytes gamedatametaid = 70;
inline bool TeamProjMeta::has_gamedatametaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamProjMeta::set_has_gamedatametaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamProjMeta::clear_has_gamedatametaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamProjMeta::clear_gamedatametaid() {
  gamedatametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamedatametaid();
}
inline const ::std::string& TeamProjMeta::gamedatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamProjMeta.gamedatametaid)
  return gamedatametaid_.GetNoArena();
}
inline void TeamProjMeta::set_gamedatametaid(const ::std::string& value) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamProjMeta.gamedatametaid)
}
#if LANG_CXX11
inline void TeamProjMeta::set_gamedatametaid(::std::string&& value) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamProjMeta.gamedatametaid)
}
#endif
inline void TeamProjMeta::set_gamedatametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamProjMeta.gamedatametaid)
}
inline void TeamProjMeta::set_gamedatametaid(const void* value, size_t size) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamProjMeta.gamedatametaid)
}
inline ::std::string* TeamProjMeta::mutable_gamedatametaid() {
  set_has_gamedatametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamProjMeta.gamedatametaid)
  return gamedatametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamProjMeta::release_gamedatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamProjMeta.gamedatametaid)
  clear_has_gamedatametaid();
  return gamedatametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamProjMeta::set_allocated_gamedatametaid(::std::string* gamedatametaid) {
  if (gamedatametaid != NULL) {
    set_has_gamedatametaid();
  } else {
    clear_has_gamedatametaid();
  }
  gamedatametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedatametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamProjMeta.gamedatametaid)
}

// -------------------------------------------------------------------

// TeamResultMeta

// optional string gameid = 20;
inline bool TeamResultMeta::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamResultMeta::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamResultMeta::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamResultMeta::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& TeamResultMeta::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.gameid)
  return gameid_.GetNoArena();
}
inline void TeamResultMeta::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.gameid)
}
#if LANG_CXX11
inline void TeamResultMeta::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.gameid)
}
#endif
inline void TeamResultMeta::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.gameid)
}
inline void TeamResultMeta::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.gameid)
}
inline ::std::string* TeamResultMeta::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamResultMeta::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamResultMeta::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.gameid)
}

// optional string team = 30;
inline bool TeamResultMeta::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamResultMeta::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamResultMeta::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamResultMeta::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team();
}
inline const ::std::string& TeamResultMeta::team() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.team)
  return team_.GetNoArena();
}
inline void TeamResultMeta::set_team(const ::std::string& value) {
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.team)
}
#if LANG_CXX11
inline void TeamResultMeta::set_team(::std::string&& value) {
  set_has_team();
  team_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.team)
}
#endif
inline void TeamResultMeta::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.team)
}
inline void TeamResultMeta::set_team(const char* value, size_t size) {
  set_has_team();
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.team)
}
inline ::std::string* TeamResultMeta::mutable_team() {
  set_has_team();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamResultMeta::release_team() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.team)
  clear_has_team();
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamResultMeta::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    set_has_team();
  } else {
    clear_has_team();
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.team)
}

// optional uint32 kickofftime = 40;
inline bool TeamResultMeta::has_kickofftime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamResultMeta::set_has_kickofftime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamResultMeta::clear_has_kickofftime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamResultMeta::clear_kickofftime() {
  kickofftime_ = 0u;
  clear_has_kickofftime();
}
inline ::google::protobuf::uint32 TeamResultMeta::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.kickofftime)
  return kickofftime_;
}
inline void TeamResultMeta::set_kickofftime(::google::protobuf::uint32 value) {
  set_has_kickofftime();
  kickofftime_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.kickofftime)
}

// optional uint32 week = 50;
inline bool TeamResultMeta::has_week() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamResultMeta::set_has_week() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamResultMeta::clear_has_week() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamResultMeta::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 TeamResultMeta::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.week)
  return week_;
}
inline void TeamResultMeta::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.week)
}

// optional bytes playerresultmetaroot = 60;
inline bool TeamResultMeta::has_playerresultmetaroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamResultMeta::set_has_playerresultmetaroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamResultMeta::clear_has_playerresultmetaroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamResultMeta::clear_playerresultmetaroot() {
  playerresultmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerresultmetaroot();
}
inline const ::std::string& TeamResultMeta::playerresultmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.playerresultmetaroot)
  return playerresultmetaroot_.GetNoArena();
}
inline void TeamResultMeta::set_playerresultmetaroot(const ::std::string& value) {
  set_has_playerresultmetaroot();
  playerresultmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.playerresultmetaroot)
}
#if LANG_CXX11
inline void TeamResultMeta::set_playerresultmetaroot(::std::string&& value) {
  set_has_playerresultmetaroot();
  playerresultmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.playerresultmetaroot)
}
#endif
inline void TeamResultMeta::set_playerresultmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerresultmetaroot();
  playerresultmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.playerresultmetaroot)
}
inline void TeamResultMeta::set_playerresultmetaroot(const void* value, size_t size) {
  set_has_playerresultmetaroot();
  playerresultmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.playerresultmetaroot)
}
inline ::std::string* TeamResultMeta::mutable_playerresultmetaroot() {
  set_has_playerresultmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.playerresultmetaroot)
  return playerresultmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamResultMeta::release_playerresultmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.playerresultmetaroot)
  clear_has_playerresultmetaroot();
  return playerresultmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamResultMeta::set_allocated_playerresultmetaroot(::std::string* playerresultmetaroot) {
  if (playerresultmetaroot != NULL) {
    set_has_playerresultmetaroot();
  } else {
    clear_has_playerresultmetaroot();
  }
  playerresultmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerresultmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.playerresultmetaroot)
}

// optional bytes resultdatametaid = 70;
inline bool TeamResultMeta::has_resultdatametaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamResultMeta::set_has_resultdatametaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamResultMeta::clear_has_resultdatametaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamResultMeta::clear_resultdatametaid() {
  resultdatametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultdatametaid();
}
inline const ::std::string& TeamResultMeta::resultdatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamResultMeta.resultdatametaid)
  return resultdatametaid_.GetNoArena();
}
inline void TeamResultMeta::set_resultdatametaid(const ::std::string& value) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamResultMeta.resultdatametaid)
}
#if LANG_CXX11
inline void TeamResultMeta::set_resultdatametaid(::std::string&& value) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamResultMeta.resultdatametaid)
}
#endif
inline void TeamResultMeta::set_resultdatametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamResultMeta.resultdatametaid)
}
inline void TeamResultMeta::set_resultdatametaid(const void* value, size_t size) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamResultMeta.resultdatametaid)
}
inline ::std::string* TeamResultMeta::mutable_resultdatametaid() {
  set_has_resultdatametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamResultMeta.resultdatametaid)
  return resultdatametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamResultMeta::release_resultdatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamResultMeta.resultdatametaid)
  clear_has_resultdatametaid();
  return resultdatametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamResultMeta::set_allocated_resultdatametaid(::std::string* resultdatametaid) {
  if (resultdatametaid != NULL) {
    set_has_resultdatametaid();
  } else {
    clear_has_resultdatametaid();
  }
  resultdatametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultdatametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamResultMeta.resultdatametaid)
}

// -------------------------------------------------------------------

// GamePlayerProjMeta

// optional string playerid = 20;
inline bool GamePlayerProjMeta::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerProjMeta::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerProjMeta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerProjMeta::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& GamePlayerProjMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.playerid)
  return playerid_.GetNoArena();
}
inline void GamePlayerProjMeta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.playerid)
}
#if LANG_CXX11
inline void GamePlayerProjMeta::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.playerid)
}
#endif
inline void GamePlayerProjMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.playerid)
}
inline void GamePlayerProjMeta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.playerid)
}
inline ::std::string* GamePlayerProjMeta::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePlayerProjMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePlayerProjMeta::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.playerid)
}

// optional bytes gamestatusmetaid = 30;
inline bool GamePlayerProjMeta::has_gamestatusmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerProjMeta::set_has_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerProjMeta::clear_has_gamestatusmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerProjMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamestatusmetaid();
}
inline const ::std::string& GamePlayerProjMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
  return gamestatusmetaid_.GetNoArena();
}
inline void GamePlayerProjMeta::set_gamestatusmetaid(const ::std::string& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
#if LANG_CXX11
inline void GamePlayerProjMeta::set_gamestatusmetaid(::std::string&& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
#endif
inline void GamePlayerProjMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
inline void GamePlayerProjMeta::set_gamestatusmetaid(const void* value, size_t size) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}
inline ::std::string* GamePlayerProjMeta::mutable_gamestatusmetaid() {
  set_has_gamestatusmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
  return gamestatusmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePlayerProjMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
  clear_has_gamestatusmetaid();
  return gamestatusmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePlayerProjMeta::set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid) {
  if (gamestatusmetaid != NULL) {
    set_has_gamestatusmetaid();
  } else {
    clear_has_gamestatusmetaid();
  }
  gamestatusmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.gamestatusmetaid)
}

// optional bytes projmetaplayerroot = 60;
inline bool GamePlayerProjMeta::has_projmetaplayerroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePlayerProjMeta::set_has_projmetaplayerroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePlayerProjMeta::clear_has_projmetaplayerroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePlayerProjMeta::clear_projmetaplayerroot() {
  projmetaplayerroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projmetaplayerroot();
}
inline const ::std::string& GamePlayerProjMeta::projmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
  return projmetaplayerroot_.GetNoArena();
}
inline void GamePlayerProjMeta::set_projmetaplayerroot(const ::std::string& value) {
  set_has_projmetaplayerroot();
  projmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
#if LANG_CXX11
inline void GamePlayerProjMeta::set_projmetaplayerroot(::std::string&& value) {
  set_has_projmetaplayerroot();
  projmetaplayerroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
#endif
inline void GamePlayerProjMeta::set_projmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_projmetaplayerroot();
  projmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
inline void GamePlayerProjMeta::set_projmetaplayerroot(const void* value, size_t size) {
  set_has_projmetaplayerroot();
  projmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}
inline ::std::string* GamePlayerProjMeta::mutable_projmetaplayerroot() {
  set_has_projmetaplayerroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
  return projmetaplayerroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePlayerProjMeta::release_projmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
  clear_has_projmetaplayerroot();
  return projmetaplayerroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePlayerProjMeta::set_allocated_projmetaplayerroot(::std::string* projmetaplayerroot) {
  if (projmetaplayerroot != NULL) {
    set_has_projmetaplayerroot();
  } else {
    clear_has_projmetaplayerroot();
  }
  projmetaplayerroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projmetaplayerroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.projmetaplayerroot)
}

// optional bytes posmetaplayerroot = 70;
inline bool GamePlayerProjMeta::has_posmetaplayerroot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamePlayerProjMeta::set_has_posmetaplayerroot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamePlayerProjMeta::clear_has_posmetaplayerroot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamePlayerProjMeta::clear_posmetaplayerroot() {
  posmetaplayerroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posmetaplayerroot();
}
inline const ::std::string& GamePlayerProjMeta::posmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
  return posmetaplayerroot_.GetNoArena();
}
inline void GamePlayerProjMeta::set_posmetaplayerroot(const ::std::string& value) {
  set_has_posmetaplayerroot();
  posmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
#if LANG_CXX11
inline void GamePlayerProjMeta::set_posmetaplayerroot(::std::string&& value) {
  set_has_posmetaplayerroot();
  posmetaplayerroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
#endif
inline void GamePlayerProjMeta::set_posmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posmetaplayerroot();
  posmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
inline void GamePlayerProjMeta::set_posmetaplayerroot(const void* value, size_t size) {
  set_has_posmetaplayerroot();
  posmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}
inline ::std::string* GamePlayerProjMeta::mutable_posmetaplayerroot() {
  set_has_posmetaplayerroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
  return posmetaplayerroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePlayerProjMeta::release_posmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
  clear_has_posmetaplayerroot();
  return posmetaplayerroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePlayerProjMeta::set_allocated_posmetaplayerroot(::std::string* posmetaplayerroot) {
  if (posmetaplayerroot != NULL) {
    set_has_posmetaplayerroot();
  } else {
    clear_has_posmetaplayerroot();
  }
  posmetaplayerroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posmetaplayerroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.posmetaplayerroot)
}

// optional bytes gamedatametaid = 80;
inline bool GamePlayerProjMeta::has_gamedatametaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamePlayerProjMeta::set_has_gamedatametaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamePlayerProjMeta::clear_has_gamedatametaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamePlayerProjMeta::clear_gamedatametaid() {
  gamedatametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamedatametaid();
}
inline const ::std::string& GamePlayerProjMeta::gamedatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GamePlayerProjMeta.gamedatametaid)
  return gamedatametaid_.GetNoArena();
}
inline void GamePlayerProjMeta::set_gamedatametaid(const ::std::string& value) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
#if LANG_CXX11
inline void GamePlayerProjMeta::set_gamedatametaid(::std::string&& value) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
#endif
inline void GamePlayerProjMeta::set_gamedatametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
inline void GamePlayerProjMeta::set_gamedatametaid(const void* value, size_t size) {
  set_has_gamedatametaid();
  gamedatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GamePlayerProjMeta.gamedatametaid)
}
inline ::std::string* GamePlayerProjMeta::mutable_gamedatametaid() {
  set_has_gamedatametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GamePlayerProjMeta.gamedatametaid)
  return gamedatametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GamePlayerProjMeta::release_gamedatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GamePlayerProjMeta.gamedatametaid)
  clear_has_gamedatametaid();
  return gamedatametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GamePlayerProjMeta::set_allocated_gamedatametaid(::std::string* gamedatametaid) {
  if (gamedatametaid != NULL) {
    set_has_gamedatametaid();
  } else {
    clear_has_gamedatametaid();
  }
  gamedatametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedatametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GamePlayerProjMeta.gamedatametaid)
}

// -------------------------------------------------------------------

// ProjMeta

// optional string name = 10;
inline bool ProjMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ProjMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.name)
  return name_.GetNoArena();
}
inline void ProjMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.name)
}
#if LANG_CXX11
inline void ProjMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.name)
}
#endif
inline void ProjMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.name)
}
inline void ProjMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.name)
}
inline ::std::string* ProjMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.name)
}

// optional int32 proj = 20;
inline bool ProjMeta::has_proj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjMeta::set_has_proj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjMeta::clear_has_proj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjMeta::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 ProjMeta::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.proj)
  return proj_;
}
inline void ProjMeta::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.proj)
}

// optional string playerid = 30;
inline bool ProjMeta::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjMeta::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjMeta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjMeta::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& ProjMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.playerid)
  return playerid_.GetNoArena();
}
inline void ProjMeta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.playerid)
}
#if LANG_CXX11
inline void ProjMeta::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.playerid)
}
#endif
inline void ProjMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.playerid)
}
inline void ProjMeta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.playerid)
}
inline ::std::string* ProjMeta::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjMeta::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.playerid)
}

// optional bytes txmetaid = 40;
inline bool ProjMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& ProjMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void ProjMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.txmetaid)
}
#if LANG_CXX11
inline void ProjMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.txmetaid)
}
#endif
inline void ProjMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.txmetaid)
}
inline void ProjMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.txmetaid)
}
inline ::std::string* ProjMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.txmetaid)
}

// optional bytes prev = 50;
inline bool ProjMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& ProjMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjMeta.prev)
  return prev_.GetNoArena();
}
inline void ProjMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjMeta.prev)
}
#if LANG_CXX11
inline void ProjMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjMeta.prev)
}
#endif
inline void ProjMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjMeta.prev)
}
inline void ProjMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjMeta.prev)
}
inline ::std::string* ProjMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjMeta.prev)
}

// -------------------------------------------------------------------

// PosMeta

// optional string name = 10;
inline bool PosMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PosMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PosMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PosMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PosMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.name)
  return name_.GetNoArena();
}
inline void PosMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.name)
}
#if LANG_CXX11
inline void PosMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.name)
}
#endif
inline void PosMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.name)
}
inline void PosMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.name)
}
inline ::std::string* PosMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PosMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PosMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.name)
}

// optional int32 qty = 20;
inline bool PosMeta::has_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PosMeta::set_has_qty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PosMeta::clear_has_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PosMeta::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline ::google::protobuf::int32 PosMeta::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.qty)
  return qty_;
}
inline void PosMeta::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.qty)
}

// optional int32 price = 30;
inline bool PosMeta::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PosMeta::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PosMeta::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PosMeta::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 PosMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.price)
  return price_;
}
inline void PosMeta::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.price)
}

// optional string playerid = 40;
inline bool PosMeta::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PosMeta::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PosMeta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PosMeta::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PosMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.playerid)
  return playerid_.GetNoArena();
}
inline void PosMeta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.playerid)
}
#if LANG_CXX11
inline void PosMeta::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.playerid)
}
#endif
inline void PosMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.playerid)
}
inline void PosMeta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.playerid)
}
inline ::std::string* PosMeta::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PosMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PosMeta::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.playerid)
}

// optional bytes txmetaid = 50;
inline bool PosMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PosMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PosMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PosMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& PosMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void PosMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.txmetaid)
}
#if LANG_CXX11
inline void PosMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.txmetaid)
}
#endif
inline void PosMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.txmetaid)
}
inline void PosMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.txmetaid)
}
inline ::std::string* PosMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PosMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PosMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.txmetaid)
}

// optional bytes prev = 60;
inline bool PosMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PosMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PosMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PosMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& PosMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.PosMeta.prev)
  return prev_.GetNoArena();
}
inline void PosMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PosMeta.prev)
}
#if LANG_CXX11
inline void PosMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PosMeta.prev)
}
#endif
inline void PosMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PosMeta.prev)
}
inline void PosMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PosMeta.prev)
}
inline ::std::string* PosMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.PosMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PosMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.PosMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PosMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PosMeta.prev)
}

// -------------------------------------------------------------------

// PlayerResultMeta

// optional bytes playergamestatsid = 10;
inline bool PlayerResultMeta::has_playergamestatsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerResultMeta::set_has_playergamestatsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerResultMeta::clear_has_playergamestatsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerResultMeta::clear_playergamestatsid() {
  playergamestatsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playergamestatsid();
}
inline const ::std::string& PlayerResultMeta::playergamestatsid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.playergamestatsid)
  return playergamestatsid_.GetNoArena();
}
inline void PlayerResultMeta::set_playergamestatsid(const ::std::string& value) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.playergamestatsid)
}
#if LANG_CXX11
inline void PlayerResultMeta::set_playergamestatsid(::std::string&& value) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.playergamestatsid)
}
#endif
inline void PlayerResultMeta::set_playergamestatsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.playergamestatsid)
}
inline void PlayerResultMeta::set_playergamestatsid(const void* value, size_t size) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.playergamestatsid)
}
inline ::std::string* PlayerResultMeta::mutable_playergamestatsid() {
  set_has_playergamestatsid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.playergamestatsid)
  return playergamestatsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerResultMeta::release_playergamestatsid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.playergamestatsid)
  clear_has_playergamestatsid();
  return playergamestatsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResultMeta::set_allocated_playergamestatsid(::std::string* playergamestatsid) {
  if (playergamestatsid != NULL) {
    set_has_playergamestatsid();
  } else {
    clear_has_playergamestatsid();
  }
  playergamestatsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playergamestatsid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.playergamestatsid)
}

// optional bytes gamestatusmetaid = 30;
inline bool PlayerResultMeta::has_gamestatusmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerResultMeta::set_has_gamestatusmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerResultMeta::clear_has_gamestatusmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerResultMeta::clear_gamestatusmetaid() {
  gamestatusmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamestatusmetaid();
}
inline const ::std::string& PlayerResultMeta::gamestatusmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.gamestatusmetaid)
  return gamestatusmetaid_.GetNoArena();
}
inline void PlayerResultMeta::set_gamestatusmetaid(const ::std::string& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
#if LANG_CXX11
inline void PlayerResultMeta::set_gamestatusmetaid(::std::string&& value) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
#endif
inline void PlayerResultMeta::set_gamestatusmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
inline void PlayerResultMeta::set_gamestatusmetaid(const void* value, size_t size) {
  set_has_gamestatusmetaid();
  gamestatusmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.gamestatusmetaid)
}
inline ::std::string* PlayerResultMeta::mutable_gamestatusmetaid() {
  set_has_gamestatusmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.gamestatusmetaid)
  return gamestatusmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerResultMeta::release_gamestatusmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.gamestatusmetaid)
  clear_has_gamestatusmetaid();
  return gamestatusmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResultMeta::set_allocated_gamestatusmetaid(::std::string* gamestatusmetaid) {
  if (gamestatusmetaid != NULL) {
    set_has_gamestatusmetaid();
  } else {
    clear_has_gamestatusmetaid();
  }
  gamestatusmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamestatusmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.gamestatusmetaid)
}

// optional bytes awardmetaplayerroot = 60;
inline bool PlayerResultMeta::has_awardmetaplayerroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerResultMeta::set_has_awardmetaplayerroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerResultMeta::clear_has_awardmetaplayerroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerResultMeta::clear_awardmetaplayerroot() {
  awardmetaplayerroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_awardmetaplayerroot();
}
inline const ::std::string& PlayerResultMeta::awardmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.awardmetaplayerroot)
  return awardmetaplayerroot_.GetNoArena();
}
inline void PlayerResultMeta::set_awardmetaplayerroot(const ::std::string& value) {
  set_has_awardmetaplayerroot();
  awardmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
#if LANG_CXX11
inline void PlayerResultMeta::set_awardmetaplayerroot(::std::string&& value) {
  set_has_awardmetaplayerroot();
  awardmetaplayerroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
#endif
inline void PlayerResultMeta::set_awardmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_awardmetaplayerroot();
  awardmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
inline void PlayerResultMeta::set_awardmetaplayerroot(const void* value, size_t size) {
  set_has_awardmetaplayerroot();
  awardmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}
inline ::std::string* PlayerResultMeta::mutable_awardmetaplayerroot() {
  set_has_awardmetaplayerroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.awardmetaplayerroot)
  return awardmetaplayerroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerResultMeta::release_awardmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.awardmetaplayerroot)
  clear_has_awardmetaplayerroot();
  return awardmetaplayerroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResultMeta::set_allocated_awardmetaplayerroot(::std::string* awardmetaplayerroot) {
  if (awardmetaplayerroot != NULL) {
    set_has_awardmetaplayerroot();
  } else {
    clear_has_awardmetaplayerroot();
  }
  awardmetaplayerroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), awardmetaplayerroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.awardmetaplayerroot)
}

// optional bytes pnlmetaplayerroot = 70;
inline bool PlayerResultMeta::has_pnlmetaplayerroot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerResultMeta::set_has_pnlmetaplayerroot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerResultMeta::clear_has_pnlmetaplayerroot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerResultMeta::clear_pnlmetaplayerroot() {
  pnlmetaplayerroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pnlmetaplayerroot();
}
inline const ::std::string& PlayerResultMeta::pnlmetaplayerroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
  return pnlmetaplayerroot_.GetNoArena();
}
inline void PlayerResultMeta::set_pnlmetaplayerroot(const ::std::string& value) {
  set_has_pnlmetaplayerroot();
  pnlmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
#if LANG_CXX11
inline void PlayerResultMeta::set_pnlmetaplayerroot(::std::string&& value) {
  set_has_pnlmetaplayerroot();
  pnlmetaplayerroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
#endif
inline void PlayerResultMeta::set_pnlmetaplayerroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pnlmetaplayerroot();
  pnlmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
inline void PlayerResultMeta::set_pnlmetaplayerroot(const void* value, size_t size) {
  set_has_pnlmetaplayerroot();
  pnlmetaplayerroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}
inline ::std::string* PlayerResultMeta::mutable_pnlmetaplayerroot() {
  set_has_pnlmetaplayerroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
  return pnlmetaplayerroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerResultMeta::release_pnlmetaplayerroot() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
  clear_has_pnlmetaplayerroot();
  return pnlmetaplayerroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResultMeta::set_allocated_pnlmetaplayerroot(::std::string* pnlmetaplayerroot) {
  if (pnlmetaplayerroot != NULL) {
    set_has_pnlmetaplayerroot();
  } else {
    clear_has_pnlmetaplayerroot();
  }
  pnlmetaplayerroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pnlmetaplayerroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.pnlmetaplayerroot)
}

// optional bytes resultdatametaid = 80;
inline bool PlayerResultMeta::has_resultdatametaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerResultMeta::set_has_resultdatametaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerResultMeta::clear_has_resultdatametaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerResultMeta::clear_resultdatametaid() {
  resultdatametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resultdatametaid();
}
inline const ::std::string& PlayerResultMeta::resultdatametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResultMeta.resultdatametaid)
  return resultdatametaid_.GetNoArena();
}
inline void PlayerResultMeta::set_resultdatametaid(const ::std::string& value) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResultMeta.resultdatametaid)
}
#if LANG_CXX11
inline void PlayerResultMeta::set_resultdatametaid(::std::string&& value) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerResultMeta.resultdatametaid)
}
#endif
inline void PlayerResultMeta::set_resultdatametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResultMeta.resultdatametaid)
}
inline void PlayerResultMeta::set_resultdatametaid(const void* value, size_t size) {
  set_has_resultdatametaid();
  resultdatametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResultMeta.resultdatametaid)
}
inline ::std::string* PlayerResultMeta::mutable_resultdatametaid() {
  set_has_resultdatametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResultMeta.resultdatametaid)
  return resultdatametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerResultMeta::release_resultdatametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerResultMeta.resultdatametaid)
  clear_has_resultdatametaid();
  return resultdatametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResultMeta::set_allocated_resultdatametaid(::std::string* resultdatametaid) {
  if (resultdatametaid != NULL) {
    set_has_resultdatametaid();
  } else {
    clear_has_resultdatametaid();
  }
  resultdatametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resultdatametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResultMeta.resultdatametaid)
}

// -------------------------------------------------------------------

// PlayerGameStats

// optional string playerid = 20;
inline bool PlayerGameStats::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGameStats::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGameStats::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGameStats::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerGameStats::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.playerid)
  return playerid_.GetNoArena();
}
inline void PlayerGameStats::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerGameStats.playerid)
}
#if LANG_CXX11
inline void PlayerGameStats::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerGameStats.playerid)
}
#endif
inline void PlayerGameStats::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerGameStats.playerid)
}
inline void PlayerGameStats::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerGameStats.playerid)
}
inline ::std::string* PlayerGameStats::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerGameStats.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerGameStats::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerGameStats.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerGameStats::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerGameStats.playerid)
}

// optional float result = 40;
inline bool PlayerGameStats::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerGameStats::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerGameStats::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerGameStats::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float PlayerGameStats::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.result)
  return result_;
}
inline void PlayerGameStats::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerGameStats.result)
}

// optional .fantasybit.Stats stats = 50;
inline bool PlayerGameStats::has_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGameStats::set_has_stats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGameStats::clear_has_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::Stats& PlayerGameStats::stats() const {
  const ::fantasybit::Stats* p = stats_;
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::Stats*>(
      &::fantasybit::_Stats_default_instance_);
}
inline ::fantasybit::Stats* PlayerGameStats::release_stats() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerGameStats.stats)
  clear_has_stats();
  ::fantasybit::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline ::fantasybit::Stats* PlayerGameStats::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::fantasybit::Stats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerGameStats.stats)
  return stats_;
}
inline void PlayerGameStats::set_allocated_stats(::fantasybit::Stats* stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stats_);
  }
  if (stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    set_has_stats();
  } else {
    clear_has_stats();
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerGameStats.stats)
}

// optional string gameid = 60;
inline bool PlayerGameStats::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGameStats::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGameStats::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGameStats::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& PlayerGameStats::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerGameStats.gameid)
  return gameid_.GetNoArena();
}
inline void PlayerGameStats::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerGameStats.gameid)
}
#if LANG_CXX11
inline void PlayerGameStats::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerGameStats.gameid)
}
#endif
inline void PlayerGameStats::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerGameStats.gameid)
}
inline void PlayerGameStats::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerGameStats.gameid)
}
inline ::std::string* PlayerGameStats::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerGameStats.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerGameStats::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerGameStats.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerGameStats::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerGameStats.gameid)
}

// -------------------------------------------------------------------

// AwardMeta

// optional string name = 10;
inline bool AwardMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AwardMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AwardMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AwardMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AwardMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.name)
  return name_.GetNoArena();
}
inline void AwardMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.name)
}
#if LANG_CXX11
inline void AwardMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AwardMeta.name)
}
#endif
inline void AwardMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.AwardMeta.name)
}
inline void AwardMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AwardMeta.name)
}
inline ::std::string* AwardMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.AwardMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AwardMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.AwardMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AwardMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AwardMeta.name)
}

// optional int32 proj = 20;
inline bool AwardMeta::has_proj() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AwardMeta::set_has_proj() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AwardMeta::clear_has_proj() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AwardMeta::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 AwardMeta::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.proj)
  return proj_;
}
inline void AwardMeta::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.proj)
}

// optional uint64 award = 30;
inline bool AwardMeta::has_award() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AwardMeta::set_has_award() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AwardMeta::clear_has_award() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AwardMeta::clear_award() {
  award_ = GOOGLE_ULONGLONG(0);
  clear_has_award();
}
inline ::google::protobuf::uint64 AwardMeta::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.award)
  return award_;
}
inline void AwardMeta::set_award(::google::protobuf::uint64 value) {
  set_has_award();
  award_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.award)
}

// optional bytes projmetaid = 40;
inline bool AwardMeta::has_projmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AwardMeta::set_has_projmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AwardMeta::clear_has_projmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AwardMeta::clear_projmetaid() {
  projmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projmetaid();
}
inline const ::std::string& AwardMeta::projmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.projmetaid)
  return projmetaid_.GetNoArena();
}
inline void AwardMeta::set_projmetaid(const ::std::string& value) {
  set_has_projmetaid();
  projmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.projmetaid)
}
#if LANG_CXX11
inline void AwardMeta::set_projmetaid(::std::string&& value) {
  set_has_projmetaid();
  projmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AwardMeta.projmetaid)
}
#endif
inline void AwardMeta::set_projmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_projmetaid();
  projmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.AwardMeta.projmetaid)
}
inline void AwardMeta::set_projmetaid(const void* value, size_t size) {
  set_has_projmetaid();
  projmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AwardMeta.projmetaid)
}
inline ::std::string* AwardMeta::mutable_projmetaid() {
  set_has_projmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.AwardMeta.projmetaid)
  return projmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AwardMeta::release_projmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.AwardMeta.projmetaid)
  clear_has_projmetaid();
  return projmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AwardMeta::set_allocated_projmetaid(::std::string* projmetaid) {
  if (projmetaid != NULL) {
    set_has_projmetaid();
  } else {
    clear_has_projmetaid();
  }
  projmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AwardMeta.projmetaid)
}

// optional bytes playergamestatsid = 50;
inline bool AwardMeta::has_playergamestatsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AwardMeta::set_has_playergamestatsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AwardMeta::clear_has_playergamestatsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AwardMeta::clear_playergamestatsid() {
  playergamestatsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playergamestatsid();
}
inline const ::std::string& AwardMeta::playergamestatsid() const {
  // @@protoc_insertion_point(field_get:fantasybit.AwardMeta.playergamestatsid)
  return playergamestatsid_.GetNoArena();
}
inline void AwardMeta::set_playergamestatsid(const ::std::string& value) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.AwardMeta.playergamestatsid)
}
#if LANG_CXX11
inline void AwardMeta::set_playergamestatsid(::std::string&& value) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AwardMeta.playergamestatsid)
}
#endif
inline void AwardMeta::set_playergamestatsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.AwardMeta.playergamestatsid)
}
inline void AwardMeta::set_playergamestatsid(const void* value, size_t size) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AwardMeta.playergamestatsid)
}
inline ::std::string* AwardMeta::mutable_playergamestatsid() {
  set_has_playergamestatsid();
  // @@protoc_insertion_point(field_mutable:fantasybit.AwardMeta.playergamestatsid)
  return playergamestatsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AwardMeta::release_playergamestatsid() {
  // @@protoc_insertion_point(field_release:fantasybit.AwardMeta.playergamestatsid)
  clear_has_playergamestatsid();
  return playergamestatsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AwardMeta::set_allocated_playergamestatsid(::std::string* playergamestatsid) {
  if (playergamestatsid != NULL) {
    set_has_playergamestatsid();
  } else {
    clear_has_playergamestatsid();
  }
  playergamestatsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playergamestatsid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AwardMeta.playergamestatsid)
}

// -------------------------------------------------------------------

// PnlMeta

// optional string name = 10;
inline bool PnlMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PnlMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PnlMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PnlMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PnlMeta::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.name)
  return name_.GetNoArena();
}
inline void PnlMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.name)
}
#if LANG_CXX11
inline void PnlMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PnlMeta.name)
}
#endif
inline void PnlMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PnlMeta.name)
}
inline void PnlMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PnlMeta.name)
}
inline ::std::string* PnlMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.PnlMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PnlMeta::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.PnlMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PnlMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PnlMeta.name)
}

// optional int32 qty = 20;
inline bool PnlMeta::has_qty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PnlMeta::set_has_qty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PnlMeta::clear_has_qty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PnlMeta::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline ::google::protobuf::int32 PnlMeta::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.qty)
  return qty_;
}
inline void PnlMeta::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.qty)
}

// optional int32 price = 30;
inline bool PnlMeta::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PnlMeta::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PnlMeta::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PnlMeta::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 PnlMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.price)
  return price_;
}
inline void PnlMeta::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.price)
}

// optional int64 pnl = 40;
inline bool PnlMeta::has_pnl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PnlMeta::set_has_pnl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PnlMeta::clear_has_pnl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PnlMeta::clear_pnl() {
  pnl_ = GOOGLE_LONGLONG(0);
  clear_has_pnl();
}
inline ::google::protobuf::int64 PnlMeta::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.pnl)
  return pnl_;
}
inline void PnlMeta::set_pnl(::google::protobuf::int64 value) {
  set_has_pnl();
  pnl_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.pnl)
}

// optional bytes posmetaid = 50;
inline bool PnlMeta::has_posmetaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PnlMeta::set_has_posmetaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PnlMeta::clear_has_posmetaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PnlMeta::clear_posmetaid() {
  posmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posmetaid();
}
inline const ::std::string& PnlMeta::posmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.posmetaid)
  return posmetaid_.GetNoArena();
}
inline void PnlMeta::set_posmetaid(const ::std::string& value) {
  set_has_posmetaid();
  posmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.posmetaid)
}
#if LANG_CXX11
inline void PnlMeta::set_posmetaid(::std::string&& value) {
  set_has_posmetaid();
  posmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PnlMeta.posmetaid)
}
#endif
inline void PnlMeta::set_posmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posmetaid();
  posmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PnlMeta.posmetaid)
}
inline void PnlMeta::set_posmetaid(const void* value, size_t size) {
  set_has_posmetaid();
  posmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PnlMeta.posmetaid)
}
inline ::std::string* PnlMeta::mutable_posmetaid() {
  set_has_posmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PnlMeta.posmetaid)
  return posmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PnlMeta::release_posmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PnlMeta.posmetaid)
  clear_has_posmetaid();
  return posmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PnlMeta::set_allocated_posmetaid(::std::string* posmetaid) {
  if (posmetaid != NULL) {
    set_has_posmetaid();
  } else {
    clear_has_posmetaid();
  }
  posmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PnlMeta.posmetaid)
}

// optional bytes playergamestatsid = 60;
inline bool PnlMeta::has_playergamestatsid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PnlMeta::set_has_playergamestatsid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PnlMeta::clear_has_playergamestatsid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PnlMeta::clear_playergamestatsid() {
  playergamestatsid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playergamestatsid();
}
inline const ::std::string& PnlMeta::playergamestatsid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PnlMeta.playergamestatsid)
  return playergamestatsid_.GetNoArena();
}
inline void PnlMeta::set_playergamestatsid(const ::std::string& value) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PnlMeta.playergamestatsid)
}
#if LANG_CXX11
inline void PnlMeta::set_playergamestatsid(::std::string&& value) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PnlMeta.playergamestatsid)
}
#endif
inline void PnlMeta::set_playergamestatsid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PnlMeta.playergamestatsid)
}
inline void PnlMeta::set_playergamestatsid(const void* value, size_t size) {
  set_has_playergamestatsid();
  playergamestatsid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PnlMeta.playergamestatsid)
}
inline ::std::string* PnlMeta::mutable_playergamestatsid() {
  set_has_playergamestatsid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PnlMeta.playergamestatsid)
  return playergamestatsid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PnlMeta::release_playergamestatsid() {
  // @@protoc_insertion_point(field_release:fantasybit.PnlMeta.playergamestatsid)
  clear_has_playergamestatsid();
  return playergamestatsid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PnlMeta::set_allocated_playergamestatsid(::std::string* playergamestatsid) {
  if (playergamestatsid != NULL) {
    set_has_playergamestatsid();
  } else {
    clear_has_playergamestatsid();
  }
  playergamestatsid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playergamestatsid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PnlMeta.playergamestatsid)
}

// -------------------------------------------------------------------

// PlayerMarketState

// optional bytes limitbookmetaid = 10;
inline bool PlayerMarketState::has_limitbookmetaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMarketState::set_has_limitbookmetaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMarketState::clear_has_limitbookmetaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMarketState::clear_limitbookmetaid() {
  limitbookmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_limitbookmetaid();
}
inline const ::std::string& PlayerMarketState::limitbookmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.limitbookmetaid)
  return limitbookmetaid_.GetNoArena();
}
inline void PlayerMarketState::set_limitbookmetaid(const ::std::string& value) {
  set_has_limitbookmetaid();
  limitbookmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.limitbookmetaid)
}
#if LANG_CXX11
inline void PlayerMarketState::set_limitbookmetaid(::std::string&& value) {
  set_has_limitbookmetaid();
  limitbookmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.limitbookmetaid)
}
#endif
inline void PlayerMarketState::set_limitbookmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_limitbookmetaid();
  limitbookmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.limitbookmetaid)
}
inline void PlayerMarketState::set_limitbookmetaid(const void* value, size_t size) {
  set_has_limitbookmetaid();
  limitbookmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.limitbookmetaid)
}
inline ::std::string* PlayerMarketState::mutable_limitbookmetaid() {
  set_has_limitbookmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.limitbookmetaid)
  return limitbookmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMarketState::release_limitbookmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.limitbookmetaid)
  clear_has_limitbookmetaid();
  return limitbookmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMarketState::set_allocated_limitbookmetaid(::std::string* limitbookmetaid) {
  if (limitbookmetaid != NULL) {
    set_has_limitbookmetaid();
  } else {
    clear_has_limitbookmetaid();
  }
  limitbookmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limitbookmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.limitbookmetaid)
}

// optional string playerid = 20;
inline bool PlayerMarketState::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMarketState::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMarketState::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMarketState::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerMarketState::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.playerid)
  return playerid_.GetNoArena();
}
inline void PlayerMarketState::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.playerid)
}
#if LANG_CXX11
inline void PlayerMarketState::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.playerid)
}
#endif
inline void PlayerMarketState::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.playerid)
}
inline void PlayerMarketState::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.playerid)
}
inline ::std::string* PlayerMarketState::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMarketState::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMarketState::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.playerid)
}

// optional bytes marketticmetaid = 30;
inline bool PlayerMarketState::has_marketticmetaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMarketState::set_has_marketticmetaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMarketState::clear_has_marketticmetaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMarketState::clear_marketticmetaid() {
  marketticmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marketticmetaid();
}
inline const ::std::string& PlayerMarketState::marketticmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.marketticmetaid)
  return marketticmetaid_.GetNoArena();
}
inline void PlayerMarketState::set_marketticmetaid(const ::std::string& value) {
  set_has_marketticmetaid();
  marketticmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.marketticmetaid)
}
#if LANG_CXX11
inline void PlayerMarketState::set_marketticmetaid(::std::string&& value) {
  set_has_marketticmetaid();
  marketticmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.marketticmetaid)
}
#endif
inline void PlayerMarketState::set_marketticmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marketticmetaid();
  marketticmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.marketticmetaid)
}
inline void PlayerMarketState::set_marketticmetaid(const void* value, size_t size) {
  set_has_marketticmetaid();
  marketticmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.marketticmetaid)
}
inline ::std::string* PlayerMarketState::mutable_marketticmetaid() {
  set_has_marketticmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.marketticmetaid)
  return marketticmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMarketState::release_marketticmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.marketticmetaid)
  clear_has_marketticmetaid();
  return marketticmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMarketState::set_allocated_marketticmetaid(::std::string* marketticmetaid) {
  if (marketticmetaid != NULL) {
    set_has_marketticmetaid();
  } else {
    clear_has_marketticmetaid();
  }
  marketticmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketticmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.marketticmetaid)
}

// optional bool locked = 31;
inline bool PlayerMarketState::has_locked() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerMarketState::set_has_locked() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerMarketState::clear_has_locked() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerMarketState::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool PlayerMarketState::locked() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.locked)
  return locked_;
}
inline void PlayerMarketState::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.locked)
}

// optional bytes prev = 40;
inline bool PlayerMarketState::has_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMarketState::set_has_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMarketState::clear_has_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerMarketState::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& PlayerMarketState::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.prev)
  return prev_.GetNoArena();
}
inline void PlayerMarketState::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.prev)
}
#if LANG_CXX11
inline void PlayerMarketState::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.prev)
}
#endif
inline void PlayerMarketState::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.prev)
}
inline void PlayerMarketState::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.prev)
}
inline ::std::string* PlayerMarketState::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMarketState::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMarketState::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.prev)
}

// optional bytes next = 50;
inline bool PlayerMarketState::has_next() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMarketState::set_has_next() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMarketState::clear_has_next() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerMarketState::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& PlayerMarketState::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMarketState.next)
  return next_.GetNoArena();
}
inline void PlayerMarketState::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMarketState.next)
}
#if LANG_CXX11
inline void PlayerMarketState::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMarketState.next)
}
#endif
inline void PlayerMarketState::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMarketState.next)
}
inline void PlayerMarketState::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMarketState.next)
}
inline ::std::string* PlayerMarketState::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMarketState.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMarketState::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMarketState.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMarketState::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMarketState.next)
}

// -------------------------------------------------------------------

// LimitBookMeta

// optional int32 bid = 10;
inline bool LimitBookMeta::has_bid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LimitBookMeta::set_has_bid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LimitBookMeta::clear_has_bid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LimitBookMeta::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline ::google::protobuf::int32 LimitBookMeta::bid() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.bid)
  return bid_;
}
inline void LimitBookMeta::set_bid(::google::protobuf::int32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.bid)
}

// optional int32 bidsize = 20;
inline bool LimitBookMeta::has_bidsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LimitBookMeta::set_has_bidsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LimitBookMeta::clear_has_bidsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LimitBookMeta::clear_bidsize() {
  bidsize_ = 0;
  clear_has_bidsize();
}
inline ::google::protobuf::int32 LimitBookMeta::bidsize() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.bidsize)
  return bidsize_;
}
inline void LimitBookMeta::set_bidsize(::google::protobuf::int32 value) {
  set_has_bidsize();
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.bidsize)
}

// optional int32 asksize = 30;
inline bool LimitBookMeta::has_asksize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LimitBookMeta::set_has_asksize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LimitBookMeta::clear_has_asksize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LimitBookMeta::clear_asksize() {
  asksize_ = 0;
  clear_has_asksize();
}
inline ::google::protobuf::int32 LimitBookMeta::asksize() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.asksize)
  return asksize_;
}
inline void LimitBookMeta::set_asksize(::google::protobuf::int32 value) {
  set_has_asksize();
  asksize_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.asksize)
}

// optional int32 ask = 40;
inline bool LimitBookMeta::has_ask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LimitBookMeta::set_has_ask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LimitBookMeta::clear_has_ask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LimitBookMeta::clear_ask() {
  ask_ = 0;
  clear_has_ask();
}
inline ::google::protobuf::int32 LimitBookMeta::ask() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.ask)
  return ask_;
}
inline void LimitBookMeta::set_ask(::google::protobuf::int32 value) {
  set_has_ask();
  ask_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.ask)
}

// optional bytes bidordermetaroot = 50;
inline bool LimitBookMeta::has_bidordermetaroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimitBookMeta::set_has_bidordermetaroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimitBookMeta::clear_has_bidordermetaroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimitBookMeta::clear_bidordermetaroot() {
  bidordermetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bidordermetaroot();
}
inline const ::std::string& LimitBookMeta::bidordermetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.bidordermetaroot)
  return bidordermetaroot_.GetNoArena();
}
inline void LimitBookMeta::set_bidordermetaroot(const ::std::string& value) {
  set_has_bidordermetaroot();
  bidordermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.bidordermetaroot)
}
#if LANG_CXX11
inline void LimitBookMeta::set_bidordermetaroot(::std::string&& value) {
  set_has_bidordermetaroot();
  bidordermetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LimitBookMeta.bidordermetaroot)
}
#endif
inline void LimitBookMeta::set_bidordermetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bidordermetaroot();
  bidordermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.LimitBookMeta.bidordermetaroot)
}
inline void LimitBookMeta::set_bidordermetaroot(const void* value, size_t size) {
  set_has_bidordermetaroot();
  bidordermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LimitBookMeta.bidordermetaroot)
}
inline ::std::string* LimitBookMeta::mutable_bidordermetaroot() {
  set_has_bidordermetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.LimitBookMeta.bidordermetaroot)
  return bidordermetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LimitBookMeta::release_bidordermetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.LimitBookMeta.bidordermetaroot)
  clear_has_bidordermetaroot();
  return bidordermetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitBookMeta::set_allocated_bidordermetaroot(::std::string* bidordermetaroot) {
  if (bidordermetaroot != NULL) {
    set_has_bidordermetaroot();
  } else {
    clear_has_bidordermetaroot();
  }
  bidordermetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidordermetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LimitBookMeta.bidordermetaroot)
}

// optional bytes askordermetaroot = 60;
inline bool LimitBookMeta::has_askordermetaroot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LimitBookMeta::set_has_askordermetaroot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LimitBookMeta::clear_has_askordermetaroot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LimitBookMeta::clear_askordermetaroot() {
  askordermetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_askordermetaroot();
}
inline const ::std::string& LimitBookMeta::askordermetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.LimitBookMeta.askordermetaroot)
  return askordermetaroot_.GetNoArena();
}
inline void LimitBookMeta::set_askordermetaroot(const ::std::string& value) {
  set_has_askordermetaroot();
  askordermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.LimitBookMeta.askordermetaroot)
}
#if LANG_CXX11
inline void LimitBookMeta::set_askordermetaroot(::std::string&& value) {
  set_has_askordermetaroot();
  askordermetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.LimitBookMeta.askordermetaroot)
}
#endif
inline void LimitBookMeta::set_askordermetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_askordermetaroot();
  askordermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.LimitBookMeta.askordermetaroot)
}
inline void LimitBookMeta::set_askordermetaroot(const void* value, size_t size) {
  set_has_askordermetaroot();
  askordermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.LimitBookMeta.askordermetaroot)
}
inline ::std::string* LimitBookMeta::mutable_askordermetaroot() {
  set_has_askordermetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.LimitBookMeta.askordermetaroot)
  return askordermetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LimitBookMeta::release_askordermetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.LimitBookMeta.askordermetaroot)
  clear_has_askordermetaroot();
  return askordermetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitBookMeta::set_allocated_askordermetaroot(::std::string* askordermetaroot) {
  if (askordermetaroot != NULL) {
    set_has_askordermetaroot();
  } else {
    clear_has_askordermetaroot();
  }
  askordermetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), askordermetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.LimitBookMeta.askordermetaroot)
}

// -------------------------------------------------------------------

// MarketTicMeta

// optional int32 price = 20;
inline bool MarketTicMeta::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketTicMeta::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketTicMeta::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketTicMeta::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 MarketTicMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.price)
  return price_;
}
inline void MarketTicMeta::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.price)
}

// optional int32 size = 30;
inline bool MarketTicMeta::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketTicMeta::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketTicMeta::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketTicMeta::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 MarketTicMeta::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.size)
  return size_;
}
inline void MarketTicMeta::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.size)
}

// optional bytes orderfillhead = 40;
inline bool MarketTicMeta::has_orderfillhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketTicMeta::set_has_orderfillhead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketTicMeta::clear_has_orderfillhead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketTicMeta::clear_orderfillhead() {
  orderfillhead_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderfillhead();
}
inline const ::std::string& MarketTicMeta::orderfillhead() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.orderfillhead)
  return orderfillhead_.GetNoArena();
}
inline void MarketTicMeta::set_orderfillhead(const ::std::string& value) {
  set_has_orderfillhead();
  orderfillhead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.orderfillhead)
}
#if LANG_CXX11
inline void MarketTicMeta::set_orderfillhead(::std::string&& value) {
  set_has_orderfillhead();
  orderfillhead_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MarketTicMeta.orderfillhead)
}
#endif
inline void MarketTicMeta::set_orderfillhead(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderfillhead();
  orderfillhead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MarketTicMeta.orderfillhead)
}
inline void MarketTicMeta::set_orderfillhead(const void* value, size_t size) {
  set_has_orderfillhead();
  orderfillhead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MarketTicMeta.orderfillhead)
}
inline ::std::string* MarketTicMeta::mutable_orderfillhead() {
  set_has_orderfillhead();
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketTicMeta.orderfillhead)
  return orderfillhead_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketTicMeta::release_orderfillhead() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketTicMeta.orderfillhead)
  clear_has_orderfillhead();
  return orderfillhead_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketTicMeta::set_allocated_orderfillhead(::std::string* orderfillhead) {
  if (orderfillhead != NULL) {
    set_has_orderfillhead();
  } else {
    clear_has_orderfillhead();
  }
  orderfillhead_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderfillhead);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketTicMeta.orderfillhead)
}

// optional bytes prev = 50;
inline bool MarketTicMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketTicMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketTicMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketTicMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& MarketTicMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.MarketTicMeta.prev)
  return prev_.GetNoArena();
}
inline void MarketTicMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MarketTicMeta.prev)
}
#if LANG_CXX11
inline void MarketTicMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MarketTicMeta.prev)
}
#endif
inline void MarketTicMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MarketTicMeta.prev)
}
inline void MarketTicMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MarketTicMeta.prev)
}
inline ::std::string* MarketTicMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.MarketTicMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketTicMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.MarketTicMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketTicMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MarketTicMeta.prev)
}

// -------------------------------------------------------------------

// OrderMeta

// optional int32 refnum = 1;
inline bool OrderMeta::has_refnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderMeta::set_has_refnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderMeta::clear_has_refnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderMeta::clear_refnum() {
  refnum_ = 0;
  clear_has_refnum();
}
inline ::google::protobuf::int32 OrderMeta::refnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.refnum)
  return refnum_;
}
inline void OrderMeta::set_refnum(::google::protobuf::int32 value) {
  set_has_refnum();
  refnum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.refnum)
}

// optional string fname = 10;
inline bool OrderMeta::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderMeta::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderMeta::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderMeta::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& OrderMeta::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.fname)
  return fname_.GetNoArena();
}
inline void OrderMeta::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.fname)
}
#if LANG_CXX11
inline void OrderMeta::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.fname)
}
#endif
inline void OrderMeta::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.fname)
}
inline void OrderMeta::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.fname)
}
inline ::std::string* OrderMeta::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderMeta::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderMeta::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.fname)
}

// optional string playerid = 20;
inline bool OrderMeta::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderMeta::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderMeta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderMeta::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& OrderMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.playerid)
  return playerid_.GetNoArena();
}
inline void OrderMeta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.playerid)
}
#if LANG_CXX11
inline void OrderMeta::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.playerid)
}
#endif
inline void OrderMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.playerid)
}
inline void OrderMeta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.playerid)
}
inline ::std::string* OrderMeta::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderMeta::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.playerid)
}

// optional bool buyside = 30;
inline bool OrderMeta::has_buyside() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderMeta::set_has_buyside() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderMeta::clear_has_buyside() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderMeta::clear_buyside() {
  buyside_ = false;
  clear_has_buyside();
}
inline bool OrderMeta::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.buyside)
  return buyside_;
}
inline void OrderMeta::set_buyside(bool value) {
  set_has_buyside();
  buyside_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.buyside)
}

// optional int32 size = 40;
inline bool OrderMeta::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderMeta::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderMeta::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderMeta::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 OrderMeta::size() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.size)
  return size_;
}
inline void OrderMeta::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.size)
}

// optional int32 price = 50;
inline bool OrderMeta::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OrderMeta::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OrderMeta::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OrderMeta::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 OrderMeta::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.price)
  return price_;
}
inline void OrderMeta::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.price)
}

// optional bytes txmetaid = 60;
inline bool OrderMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& OrderMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void OrderMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.txmetaid)
}
#if LANG_CXX11
inline void OrderMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.txmetaid)
}
#endif
inline void OrderMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.txmetaid)
}
inline void OrderMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.txmetaid)
}
inline ::std::string* OrderMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.txmetaid)
}

// optional bytes orderfillmetaid = 70;
inline bool OrderMeta::has_orderfillmetaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderMeta::set_has_orderfillmetaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderMeta::clear_has_orderfillmetaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderMeta::clear_orderfillmetaid() {
  orderfillmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderfillmetaid();
}
inline const ::std::string& OrderMeta::orderfillmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.orderfillmetaid)
  return orderfillmetaid_.GetNoArena();
}
inline void OrderMeta::set_orderfillmetaid(const ::std::string& value) {
  set_has_orderfillmetaid();
  orderfillmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.orderfillmetaid)
}
#if LANG_CXX11
inline void OrderMeta::set_orderfillmetaid(::std::string&& value) {
  set_has_orderfillmetaid();
  orderfillmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.orderfillmetaid)
}
#endif
inline void OrderMeta::set_orderfillmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderfillmetaid();
  orderfillmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.orderfillmetaid)
}
inline void OrderMeta::set_orderfillmetaid(const void* value, size_t size) {
  set_has_orderfillmetaid();
  orderfillmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.orderfillmetaid)
}
inline ::std::string* OrderMeta::mutable_orderfillmetaid() {
  set_has_orderfillmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.orderfillmetaid)
  return orderfillmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderMeta::release_orderfillmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.orderfillmetaid)
  clear_has_orderfillmetaid();
  return orderfillmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderMeta::set_allocated_orderfillmetaid(::std::string* orderfillmetaid) {
  if (orderfillmetaid != NULL) {
    set_has_orderfillmetaid();
  } else {
    clear_has_orderfillmetaid();
  }
  orderfillmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderfillmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.orderfillmetaid)
}

// optional int32 timestamp = 75;
inline bool OrderMeta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderMeta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderMeta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderMeta::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 OrderMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.timestamp)
  return timestamp_;
}
inline void OrderMeta::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.timestamp)
}

// optional bytes prev = 80;
inline bool OrderMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& OrderMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderMeta.prev)
  return prev_.GetNoArena();
}
inline void OrderMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderMeta.prev)
}
#if LANG_CXX11
inline void OrderMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderMeta.prev)
}
#endif
inline void OrderMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderMeta.prev)
}
inline void OrderMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderMeta.prev)
}
inline ::std::string* OrderMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderMeta.prev)
}

// -------------------------------------------------------------------

// OrderFillMeta

// optional int32 refnum = 1;
inline bool OrderFillMeta::has_refnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderFillMeta::set_has_refnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderFillMeta::clear_has_refnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderFillMeta::clear_refnum() {
  refnum_ = 0;
  clear_has_refnum();
}
inline ::google::protobuf::int32 OrderFillMeta::refnum() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.refnum)
  return refnum_;
}
inline void OrderFillMeta::set_refnum(::google::protobuf::int32 value) {
  set_has_refnum();
  refnum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.refnum)
}

// optional string fname = 10;
inline bool OrderFillMeta::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderFillMeta::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderFillMeta::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderFillMeta::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& OrderFillMeta::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.fname)
  return fname_.GetNoArena();
}
inline void OrderFillMeta::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.fname)
}
#if LANG_CXX11
inline void OrderFillMeta::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.fname)
}
#endif
inline void OrderFillMeta::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.fname)
}
inline void OrderFillMeta::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.fname)
}
inline ::std::string* OrderFillMeta::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFillMeta::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFillMeta::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.fname)
}

// optional string playerid = 15;
inline bool OrderFillMeta::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderFillMeta::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderFillMeta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderFillMeta::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& OrderFillMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.playerid)
  return playerid_.GetNoArena();
}
inline void OrderFillMeta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.playerid)
}
#if LANG_CXX11
inline void OrderFillMeta::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.playerid)
}
#endif
inline void OrderFillMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.playerid)
}
inline void OrderFillMeta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.playerid)
}
inline ::std::string* OrderFillMeta::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFillMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFillMeta::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.playerid)
}

// optional int32 fillprice = 20;
inline bool OrderFillMeta::has_fillprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderFillMeta::set_has_fillprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderFillMeta::clear_has_fillprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderFillMeta::clear_fillprice() {
  fillprice_ = 0;
  clear_has_fillprice();
}
inline ::google::protobuf::int32 OrderFillMeta::fillprice() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.fillprice)
  return fillprice_;
}
inline void OrderFillMeta::set_fillprice(::google::protobuf::int32 value) {
  set_has_fillprice();
  fillprice_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.fillprice)
}

// optional int32 fillsize = 30;
inline bool OrderFillMeta::has_fillsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderFillMeta::set_has_fillsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderFillMeta::clear_has_fillsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderFillMeta::clear_fillsize() {
  fillsize_ = 0;
  clear_has_fillsize();
}
inline ::google::protobuf::int32 OrderFillMeta::fillsize() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.fillsize)
  return fillsize_;
}
inline void OrderFillMeta::set_fillsize(::google::protobuf::int32 value) {
  set_has_fillsize();
  fillsize_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.fillsize)
}

// optional bool buyside = 35;
inline bool OrderFillMeta::has_buyside() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderFillMeta::set_has_buyside() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderFillMeta::clear_has_buyside() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderFillMeta::clear_buyside() {
  buyside_ = false;
  clear_has_buyside();
}
inline bool OrderFillMeta::buyside() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.buyside)
  return buyside_;
}
inline void OrderFillMeta::set_buyside(bool value) {
  set_has_buyside();
  buyside_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.buyside)
}

// optional uint64 timestamp = 40;
inline bool OrderFillMeta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderFillMeta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderFillMeta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderFillMeta::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 OrderFillMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.timestamp)
  return timestamp_;
}
inline void OrderFillMeta::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.timestamp)
}

// optional bytes txmetaid = 60;
inline bool OrderFillMeta::has_txmetaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderFillMeta::set_has_txmetaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderFillMeta::clear_has_txmetaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderFillMeta::clear_txmetaid() {
  txmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txmetaid();
}
inline const ::std::string& OrderFillMeta::txmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.txmetaid)
  return txmetaid_.GetNoArena();
}
inline void OrderFillMeta::set_txmetaid(const ::std::string& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.txmetaid)
}
#if LANG_CXX11
inline void OrderFillMeta::set_txmetaid(::std::string&& value) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.txmetaid)
}
#endif
inline void OrderFillMeta::set_txmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.txmetaid)
}
inline void OrderFillMeta::set_txmetaid(const void* value, size_t size) {
  set_has_txmetaid();
  txmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.txmetaid)
}
inline ::std::string* OrderFillMeta::mutable_txmetaid() {
  set_has_txmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.txmetaid)
  return txmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFillMeta::release_txmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.txmetaid)
  clear_has_txmetaid();
  return txmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFillMeta::set_allocated_txmetaid(::std::string* txmetaid) {
  if (txmetaid != NULL) {
    set_has_txmetaid();
  } else {
    clear_has_txmetaid();
  }
  txmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.txmetaid)
}

// optional bytes prev = 70;
inline bool OrderFillMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderFillMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderFillMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderFillMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& OrderFillMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.OrderFillMeta.prev)
  return prev_.GetNoArena();
}
inline void OrderFillMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.OrderFillMeta.prev)
}
#if LANG_CXX11
inline void OrderFillMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.OrderFillMeta.prev)
}
#endif
inline void OrderFillMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.OrderFillMeta.prev)
}
inline void OrderFillMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.OrderFillMeta.prev)
}
inline ::std::string* OrderFillMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.OrderFillMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OrderFillMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.OrderFillMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OrderFillMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OrderFillMeta.prev)
}

// -------------------------------------------------------------------

// GlobalStateMeta

// optional .fantasybit.GlobalState globalstate = 10;
inline bool GlobalStateMeta::has_globalstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalStateMeta::set_has_globalstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalStateMeta::clear_has_globalstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::fantasybit::GlobalState& GlobalStateMeta::globalstate() const {
  const ::fantasybit::GlobalState* p = globalstate_;
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.globalstate)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GlobalState*>(
      &::fantasybit::_GlobalState_default_instance_);
}
inline ::fantasybit::GlobalState* GlobalStateMeta::release_globalstate() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.globalstate)
  clear_has_globalstate();
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = NULL;
  return temp;
}
inline ::fantasybit::GlobalState* GlobalStateMeta::mutable_globalstate() {
  set_has_globalstate();
  if (globalstate_ == NULL) {
    globalstate_ = new ::fantasybit::GlobalState;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.globalstate)
  return globalstate_;
}
inline void GlobalStateMeta::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(globalstate_);
  }
  if (globalstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      globalstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    set_has_globalstate();
  } else {
    clear_has_globalstate();
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.globalstate)
}

// optional bytes trmetaid = 20;
inline bool GlobalStateMeta::has_trmetaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalStateMeta::set_has_trmetaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalStateMeta::clear_has_trmetaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalStateMeta::clear_trmetaid() {
  trmetaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trmetaid();
}
inline const ::std::string& GlobalStateMeta::trmetaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.trmetaid)
  return trmetaid_.GetNoArena();
}
inline void GlobalStateMeta::set_trmetaid(const ::std::string& value) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GlobalStateMeta.trmetaid)
}
#if LANG_CXX11
inline void GlobalStateMeta::set_trmetaid(::std::string&& value) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GlobalStateMeta.trmetaid)
}
#endif
inline void GlobalStateMeta::set_trmetaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GlobalStateMeta.trmetaid)
}
inline void GlobalStateMeta::set_trmetaid(const void* value, size_t size) {
  set_has_trmetaid();
  trmetaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GlobalStateMeta.trmetaid)
}
inline ::std::string* GlobalStateMeta::mutable_trmetaid() {
  set_has_trmetaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.trmetaid)
  return trmetaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GlobalStateMeta::release_trmetaid() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.trmetaid)
  clear_has_trmetaid();
  return trmetaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalStateMeta::set_allocated_trmetaid(::std::string* trmetaid) {
  if (trmetaid != NULL) {
    set_has_trmetaid();
  } else {
    clear_has_trmetaid();
  }
  trmetaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trmetaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.trmetaid)
}

// optional bytes prev = 30;
inline bool GlobalStateMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalStateMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalStateMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalStateMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& GlobalStateMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.prev)
  return prev_.GetNoArena();
}
inline void GlobalStateMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GlobalStateMeta.prev)
}
#if LANG_CXX11
inline void GlobalStateMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GlobalStateMeta.prev)
}
#endif
inline void GlobalStateMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GlobalStateMeta.prev)
}
inline void GlobalStateMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GlobalStateMeta.prev)
}
inline ::std::string* GlobalStateMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GlobalStateMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalStateMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.prev)
}

// optional bytes next = 40;
inline bool GlobalStateMeta::has_next() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalStateMeta::set_has_next() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalStateMeta::clear_has_next() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalStateMeta::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_next();
}
inline const ::std::string& GlobalStateMeta::next() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalStateMeta.next)
  return next_.GetNoArena();
}
inline void GlobalStateMeta::set_next(const ::std::string& value) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GlobalStateMeta.next)
}
#if LANG_CXX11
inline void GlobalStateMeta::set_next(::std::string&& value) {
  set_has_next();
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GlobalStateMeta.next)
}
#endif
inline void GlobalStateMeta::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GlobalStateMeta.next)
}
inline void GlobalStateMeta::set_next(const void* value, size_t size) {
  set_has_next();
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GlobalStateMeta.next)
}
inline ::std::string* GlobalStateMeta::mutable_next() {
  set_has_next();
  // @@protoc_insertion_point(field_mutable:fantasybit.GlobalStateMeta.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GlobalStateMeta::release_next() {
  // @@protoc_insertion_point(field_release:fantasybit.GlobalStateMeta.next)
  clear_has_next();
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalStateMeta::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    set_has_next();
  } else {
    clear_has_next();
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GlobalStateMeta.next)
}

// -------------------------------------------------------------------

// PlayerMeta

// optional string playerid = 10;
inline bool PlayerMeta::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMeta::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMeta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMeta::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerMeta::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.playerid)
  return playerid_.GetNoArena();
}
inline void PlayerMeta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMeta.playerid)
}
#if LANG_CXX11
inline void PlayerMeta::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMeta.playerid)
}
#endif
inline void PlayerMeta::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMeta.playerid)
}
inline void PlayerMeta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMeta.playerid)
}
inline ::std::string* PlayerMeta::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMeta::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMeta::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.playerid)
}

// optional .fantasybit.PlayerBase player_base = 20;
inline bool PlayerMeta::has_player_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerMeta::set_has_player_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerMeta::clear_has_player_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::fantasybit::PlayerBase& PlayerMeta::player_base() const {
  const ::fantasybit::PlayerBase* p = player_base_;
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.player_base)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::PlayerBase*>(
      &::fantasybit::_PlayerBase_default_instance_);
}
inline ::fantasybit::PlayerBase* PlayerMeta::release_player_base() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.player_base)
  clear_has_player_base();
  ::fantasybit::PlayerBase* temp = player_base_;
  player_base_ = NULL;
  return temp;
}
inline ::fantasybit::PlayerBase* PlayerMeta::mutable_player_base() {
  set_has_player_base();
  if (player_base_ == NULL) {
    player_base_ = new ::fantasybit::PlayerBase;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.player_base)
  return player_base_;
}
inline void PlayerMeta::set_allocated_player_base(::fantasybit::PlayerBase* player_base) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_base_);
  }
  if (player_base) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_base = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_base, submessage_arena);
    }
    set_has_player_base();
  } else {
    clear_has_player_base();
  }
  player_base_ = player_base;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.player_base)
}

// optional .fantasybit.PlayerStatus player_status = 30;
inline bool PlayerMeta::has_player_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerMeta::set_has_player_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerMeta::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::fantasybit::PlayerStatus& PlayerMeta::player_status() const {
  const ::fantasybit::PlayerStatus* p = player_status_;
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.player_status)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::PlayerStatus*>(
      &::fantasybit::_PlayerStatus_default_instance_);
}
inline ::fantasybit::PlayerStatus* PlayerMeta::release_player_status() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.player_status)
  clear_has_player_status();
  ::fantasybit::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
inline ::fantasybit::PlayerStatus* PlayerMeta::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) {
    player_status_ = new ::fantasybit::PlayerStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.player_status)
  return player_status_;
}
inline void PlayerMeta::set_allocated_player_status(::fantasybit::PlayerStatus* player_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(player_status_);
  }
  if (player_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_status, submessage_arena);
    }
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  player_status_ = player_status;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.player_status)
}

// optional bytes datametaid = 40;
inline bool PlayerMeta::has_datametaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMeta::set_has_datametaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMeta::clear_has_datametaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMeta::clear_datametaid() {
  datametaid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_datametaid();
}
inline const ::std::string& PlayerMeta::datametaid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.datametaid)
  return datametaid_.GetNoArena();
}
inline void PlayerMeta::set_datametaid(const ::std::string& value) {
  set_has_datametaid();
  datametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMeta.datametaid)
}
#if LANG_CXX11
inline void PlayerMeta::set_datametaid(::std::string&& value) {
  set_has_datametaid();
  datametaid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMeta.datametaid)
}
#endif
inline void PlayerMeta::set_datametaid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_datametaid();
  datametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMeta.datametaid)
}
inline void PlayerMeta::set_datametaid(const void* value, size_t size) {
  set_has_datametaid();
  datametaid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMeta.datametaid)
}
inline ::std::string* PlayerMeta::mutable_datametaid() {
  set_has_datametaid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.datametaid)
  return datametaid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMeta::release_datametaid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.datametaid)
  clear_has_datametaid();
  return datametaid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMeta::set_allocated_datametaid(::std::string* datametaid) {
  if (datametaid != NULL) {
    set_has_datametaid();
  } else {
    clear_has_datametaid();
  }
  datametaid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datametaid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.datametaid)
}

// optional bytes prev = 50;
inline bool PlayerMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& PlayerMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerMeta.prev)
  return prev_.GetNoArena();
}
inline void PlayerMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerMeta.prev)
}
#if LANG_CXX11
inline void PlayerMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerMeta.prev)
}
#endif
inline void PlayerMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerMeta.prev)
}
inline void PlayerMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerMeta.prev)
}
inline ::std::string* PlayerMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerMeta.prev)
}

// -------------------------------------------------------------------

// TeamMeta

// optional string teamid = 10;
inline bool TeamMeta::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMeta::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMeta::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMeta::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& TeamMeta::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamMeta.teamid)
  return teamid_.GetNoArena();
}
inline void TeamMeta::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamMeta.teamid)
}
#if LANG_CXX11
inline void TeamMeta::set_teamid(::std::string&& value) {
  set_has_teamid();
  teamid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamMeta.teamid)
}
#endif
inline void TeamMeta::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamMeta.teamid)
}
inline void TeamMeta::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamMeta.teamid)
}
inline ::std::string* TeamMeta::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamMeta.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamMeta::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamMeta.teamid)
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamMeta::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamMeta.teamid)
}

// optional bytes playermetaidroot = 20;
inline bool TeamMeta::has_playermetaidroot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMeta::set_has_playermetaidroot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMeta::clear_has_playermetaidroot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMeta::clear_playermetaidroot() {
  playermetaidroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playermetaidroot();
}
inline const ::std::string& TeamMeta::playermetaidroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamMeta.playermetaidroot)
  return playermetaidroot_.GetNoArena();
}
inline void TeamMeta::set_playermetaidroot(const ::std::string& value) {
  set_has_playermetaidroot();
  playermetaidroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamMeta.playermetaidroot)
}
#if LANG_CXX11
inline void TeamMeta::set_playermetaidroot(::std::string&& value) {
  set_has_playermetaidroot();
  playermetaidroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamMeta.playermetaidroot)
}
#endif
inline void TeamMeta::set_playermetaidroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playermetaidroot();
  playermetaidroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamMeta.playermetaidroot)
}
inline void TeamMeta::set_playermetaidroot(const void* value, size_t size) {
  set_has_playermetaidroot();
  playermetaidroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamMeta.playermetaidroot)
}
inline ::std::string* TeamMeta::mutable_playermetaidroot() {
  set_has_playermetaidroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamMeta.playermetaidroot)
  return playermetaidroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamMeta::release_playermetaidroot() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamMeta.playermetaidroot)
  clear_has_playermetaidroot();
  return playermetaidroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamMeta::set_allocated_playermetaidroot(::std::string* playermetaidroot) {
  if (playermetaidroot != NULL) {
    set_has_playermetaidroot();
  } else {
    clear_has_playermetaidroot();
  }
  playermetaidroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playermetaidroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamMeta.playermetaidroot)
}

// optional bytes prev = 30;
inline bool TeamMeta::has_prev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMeta::set_has_prev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMeta::clear_has_prev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMeta::clear_prev() {
  prev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev();
}
inline const ::std::string& TeamMeta::prev() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamMeta.prev)
  return prev_.GetNoArena();
}
inline void TeamMeta::set_prev(const ::std::string& value) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamMeta.prev)
}
#if LANG_CXX11
inline void TeamMeta::set_prev(::std::string&& value) {
  set_has_prev();
  prev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamMeta.prev)
}
#endif
inline void TeamMeta::set_prev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamMeta.prev)
}
inline void TeamMeta::set_prev(const void* value, size_t size) {
  set_has_prev();
  prev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamMeta.prev)
}
inline ::std::string* TeamMeta::mutable_prev() {
  set_has_prev();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamMeta.prev)
  return prev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamMeta::release_prev() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamMeta.prev)
  clear_has_prev();
  return prev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamMeta::set_allocated_prev(::std::string* prev) {
  if (prev != NULL) {
    set_has_prev();
  } else {
    clear_has_prev();
  }
  prev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamMeta.prev)
}

// -------------------------------------------------------------------

// pbstate

// optional bytes schedulestateid = 10;
inline bool pbstate::has_schedulestateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pbstate::set_has_schedulestateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pbstate::clear_has_schedulestateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pbstate::clear_schedulestateid() {
  schedulestateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schedulestateid();
}
inline const ::std::string& pbstate::schedulestateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.schedulestateid)
  return schedulestateid_.GetNoArena();
}
inline void pbstate::set_schedulestateid(const ::std::string& value) {
  set_has_schedulestateid();
  schedulestateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.schedulestateid)
}
#if LANG_CXX11
inline void pbstate::set_schedulestateid(::std::string&& value) {
  set_has_schedulestateid();
  schedulestateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.schedulestateid)
}
#endif
inline void pbstate::set_schedulestateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schedulestateid();
  schedulestateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.schedulestateid)
}
inline void pbstate::set_schedulestateid(const void* value, size_t size) {
  set_has_schedulestateid();
  schedulestateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.schedulestateid)
}
inline ::std::string* pbstate::mutable_schedulestateid() {
  set_has_schedulestateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.schedulestateid)
  return schedulestateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_schedulestateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.schedulestateid)
  clear_has_schedulestateid();
  return schedulestateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_schedulestateid(::std::string* schedulestateid) {
  if (schedulestateid != NULL) {
    set_has_schedulestateid();
  } else {
    clear_has_schedulestateid();
  }
  schedulestateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedulestateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.schedulestateid)
}

// optional bytes leaderboardstateid = 20;
inline bool pbstate::has_leaderboardstateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pbstate::set_has_leaderboardstateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pbstate::clear_has_leaderboardstateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pbstate::clear_leaderboardstateid() {
  leaderboardstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leaderboardstateid();
}
inline const ::std::string& pbstate::leaderboardstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.leaderboardstateid)
  return leaderboardstateid_.GetNoArena();
}
inline void pbstate::set_leaderboardstateid(const ::std::string& value) {
  set_has_leaderboardstateid();
  leaderboardstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.leaderboardstateid)
}
#if LANG_CXX11
inline void pbstate::set_leaderboardstateid(::std::string&& value) {
  set_has_leaderboardstateid();
  leaderboardstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.leaderboardstateid)
}
#endif
inline void pbstate::set_leaderboardstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leaderboardstateid();
  leaderboardstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.leaderboardstateid)
}
inline void pbstate::set_leaderboardstateid(const void* value, size_t size) {
  set_has_leaderboardstateid();
  leaderboardstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.leaderboardstateid)
}
inline ::std::string* pbstate::mutable_leaderboardstateid() {
  set_has_leaderboardstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.leaderboardstateid)
  return leaderboardstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_leaderboardstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.leaderboardstateid)
  clear_has_leaderboardstateid();
  return leaderboardstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_leaderboardstateid(::std::string* leaderboardstateid) {
  if (leaderboardstateid != NULL) {
    set_has_leaderboardstateid();
  } else {
    clear_has_leaderboardstateid();
  }
  leaderboardstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderboardstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.leaderboardstateid)
}

// optional bytes projstateid = 30;
inline bool pbstate::has_projstateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pbstate::set_has_projstateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pbstate::clear_has_projstateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pbstate::clear_projstateid() {
  projstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_projstateid();
}
inline const ::std::string& pbstate::projstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.projstateid)
  return projstateid_.GetNoArena();
}
inline void pbstate::set_projstateid(const ::std::string& value) {
  set_has_projstateid();
  projstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.projstateid)
}
#if LANG_CXX11
inline void pbstate::set_projstateid(::std::string&& value) {
  set_has_projstateid();
  projstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.projstateid)
}
#endif
inline void pbstate::set_projstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_projstateid();
  projstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.projstateid)
}
inline void pbstate::set_projstateid(const void* value, size_t size) {
  set_has_projstateid();
  projstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.projstateid)
}
inline ::std::string* pbstate::mutable_projstateid() {
  set_has_projstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.projstateid)
  return projstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_projstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.projstateid)
  clear_has_projstateid();
  return projstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_projstateid(::std::string* projstateid) {
  if (projstateid != NULL) {
    set_has_projstateid();
  } else {
    clear_has_projstateid();
  }
  projstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), projstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.projstateid)
}

// optional bytes posstateid = 35;
inline bool pbstate::has_posstateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pbstate::set_has_posstateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pbstate::clear_has_posstateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pbstate::clear_posstateid() {
  posstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posstateid();
}
inline const ::std::string& pbstate::posstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.posstateid)
  return posstateid_.GetNoArena();
}
inline void pbstate::set_posstateid(const ::std::string& value) {
  set_has_posstateid();
  posstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.posstateid)
}
#if LANG_CXX11
inline void pbstate::set_posstateid(::std::string&& value) {
  set_has_posstateid();
  posstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.posstateid)
}
#endif
inline void pbstate::set_posstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posstateid();
  posstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.posstateid)
}
inline void pbstate::set_posstateid(const void* value, size_t size) {
  set_has_posstateid();
  posstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.posstateid)
}
inline ::std::string* pbstate::mutable_posstateid() {
  set_has_posstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.posstateid)
  return posstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_posstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.posstateid)
  clear_has_posstateid();
  return posstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_posstateid(::std::string* posstateid) {
  if (posstateid != NULL) {
    set_has_posstateid();
  } else {
    clear_has_posstateid();
  }
  posstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.posstateid)
}

// optional bytes orderstateid = 40;
inline bool pbstate::has_orderstateid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pbstate::set_has_orderstateid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pbstate::clear_has_orderstateid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pbstate::clear_orderstateid() {
  orderstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_orderstateid();
}
inline const ::std::string& pbstate::orderstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.orderstateid)
  return orderstateid_.GetNoArena();
}
inline void pbstate::set_orderstateid(const ::std::string& value) {
  set_has_orderstateid();
  orderstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.orderstateid)
}
#if LANG_CXX11
inline void pbstate::set_orderstateid(::std::string&& value) {
  set_has_orderstateid();
  orderstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.orderstateid)
}
#endif
inline void pbstate::set_orderstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_orderstateid();
  orderstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.orderstateid)
}
inline void pbstate::set_orderstateid(const void* value, size_t size) {
  set_has_orderstateid();
  orderstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.orderstateid)
}
inline ::std::string* pbstate::mutable_orderstateid() {
  set_has_orderstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.orderstateid)
  return orderstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_orderstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.orderstateid)
  clear_has_orderstateid();
  return orderstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_orderstateid(::std::string* orderstateid) {
  if (orderstateid != NULL) {
    set_has_orderstateid();
  } else {
    clear_has_orderstateid();
  }
  orderstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.orderstateid)
}

// optional bytes marketstateid = 50;
inline bool pbstate::has_marketstateid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pbstate::set_has_marketstateid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pbstate::clear_has_marketstateid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pbstate::clear_marketstateid() {
  marketstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_marketstateid();
}
inline const ::std::string& pbstate::marketstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.marketstateid)
  return marketstateid_.GetNoArena();
}
inline void pbstate::set_marketstateid(const ::std::string& value) {
  set_has_marketstateid();
  marketstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.marketstateid)
}
#if LANG_CXX11
inline void pbstate::set_marketstateid(::std::string&& value) {
  set_has_marketstateid();
  marketstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.marketstateid)
}
#endif
inline void pbstate::set_marketstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_marketstateid();
  marketstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.marketstateid)
}
inline void pbstate::set_marketstateid(const void* value, size_t size) {
  set_has_marketstateid();
  marketstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.marketstateid)
}
inline ::std::string* pbstate::mutable_marketstateid() {
  set_has_marketstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.marketstateid)
  return marketstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_marketstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.marketstateid)
  clear_has_marketstateid();
  return marketstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_marketstateid(::std::string* marketstateid) {
  if (marketstateid != NULL) {
    set_has_marketstateid();
  } else {
    clear_has_marketstateid();
  }
  marketstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), marketstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.marketstateid)
}

// optional bytes globalstateid = 60;
inline bool pbstate::has_globalstateid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pbstate::set_has_globalstateid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pbstate::clear_has_globalstateid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pbstate::clear_globalstateid() {
  globalstateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_globalstateid();
}
inline const ::std::string& pbstate::globalstateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.globalstateid)
  return globalstateid_.GetNoArena();
}
inline void pbstate::set_globalstateid(const ::std::string& value) {
  set_has_globalstateid();
  globalstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.globalstateid)
}
#if LANG_CXX11
inline void pbstate::set_globalstateid(::std::string&& value) {
  set_has_globalstateid();
  globalstateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.globalstateid)
}
#endif
inline void pbstate::set_globalstateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_globalstateid();
  globalstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.globalstateid)
}
inline void pbstate::set_globalstateid(const void* value, size_t size) {
  set_has_globalstateid();
  globalstateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.globalstateid)
}
inline ::std::string* pbstate::mutable_globalstateid() {
  set_has_globalstateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.globalstateid)
  return globalstateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_globalstateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.globalstateid)
  clear_has_globalstateid();
  return globalstateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_globalstateid(::std::string* globalstateid) {
  if (globalstateid != NULL) {
    set_has_globalstateid();
  } else {
    clear_has_globalstateid();
  }
  globalstateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), globalstateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.globalstateid)
}

// optional bytes teamstatemid = 70;
inline bool pbstate::has_teamstatemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pbstate::set_has_teamstatemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pbstate::clear_has_teamstatemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pbstate::clear_teamstatemid() {
  teamstatemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamstatemid();
}
inline const ::std::string& pbstate::teamstatemid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.teamstatemid)
  return teamstatemid_.GetNoArena();
}
inline void pbstate::set_teamstatemid(const ::std::string& value) {
  set_has_teamstatemid();
  teamstatemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.teamstatemid)
}
#if LANG_CXX11
inline void pbstate::set_teamstatemid(::std::string&& value) {
  set_has_teamstatemid();
  teamstatemid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.teamstatemid)
}
#endif
inline void pbstate::set_teamstatemid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamstatemid();
  teamstatemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.teamstatemid)
}
inline void pbstate::set_teamstatemid(const void* value, size_t size) {
  set_has_teamstatemid();
  teamstatemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.teamstatemid)
}
inline ::std::string* pbstate::mutable_teamstatemid() {
  set_has_teamstatemid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.teamstatemid)
  return teamstatemid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_teamstatemid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.teamstatemid)
  clear_has_teamstatemid();
  return teamstatemid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_teamstatemid(::std::string* teamstatemid) {
  if (teamstatemid != NULL) {
    set_has_teamstatemid();
  } else {
    clear_has_teamstatemid();
  }
  teamstatemid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamstatemid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.teamstatemid)
}

// optional bytes fantasynamestateid = 80;
inline bool pbstate::has_fantasynamestateid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pbstate::set_has_fantasynamestateid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pbstate::clear_has_fantasynamestateid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pbstate::clear_fantasynamestateid() {
  fantasynamestateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasynamestateid();
}
inline const ::std::string& pbstate::fantasynamestateid() const {
  // @@protoc_insertion_point(field_get:fantasybit.pbstate.fantasynamestateid)
  return fantasynamestateid_.GetNoArena();
}
inline void pbstate::set_fantasynamestateid(const ::std::string& value) {
  set_has_fantasynamestateid();
  fantasynamestateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.pbstate.fantasynamestateid)
}
#if LANG_CXX11
inline void pbstate::set_fantasynamestateid(::std::string&& value) {
  set_has_fantasynamestateid();
  fantasynamestateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.pbstate.fantasynamestateid)
}
#endif
inline void pbstate::set_fantasynamestateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasynamestateid();
  fantasynamestateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.pbstate.fantasynamestateid)
}
inline void pbstate::set_fantasynamestateid(const void* value, size_t size) {
  set_has_fantasynamestateid();
  fantasynamestateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.pbstate.fantasynamestateid)
}
inline ::std::string* pbstate::mutable_fantasynamestateid() {
  set_has_fantasynamestateid();
  // @@protoc_insertion_point(field_mutable:fantasybit.pbstate.fantasynamestateid)
  return fantasynamestateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbstate::release_fantasynamestateid() {
  // @@protoc_insertion_point(field_release:fantasybit.pbstate.fantasynamestateid)
  clear_has_fantasynamestateid();
  return fantasynamestateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbstate::set_allocated_fantasynamestateid(::std::string* fantasynamestateid) {
  if (fantasynamestateid != NULL) {
    set_has_fantasynamestateid();
  } else {
    clear_has_fantasynamestateid();
  }
  fantasynamestateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasynamestateid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.pbstate.fantasynamestateid)
}

// -------------------------------------------------------------------

// MerkleTree

// optional bytes root = 10;
inline bool MerkleTree::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MerkleTree::set_has_root() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MerkleTree::clear_has_root() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MerkleTree::clear_root() {
  root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root();
}
inline const ::std::string& MerkleTree::root() const {
  // @@protoc_insertion_point(field_get:fantasybit.MerkleTree.root)
  return root_.GetNoArena();
}
inline void MerkleTree::set_root(const ::std::string& value) {
  set_has_root();
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MerkleTree.root)
}
#if LANG_CXX11
inline void MerkleTree::set_root(::std::string&& value) {
  set_has_root();
  root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.MerkleTree.root)
}
#endif
inline void MerkleTree::set_root(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_root();
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MerkleTree.root)
}
inline void MerkleTree::set_root(const void* value, size_t size) {
  set_has_root();
  root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MerkleTree.root)
}
inline ::std::string* MerkleTree::mutable_root() {
  set_has_root();
  // @@protoc_insertion_point(field_mutable:fantasybit.MerkleTree.root)
  return root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MerkleTree::release_root() {
  // @@protoc_insertion_point(field_release:fantasybit.MerkleTree.root)
  clear_has_root();
  return root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MerkleTree::set_allocated_root(::std::string* root) {
  if (root != NULL) {
    set_has_root();
  } else {
    clear_has_root();
  }
  root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MerkleTree.root)
}

// repeated bytes leaves = 20;
inline int MerkleTree::leaves_size() const {
  return leaves_.size();
}
inline void MerkleTree::clear_leaves() {
  leaves_.Clear();
}
inline const ::std::string& MerkleTree::leaves(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.MerkleTree.leaves)
  return leaves_.Get(index);
}
inline ::std::string* MerkleTree::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.MerkleTree.leaves)
  return leaves_.Mutable(index);
}
inline void MerkleTree::set_leaves(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.MerkleTree.leaves)
  leaves_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MerkleTree::set_leaves(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fantasybit.MerkleTree.leaves)
  leaves_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MerkleTree::set_leaves(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leaves_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.MerkleTree.leaves)
}
inline void MerkleTree::set_leaves(int index, const void* value, size_t size) {
  leaves_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MerkleTree.leaves)
}
inline ::std::string* MerkleTree::add_leaves() {
  // @@protoc_insertion_point(field_add_mutable:fantasybit.MerkleTree.leaves)
  return leaves_.Add();
}
inline void MerkleTree::add_leaves(const ::std::string& value) {
  leaves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.MerkleTree.leaves)
}
#if LANG_CXX11
inline void MerkleTree::add_leaves(::std::string&& value) {
  leaves_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fantasybit.MerkleTree.leaves)
}
#endif
inline void MerkleTree::add_leaves(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leaves_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.MerkleTree.leaves)
}
inline void MerkleTree::add_leaves(const void* value, size_t size) {
  leaves_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.MerkleTree.leaves)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MerkleTree::leaves() const {
  // @@protoc_insertion_point(field_list:fantasybit.MerkleTree.leaves)
  return leaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MerkleTree::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.MerkleTree.leaves)
  return &leaves_;
}

// -------------------------------------------------------------------

// NewPlayerModel

// repeated .fantasybit.PlayerMeta players = 10;
inline int NewPlayerModel::players_size() const {
  return players_.size();
}
inline void NewPlayerModel::clear_players() {
  players_.Clear();
}
inline const ::fantasybit::PlayerMeta& NewPlayerModel::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.NewPlayerModel.players)
  return players_.Get(index);
}
inline ::fantasybit::PlayerMeta* NewPlayerModel::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.NewPlayerModel.players)
  return players_.Mutable(index);
}
inline ::fantasybit::PlayerMeta* NewPlayerModel::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.NewPlayerModel.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerMeta >*
NewPlayerModel::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.NewPlayerModel.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerMeta >&
NewPlayerModel::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.NewPlayerModel.players)
  return players_;
}

// -------------------------------------------------------------------

// WsReq

// optional int32 version = 1;
inline bool WsReq::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WsReq::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WsReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WsReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 WsReq::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.WsReq.version)
  return version_;
}
inline void WsReq::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.WsReq.version)
}

// optional .fantasybit.CType ctype = 2;
inline bool WsReq::has_ctype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WsReq::set_has_ctype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WsReq::clear_has_ctype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WsReq::clear_ctype() {
  ctype_ = 0;
  clear_has_ctype();
}
inline ::fantasybit::CType WsReq::ctype() const {
  // @@protoc_insertion_point(field_get:fantasybit.WsReq.ctype)
  return static_cast< ::fantasybit::CType >(ctype_);
}
inline void WsReq::set_ctype(::fantasybit::CType value) {
  assert(::fantasybit::CType_IsValid(value));
  set_has_ctype();
  ctype_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.WsReq.ctype)
}

// -------------------------------------------------------------------

// WSReply

// optional int32 version = 1;
inline bool WSReply::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSReply::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSReply::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSReply::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 WSReply::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.version)
  return version_;
}
inline void WSReply::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.WSReply.version)
}

// optional .fantasybit.CType ctype = 2;
inline bool WSReply::has_ctype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WSReply::set_has_ctype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WSReply::clear_has_ctype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WSReply::clear_ctype() {
  ctype_ = 0;
  clear_has_ctype();
}
inline ::fantasybit::CType WSReply::ctype() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.ctype)
  return static_cast< ::fantasybit::CType >(ctype_);
}
inline void WSReply::set_ctype(::fantasybit::CType value) {
  assert(::fantasybit::CType_IsValid(value));
  set_has_ctype();
  ctype_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.WSReply.ctype)
}

// optional .fantasybit.WsReq req = 20;
inline bool WSReply::has_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSReply::set_has_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSReply::clear_has_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSReply::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::fantasybit::WsReq& WSReply::req() const {
  const ::fantasybit::WsReq* p = req_;
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.req)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::WsReq*>(
      &::fantasybit::_WsReq_default_instance_);
}
inline ::fantasybit::WsReq* WSReply::release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.WSReply.req)
  clear_has_req();
  ::fantasybit::WsReq* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::fantasybit::WsReq* WSReply::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::fantasybit::WsReq;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.WSReply.req)
  return req_;
}
inline void WSReply::set_allocated_req(::fantasybit::WsReq* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WSReply.req)
}

// optional string data = 30;
inline bool WSReply::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSReply::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSReply::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSReply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& WSReply::data() const {
  // @@protoc_insertion_point(field_get:fantasybit.WSReply.data)
  return data_.GetNoArena();
}
inline void WSReply::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.WSReply.data)
}
#if LANG_CXX11
inline void WSReply::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.WSReply.data)
}
#endif
inline void WSReply::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.WSReply.data)
}
inline void WSReply::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WSReply.data)
}
inline ::std::string* WSReply::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:fantasybit.WSReply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WSReply::release_data() {
  // @@protoc_insertion_point(field_release:fantasybit.WSReply.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WSReply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.WSReply.data)
}

// -------------------------------------------------------------------

// GetGlobalStateRep

// optional .fantasybit.GlobalState globalstate = 10;
inline bool GetGlobalStateRep::has_globalstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGlobalStateRep::set_has_globalstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGlobalStateRep::clear_has_globalstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::GlobalState& GetGlobalStateRep::globalstate() const {
  const ::fantasybit::GlobalState* p = globalstate_;
  // @@protoc_insertion_point(field_get:fantasybit.GetGlobalStateRep.globalstate)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GlobalState*>(
      &::fantasybit::_GlobalState_default_instance_);
}
inline ::fantasybit::GlobalState* GetGlobalStateRep::release_globalstate() {
  // @@protoc_insertion_point(field_release:fantasybit.GetGlobalStateRep.globalstate)
  clear_has_globalstate();
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = NULL;
  return temp;
}
inline ::fantasybit::GlobalState* GetGlobalStateRep::mutable_globalstate() {
  set_has_globalstate();
  if (globalstate_ == NULL) {
    globalstate_ = new ::fantasybit::GlobalState;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetGlobalStateRep.globalstate)
  return globalstate_;
}
inline void GetGlobalStateRep::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(globalstate_);
  }
  if (globalstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      globalstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, globalstate, submessage_arena);
    }
    set_has_globalstate();
  } else {
    clear_has_globalstate();
  }
  globalstate_ = globalstate;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetGlobalStateRep.globalstate)
}

// -------------------------------------------------------------------

// GetScheduleRep

// optional .fantasybit.ScheduleData scheduledata = 10;
inline bool GetScheduleRep::has_scheduledata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetScheduleRep::set_has_scheduledata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetScheduleRep::clear_has_scheduledata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::ScheduleData& GetScheduleRep::scheduledata() const {
  const ::fantasybit::ScheduleData* p = scheduledata_;
  // @@protoc_insertion_point(field_get:fantasybit.GetScheduleRep.scheduledata)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ScheduleData*>(
      &::fantasybit::_ScheduleData_default_instance_);
}
inline ::fantasybit::ScheduleData* GetScheduleRep::release_scheduledata() {
  // @@protoc_insertion_point(field_release:fantasybit.GetScheduleRep.scheduledata)
  clear_has_scheduledata();
  ::fantasybit::ScheduleData* temp = scheduledata_;
  scheduledata_ = NULL;
  return temp;
}
inline ::fantasybit::ScheduleData* GetScheduleRep::mutable_scheduledata() {
  set_has_scheduledata();
  if (scheduledata_ == NULL) {
    scheduledata_ = new ::fantasybit::ScheduleData;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetScheduleRep.scheduledata)
  return scheduledata_;
}
inline void GetScheduleRep::set_allocated_scheduledata(::fantasybit::ScheduleData* scheduledata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scheduledata_);
  }
  if (scheduledata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scheduledata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduledata, submessage_arena);
    }
    set_has_scheduledata();
  } else {
    clear_has_scheduledata();
  }
  scheduledata_ = scheduledata;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetScheduleRep.scheduledata)
}

// -------------------------------------------------------------------

// CheckNameReq

// optional string fantasy_name = 10;
inline bool CheckNameReq::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNameReq::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNameReq::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNameReq::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& CheckNameReq::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.CheckNameReq.fantasy_name)
  return fantasy_name_.GetNoArena();
}
inline void CheckNameReq::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.CheckNameReq.fantasy_name)
}
#if LANG_CXX11
inline void CheckNameReq::set_fantasy_name(::std::string&& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.CheckNameReq.fantasy_name)
}
#endif
inline void CheckNameReq::set_fantasy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.CheckNameReq.fantasy_name)
}
inline void CheckNameReq::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.CheckNameReq.fantasy_name)
}
inline ::std::string* CheckNameReq::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.CheckNameReq.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckNameReq::release_fantasy_name() {
  // @@protoc_insertion_point(field_release:fantasybit.CheckNameReq.fantasy_name)
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckNameReq::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.CheckNameReq.fantasy_name)
}

// -------------------------------------------------------------------

// CheckNameRep

// optional string isavail = 10;
inline bool CheckNameRep::has_isavail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckNameRep::set_has_isavail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckNameRep::clear_has_isavail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckNameRep::clear_isavail() {
  isavail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_isavail();
}
inline const ::std::string& CheckNameRep::isavail() const {
  // @@protoc_insertion_point(field_get:fantasybit.CheckNameRep.isavail)
  return isavail_.GetNoArena();
}
inline void CheckNameRep::set_isavail(const ::std::string& value) {
  set_has_isavail();
  isavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.CheckNameRep.isavail)
}
#if LANG_CXX11
inline void CheckNameRep::set_isavail(::std::string&& value) {
  set_has_isavail();
  isavail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.CheckNameRep.isavail)
}
#endif
inline void CheckNameRep::set_isavail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_isavail();
  isavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.CheckNameRep.isavail)
}
inline void CheckNameRep::set_isavail(const char* value, size_t size) {
  set_has_isavail();
  isavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.CheckNameRep.isavail)
}
inline ::std::string* CheckNameRep::mutable_isavail() {
  set_has_isavail();
  // @@protoc_insertion_point(field_mutable:fantasybit.CheckNameRep.isavail)
  return isavail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckNameRep::release_isavail() {
  // @@protoc_insertion_point(field_release:fantasybit.CheckNameRep.isavail)
  clear_has_isavail();
  return isavail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckNameRep::set_allocated_isavail(::std::string* isavail) {
  if (isavail != NULL) {
    set_has_isavail();
  } else {
    clear_has_isavail();
  }
  isavail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isavail);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.CheckNameRep.isavail)
}

// optional .fantasybit.CheckNameReq req = 20;
inline bool CheckNameRep::has_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckNameRep::set_has_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckNameRep::clear_has_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckNameRep::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::fantasybit::CheckNameReq& CheckNameRep::req() const {
  const ::fantasybit::CheckNameReq* p = req_;
  // @@protoc_insertion_point(field_get:fantasybit.CheckNameRep.req)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::CheckNameReq*>(
      &::fantasybit::_CheckNameReq_default_instance_);
}
inline ::fantasybit::CheckNameReq* CheckNameRep::release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.CheckNameRep.req)
  clear_has_req();
  ::fantasybit::CheckNameReq* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::fantasybit::CheckNameReq* CheckNameRep::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::fantasybit::CheckNameReq;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.CheckNameRep.req)
  return req_;
}
inline void CheckNameRep::set_allocated_req(::fantasybit::CheckNameReq* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.CheckNameRep.req)
}

// -------------------------------------------------------------------

// Pk2FnameReq

// optional string pk = 10;
inline bool Pk2FnameReq::has_pk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pk2FnameReq::set_has_pk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pk2FnameReq::clear_has_pk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pk2FnameReq::clear_pk() {
  pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pk();
}
inline const ::std::string& Pk2FnameReq::pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameReq.pk)
  return pk_.GetNoArena();
}
inline void Pk2FnameReq::set_pk(const ::std::string& value) {
  set_has_pk();
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Pk2FnameReq.pk)
}
#if LANG_CXX11
inline void Pk2FnameReq::set_pk(::std::string&& value) {
  set_has_pk();
  pk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Pk2FnameReq.pk)
}
#endif
inline void Pk2FnameReq::set_pk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pk();
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Pk2FnameReq.pk)
}
inline void Pk2FnameReq::set_pk(const char* value, size_t size) {
  set_has_pk();
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Pk2FnameReq.pk)
}
inline ::std::string* Pk2FnameReq::mutable_pk() {
  set_has_pk();
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameReq.pk)
  return pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pk2FnameReq::release_pk() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameReq.pk)
  clear_has_pk();
  return pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pk2FnameReq::set_allocated_pk(::std::string* pk) {
  if (pk != NULL) {
    set_has_pk();
  } else {
    clear_has_pk();
  }
  pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pk);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameReq.pk)
}

// -------------------------------------------------------------------

// Pk2FnameRep

// optional string fname = 10;
inline bool Pk2FnameRep::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pk2FnameRep::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pk2FnameRep::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pk2FnameRep::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& Pk2FnameRep::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameRep.fname)
  return fname_.GetNoArena();
}
inline void Pk2FnameRep::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Pk2FnameRep.fname)
}
#if LANG_CXX11
inline void Pk2FnameRep::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Pk2FnameRep.fname)
}
#endif
inline void Pk2FnameRep::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Pk2FnameRep.fname)
}
inline void Pk2FnameRep::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Pk2FnameRep.fname)
}
inline ::std::string* Pk2FnameRep::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameRep.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pk2FnameRep::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameRep.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pk2FnameRep::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameRep.fname)
}

// optional .fantasybit.Pk2FnameReq req = 20;
inline bool Pk2FnameRep::has_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pk2FnameRep::set_has_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pk2FnameRep::clear_has_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pk2FnameRep::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::fantasybit::Pk2FnameReq& Pk2FnameRep::req() const {
  const ::fantasybit::Pk2FnameReq* p = req_;
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameRep.req)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::Pk2FnameReq*>(
      &::fantasybit::_Pk2FnameReq_default_instance_);
}
inline ::fantasybit::Pk2FnameReq* Pk2FnameRep::release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameRep.req)
  clear_has_req();
  ::fantasybit::Pk2FnameReq* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::fantasybit::Pk2FnameReq* Pk2FnameRep::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::fantasybit::Pk2FnameReq;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameRep.req)
  return req_;
}
inline void Pk2FnameRep::set_allocated_req(::fantasybit::Pk2FnameReq* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameRep.req)
}

// optional .fantasybit.FantasyNameBal fnb = 30;
inline bool Pk2FnameRep::has_fnb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pk2FnameRep::set_has_fnb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pk2FnameRep::clear_has_fnb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::FantasyNameBal& Pk2FnameRep::fnb() const {
  const ::fantasybit::FantasyNameBal* p = fnb_;
  // @@protoc_insertion_point(field_get:fantasybit.Pk2FnameRep.fnb)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::FantasyNameBal*>(
      &::fantasybit::_FantasyNameBal_default_instance_);
}
inline ::fantasybit::FantasyNameBal* Pk2FnameRep::release_fnb() {
  // @@protoc_insertion_point(field_release:fantasybit.Pk2FnameRep.fnb)
  clear_has_fnb();
  ::fantasybit::FantasyNameBal* temp = fnb_;
  fnb_ = NULL;
  return temp;
}
inline ::fantasybit::FantasyNameBal* Pk2FnameRep::mutable_fnb() {
  set_has_fnb();
  if (fnb_ == NULL) {
    fnb_ = new ::fantasybit::FantasyNameBal;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Pk2FnameRep.fnb)
  return fnb_;
}
inline void Pk2FnameRep::set_allocated_fnb(::fantasybit::FantasyNameBal* fnb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fnb_);
  }
  if (fnb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fnb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fnb, submessage_arena);
    }
    set_has_fnb();
  } else {
    clear_has_fnb();
  }
  fnb_ = fnb;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Pk2FnameRep.fnb)
}

// -------------------------------------------------------------------

// SubscribeReq

// optional string name = 10;
inline bool SubscribeReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SubscribeReq::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.SubscribeReq.name)
  return name_.GetNoArena();
}
inline void SubscribeReq::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SubscribeReq.name)
}
#if LANG_CXX11
inline void SubscribeReq::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.SubscribeReq.name)
}
#endif
inline void SubscribeReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SubscribeReq.name)
}
inline void SubscribeReq::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SubscribeReq.name)
}
inline ::std::string* SubscribeReq::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.SubscribeReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeReq::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.SubscribeReq.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SubscribeReq.name)
}

// optional uint64 fchash = 30;
inline bool SubscribeReq::has_fchash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeReq::set_has_fchash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeReq::clear_has_fchash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeReq::clear_fchash() {
  fchash_ = GOOGLE_ULONGLONG(0);
  clear_has_fchash();
}
inline ::google::protobuf::uint64 SubscribeReq::fchash() const {
  // @@protoc_insertion_point(field_get:fantasybit.SubscribeReq.fchash)
  return fchash_;
}
inline void SubscribeReq::set_fchash(::google::protobuf::uint64 value) {
  set_has_fchash();
  fchash_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.SubscribeReq.fchash)
}

// -------------------------------------------------------------------

// NameStatusReq

// optional string name = 10;
inline bool NameStatusReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameStatusReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameStatusReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameStatusReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NameStatusReq::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusReq.name)
  return name_.GetNoArena();
}
inline void NameStatusReq::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameStatusReq.name)
}
#if LANG_CXX11
inline void NameStatusReq::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameStatusReq.name)
}
#endif
inline void NameStatusReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameStatusReq.name)
}
inline void NameStatusReq::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameStatusReq.name)
}
inline ::std::string* NameStatusReq::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameStatusReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameStatusReq::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.NameStatusReq.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameStatusReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameStatusReq.name)
}

// optional string pk = 20;
inline bool NameStatusReq::has_pk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameStatusReq::set_has_pk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameStatusReq::clear_has_pk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameStatusReq::clear_pk() {
  pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pk();
}
inline const ::std::string& NameStatusReq::pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusReq.pk)
  return pk_.GetNoArena();
}
inline void NameStatusReq::set_pk(const ::std::string& value) {
  set_has_pk();
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameStatusReq.pk)
}
#if LANG_CXX11
inline void NameStatusReq::set_pk(::std::string&& value) {
  set_has_pk();
  pk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.NameStatusReq.pk)
}
#endif
inline void NameStatusReq::set_pk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pk();
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameStatusReq.pk)
}
inline void NameStatusReq::set_pk(const char* value, size_t size) {
  set_has_pk();
  pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameStatusReq.pk)
}
inline ::std::string* NameStatusReq::mutable_pk() {
  set_has_pk();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameStatusReq.pk)
  return pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameStatusReq::release_pk() {
  // @@protoc_insertion_point(field_release:fantasybit.NameStatusReq.pk)
  clear_has_pk();
  return pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameStatusReq::set_allocated_pk(::std::string* pk) {
  if (pk != NULL) {
    set_has_pk();
  } else {
    clear_has_pk();
  }
  pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pk);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameStatusReq.pk)
}

// -------------------------------------------------------------------

// NameStatusRep

// optional .fantasybit.MyNameStatus status = 10;
inline bool NameStatusRep::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameStatusRep::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameStatusRep::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameStatusRep::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::fantasybit::MyNameStatus NameStatusRep::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusRep.status)
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
inline void NameStatusRep::set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NameStatusRep.status)
}

// optional .fantasybit.NameStatusReq req = 20;
inline bool NameStatusRep::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameStatusRep::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameStatusRep::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameStatusRep::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::fantasybit::NameStatusReq& NameStatusRep::req() const {
  const ::fantasybit::NameStatusReq* p = req_;
  // @@protoc_insertion_point(field_get:fantasybit.NameStatusRep.req)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::NameStatusReq*>(
      &::fantasybit::_NameStatusReq_default_instance_);
}
inline ::fantasybit::NameStatusReq* NameStatusRep::release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.NameStatusRep.req)
  clear_has_req();
  ::fantasybit::NameStatusReq* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::fantasybit::NameStatusReq* NameStatusRep::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::fantasybit::NameStatusReq;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.NameStatusRep.req)
  return req_;
}
inline void NameStatusRep::set_allocated_req(::fantasybit::NameStatusReq* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameStatusRep.req)
}

// -------------------------------------------------------------------

// GetAllNamesRep

// repeated string names = 10;
inline int GetAllNamesRep::names_size() const {
  return names_.size();
}
inline void GetAllNamesRep::clear_names() {
  names_.Clear();
}
inline const ::std::string& GetAllNamesRep::names(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetAllNamesRep.names)
  return names_.Get(index);
}
inline ::std::string* GetAllNamesRep::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetAllNamesRep.names)
  return names_.Mutable(index);
}
inline void GetAllNamesRep::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.GetAllNamesRep.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetAllNamesRep::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fantasybit.GetAllNamesRep.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetAllNamesRep::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.GetAllNamesRep.names)
}
inline void GetAllNamesRep::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetAllNamesRep.names)
}
inline ::std::string* GetAllNamesRep::add_names() {
  // @@protoc_insertion_point(field_add_mutable:fantasybit.GetAllNamesRep.names)
  return names_.Add();
}
inline void GetAllNamesRep::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.GetAllNamesRep.names)
}
#if LANG_CXX11
inline void GetAllNamesRep::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fantasybit.GetAllNamesRep.names)
}
#endif
inline void GetAllNamesRep::add_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.GetAllNamesRep.names)
}
inline void GetAllNamesRep::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.GetAllNamesRep.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetAllNamesRep::names() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetAllNamesRep.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetAllNamesRep::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetAllNamesRep.names)
  return &names_;
}

// repeated .fantasybit.FantasyNameBal fnb = 20;
inline int GetAllNamesRep::fnb_size() const {
  return fnb_.size();
}
inline const ::fantasybit::FantasyNameBal& GetAllNamesRep::fnb(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetAllNamesRep.fnb)
  return fnb_.Get(index);
}
inline ::fantasybit::FantasyNameBal* GetAllNamesRep::mutable_fnb(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetAllNamesRep.fnb)
  return fnb_.Mutable(index);
}
inline ::fantasybit::FantasyNameBal* GetAllNamesRep::add_fnb() {
  // @@protoc_insertion_point(field_add:fantasybit.GetAllNamesRep.fnb)
  return fnb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyNameBal >*
GetAllNamesRep::mutable_fnb() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetAllNamesRep.fnb)
  return &fnb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyNameBal >&
GetAllNamesRep::fnb() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetAllNamesRep.fnb)
  return fnb_;
}

// -------------------------------------------------------------------

// TeamRoster

// optional string teamid = 10;
inline bool TeamRoster::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamRoster::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamRoster::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamRoster::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& TeamRoster::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamRoster.teamid)
  return teamid_.GetNoArena();
}
inline void TeamRoster::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamRoster.teamid)
}
#if LANG_CXX11
inline void TeamRoster::set_teamid(::std::string&& value) {
  set_has_teamid();
  teamid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.TeamRoster.teamid)
}
#endif
inline void TeamRoster::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamRoster.teamid)
}
inline void TeamRoster::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamRoster.teamid)
}
inline ::std::string* TeamRoster::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamRoster.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamRoster::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.TeamRoster.teamid)
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamRoster::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamRoster.teamid)
}

// repeated .fantasybit.PlayerData players = 20;
inline int TeamRoster::players_size() const {
  return players_.size();
}
inline const ::fantasybit::PlayerData& TeamRoster::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamRoster.players)
  return players_.Get(index);
}
inline ::fantasybit::PlayerData* TeamRoster::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamRoster.players)
  return players_.Mutable(index);
}
inline ::fantasybit::PlayerData* TeamRoster::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.TeamRoster.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerData >*
TeamRoster::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamRoster.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerData >&
TeamRoster::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamRoster.players)
  return players_;
}

// -------------------------------------------------------------------

// GameDataRoster

// optional .fantasybit.GameData game_data = 10;
inline bool GameDataRoster::has_game_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameDataRoster::set_has_game_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameDataRoster::clear_has_game_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::fantasybit::GameData& GameDataRoster::game_data() const {
  const ::fantasybit::GameData* p = game_data_;
  // @@protoc_insertion_point(field_get:fantasybit.GameDataRoster.game_data)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GameData*>(
      &::fantasybit::_GameData_default_instance_);
}
inline ::fantasybit::GameData* GameDataRoster::release_game_data() {
  // @@protoc_insertion_point(field_release:fantasybit.GameDataRoster.game_data)
  clear_has_game_data();
  ::fantasybit::GameData* temp = game_data_;
  game_data_ = NULL;
  return temp;
}
inline ::fantasybit::GameData* GameDataRoster::mutable_game_data() {
  set_has_game_data();
  if (game_data_ == NULL) {
    game_data_ = new ::fantasybit::GameData;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameDataRoster.game_data)
  return game_data_;
}
inline void GameDataRoster::set_allocated_game_data(::fantasybit::GameData* game_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(game_data_);
  }
  if (game_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_data, submessage_arena);
    }
    set_has_game_data();
  } else {
    clear_has_game_data();
  }
  game_data_ = game_data;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameDataRoster.game_data)
}

// optional .fantasybit.TeamRoster homeroster = 20;
inline bool GameDataRoster::has_homeroster() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameDataRoster::set_has_homeroster() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameDataRoster::clear_has_homeroster() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameDataRoster::clear_homeroster() {
  if (homeroster_ != NULL) homeroster_->Clear();
  clear_has_homeroster();
}
inline const ::fantasybit::TeamRoster& GameDataRoster::homeroster() const {
  const ::fantasybit::TeamRoster* p = homeroster_;
  // @@protoc_insertion_point(field_get:fantasybit.GameDataRoster.homeroster)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::TeamRoster*>(
      &::fantasybit::_TeamRoster_default_instance_);
}
inline ::fantasybit::TeamRoster* GameDataRoster::release_homeroster() {
  // @@protoc_insertion_point(field_release:fantasybit.GameDataRoster.homeroster)
  clear_has_homeroster();
  ::fantasybit::TeamRoster* temp = homeroster_;
  homeroster_ = NULL;
  return temp;
}
inline ::fantasybit::TeamRoster* GameDataRoster::mutable_homeroster() {
  set_has_homeroster();
  if (homeroster_ == NULL) {
    homeroster_ = new ::fantasybit::TeamRoster;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameDataRoster.homeroster)
  return homeroster_;
}
inline void GameDataRoster::set_allocated_homeroster(::fantasybit::TeamRoster* homeroster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete homeroster_;
  }
  if (homeroster) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      homeroster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, homeroster, submessage_arena);
    }
    set_has_homeroster();
  } else {
    clear_has_homeroster();
  }
  homeroster_ = homeroster;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameDataRoster.homeroster)
}

// optional .fantasybit.TeamRoster awayroster = 30;
inline bool GameDataRoster::has_awayroster() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameDataRoster::set_has_awayroster() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameDataRoster::clear_has_awayroster() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameDataRoster::clear_awayroster() {
  if (awayroster_ != NULL) awayroster_->Clear();
  clear_has_awayroster();
}
inline const ::fantasybit::TeamRoster& GameDataRoster::awayroster() const {
  const ::fantasybit::TeamRoster* p = awayroster_;
  // @@protoc_insertion_point(field_get:fantasybit.GameDataRoster.awayroster)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::TeamRoster*>(
      &::fantasybit::_TeamRoster_default_instance_);
}
inline ::fantasybit::TeamRoster* GameDataRoster::release_awayroster() {
  // @@protoc_insertion_point(field_release:fantasybit.GameDataRoster.awayroster)
  clear_has_awayroster();
  ::fantasybit::TeamRoster* temp = awayroster_;
  awayroster_ = NULL;
  return temp;
}
inline ::fantasybit::TeamRoster* GameDataRoster::mutable_awayroster() {
  set_has_awayroster();
  if (awayroster_ == NULL) {
    awayroster_ = new ::fantasybit::TeamRoster;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameDataRoster.awayroster)
  return awayroster_;
}
inline void GameDataRoster::set_allocated_awayroster(::fantasybit::TeamRoster* awayroster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete awayroster_;
  }
  if (awayroster) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      awayroster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, awayroster, submessage_arena);
    }
    set_has_awayroster();
  } else {
    clear_has_awayroster();
  }
  awayroster_ = awayroster;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameDataRoster.awayroster)
}

// -------------------------------------------------------------------

// GetCurrRostersRep

// optional int32 week = 10;
inline bool GetCurrRostersRep::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCurrRostersRep::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCurrRostersRep::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCurrRostersRep::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 GetCurrRostersRep::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetCurrRostersRep.week)
  return week_;
}
inline void GetCurrRostersRep::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GetCurrRostersRep.week)
}

// repeated .fantasybit.GameDataRoster gamerosters = 20;
inline int GetCurrRostersRep::gamerosters_size() const {
  return gamerosters_.size();
}
inline void GetCurrRostersRep::clear_gamerosters() {
  gamerosters_.Clear();
}
inline const ::fantasybit::GameDataRoster& GetCurrRostersRep::gamerosters(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetCurrRostersRep.gamerosters)
  return gamerosters_.Get(index);
}
inline ::fantasybit::GameDataRoster* GetCurrRostersRep::mutable_gamerosters(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetCurrRostersRep.gamerosters)
  return gamerosters_.Mutable(index);
}
inline ::fantasybit::GameDataRoster* GetCurrRostersRep::add_gamerosters() {
  // @@protoc_insertion_point(field_add:fantasybit.GetCurrRostersRep.gamerosters)
  return gamerosters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::GameDataRoster >*
GetCurrRostersRep::mutable_gamerosters() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetCurrRostersRep.gamerosters)
  return &gamerosters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameDataRoster >&
GetCurrRostersRep::gamerosters() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetCurrRostersRep.gamerosters)
  return gamerosters_;
}

// -------------------------------------------------------------------

// ROWMarket

// optional string pid = 10;
inline bool ROWMarket::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROWMarket::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROWMarket::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROWMarket::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pid();
}
inline const ::std::string& ROWMarket::pid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.pid)
  return pid_.GetNoArena();
}
inline void ROWMarket::set_pid(const ::std::string& value) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ROWMarket.pid)
}
#if LANG_CXX11
inline void ROWMarket::set_pid(::std::string&& value) {
  set_has_pid();
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ROWMarket.pid)
}
#endif
inline void ROWMarket::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ROWMarket.pid)
}
inline void ROWMarket::set_pid(const char* value, size_t size) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ROWMarket.pid)
}
inline ::std::string* ROWMarket::mutable_pid() {
  set_has_pid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ROWMarket::release_pid() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.pid)
  clear_has_pid();
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ROWMarket::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    set_has_pid();
  } else {
    clear_has_pid();
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.pid)
}

// optional .fantasybit.MarketQuote quote = 30;
inline bool ROWMarket::has_quote() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROWMarket::set_has_quote() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROWMarket::clear_has_quote() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fantasybit::MarketQuote& ROWMarket::quote() const {
  const ::fantasybit::MarketQuote* p = quote_;
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.quote)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::MarketQuote*>(
      &::fantasybit::_MarketQuote_default_instance_);
}
inline ::fantasybit::MarketQuote* ROWMarket::release_quote() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.quote)
  clear_has_quote();
  ::fantasybit::MarketQuote* temp = quote_;
  quote_ = NULL;
  return temp;
}
inline ::fantasybit::MarketQuote* ROWMarket::mutable_quote() {
  set_has_quote();
  if (quote_ == NULL) {
    quote_ = new ::fantasybit::MarketQuote;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.quote)
  return quote_;
}
inline void ROWMarket::set_allocated_quote(::fantasybit::MarketQuote* quote) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quote_);
  }
  if (quote) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quote = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quote, submessage_arena);
    }
    set_has_quote();
  } else {
    clear_has_quote();
  }
  quote_ = quote;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.quote)
}

// optional .fantasybit.PlayerData playerdata = 40;
inline bool ROWMarket::has_playerdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROWMarket::set_has_playerdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROWMarket::clear_has_playerdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fantasybit::PlayerData& ROWMarket::playerdata() const {
  const ::fantasybit::PlayerData* p = playerdata_;
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.playerdata)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::PlayerData*>(
      &::fantasybit::_PlayerData_default_instance_);
}
inline ::fantasybit::PlayerData* ROWMarket::release_playerdata() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.playerdata)
  clear_has_playerdata();
  ::fantasybit::PlayerData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline ::fantasybit::PlayerData* ROWMarket::mutable_playerdata() {
  set_has_playerdata();
  if (playerdata_ == NULL) {
    playerdata_ = new ::fantasybit::PlayerData;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.playerdata)
  return playerdata_;
}
inline void ROWMarket::set_allocated_playerdata(::fantasybit::PlayerData* playerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(playerdata_);
  }
  if (playerdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    set_has_playerdata();
  } else {
    clear_has_playerdata();
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.playerdata)
}

// optional .fantasybit.ContractOHLC ohlc = 50;
inline bool ROWMarket::has_ohlc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROWMarket::set_has_ohlc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROWMarket::clear_has_ohlc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::fantasybit::ContractOHLC& ROWMarket::ohlc() const {
  const ::fantasybit::ContractOHLC* p = ohlc_;
  // @@protoc_insertion_point(field_get:fantasybit.ROWMarket.ohlc)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ContractOHLC*>(
      &::fantasybit::_ContractOHLC_default_instance_);
}
inline ::fantasybit::ContractOHLC* ROWMarket::release_ohlc() {
  // @@protoc_insertion_point(field_release:fantasybit.ROWMarket.ohlc)
  clear_has_ohlc();
  ::fantasybit::ContractOHLC* temp = ohlc_;
  ohlc_ = NULL;
  return temp;
}
inline ::fantasybit::ContractOHLC* ROWMarket::mutable_ohlc() {
  set_has_ohlc();
  if (ohlc_ == NULL) {
    ohlc_ = new ::fantasybit::ContractOHLC;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ROWMarket.ohlc)
  return ohlc_;
}
inline void ROWMarket::set_allocated_ohlc(::fantasybit::ContractOHLC* ohlc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ohlc_);
  }
  if (ohlc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ohlc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ohlc, submessage_arena);
    }
    set_has_ohlc();
  } else {
    clear_has_ohlc();
  }
  ohlc_ = ohlc;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ROWMarket.ohlc)
}

// -------------------------------------------------------------------

// GetROWMarketRep

// repeated .fantasybit.ROWMarket rowmarket = 10;
inline int GetROWMarketRep::rowmarket_size() const {
  return rowmarket_.size();
}
inline void GetROWMarketRep::clear_rowmarket() {
  rowmarket_.Clear();
}
inline const ::fantasybit::ROWMarket& GetROWMarketRep::rowmarket(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetROWMarketRep.rowmarket)
  return rowmarket_.Get(index);
}
inline ::fantasybit::ROWMarket* GetROWMarketRep::mutable_rowmarket(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetROWMarketRep.rowmarket)
  return rowmarket_.Mutable(index);
}
inline ::fantasybit::ROWMarket* GetROWMarketRep::add_rowmarket() {
  // @@protoc_insertion_point(field_add:fantasybit.GetROWMarketRep.rowmarket)
  return rowmarket_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::ROWMarket >*
GetROWMarketRep::mutable_rowmarket() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetROWMarketRep.rowmarket)
  return &rowmarket_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::ROWMarket >&
GetROWMarketRep::rowmarket() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetROWMarketRep.rowmarket)
  return rowmarket_;
}

// -------------------------------------------------------------------

// GetDepthReq

// optional string pid = 10;
inline bool GetDepthReq::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDepthReq::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDepthReq::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDepthReq::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pid();
}
inline const ::std::string& GetDepthReq::pid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthReq.pid)
  return pid_.GetNoArena();
}
inline void GetDepthReq::set_pid(const ::std::string& value) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GetDepthReq.pid)
}
#if LANG_CXX11
inline void GetDepthReq::set_pid(::std::string&& value) {
  set_has_pid();
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetDepthReq.pid)
}
#endif
inline void GetDepthReq::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GetDepthReq.pid)
}
inline void GetDepthReq::set_pid(const char* value, size_t size) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetDepthReq.pid)
}
inline ::std::string* GetDepthReq::mutable_pid() {
  set_has_pid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthReq.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDepthReq::release_pid() {
  // @@protoc_insertion_point(field_release:fantasybit.GetDepthReq.pid)
  clear_has_pid();
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDepthReq::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    set_has_pid();
  } else {
    clear_has_pid();
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetDepthReq.pid)
}

// -------------------------------------------------------------------

// GetDepthRep

// optional string pid = 10;
inline bool GetDepthRep::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDepthRep::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDepthRep::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDepthRep::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pid();
}
inline const ::std::string& GetDepthRep::pid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthRep.pid)
  return pid_.GetNoArena();
}
inline void GetDepthRep::set_pid(const ::std::string& value) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GetDepthRep.pid)
}
#if LANG_CXX11
inline void GetDepthRep::set_pid(::std::string&& value) {
  set_has_pid();
  pid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetDepthRep.pid)
}
#endif
inline void GetDepthRep::set_pid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GetDepthRep.pid)
}
inline void GetDepthRep::set_pid(const char* value, size_t size) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetDepthRep.pid)
}
inline ::std::string* GetDepthRep::mutable_pid() {
  set_has_pid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthRep.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDepthRep::release_pid() {
  // @@protoc_insertion_point(field_release:fantasybit.GetDepthRep.pid)
  clear_has_pid();
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDepthRep::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    set_has_pid();
  } else {
    clear_has_pid();
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetDepthRep.pid)
}

// repeated .fantasybit.DepthItem depthitems = 20;
inline int GetDepthRep::depthitems_size() const {
  return depthitems_.size();
}
inline const ::fantasybit::DepthItem& GetDepthRep::depthitems(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthRep.depthitems)
  return depthitems_.Get(index);
}
inline ::fantasybit::DepthItem* GetDepthRep::mutable_depthitems(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthRep.depthitems)
  return depthitems_.Mutable(index);
}
inline ::fantasybit::DepthItem* GetDepthRep::add_depthitems() {
  // @@protoc_insertion_point(field_add:fantasybit.GetDepthRep.depthitems)
  return depthitems_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::DepthItem >*
GetDepthRep::mutable_depthitems() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GetDepthRep.depthitems)
  return &depthitems_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::DepthItem >&
GetDepthRep::depthitems() const {
  // @@protoc_insertion_point(field_list:fantasybit.GetDepthRep.depthitems)
  return depthitems_;
}

// optional .fantasybit.ROWMarket rowmarket = 30;
inline bool GetDepthRep::has_rowmarket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDepthRep::set_has_rowmarket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDepthRep::clear_has_rowmarket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDepthRep::clear_rowmarket() {
  if (rowmarket_ != NULL) rowmarket_->Clear();
  clear_has_rowmarket();
}
inline const ::fantasybit::ROWMarket& GetDepthRep::rowmarket() const {
  const ::fantasybit::ROWMarket* p = rowmarket_;
  // @@protoc_insertion_point(field_get:fantasybit.GetDepthRep.rowmarket)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ROWMarket*>(
      &::fantasybit::_ROWMarket_default_instance_);
}
inline ::fantasybit::ROWMarket* GetDepthRep::release_rowmarket() {
  // @@protoc_insertion_point(field_release:fantasybit.GetDepthRep.rowmarket)
  clear_has_rowmarket();
  ::fantasybit::ROWMarket* temp = rowmarket_;
  rowmarket_ = NULL;
  return temp;
}
inline ::fantasybit::ROWMarket* GetDepthRep::mutable_rowmarket() {
  set_has_rowmarket();
  if (rowmarket_ == NULL) {
    rowmarket_ = new ::fantasybit::ROWMarket;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetDepthRep.rowmarket)
  return rowmarket_;
}
inline void GetDepthRep::set_allocated_rowmarket(::fantasybit::ROWMarket* rowmarket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rowmarket_;
  }
  if (rowmarket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rowmarket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rowmarket, submessage_arena);
    }
    set_has_rowmarket();
  } else {
    clear_has_rowmarket();
  }
  rowmarket_ = rowmarket;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetDepthRep.rowmarket)
}

// -------------------------------------------------------------------

// AllOdersSymbol

// optional string symbol = 10;
inline bool AllOdersSymbol::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllOdersSymbol::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllOdersSymbol::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllOdersSymbol::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& AllOdersSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.symbol)
  return symbol_.GetNoArena();
}
inline void AllOdersSymbol::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.symbol)
}
#if LANG_CXX11
inline void AllOdersSymbol::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AllOdersSymbol.symbol)
}
#endif
inline void AllOdersSymbol::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.AllOdersSymbol.symbol)
}
inline void AllOdersSymbol::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AllOdersSymbol.symbol)
}
inline ::std::string* AllOdersSymbol::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersSymbol.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllOdersSymbol::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.AllOdersSymbol.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllOdersSymbol::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AllOdersSymbol.symbol)
}

// optional int32 netqty = 30;
inline bool AllOdersSymbol::has_netqty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllOdersSymbol::set_has_netqty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllOdersSymbol::clear_has_netqty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllOdersSymbol::clear_netqty() {
  netqty_ = 0;
  clear_has_netqty();
}
inline ::google::protobuf::int32 AllOdersSymbol::netqty() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.netqty)
  return netqty_;
}
inline void AllOdersSymbol::set_netqty(::google::protobuf::int32 value) {
  set_has_netqty();
  netqty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.netqty)
}

// optional int32 netprice = 40;
inline bool AllOdersSymbol::has_netprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllOdersSymbol::set_has_netprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllOdersSymbol::clear_has_netprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllOdersSymbol::clear_netprice() {
  netprice_ = 0;
  clear_has_netprice();
}
inline ::google::protobuf::int32 AllOdersSymbol::netprice() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.netprice)
  return netprice_;
}
inline void AllOdersSymbol::set_netprice(::google::protobuf::int32 value) {
  set_has_netprice();
  netprice_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.netprice)
}

// optional double avg = 50;
inline bool AllOdersSymbol::has_avg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllOdersSymbol::set_has_avg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllOdersSymbol::clear_has_avg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllOdersSymbol::clear_avg() {
  avg_ = 0;
  clear_has_avg();
}
inline double AllOdersSymbol::avg() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.avg)
  return avg_;
}
inline void AllOdersSymbol::set_avg(double value) {
  set_has_avg();
  avg_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.avg)
}

// optional double pnl = 60;
inline bool AllOdersSymbol::has_pnl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllOdersSymbol::set_has_pnl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllOdersSymbol::clear_has_pnl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllOdersSymbol::clear_pnl() {
  pnl_ = 0;
  clear_has_pnl();
}
inline double AllOdersSymbol::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.pnl)
  return pnl_;
}
inline void AllOdersSymbol::set_pnl(double value) {
  set_has_pnl();
  pnl_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersSymbol.pnl)
}

// repeated .fantasybit.Order orders = 20;
inline int AllOdersSymbol::orders_size() const {
  return orders_.size();
}
inline const ::fantasybit::Order& AllOdersSymbol::orders(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersSymbol.orders)
  return orders_.Get(index);
}
inline ::fantasybit::Order* AllOdersSymbol::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersSymbol.orders)
  return orders_.Mutable(index);
}
inline ::fantasybit::Order* AllOdersSymbol::add_orders() {
  // @@protoc_insertion_point(field_add:fantasybit.AllOdersSymbol.orders)
  return orders_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >*
AllOdersSymbol::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.AllOdersSymbol.orders)
  return &orders_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >&
AllOdersSymbol::orders() const {
  // @@protoc_insertion_point(field_list:fantasybit.AllOdersSymbol.orders)
  return orders_;
}

// -------------------------------------------------------------------

// AllOdersFname

// optional string fname = 10;
inline bool AllOdersFname::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllOdersFname::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllOdersFname::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllOdersFname::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& AllOdersFname::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersFname.fname)
  return fname_.GetNoArena();
}
inline void AllOdersFname::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.AllOdersFname.fname)
}
#if LANG_CXX11
inline void AllOdersFname::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.AllOdersFname.fname)
}
#endif
inline void AllOdersFname::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.AllOdersFname.fname)
}
inline void AllOdersFname::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.AllOdersFname.fname)
}
inline ::std::string* AllOdersFname::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersFname.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllOdersFname::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.AllOdersFname.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllOdersFname::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.AllOdersFname.fname)
}

// repeated .fantasybit.AllOdersSymbol pidorders = 20;
inline int AllOdersFname::pidorders_size() const {
  return pidorders_.size();
}
inline void AllOdersFname::clear_pidorders() {
  pidorders_.Clear();
}
inline const ::fantasybit::AllOdersSymbol& AllOdersFname::pidorders(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.AllOdersFname.pidorders)
  return pidorders_.Get(index);
}
inline ::fantasybit::AllOdersSymbol* AllOdersFname::mutable_pidorders(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.AllOdersFname.pidorders)
  return pidorders_.Mutable(index);
}
inline ::fantasybit::AllOdersSymbol* AllOdersFname::add_pidorders() {
  // @@protoc_insertion_point(field_add:fantasybit.AllOdersFname.pidorders)
  return pidorders_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::AllOdersSymbol >*
AllOdersFname::mutable_pidorders() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.AllOdersFname.pidorders)
  return &pidorders_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::AllOdersSymbol >&
AllOdersFname::pidorders() const {
  // @@protoc_insertion_point(field_list:fantasybit.AllOdersFname.pidorders)
  return pidorders_;
}

// -------------------------------------------------------------------

// GetOrdersRep

// optional .fantasybit.GetOrdersReq req = 10;
inline bool GetOrdersRep::has_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetOrdersRep::set_has_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetOrdersRep::clear_has_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetOrdersRep::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::fantasybit::GetOrdersReq& GetOrdersRep::req() const {
  const ::fantasybit::GetOrdersReq* p = req_;
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersRep.req)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::GetOrdersReq*>(
      &::fantasybit::_GetOrdersReq_default_instance_);
}
inline ::fantasybit::GetOrdersReq* GetOrdersRep::release_req() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersRep.req)
  clear_has_req();
  ::fantasybit::GetOrdersReq* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::fantasybit::GetOrdersReq* GetOrdersRep::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    req_ = new ::fantasybit::GetOrdersReq;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersRep.req)
  return req_;
}
inline void GetOrdersRep::set_allocated_req(::fantasybit::GetOrdersReq* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersRep.req)
}

// optional .fantasybit.AllOdersFname oorders = 20;
inline bool GetOrdersRep::has_oorders() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOrdersRep::set_has_oorders() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetOrdersRep::clear_has_oorders() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetOrdersRep::clear_oorders() {
  if (oorders_ != NULL) oorders_->Clear();
  clear_has_oorders();
}
inline const ::fantasybit::AllOdersFname& GetOrdersRep::oorders() const {
  const ::fantasybit::AllOdersFname* p = oorders_;
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersRep.oorders)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::AllOdersFname*>(
      &::fantasybit::_AllOdersFname_default_instance_);
}
inline ::fantasybit::AllOdersFname* GetOrdersRep::release_oorders() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersRep.oorders)
  clear_has_oorders();
  ::fantasybit::AllOdersFname* temp = oorders_;
  oorders_ = NULL;
  return temp;
}
inline ::fantasybit::AllOdersFname* GetOrdersRep::mutable_oorders() {
  set_has_oorders();
  if (oorders_ == NULL) {
    oorders_ = new ::fantasybit::AllOdersFname;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersRep.oorders)
  return oorders_;
}
inline void GetOrdersRep::set_allocated_oorders(::fantasybit::AllOdersFname* oorders) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oorders_;
  }
  if (oorders) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oorders = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oorders, submessage_arena);
    }
    set_has_oorders();
  } else {
    clear_has_oorders();
  }
  oorders_ = oorders;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersRep.oorders)
}

// -------------------------------------------------------------------

// GetOrdersReq

// optional string symbol = 10;
inline bool GetOrdersReq::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetOrdersReq::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetOrdersReq::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetOrdersReq::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& GetOrdersReq::symbol() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersReq.symbol)
  return symbol_.GetNoArena();
}
inline void GetOrdersReq::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GetOrdersReq.symbol)
}
#if LANG_CXX11
inline void GetOrdersReq::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetOrdersReq.symbol)
}
#endif
inline void GetOrdersReq::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GetOrdersReq.symbol)
}
inline void GetOrdersReq::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetOrdersReq.symbol)
}
inline ::std::string* GetOrdersReq::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersReq.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOrdersReq::release_symbol() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersReq.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOrdersReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersReq.symbol)
}

// optional string fname = 20;
inline bool GetOrdersReq::has_fname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetOrdersReq::set_has_fname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetOrdersReq::clear_has_fname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetOrdersReq::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& GetOrdersReq::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersReq.fname)
  return fname_.GetNoArena();
}
inline void GetOrdersReq::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GetOrdersReq.fname)
}
#if LANG_CXX11
inline void GetOrdersReq::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetOrdersReq.fname)
}
#endif
inline void GetOrdersReq::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GetOrdersReq.fname)
}
inline void GetOrdersReq::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetOrdersReq.fname)
}
inline ::std::string* GetOrdersReq::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:fantasybit.GetOrdersReq.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOrdersReq::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.GetOrdersReq.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOrdersReq::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetOrdersReq.fname)
}

// optional uint64 fchash = 30;
inline bool GetOrdersReq::has_fchash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetOrdersReq::set_has_fchash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetOrdersReq::clear_has_fchash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetOrdersReq::clear_fchash() {
  fchash_ = GOOGLE_ULONGLONG(0);
  clear_has_fchash();
}
inline ::google::protobuf::uint64 GetOrdersReq::fchash() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetOrdersReq.fchash)
  return fchash_;
}
inline void GetOrdersReq::set_fchash(::google::protobuf::uint64 value) {
  set_has_fchash();
  fchash_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GetOrdersReq.fchash)
}

// -------------------------------------------------------------------

// GetProjectionReq

// optional string fname = 20;
inline bool GetProjectionReq::has_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetProjectionReq::set_has_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetProjectionReq::clear_has_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetProjectionReq::clear_fname() {
  fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fname();
}
inline const ::std::string& GetProjectionReq::fname() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionReq.fname)
  return fname_.GetNoArena();
}
inline void GetProjectionReq::set_fname(const ::std::string& value) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GetProjectionReq.fname)
}
#if LANG_CXX11
inline void GetProjectionReq::set_fname(::std::string&& value) {
  set_has_fname();
  fname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.GetProjectionReq.fname)
}
#endif
inline void GetProjectionReq::set_fname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GetProjectionReq.fname)
}
inline void GetProjectionReq::set_fname(const char* value, size_t size) {
  set_has_fname();
  fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GetProjectionReq.fname)
}
inline ::std::string* GetProjectionReq::mutable_fname() {
  set_has_fname();
  // @@protoc_insertion_point(field_mutable:fantasybit.GetProjectionReq.fname)
  return fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetProjectionReq::release_fname() {
  // @@protoc_insertion_point(field_release:fantasybit.GetProjectionReq.fname)
  clear_has_fname();
  return fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetProjectionReq::set_allocated_fname(::std::string* fname) {
  if (fname != NULL) {
    set_has_fname();
  } else {
    clear_has_fname();
  }
  fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fname);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetProjectionReq.fname)
}

// optional bool getavg = 30;
inline bool GetProjectionReq::has_getavg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetProjectionReq::set_has_getavg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetProjectionReq::clear_has_getavg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetProjectionReq::clear_getavg() {
  getavg_ = false;
  clear_has_getavg();
}
inline bool GetProjectionReq::getavg() const {
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionReq.getavg)
  return getavg_;
}
inline void GetProjectionReq::set_getavg(bool value) {
  set_has_getavg();
  getavg_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GetProjectionReq.getavg)
}

// -------------------------------------------------------------------

// PlayerProj

// optional string playerid = 10;
inline bool PlayerProj::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerProj::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerProj::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerProj::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerProj::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerProj.playerid)
  return playerid_.GetNoArena();
}
inline void PlayerProj::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerProj.playerid)
}
#if LANG_CXX11
inline void PlayerProj::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.PlayerProj.playerid)
}
#endif
inline void PlayerProj::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerProj.playerid)
}
inline void PlayerProj::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerProj.playerid)
}
inline ::std::string* PlayerProj::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerProj.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerProj::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.PlayerProj.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerProj::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerProj.playerid)
}

// optional int32 proj = 20;
inline bool PlayerProj::has_proj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerProj::set_has_proj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerProj::clear_has_proj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerProj::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 PlayerProj::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerProj.proj)
  return proj_;
}
inline void PlayerProj::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerProj.proj)
}

// -------------------------------------------------------------------

// ProjByName

// optional string name = 10;
inline bool ProjByName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjByName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjByName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjByName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ProjByName::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.name)
  return name_.GetNoArena();
}
inline void ProjByName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjByName.name)
}
#if LANG_CXX11
inline void ProjByName::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.ProjByName.name)
}
#endif
inline void ProjByName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjByName.name)
}
inline void ProjByName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjByName.name)
}
inline ::std::string* ProjByName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjByName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjByName::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjByName.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjByName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjByName.name)
}

// repeated .fantasybit.PlayerProj playerproj = 20;
inline int ProjByName::playerproj_size() const {
  return playerproj_.size();
}
inline void ProjByName::clear_playerproj() {
  playerproj_.Clear();
}
inline const ::fantasybit::PlayerProj& ProjByName::playerproj(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.playerproj)
  return playerproj_.Get(index);
}
inline ::fantasybit::PlayerProj* ProjByName::mutable_playerproj(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjByName.playerproj)
  return playerproj_.Mutable(index);
}
inline ::fantasybit::PlayerProj* ProjByName::add_playerproj() {
  // @@protoc_insertion_point(field_add:fantasybit.ProjByName.playerproj)
  return playerproj_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerProj >*
ProjByName::mutable_playerproj() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.ProjByName.playerproj)
  return &playerproj_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerProj >&
ProjByName::playerproj() const {
  // @@protoc_insertion_point(field_list:fantasybit.ProjByName.playerproj)
  return playerproj_;
}

// optional int32 count = 40;
inline bool ProjByName::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjByName::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjByName::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjByName::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ProjByName::count() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.count)
  return count_;
}
inline void ProjByName::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjByName.count)
}

// optional int32 block = 50;
inline bool ProjByName::has_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjByName::set_has_block() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjByName::clear_has_block() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjByName::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 ProjByName::block() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjByName.block)
  return block_;
}
inline void ProjByName::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjByName.block)
}

// -------------------------------------------------------------------

// GetProjectionRep

// optional .fantasybit.ProjByName projs = 20;
inline bool GetProjectionRep::has_projs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetProjectionRep::set_has_projs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetProjectionRep::clear_has_projs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetProjectionRep::clear_projs() {
  if (projs_ != NULL) projs_->Clear();
  clear_has_projs();
}
inline const ::fantasybit::ProjByName& GetProjectionRep::projs() const {
  const ::fantasybit::ProjByName* p = projs_;
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionRep.projs)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ProjByName*>(
      &::fantasybit::_ProjByName_default_instance_);
}
inline ::fantasybit::ProjByName* GetProjectionRep::release_projs() {
  // @@protoc_insertion_point(field_release:fantasybit.GetProjectionRep.projs)
  clear_has_projs();
  ::fantasybit::ProjByName* temp = projs_;
  projs_ = NULL;
  return temp;
}
inline ::fantasybit::ProjByName* GetProjectionRep::mutable_projs() {
  set_has_projs();
  if (projs_ == NULL) {
    projs_ = new ::fantasybit::ProjByName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetProjectionRep.projs)
  return projs_;
}
inline void GetProjectionRep::set_allocated_projs(::fantasybit::ProjByName* projs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete projs_;
  }
  if (projs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      projs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, projs, submessage_arena);
    }
    set_has_projs();
  } else {
    clear_has_projs();
  }
  projs_ = projs;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetProjectionRep.projs)
}

// optional .fantasybit.ProjByName avg = 30;
inline bool GetProjectionRep::has_avg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetProjectionRep::set_has_avg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetProjectionRep::clear_has_avg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetProjectionRep::clear_avg() {
  if (avg_ != NULL) avg_->Clear();
  clear_has_avg();
}
inline const ::fantasybit::ProjByName& GetProjectionRep::avg() const {
  const ::fantasybit::ProjByName* p = avg_;
  // @@protoc_insertion_point(field_get:fantasybit.GetProjectionRep.avg)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ProjByName*>(
      &::fantasybit::_ProjByName_default_instance_);
}
inline ::fantasybit::ProjByName* GetProjectionRep::release_avg() {
  // @@protoc_insertion_point(field_release:fantasybit.GetProjectionRep.avg)
  clear_has_avg();
  ::fantasybit::ProjByName* temp = avg_;
  avg_ = NULL;
  return temp;
}
inline ::fantasybit::ProjByName* GetProjectionRep::mutable_avg() {
  set_has_avg();
  if (avg_ == NULL) {
    avg_ = new ::fantasybit::ProjByName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GetProjectionRep.avg)
  return avg_;
}
inline void GetProjectionRep::set_allocated_avg(::fantasybit::ProjByName* avg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avg_;
  }
  if (avg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avg, submessage_arena);
    }
    set_has_avg();
  } else {
    clear_has_avg();
  }
  avg_ = avg;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GetProjectionRep.avg)
}

// -------------------------------------------------------------------

// KeyValue

// optional bytes key = 10;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:fantasybit.KeyValue.key)
  return key_.GetNoArena();
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.KeyValue.key)
}
#if LANG_CXX11
inline void KeyValue::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.KeyValue.key)
}
#endif
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:fantasybit.KeyValue.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.KeyValue.key)
}

// optional bytes value = 20;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:fantasybit.KeyValue.value)
  return value_.GetNoArena();
}
inline void KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.KeyValue.value)
}
#if LANG_CXX11
inline void KeyValue::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.KeyValue.value)
}
#endif
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:fantasybit.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:fantasybit.KeyValue.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.KeyValue.value)
}

// -------------------------------------------------------------------

// Bootstrap

// optional string key = 1;
inline bool Bootstrap::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bootstrap::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bootstrap::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bootstrap::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Bootstrap::key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.key)
  return key_.GetNoArena();
}
inline void Bootstrap::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.key)
}
#if LANG_CXX11
inline void Bootstrap::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.key)
}
#endif
inline void Bootstrap::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.key)
}
inline void Bootstrap::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.key)
}
inline ::std::string* Bootstrap::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_key() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.key)
}

// optional int32 blocknum = 2;
inline bool Bootstrap::has_blocknum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Bootstrap::set_has_blocknum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Bootstrap::clear_has_blocknum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Bootstrap::clear_blocknum() {
  blocknum_ = 0;
  clear_has_blocknum();
}
inline ::google::protobuf::int32 Bootstrap::blocknum() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.blocknum)
  return blocknum_;
}
inline void Bootstrap::set_blocknum(::google::protobuf::int32 value) {
  set_has_blocknum();
  blocknum_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.blocknum)
}

// optional int32 week = 3;
inline bool Bootstrap::has_week() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Bootstrap::set_has_week() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Bootstrap::clear_has_week() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Bootstrap::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 Bootstrap::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.week)
  return week_;
}
inline void Bootstrap::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.week)
}

// optional int32 season = 4;
inline bool Bootstrap::has_season() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Bootstrap::set_has_season() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Bootstrap::clear_has_season() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Bootstrap::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 Bootstrap::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.season)
  return season_;
}
inline void Bootstrap::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.season)
}

// optional bytes gamemetaroot = 10;
inline bool Bootstrap::has_gamemetaroot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bootstrap::set_has_gamemetaroot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bootstrap::clear_has_gamemetaroot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bootstrap::clear_gamemetaroot() {
  gamemetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamemetaroot();
}
inline const ::std::string& Bootstrap::gamemetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.gamemetaroot)
  return gamemetaroot_.GetNoArena();
}
inline void Bootstrap::set_gamemetaroot(const ::std::string& value) {
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.gamemetaroot)
}
#if LANG_CXX11
inline void Bootstrap::set_gamemetaroot(::std::string&& value) {
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.gamemetaroot)
}
#endif
inline void Bootstrap::set_gamemetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.gamemetaroot)
}
inline void Bootstrap::set_gamemetaroot(const void* value, size_t size) {
  set_has_gamemetaroot();
  gamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.gamemetaroot)
}
inline ::std::string* Bootstrap::mutable_gamemetaroot() {
  set_has_gamemetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.gamemetaroot)
  return gamemetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_gamemetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.gamemetaroot)
  clear_has_gamemetaroot();
  return gamemetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_gamemetaroot(::std::string* gamemetaroot) {
  if (gamemetaroot != NULL) {
    set_has_gamemetaroot();
  } else {
    clear_has_gamemetaroot();
  }
  gamemetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamemetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.gamemetaroot)
}

// optional bytes playermetaroot = 20;
inline bool Bootstrap::has_playermetaroot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bootstrap::set_has_playermetaroot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bootstrap::clear_has_playermetaroot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bootstrap::clear_playermetaroot() {
  playermetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playermetaroot();
}
inline const ::std::string& Bootstrap::playermetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.playermetaroot)
  return playermetaroot_.GetNoArena();
}
inline void Bootstrap::set_playermetaroot(const ::std::string& value) {
  set_has_playermetaroot();
  playermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.playermetaroot)
}
#if LANG_CXX11
inline void Bootstrap::set_playermetaroot(::std::string&& value) {
  set_has_playermetaroot();
  playermetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.playermetaroot)
}
#endif
inline void Bootstrap::set_playermetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playermetaroot();
  playermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.playermetaroot)
}
inline void Bootstrap::set_playermetaroot(const void* value, size_t size) {
  set_has_playermetaroot();
  playermetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.playermetaroot)
}
inline ::std::string* Bootstrap::mutable_playermetaroot() {
  set_has_playermetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.playermetaroot)
  return playermetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_playermetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.playermetaroot)
  clear_has_playermetaroot();
  return playermetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_playermetaroot(::std::string* playermetaroot) {
  if (playermetaroot != NULL) {
    set_has_playermetaroot();
  } else {
    clear_has_playermetaroot();
  }
  playermetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playermetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.playermetaroot)
}

// optional bytes fnamemetaroot = 30;
inline bool Bootstrap::has_fnamemetaroot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bootstrap::set_has_fnamemetaroot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bootstrap::clear_has_fnamemetaroot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bootstrap::clear_fnamemetaroot() {
  fnamemetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fnamemetaroot();
}
inline const ::std::string& Bootstrap::fnamemetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.fnamemetaroot)
  return fnamemetaroot_.GetNoArena();
}
inline void Bootstrap::set_fnamemetaroot(const ::std::string& value) {
  set_has_fnamemetaroot();
  fnamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.fnamemetaroot)
}
#if LANG_CXX11
inline void Bootstrap::set_fnamemetaroot(::std::string&& value) {
  set_has_fnamemetaroot();
  fnamemetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.fnamemetaroot)
}
#endif
inline void Bootstrap::set_fnamemetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fnamemetaroot();
  fnamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.fnamemetaroot)
}
inline void Bootstrap::set_fnamemetaroot(const void* value, size_t size) {
  set_has_fnamemetaroot();
  fnamemetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.fnamemetaroot)
}
inline ::std::string* Bootstrap::mutable_fnamemetaroot() {
  set_has_fnamemetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.fnamemetaroot)
  return fnamemetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_fnamemetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.fnamemetaroot)
  clear_has_fnamemetaroot();
  return fnamemetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_fnamemetaroot(::std::string* fnamemetaroot) {
  if (fnamemetaroot != NULL) {
    set_has_fnamemetaroot();
  } else {
    clear_has_fnamemetaroot();
  }
  fnamemetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fnamemetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.fnamemetaroot)
}

// optional bytes previd = 40;
inline bool Bootstrap::has_previd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bootstrap::set_has_previd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bootstrap::clear_has_previd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bootstrap::clear_previd() {
  previd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_previd();
}
inline const ::std::string& Bootstrap::previd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.previd)
  return previd_.GetNoArena();
}
inline void Bootstrap::set_previd(const ::std::string& value) {
  set_has_previd();
  previd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.previd)
}
#if LANG_CXX11
inline void Bootstrap::set_previd(::std::string&& value) {
  set_has_previd();
  previd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.previd)
}
#endif
inline void Bootstrap::set_previd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_previd();
  previd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.previd)
}
inline void Bootstrap::set_previd(const void* value, size_t size) {
  set_has_previd();
  previd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.previd)
}
inline ::std::string* Bootstrap::mutable_previd() {
  set_has_previd();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.previd)
  return previd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_previd() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.previd)
  clear_has_previd();
  return previd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_previd(::std::string* previd) {
  if (previd != NULL) {
    set_has_previd();
  } else {
    clear_has_previd();
  }
  previd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previd);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.previd)
}

// optional bytes gameresultroot = 50;
inline bool Bootstrap::has_gameresultroot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bootstrap::set_has_gameresultroot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bootstrap::clear_has_gameresultroot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bootstrap::clear_gameresultroot() {
  gameresultroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameresultroot();
}
inline const ::std::string& Bootstrap::gameresultroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.gameresultroot)
  return gameresultroot_.GetNoArena();
}
inline void Bootstrap::set_gameresultroot(const ::std::string& value) {
  set_has_gameresultroot();
  gameresultroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.gameresultroot)
}
#if LANG_CXX11
inline void Bootstrap::set_gameresultroot(::std::string&& value) {
  set_has_gameresultroot();
  gameresultroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.gameresultroot)
}
#endif
inline void Bootstrap::set_gameresultroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameresultroot();
  gameresultroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.gameresultroot)
}
inline void Bootstrap::set_gameresultroot(const void* value, size_t size) {
  set_has_gameresultroot();
  gameresultroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.gameresultroot)
}
inline ::std::string* Bootstrap::mutable_gameresultroot() {
  set_has_gameresultroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.gameresultroot)
  return gameresultroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_gameresultroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.gameresultroot)
  clear_has_gameresultroot();
  return gameresultroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_gameresultroot(::std::string* gameresultroot) {
  if (gameresultroot != NULL) {
    set_has_gameresultroot();
  } else {
    clear_has_gameresultroot();
  }
  gameresultroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameresultroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.gameresultroot)
}

// optional bytes posmetaroot = 60;
inline bool Bootstrap::has_posmetaroot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Bootstrap::set_has_posmetaroot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Bootstrap::clear_has_posmetaroot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Bootstrap::clear_posmetaroot() {
  posmetaroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_posmetaroot();
}
inline const ::std::string& Bootstrap::posmetaroot() const {
  // @@protoc_insertion_point(field_get:fantasybit.Bootstrap.posmetaroot)
  return posmetaroot_.GetNoArena();
}
inline void Bootstrap::set_posmetaroot(const ::std::string& value) {
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Bootstrap.posmetaroot)
}
#if LANG_CXX11
inline void Bootstrap::set_posmetaroot(::std::string&& value) {
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Bootstrap.posmetaroot)
}
#endif
inline void Bootstrap::set_posmetaroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Bootstrap.posmetaroot)
}
inline void Bootstrap::set_posmetaroot(const void* value, size_t size) {
  set_has_posmetaroot();
  posmetaroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Bootstrap.posmetaroot)
}
inline ::std::string* Bootstrap::mutable_posmetaroot() {
  set_has_posmetaroot();
  // @@protoc_insertion_point(field_mutable:fantasybit.Bootstrap.posmetaroot)
  return posmetaroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bootstrap::release_posmetaroot() {
  // @@protoc_insertion_point(field_release:fantasybit.Bootstrap.posmetaroot)
  clear_has_posmetaroot();
  return posmetaroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bootstrap::set_allocated_posmetaroot(::std::string* posmetaroot) {
  if (posmetaroot != NULL) {
    set_has_posmetaroot();
  } else {
    clear_has_posmetaroot();
  }
  posmetaroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posmetaroot);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Bootstrap.posmetaroot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fantasybit::CType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::CType>() {
  return ::fantasybit::CType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StateData_2eproto__INCLUDED
