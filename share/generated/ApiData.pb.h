// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApiData.proto

#ifndef PROTOBUF_ApiData_2eproto__INCLUDED
#define PROTOBUF_ApiData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ApiData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFantasyNameHashImpl();
void InitDefaultsFantasyNameHash();
void InitDefaultsDistributionImpl();
void InitDefaultsDistribution();
void InitDefaultsProfitsImpl();
void InitDefaultsProfits();
void InitDefaultsFillsImpl();
void InitDefaultsFills();
void InitDefaultsProjKstatsImpl();
void InitDefaultsProjKstats();
void InitDefaultsProjDstatsImpl();
void InitDefaultsProjDstats();
void InitDefaultsProjOstatsImpl();
void InitDefaultsProjOstats();
void InitDefaultsProjStatsImpl();
void InitDefaultsProjStats();
inline void InitDefaults() {
  InitDefaultsFantasyNameHash();
  InitDefaultsDistribution();
  InitDefaultsProfits();
  InitDefaultsFills();
  InitDefaultsProjKstats();
  InitDefaultsProjDstats();
  InitDefaultsProjOstats();
  InitDefaultsProjStats();
}
}  // namespace protobuf_ApiData_2eproto
namespace fantasybit {
class Distribution;
class DistributionDefaultTypeInternal;
extern DistributionDefaultTypeInternal _Distribution_default_instance_;
class FantasyNameHash;
class FantasyNameHashDefaultTypeInternal;
extern FantasyNameHashDefaultTypeInternal _FantasyNameHash_default_instance_;
class Fills;
class FillsDefaultTypeInternal;
extern FillsDefaultTypeInternal _Fills_default_instance_;
class Profits;
class ProfitsDefaultTypeInternal;
extern ProfitsDefaultTypeInternal _Profits_default_instance_;
class ProjDstats;
class ProjDstatsDefaultTypeInternal;
extern ProjDstatsDefaultTypeInternal _ProjDstats_default_instance_;
class ProjKstats;
class ProjKstatsDefaultTypeInternal;
extern ProjKstatsDefaultTypeInternal _ProjKstats_default_instance_;
class ProjOstats;
class ProjOstatsDefaultTypeInternal;
extern ProjOstatsDefaultTypeInternal _ProjOstats_default_instance_;
class ProjStats;
class ProjStatsDefaultTypeInternal;
extern ProjStatsDefaultTypeInternal _ProjStats_default_instance_;
}  // namespace fantasybit
namespace fantasybit {

// ===================================================================

class FantasyNameHash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.FantasyNameHash) */ {
 public:
  FantasyNameHash();
  virtual ~FantasyNameHash();

  FantasyNameHash(const FantasyNameHash& from);

  inline FantasyNameHash& operator=(const FantasyNameHash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FantasyNameHash(FantasyNameHash&& from) noexcept
    : FantasyNameHash() {
    *this = ::std::move(from);
  }

  inline FantasyNameHash& operator=(FantasyNameHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FantasyNameHash* internal_default_instance() {
    return reinterpret_cast<const FantasyNameHash*>(
               &_FantasyNameHash_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FantasyNameHash* other);
  friend void swap(FantasyNameHash& a, FantasyNameHash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FantasyNameHash* New() const PROTOBUF_FINAL { return New(NULL); }

  FantasyNameHash* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FantasyNameHash& from);
  void MergeFrom(const FantasyNameHash& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FantasyNameHash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 hash = 30;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 30;
  ::google::protobuf::uint64 hash() const;
  void set_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameHash)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_hash();
  void clear_has_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 hash_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsFantasyNameHashImpl();
};
// -------------------------------------------------------------------

class Distribution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Distribution) */ {
 public:
  Distribution();
  virtual ~Distribution();

  Distribution(const Distribution& from);

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Distribution(Distribution&& from) noexcept
    : Distribution() {
    *this = ::std::move(from);
  }

  inline Distribution& operator=(Distribution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Distribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distribution* internal_default_instance() {
    return reinterpret_cast<const Distribution*>(
               &_Distribution_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Distribution* other);
  friend void swap(Distribution& a, Distribution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Distribution* New() const PROTOBUF_FINAL { return New(NULL); }

  Distribution* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Distribution& from);
  void MergeFrom(const Distribution& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Distribution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional string playerid = 3;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional string teamid = 4;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamid(::std::string&& value);
  #endif
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // optional uint64 fantasy_nameid = 1;
  bool has_fantasy_nameid() const;
  void clear_fantasy_nameid();
  static const int kFantasyNameidFieldNumber = 1;
  ::google::protobuf::uint64 fantasy_nameid() const;
  void set_fantasy_nameid(::google::protobuf::uint64 value);

  // optional int32 season = 5;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 5;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // optional int32 week = 6;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 6;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 proj = 7;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 7;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // optional float award = 8;
  bool has_award() const;
  void clear_award();
  static const int kAwardFieldNumber = 8;
  float award() const;
  void set_award(float value);

  // optional float result = 9;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 9;
  float result() const;
  void set_result(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.Distribution)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_fantasy_nameid();
  void clear_has_fantasy_nameid();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_proj();
  void clear_has_proj();
  void set_has_award();
  void clear_has_award();
  void set_has_result();
  void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  ::google::protobuf::uint64 fantasy_nameid_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 proj_;
  float award_;
  float result_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsDistributionImpl();
};
// -------------------------------------------------------------------

class Profits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Profits) */ {
 public:
  Profits();
  virtual ~Profits();

  Profits(const Profits& from);

  inline Profits& operator=(const Profits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profits(Profits&& from) noexcept
    : Profits() {
    *this = ::std::move(from);
  }

  inline Profits& operator=(Profits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profits* internal_default_instance() {
    return reinterpret_cast<const Profits*>(
               &_Profits_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Profits* other);
  friend void swap(Profits& a, Profits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profits* New() const PROTOBUF_FINAL { return New(NULL); }

  Profits* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profits& from);
  void MergeFrom(const Profits& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 2;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 2;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  #if LANG_CXX11
  void set_gameid(::std::string&& value);
  #endif
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional string playerid = 3;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional string teamid = 4;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamid(::std::string&& value);
  #endif
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // optional uint64 fantasy_nameid = 1;
  bool has_fantasy_nameid() const;
  void clear_fantasy_nameid();
  static const int kFantasyNameidFieldNumber = 1;
  ::google::protobuf::uint64 fantasy_nameid() const;
  void set_fantasy_nameid(::google::protobuf::uint64 value);

  // optional int32 season = 5;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 5;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // optional int32 week = 6;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 6;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 qty = 7;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 7;
  ::google::protobuf::int32 qty() const;
  void set_qty(::google::protobuf::int32 value);

  // optional float price = 8;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 8;
  float price() const;
  void set_price(float value);

  // optional float result = 9;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 9;
  float result() const;
  void set_result(float value);

  // optional float pnl = 10;
  bool has_pnl() const;
  void clear_pnl();
  static const int kPnlFieldNumber = 10;
  float pnl() const;
  void set_pnl(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.Profits)
 private:
  void set_has_gameid();
  void clear_has_gameid();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_fantasy_nameid();
  void clear_has_fantasy_nameid();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_qty();
  void clear_has_qty();
  void set_has_price();
  void clear_has_price();
  void set_has_result();
  void clear_has_result();
  void set_has_pnl();
  void clear_has_pnl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  ::google::protobuf::uint64 fantasy_nameid_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 qty_;
  float price_;
  float result_;
  float pnl_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsProfitsImpl();
};
// -------------------------------------------------------------------

class Fills : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.Fills) */ {
 public:
  Fills();
  virtual ~Fills();

  Fills(const Fills& from);

  inline Fills& operator=(const Fills& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fills(Fills&& from) noexcept
    : Fills() {
    *this = ::std::move(from);
  }

  inline Fills& operator=(Fills&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fills& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fills* internal_default_instance() {
    return reinterpret_cast<const Fills*>(
               &_Fills_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Fills* other);
  friend void swap(Fills& a, Fills& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fills* New() const PROTOBUF_FINAL { return New(NULL); }

  Fills* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Fills& from);
  void MergeFrom(const Fills& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Fills* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string buyer = 10;
  bool has_buyer() const;
  void clear_buyer();
  static const int kBuyerFieldNumber = 10;
  const ::std::string& buyer() const;
  void set_buyer(const ::std::string& value);
  #if LANG_CXX11
  void set_buyer(::std::string&& value);
  #endif
  void set_buyer(const char* value);
  void set_buyer(const char* value, size_t size);
  ::std::string* mutable_buyer();
  ::std::string* release_buyer();
  void set_allocated_buyer(::std::string* buyer);

  // optional string seller = 20;
  bool has_seller() const;
  void clear_seller();
  static const int kSellerFieldNumber = 20;
  const ::std::string& seller() const;
  void set_seller(const ::std::string& value);
  #if LANG_CXX11
  void set_seller(::std::string&& value);
  #endif
  void set_seller(const char* value);
  void set_seller(const char* value, size_t size);
  ::std::string* mutable_seller();
  ::std::string* release_seller();
  void set_allocated_seller(::std::string* seller);

  // optional string teamid = 40;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 40;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  #if LANG_CXX11
  void set_teamid(::std::string&& value);
  #endif
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // optional string playerid = 45;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 45;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional float price = 80;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 80;
  float price() const;
  void set_price(float value);

  // optional bool passivebuy = 1;
  bool has_passivebuy() const;
  void clear_passivebuy();
  static const int kPassivebuyFieldNumber = 1;
  bool passivebuy() const;
  void set_passivebuy(bool value);

  // optional int32 season = 50;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 50;
  ::google::protobuf::int32 season() const;
  void set_season(::google::protobuf::int32 value);

  // optional int32 week = 60;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 60;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional int32 qty = 70;
  bool has_qty() const;
  void clear_qty();
  static const int kQtyFieldNumber = 70;
  ::google::protobuf::int32 qty() const;
  void set_qty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.Fills)
 private:
  void set_has_passivebuy();
  void clear_has_passivebuy();
  void set_has_buyer();
  void clear_has_buyer();
  void set_has_seller();
  void clear_has_seller();
  void set_has_teamid();
  void clear_has_teamid();
  void set_has_playerid();
  void clear_has_playerid();
  void set_has_season();
  void clear_has_season();
  void set_has_week();
  void clear_has_week();
  void set_has_qty();
  void clear_has_qty();
  void set_has_price();
  void clear_has_price();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr buyer_;
  ::google::protobuf::internal::ArenaStringPtr seller_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  float price_;
  bool passivebuy_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::int32 qty_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsFillsImpl();
};
// -------------------------------------------------------------------

class ProjKstats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjKstats) */ {
 public:
  ProjKstats();
  virtual ~ProjKstats();

  ProjKstats(const ProjKstats& from);

  inline ProjKstats& operator=(const ProjKstats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjKstats(ProjKstats&& from) noexcept
    : ProjKstats() {
    *this = ::std::move(from);
  }

  inline ProjKstats& operator=(ProjKstats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjKstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjKstats* internal_default_instance() {
    return reinterpret_cast<const ProjKstats*>(
               &_ProjKstats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ProjKstats* other);
  friend void swap(ProjKstats& a, ProjKstats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjKstats* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjKstats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjKstats& from);
  void MergeFrom(const ProjKstats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjKstats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float fg60 = 50;
  bool has_fg60() const;
  void clear_fg60();
  static const int kFg60FieldNumber = 50;
  float fg60() const;
  void set_fg60(float value);

  // optional float pa = 10;
  bool has_pa() const;
  void clear_pa();
  static const int kPaFieldNumber = 10;
  float pa() const;
  void set_pa(float value);

  // optional float fg30 = 20;
  bool has_fg30() const;
  void clear_fg30();
  static const int kFg30FieldNumber = 20;
  float fg30() const;
  void set_fg30(float value);

  // optional float fg40 = 30;
  bool has_fg40() const;
  void clear_fg40();
  static const int kFg40FieldNumber = 30;
  float fg40() const;
  void set_fg40(float value);

  // optional float fg50 = 40;
  bool has_fg50() const;
  void clear_fg50();
  static const int kFg50FieldNumber = 40;
  float fg50() const;
  void set_fg50(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjKstats)
 private:
  void set_has_pa();
  void clear_has_pa();
  void set_has_fg30();
  void clear_has_fg30();
  void set_has_fg40();
  void clear_has_fg40();
  void set_has_fg50();
  void clear_has_fg50();
  void set_has_fg60();
  void clear_has_fg60();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float fg60_;
  float pa_;
  float fg30_;
  float fg40_;
  float fg50_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsProjKstatsImpl();
};
// -------------------------------------------------------------------

class ProjDstats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjDstats) */ {
 public:
  ProjDstats();
  virtual ~ProjDstats();

  ProjDstats(const ProjDstats& from);

  inline ProjDstats& operator=(const ProjDstats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjDstats(ProjDstats&& from) noexcept
    : ProjDstats() {
    *this = ::std::move(from);
  }

  inline ProjDstats& operator=(ProjDstats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjDstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjDstats* internal_default_instance() {
    return reinterpret_cast<const ProjDstats*>(
               &_ProjDstats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ProjDstats* other);
  friend void swap(ProjDstats& a, ProjDstats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjDstats* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjDstats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjDstats& from);
  void MergeFrom(const ProjDstats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjDstats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float ptsa = 160;
  bool has_ptsa() const;
  void clear_ptsa();
  static const int kPtsaFieldNumber = 160;
  float ptsa() const;
  void set_ptsa(float value);

  // optional float twopt = 100;
  bool has_twopt() const;
  void clear_twopt();
  static const int kTwoptFieldNumber = 100;
  float twopt() const;
  void set_twopt(float value);

  // optional float onept = 110;
  bool has_onept() const;
  void clear_onept();
  static const int kOneptFieldNumber = 110;
  float onept() const;
  void set_onept(float value);

  // optional float deftd = 120;
  bool has_deftd() const;
  void clear_deftd();
  static const int kDeftdFieldNumber = 120;
  float deftd() const;
  void set_deftd(float value);

  // optional float sfty = 130;
  bool has_sfty() const;
  void clear_sfty();
  static const int kSftyFieldNumber = 130;
  float sfty() const;
  void set_sfty(float value);

  // optional float turnovers = 140;
  bool has_turnovers() const;
  void clear_turnovers();
  static const int kTurnoversFieldNumber = 140;
  float turnovers() const;
  void set_turnovers(float value);

  // optional float sacks = 150;
  bool has_sacks() const;
  void clear_sacks();
  static const int kSacksFieldNumber = 150;
  float sacks() const;
  void set_sacks(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjDstats)
 private:
  void set_has_twopt();
  void clear_has_twopt();
  void set_has_onept();
  void clear_has_onept();
  void set_has_deftd();
  void clear_has_deftd();
  void set_has_sfty();
  void clear_has_sfty();
  void set_has_turnovers();
  void clear_has_turnovers();
  void set_has_sacks();
  void clear_has_sacks();
  void set_has_ptsa();
  void clear_has_ptsa();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float ptsa_;
  float twopt_;
  float onept_;
  float deftd_;
  float sfty_;
  float turnovers_;
  float sacks_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsProjDstatsImpl();
};
// -------------------------------------------------------------------

class ProjOstats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjOstats) */ {
 public:
  ProjOstats();
  virtual ~ProjOstats();

  ProjOstats(const ProjOstats& from);

  inline ProjOstats& operator=(const ProjOstats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjOstats(ProjOstats&& from) noexcept
    : ProjOstats() {
    *this = ::std::move(from);
  }

  inline ProjOstats& operator=(ProjOstats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjOstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjOstats* internal_default_instance() {
    return reinterpret_cast<const ProjOstats*>(
               &_ProjOstats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ProjOstats* other);
  friend void swap(ProjOstats& a, ProjOstats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjOstats* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjOstats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjOstats& from);
  void MergeFrom(const ProjOstats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjOstats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float onept = 110;
  bool has_onept() const;
  void clear_onept();
  static const int kOneptFieldNumber = 110;
  float onept() const;
  void set_onept(float value);

  // optional float passyds = 10;
  bool has_passyds() const;
  void clear_passyds();
  static const int kPassydsFieldNumber = 10;
  float passyds() const;
  void set_passyds(float value);

  // optional float passtd = 20;
  bool has_passtd() const;
  void clear_passtd();
  static const int kPasstdFieldNumber = 20;
  float passtd() const;
  void set_passtd(float value);

  // optional float rushyds = 30;
  bool has_rushyds() const;
  void clear_rushyds();
  static const int kRushydsFieldNumber = 30;
  float rushyds() const;
  void set_rushyds(float value);

  // optional float rushtd = 40;
  bool has_rushtd() const;
  void clear_rushtd();
  static const int kRushtdFieldNumber = 40;
  float rushtd() const;
  void set_rushtd(float value);

  // optional float recyds = 50;
  bool has_recyds() const;
  void clear_recyds();
  static const int kRecydsFieldNumber = 50;
  float recyds() const;
  void set_recyds(float value);

  // optional float rectd = 60;
  bool has_rectd() const;
  void clear_rectd();
  static const int kRectdFieldNumber = 60;
  float rectd() const;
  void set_rectd(float value);

  // optional float rec = 70;
  bool has_rec() const;
  void clear_rec();
  static const int kRecFieldNumber = 70;
  float rec() const;
  void set_rec(float value);

  // optional float pint = 80;
  bool has_pint() const;
  void clear_pint();
  static const int kPintFieldNumber = 80;
  float pint() const;
  void set_pint(float value);

  // optional float fumble = 90;
  bool has_fumble() const;
  void clear_fumble();
  static const int kFumbleFieldNumber = 90;
  float fumble() const;
  void set_fumble(float value);

  // optional float twopt = 100;
  bool has_twopt() const;
  void clear_twopt();
  static const int kTwoptFieldNumber = 100;
  float twopt() const;
  void set_twopt(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjOstats)
 private:
  void set_has_passyds();
  void clear_has_passyds();
  void set_has_passtd();
  void clear_has_passtd();
  void set_has_rushyds();
  void clear_has_rushyds();
  void set_has_rushtd();
  void clear_has_rushtd();
  void set_has_recyds();
  void clear_has_recyds();
  void set_has_rectd();
  void clear_has_rectd();
  void set_has_rec();
  void clear_has_rec();
  void set_has_pint();
  void clear_has_pint();
  void set_has_fumble();
  void clear_has_fumble();
  void set_has_twopt();
  void clear_has_twopt();
  void set_has_onept();
  void clear_has_onept();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float onept_;
  float passyds_;
  float passtd_;
  float rushyds_;
  float rushtd_;
  float recyds_;
  float rectd_;
  float rec_;
  float pint_;
  float fumble_;
  float twopt_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsProjOstatsImpl();
};
// -------------------------------------------------------------------

class ProjStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fantasybit.ProjStats) */ {
 public:
  ProjStats();
  virtual ~ProjStats();

  ProjStats(const ProjStats& from);

  inline ProjStats& operator=(const ProjStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjStats(ProjStats&& from) noexcept
    : ProjStats() {
    *this = ::std::move(from);
  }

  inline ProjStats& operator=(ProjStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjStats* internal_default_instance() {
    return reinterpret_cast<const ProjStats*>(
               &_ProjStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ProjStats* other);
  friend void swap(ProjStats& a, ProjStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjStats* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjStats& from);
  void MergeFrom(const ProjStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.ProjOstats ostats = 10;
  bool has_ostats() const;
  void clear_ostats();
  static const int kOstatsFieldNumber = 10;
  const ::fantasybit::ProjOstats& ostats() const;
  ::fantasybit::ProjOstats* release_ostats();
  ::fantasybit::ProjOstats* mutable_ostats();
  void set_allocated_ostats(::fantasybit::ProjOstats* ostats);

  // optional .fantasybit.ProjDstats dstats = 20;
  bool has_dstats() const;
  void clear_dstats();
  static const int kDstatsFieldNumber = 20;
  const ::fantasybit::ProjDstats& dstats() const;
  ::fantasybit::ProjDstats* release_dstats();
  ::fantasybit::ProjDstats* mutable_dstats();
  void set_allocated_dstats(::fantasybit::ProjDstats* dstats);

  // optional .fantasybit.ProjKstats kstats = 30;
  bool has_kstats() const;
  void clear_kstats();
  static const int kKstatsFieldNumber = 30;
  const ::fantasybit::ProjKstats& kstats() const;
  ::fantasybit::ProjKstats* release_kstats();
  ::fantasybit::ProjKstats* mutable_kstats();
  void set_allocated_kstats(::fantasybit::ProjKstats* kstats);

  // @@protoc_insertion_point(class_scope:fantasybit.ProjStats)
 private:
  void set_has_ostats();
  void clear_has_ostats();
  void set_has_dstats();
  void clear_has_dstats();
  void set_has_kstats();
  void clear_has_kstats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::fantasybit::ProjOstats* ostats_;
  ::fantasybit::ProjDstats* dstats_;
  ::fantasybit::ProjKstats* kstats_;
  friend struct ::protobuf_ApiData_2eproto::TableStruct;
  friend void ::protobuf_ApiData_2eproto::InitDefaultsProjStatsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FantasyNameHash

// optional string name = 10;
inline bool FantasyNameHash::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameHash::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameHash::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameHash::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyNameHash::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameHash.name)
  return name_.GetNoArena();
}
inline void FantasyNameHash::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameHash.name)
}
#if LANG_CXX11
inline void FantasyNameHash::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.FantasyNameHash.name)
}
#endif
inline void FantasyNameHash::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameHash.name)
}
inline void FantasyNameHash::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameHash.name)
}
inline ::std::string* FantasyNameHash::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameHash.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameHash::release_name() {
  // @@protoc_insertion_point(field_release:fantasybit.FantasyNameHash.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameHash::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameHash.name)
}

// optional uint64 hash = 30;
inline bool FantasyNameHash::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameHash::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameHash::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameHash::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 FantasyNameHash::hash() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameHash.hash)
  return hash_;
}
inline void FantasyNameHash::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameHash.hash)
}

// -------------------------------------------------------------------

// Distribution

// optional string gameid = 2;
inline bool Distribution::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Distribution::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Distribution::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Distribution::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& Distribution::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.gameid)
  return gameid_.GetNoArena();
}
inline void Distribution::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.gameid)
}
#if LANG_CXX11
inline void Distribution::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Distribution.gameid)
}
#endif
inline void Distribution::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Distribution.gameid)
}
inline void Distribution::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Distribution.gameid)
}
inline ::std::string* Distribution::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Distribution.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.Distribution.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Distribution.gameid)
}

// optional string teamid = 4;
inline bool Distribution::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Distribution::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Distribution::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Distribution::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& Distribution::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.teamid)
  return teamid_.GetNoArena();
}
inline void Distribution::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.teamid)
}
#if LANG_CXX11
inline void Distribution::set_teamid(::std::string&& value) {
  set_has_teamid();
  teamid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Distribution.teamid)
}
#endif
inline void Distribution::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Distribution.teamid)
}
inline void Distribution::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Distribution.teamid)
}
inline ::std::string* Distribution::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Distribution.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.Distribution.teamid)
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Distribution.teamid)
}

// optional int32 season = 5;
inline bool Distribution::has_season() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Distribution::set_has_season() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Distribution::clear_has_season() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Distribution::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 Distribution::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.season)
  return season_;
}
inline void Distribution::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.season)
}

// optional int32 week = 6;
inline bool Distribution::has_week() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Distribution::set_has_week() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Distribution::clear_has_week() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Distribution::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 Distribution::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.week)
  return week_;
}
inline void Distribution::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.week)
}

// optional uint64 fantasy_nameid = 1;
inline bool Distribution::has_fantasy_nameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Distribution::set_has_fantasy_nameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Distribution::clear_has_fantasy_nameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Distribution::clear_fantasy_nameid() {
  fantasy_nameid_ = GOOGLE_ULONGLONG(0);
  clear_has_fantasy_nameid();
}
inline ::google::protobuf::uint64 Distribution::fantasy_nameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.fantasy_nameid)
  return fantasy_nameid_;
}
inline void Distribution::set_fantasy_nameid(::google::protobuf::uint64 value) {
  set_has_fantasy_nameid();
  fantasy_nameid_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.fantasy_nameid)
}

// optional string playerid = 3;
inline bool Distribution::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Distribution::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Distribution::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Distribution::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& Distribution::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.playerid)
  return playerid_.GetNoArena();
}
inline void Distribution::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.playerid)
}
#if LANG_CXX11
inline void Distribution::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Distribution.playerid)
}
#endif
inline void Distribution::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Distribution.playerid)
}
inline void Distribution::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Distribution.playerid)
}
inline ::std::string* Distribution::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Distribution.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Distribution::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.Distribution.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Distribution::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Distribution.playerid)
}

// optional int32 proj = 7;
inline bool Distribution::has_proj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Distribution::set_has_proj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Distribution::clear_has_proj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Distribution::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 Distribution::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.proj)
  return proj_;
}
inline void Distribution::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.proj)
}

// optional float award = 8;
inline bool Distribution::has_award() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Distribution::set_has_award() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Distribution::clear_has_award() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Distribution::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline float Distribution::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.award)
  return award_;
}
inline void Distribution::set_award(float value) {
  set_has_award();
  award_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.award)
}

// optional float result = 9;
inline bool Distribution::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Distribution::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Distribution::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Distribution::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float Distribution::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.Distribution.result)
  return result_;
}
inline void Distribution::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Distribution.result)
}

// -------------------------------------------------------------------

// Profits

// optional string gameid = 2;
inline bool Profits::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profits::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profits::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profits::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& Profits::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.gameid)
  return gameid_.GetNoArena();
}
inline void Profits::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.gameid)
}
#if LANG_CXX11
inline void Profits::set_gameid(::std::string&& value) {
  set_has_gameid();
  gameid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Profits.gameid)
}
#endif
inline void Profits::set_gameid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Profits.gameid)
}
inline void Profits::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Profits.gameid)
}
inline ::std::string* Profits::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Profits.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profits::release_gameid() {
  // @@protoc_insertion_point(field_release:fantasybit.Profits.gameid)
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profits::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Profits.gameid)
}

// optional string teamid = 4;
inline bool Profits::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profits::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profits::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profits::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& Profits::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.teamid)
  return teamid_.GetNoArena();
}
inline void Profits::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.teamid)
}
#if LANG_CXX11
inline void Profits::set_teamid(::std::string&& value) {
  set_has_teamid();
  teamid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Profits.teamid)
}
#endif
inline void Profits::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Profits.teamid)
}
inline void Profits::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Profits.teamid)
}
inline ::std::string* Profits::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Profits.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profits::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.Profits.teamid)
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profits::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Profits.teamid)
}

// optional int32 season = 5;
inline bool Profits::has_season() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Profits::set_has_season() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Profits::clear_has_season() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Profits::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 Profits::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.season)
  return season_;
}
inline void Profits::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.season)
}

// optional int32 week = 6;
inline bool Profits::has_week() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Profits::set_has_week() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Profits::clear_has_week() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Profits::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 Profits::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.week)
  return week_;
}
inline void Profits::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.week)
}

// optional uint64 fantasy_nameid = 1;
inline bool Profits::has_fantasy_nameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profits::set_has_fantasy_nameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profits::clear_has_fantasy_nameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profits::clear_fantasy_nameid() {
  fantasy_nameid_ = GOOGLE_ULONGLONG(0);
  clear_has_fantasy_nameid();
}
inline ::google::protobuf::uint64 Profits::fantasy_nameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.fantasy_nameid)
  return fantasy_nameid_;
}
inline void Profits::set_fantasy_nameid(::google::protobuf::uint64 value) {
  set_has_fantasy_nameid();
  fantasy_nameid_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.fantasy_nameid)
}

// optional string playerid = 3;
inline bool Profits::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profits::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profits::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profits::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& Profits::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.playerid)
  return playerid_.GetNoArena();
}
inline void Profits::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Profits.playerid)
}
#if LANG_CXX11
inline void Profits::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Profits.playerid)
}
#endif
inline void Profits::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Profits.playerid)
}
inline void Profits::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Profits.playerid)
}
inline ::std::string* Profits::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Profits.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profits::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.Profits.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profits::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Profits.playerid)
}

// optional int32 qty = 7;
inline bool Profits::has_qty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Profits::set_has_qty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Profits::clear_has_qty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Profits::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline ::google::protobuf::int32 Profits::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.qty)
  return qty_;
}
inline void Profits::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.qty)
}

// optional float price = 8;
inline bool Profits::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Profits::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Profits::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Profits::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float Profits::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.price)
  return price_;
}
inline void Profits::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.price)
}

// optional float result = 9;
inline bool Profits::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Profits::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Profits::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Profits::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float Profits::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.result)
  return result_;
}
inline void Profits::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.result)
}

// optional float pnl = 10;
inline bool Profits::has_pnl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Profits::set_has_pnl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Profits::clear_has_pnl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Profits::clear_pnl() {
  pnl_ = 0;
  clear_has_pnl();
}
inline float Profits::pnl() const {
  // @@protoc_insertion_point(field_get:fantasybit.Profits.pnl)
  return pnl_;
}
inline void Profits::set_pnl(float value) {
  set_has_pnl();
  pnl_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Profits.pnl)
}

// -------------------------------------------------------------------

// Fills

// optional bool passivebuy = 1;
inline bool Fills::has_passivebuy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Fills::set_has_passivebuy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Fills::clear_has_passivebuy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Fills::clear_passivebuy() {
  passivebuy_ = false;
  clear_has_passivebuy();
}
inline bool Fills::passivebuy() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.passivebuy)
  return passivebuy_;
}
inline void Fills::set_passivebuy(bool value) {
  set_has_passivebuy();
  passivebuy_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Fills.passivebuy)
}

// optional string buyer = 10;
inline bool Fills::has_buyer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fills::set_has_buyer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fills::clear_has_buyer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fills::clear_buyer() {
  buyer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyer();
}
inline const ::std::string& Fills::buyer() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.buyer)
  return buyer_.GetNoArena();
}
inline void Fills::set_buyer(const ::std::string& value) {
  set_has_buyer();
  buyer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.buyer)
}
#if LANG_CXX11
inline void Fills::set_buyer(::std::string&& value) {
  set_has_buyer();
  buyer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.buyer)
}
#endif
inline void Fills::set_buyer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_buyer();
  buyer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.buyer)
}
inline void Fills::set_buyer(const char* value, size_t size) {
  set_has_buyer();
  buyer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.buyer)
}
inline ::std::string* Fills::mutable_buyer() {
  set_has_buyer();
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.buyer)
  return buyer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fills::release_buyer() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.buyer)
  clear_has_buyer();
  return buyer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fills::set_allocated_buyer(::std::string* buyer) {
  if (buyer != NULL) {
    set_has_buyer();
  } else {
    clear_has_buyer();
  }
  buyer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyer);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.buyer)
}

// optional string seller = 20;
inline bool Fills::has_seller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fills::set_has_seller() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fills::clear_has_seller() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fills::clear_seller() {
  seller_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seller();
}
inline const ::std::string& Fills::seller() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.seller)
  return seller_.GetNoArena();
}
inline void Fills::set_seller(const ::std::string& value) {
  set_has_seller();
  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.seller)
}
#if LANG_CXX11
inline void Fills::set_seller(::std::string&& value) {
  set_has_seller();
  seller_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.seller)
}
#endif
inline void Fills::set_seller(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_seller();
  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.seller)
}
inline void Fills::set_seller(const char* value, size_t size) {
  set_has_seller();
  seller_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.seller)
}
inline ::std::string* Fills::mutable_seller() {
  set_has_seller();
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.seller)
  return seller_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fills::release_seller() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.seller)
  clear_has_seller();
  return seller_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fills::set_allocated_seller(::std::string* seller) {
  if (seller != NULL) {
    set_has_seller();
  } else {
    clear_has_seller();
  }
  seller_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seller);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.seller)
}

// optional string teamid = 40;
inline bool Fills::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fills::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fills::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fills::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& Fills::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.teamid)
  return teamid_.GetNoArena();
}
inline void Fills::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.teamid)
}
#if LANG_CXX11
inline void Fills::set_teamid(::std::string&& value) {
  set_has_teamid();
  teamid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.teamid)
}
#endif
inline void Fills::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.teamid)
}
inline void Fills::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.teamid)
}
inline ::std::string* Fills::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fills::release_teamid() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.teamid)
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fills::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.teamid)
}

// optional string playerid = 45;
inline bool Fills::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fills::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fills::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fills::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& Fills::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.playerid)
  return playerid_.GetNoArena();
}
inline void Fills::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Fills.playerid)
}
#if LANG_CXX11
inline void Fills::set_playerid(::std::string&& value) {
  set_has_playerid();
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fantasybit.Fills.playerid)
}
#endif
inline void Fills::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Fills.playerid)
}
inline void Fills::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Fills.playerid)
}
inline ::std::string* Fills::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.Fills.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Fills::release_playerid() {
  // @@protoc_insertion_point(field_release:fantasybit.Fills.playerid)
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Fills::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Fills.playerid)
}

// optional int32 season = 50;
inline bool Fills::has_season() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Fills::set_has_season() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Fills::clear_has_season() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Fills::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 Fills::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.season)
  return season_;
}
inline void Fills::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Fills.season)
}

// optional int32 week = 60;
inline bool Fills::has_week() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Fills::set_has_week() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Fills::clear_has_week() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Fills::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 Fills::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.week)
  return week_;
}
inline void Fills::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Fills.week)
}

// optional int32 qty = 70;
inline bool Fills::has_qty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Fills::set_has_qty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Fills::clear_has_qty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Fills::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline ::google::protobuf::int32 Fills::qty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.qty)
  return qty_;
}
inline void Fills::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Fills.qty)
}

// optional float price = 80;
inline bool Fills::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Fills::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Fills::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Fills::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float Fills::price() const {
  // @@protoc_insertion_point(field_get:fantasybit.Fills.price)
  return price_;
}
inline void Fills::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Fills.price)
}

// -------------------------------------------------------------------

// ProjKstats

// optional float pa = 10;
inline bool ProjKstats::has_pa() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjKstats::set_has_pa() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjKstats::clear_has_pa() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjKstats::clear_pa() {
  pa_ = 0;
  clear_has_pa();
}
inline float ProjKstats::pa() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.pa)
  return pa_;
}
inline void ProjKstats::set_pa(float value) {
  set_has_pa();
  pa_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.pa)
}

// optional float fg30 = 20;
inline bool ProjKstats::has_fg30() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjKstats::set_has_fg30() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjKstats::clear_has_fg30() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjKstats::clear_fg30() {
  fg30_ = 0;
  clear_has_fg30();
}
inline float ProjKstats::fg30() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg30)
  return fg30_;
}
inline void ProjKstats::set_fg30(float value) {
  set_has_fg30();
  fg30_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg30)
}

// optional float fg40 = 30;
inline bool ProjKstats::has_fg40() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjKstats::set_has_fg40() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjKstats::clear_has_fg40() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjKstats::clear_fg40() {
  fg40_ = 0;
  clear_has_fg40();
}
inline float ProjKstats::fg40() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg40)
  return fg40_;
}
inline void ProjKstats::set_fg40(float value) {
  set_has_fg40();
  fg40_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg40)
}

// optional float fg50 = 40;
inline bool ProjKstats::has_fg50() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjKstats::set_has_fg50() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjKstats::clear_has_fg50() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjKstats::clear_fg50() {
  fg50_ = 0;
  clear_has_fg50();
}
inline float ProjKstats::fg50() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg50)
  return fg50_;
}
inline void ProjKstats::set_fg50(float value) {
  set_has_fg50();
  fg50_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg50)
}

// optional float fg60 = 50;
inline bool ProjKstats::has_fg60() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjKstats::set_has_fg60() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjKstats::clear_has_fg60() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjKstats::clear_fg60() {
  fg60_ = 0;
  clear_has_fg60();
}
inline float ProjKstats::fg60() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjKstats.fg60)
  return fg60_;
}
inline void ProjKstats::set_fg60(float value) {
  set_has_fg60();
  fg60_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjKstats.fg60)
}

// -------------------------------------------------------------------

// ProjDstats

// optional float twopt = 100;
inline bool ProjDstats::has_twopt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjDstats::set_has_twopt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjDstats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjDstats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
inline float ProjDstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.twopt)
  return twopt_;
}
inline void ProjDstats::set_twopt(float value) {
  set_has_twopt();
  twopt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.twopt)
}

// optional float onept = 110;
inline bool ProjDstats::has_onept() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjDstats::set_has_onept() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjDstats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjDstats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
inline float ProjDstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.onept)
  return onept_;
}
inline void ProjDstats::set_onept(float value) {
  set_has_onept();
  onept_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.onept)
}

// optional float deftd = 120;
inline bool ProjDstats::has_deftd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjDstats::set_has_deftd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjDstats::clear_has_deftd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjDstats::clear_deftd() {
  deftd_ = 0;
  clear_has_deftd();
}
inline float ProjDstats::deftd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.deftd)
  return deftd_;
}
inline void ProjDstats::set_deftd(float value) {
  set_has_deftd();
  deftd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.deftd)
}

// optional float sfty = 130;
inline bool ProjDstats::has_sfty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjDstats::set_has_sfty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjDstats::clear_has_sfty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjDstats::clear_sfty() {
  sfty_ = 0;
  clear_has_sfty();
}
inline float ProjDstats::sfty() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.sfty)
  return sfty_;
}
inline void ProjDstats::set_sfty(float value) {
  set_has_sfty();
  sfty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.sfty)
}

// optional float turnovers = 140;
inline bool ProjDstats::has_turnovers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjDstats::set_has_turnovers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProjDstats::clear_has_turnovers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProjDstats::clear_turnovers() {
  turnovers_ = 0;
  clear_has_turnovers();
}
inline float ProjDstats::turnovers() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.turnovers)
  return turnovers_;
}
inline void ProjDstats::set_turnovers(float value) {
  set_has_turnovers();
  turnovers_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.turnovers)
}

// optional float sacks = 150;
inline bool ProjDstats::has_sacks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjDstats::set_has_sacks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProjDstats::clear_has_sacks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProjDstats::clear_sacks() {
  sacks_ = 0;
  clear_has_sacks();
}
inline float ProjDstats::sacks() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.sacks)
  return sacks_;
}
inline void ProjDstats::set_sacks(float value) {
  set_has_sacks();
  sacks_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.sacks)
}

// optional float ptsa = 160;
inline bool ProjDstats::has_ptsa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjDstats::set_has_ptsa() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjDstats::clear_has_ptsa() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjDstats::clear_ptsa() {
  ptsa_ = 0;
  clear_has_ptsa();
}
inline float ProjDstats::ptsa() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjDstats.ptsa)
  return ptsa_;
}
inline void ProjDstats::set_ptsa(float value) {
  set_has_ptsa();
  ptsa_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjDstats.ptsa)
}

// -------------------------------------------------------------------

// ProjOstats

// optional float passyds = 10;
inline bool ProjOstats::has_passyds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjOstats::set_has_passyds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjOstats::clear_has_passyds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjOstats::clear_passyds() {
  passyds_ = 0;
  clear_has_passyds();
}
inline float ProjOstats::passyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.passyds)
  return passyds_;
}
inline void ProjOstats::set_passyds(float value) {
  set_has_passyds();
  passyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.passyds)
}

// optional float passtd = 20;
inline bool ProjOstats::has_passtd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjOstats::set_has_passtd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjOstats::clear_has_passtd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjOstats::clear_passtd() {
  passtd_ = 0;
  clear_has_passtd();
}
inline float ProjOstats::passtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.passtd)
  return passtd_;
}
inline void ProjOstats::set_passtd(float value) {
  set_has_passtd();
  passtd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.passtd)
}

// optional float rushyds = 30;
inline bool ProjOstats::has_rushyds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjOstats::set_has_rushyds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjOstats::clear_has_rushyds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjOstats::clear_rushyds() {
  rushyds_ = 0;
  clear_has_rushyds();
}
inline float ProjOstats::rushyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rushyds)
  return rushyds_;
}
inline void ProjOstats::set_rushyds(float value) {
  set_has_rushyds();
  rushyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rushyds)
}

// optional float rushtd = 40;
inline bool ProjOstats::has_rushtd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProjOstats::set_has_rushtd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProjOstats::clear_has_rushtd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProjOstats::clear_rushtd() {
  rushtd_ = 0;
  clear_has_rushtd();
}
inline float ProjOstats::rushtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rushtd)
  return rushtd_;
}
inline void ProjOstats::set_rushtd(float value) {
  set_has_rushtd();
  rushtd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rushtd)
}

// optional float recyds = 50;
inline bool ProjOstats::has_recyds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProjOstats::set_has_recyds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProjOstats::clear_has_recyds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProjOstats::clear_recyds() {
  recyds_ = 0;
  clear_has_recyds();
}
inline float ProjOstats::recyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.recyds)
  return recyds_;
}
inline void ProjOstats::set_recyds(float value) {
  set_has_recyds();
  recyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.recyds)
}

// optional float rectd = 60;
inline bool ProjOstats::has_rectd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProjOstats::set_has_rectd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProjOstats::clear_has_rectd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProjOstats::clear_rectd() {
  rectd_ = 0;
  clear_has_rectd();
}
inline float ProjOstats::rectd() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rectd)
  return rectd_;
}
inline void ProjOstats::set_rectd(float value) {
  set_has_rectd();
  rectd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rectd)
}

// optional float rec = 70;
inline bool ProjOstats::has_rec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProjOstats::set_has_rec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProjOstats::clear_has_rec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProjOstats::clear_rec() {
  rec_ = 0;
  clear_has_rec();
}
inline float ProjOstats::rec() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.rec)
  return rec_;
}
inline void ProjOstats::set_rec(float value) {
  set_has_rec();
  rec_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.rec)
}

// optional float pint = 80;
inline bool ProjOstats::has_pint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProjOstats::set_has_pint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProjOstats::clear_has_pint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProjOstats::clear_pint() {
  pint_ = 0;
  clear_has_pint();
}
inline float ProjOstats::pint() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.pint)
  return pint_;
}
inline void ProjOstats::set_pint(float value) {
  set_has_pint();
  pint_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.pint)
}

// optional float fumble = 90;
inline bool ProjOstats::has_fumble() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProjOstats::set_has_fumble() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProjOstats::clear_has_fumble() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProjOstats::clear_fumble() {
  fumble_ = 0;
  clear_has_fumble();
}
inline float ProjOstats::fumble() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.fumble)
  return fumble_;
}
inline void ProjOstats::set_fumble(float value) {
  set_has_fumble();
  fumble_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.fumble)
}

// optional float twopt = 100;
inline bool ProjOstats::has_twopt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProjOstats::set_has_twopt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProjOstats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProjOstats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
inline float ProjOstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.twopt)
  return twopt_;
}
inline void ProjOstats::set_twopt(float value) {
  set_has_twopt();
  twopt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.twopt)
}

// optional float onept = 110;
inline bool ProjOstats::has_onept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjOstats::set_has_onept() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjOstats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjOstats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
inline float ProjOstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjOstats.onept)
  return onept_;
}
inline void ProjOstats::set_onept(float value) {
  set_has_onept();
  onept_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjOstats.onept)
}

// -------------------------------------------------------------------

// ProjStats

// optional .fantasybit.ProjOstats ostats = 10;
inline bool ProjStats::has_ostats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjStats::set_has_ostats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjStats::clear_has_ostats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjStats::clear_ostats() {
  if (ostats_ != NULL) ostats_->Clear();
  clear_has_ostats();
}
inline const ::fantasybit::ProjOstats& ProjStats::ostats() const {
  const ::fantasybit::ProjOstats* p = ostats_;
  // @@protoc_insertion_point(field_get:fantasybit.ProjStats.ostats)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ProjOstats*>(
      &::fantasybit::_ProjOstats_default_instance_);
}
inline ::fantasybit::ProjOstats* ProjStats::release_ostats() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjStats.ostats)
  clear_has_ostats();
  ::fantasybit::ProjOstats* temp = ostats_;
  ostats_ = NULL;
  return temp;
}
inline ::fantasybit::ProjOstats* ProjStats::mutable_ostats() {
  set_has_ostats();
  if (ostats_ == NULL) {
    ostats_ = new ::fantasybit::ProjOstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjStats.ostats)
  return ostats_;
}
inline void ProjStats::set_allocated_ostats(::fantasybit::ProjOstats* ostats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ostats_;
  }
  if (ostats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ostats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ostats, submessage_arena);
    }
    set_has_ostats();
  } else {
    clear_has_ostats();
  }
  ostats_ = ostats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjStats.ostats)
}

// optional .fantasybit.ProjDstats dstats = 20;
inline bool ProjStats::has_dstats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjStats::set_has_dstats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjStats::clear_has_dstats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjStats::clear_dstats() {
  if (dstats_ != NULL) dstats_->Clear();
  clear_has_dstats();
}
inline const ::fantasybit::ProjDstats& ProjStats::dstats() const {
  const ::fantasybit::ProjDstats* p = dstats_;
  // @@protoc_insertion_point(field_get:fantasybit.ProjStats.dstats)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ProjDstats*>(
      &::fantasybit::_ProjDstats_default_instance_);
}
inline ::fantasybit::ProjDstats* ProjStats::release_dstats() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjStats.dstats)
  clear_has_dstats();
  ::fantasybit::ProjDstats* temp = dstats_;
  dstats_ = NULL;
  return temp;
}
inline ::fantasybit::ProjDstats* ProjStats::mutable_dstats() {
  set_has_dstats();
  if (dstats_ == NULL) {
    dstats_ = new ::fantasybit::ProjDstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjStats.dstats)
  return dstats_;
}
inline void ProjStats::set_allocated_dstats(::fantasybit::ProjDstats* dstats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dstats_;
  }
  if (dstats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dstats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dstats, submessage_arena);
    }
    set_has_dstats();
  } else {
    clear_has_dstats();
  }
  dstats_ = dstats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjStats.dstats)
}

// optional .fantasybit.ProjKstats kstats = 30;
inline bool ProjStats::has_kstats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjStats::set_has_kstats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjStats::clear_has_kstats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjStats::clear_kstats() {
  if (kstats_ != NULL) kstats_->Clear();
  clear_has_kstats();
}
inline const ::fantasybit::ProjKstats& ProjStats::kstats() const {
  const ::fantasybit::ProjKstats* p = kstats_;
  // @@protoc_insertion_point(field_get:fantasybit.ProjStats.kstats)
  return p != NULL ? *p : *reinterpret_cast<const ::fantasybit::ProjKstats*>(
      &::fantasybit::_ProjKstats_default_instance_);
}
inline ::fantasybit::ProjKstats* ProjStats::release_kstats() {
  // @@protoc_insertion_point(field_release:fantasybit.ProjStats.kstats)
  clear_has_kstats();
  ::fantasybit::ProjKstats* temp = kstats_;
  kstats_ = NULL;
  return temp;
}
inline ::fantasybit::ProjKstats* ProjStats::mutable_kstats() {
  set_has_kstats();
  if (kstats_ == NULL) {
    kstats_ = new ::fantasybit::ProjKstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjStats.kstats)
  return kstats_;
}
inline void ProjStats::set_allocated_kstats(::fantasybit::ProjKstats* kstats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kstats_;
  }
  if (kstats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kstats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kstats, submessage_arena);
    }
    set_has_kstats();
  } else {
    clear_has_kstats();
  }
  kstats_ = kstats;
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjStats.kstats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ApiData_2eproto__INCLUDED
