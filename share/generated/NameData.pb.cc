// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#include "NameData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fantasybit {
class FantasyNameBalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyNameBal>
      _instance;
} _FantasyNameBal_default_instance_;
class FantasyBitAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyBitAward>
      _instance;
} _FantasyBitAward_default_instance_;
class FantasyBitPnlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyBitPnl>
      _instance;
} _FantasyBitPnl_default_instance_;
class FantasyBitProjDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FantasyBitProj>
      _instance;
} _FantasyBitProj_default_instance_;
class GameFantasyBitProjDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameFantasyBitProj>
      _instance;
} _GameFantasyBitProj_default_instance_;
}  // namespace fantasybit
namespace protobuf_NameData_2eproto {
void InitDefaultsFantasyNameBalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_FantasyNameBal_default_instance_;
    new (ptr) ::fantasybit::FantasyNameBal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyNameBal::InitAsDefaultInstance();
}

void InitDefaultsFantasyNameBal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyNameBalImpl);
}

void InitDefaultsFantasyBitAwardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_FantasyBitAward_default_instance_;
    new (ptr) ::fantasybit::FantasyBitAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyBitAward::InitAsDefaultInstance();
}

void InitDefaultsFantasyBitAward() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyBitAwardImpl);
}

void InitDefaultsFantasyBitPnlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ExData_2eproto::InitDefaultsSettlePos();
  {
    void* ptr = &::fantasybit::_FantasyBitPnl_default_instance_;
    new (ptr) ::fantasybit::FantasyBitPnl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyBitPnl::InitAsDefaultInstance();
}

void InitDefaultsFantasyBitPnl() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyBitPnlImpl);
}

void InitDefaultsFantasyBitProjImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_FantasyBitProj_default_instance_;
    new (ptr) ::fantasybit::FantasyBitProj();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::FantasyBitProj::InitAsDefaultInstance();
}

void InitDefaultsFantasyBitProj() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFantasyBitProjImpl);
}

void InitDefaultsGameFantasyBitProjImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_NameData_2eproto::InitDefaultsFantasyBitProj();
  {
    void* ptr = &::fantasybit::_GameFantasyBitProj_default_instance_;
    new (ptr) ::fantasybit::GameFantasyBitProj();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::GameFantasyBitProj::InitAsDefaultInstance();
}

void InitDefaultsGameFantasyBitProj() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameFantasyBitProjImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, stake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, chash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyNameBal, count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitAward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitAward, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitAward, proj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitAward, award_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitPnl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitPnl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitPnl, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitPnl, spos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitPnl, pnl_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, proj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::FantasyBitProj, block_),
  0,
  3,
  1,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, home_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::GameFantasyBitProj, away_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::fantasybit::FantasyNameBal)},
  { 19, 27, sizeof(::fantasybit::FantasyBitAward)},
  { 30, 38, sizeof(::fantasybit::FantasyBitPnl)},
  { 41, 51, sizeof(::fantasybit::FantasyBitProj)},
  { 56, 64, sizeof(::fantasybit::GameFantasyBitProj)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyNameBal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyBitAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyBitPnl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_FantasyBitProj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_GameFantasyBitProj_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "NameData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016NameData.proto\022\nfantasybit\032\014ExData.pro"
      "to\"|\n\016FantasyNameBal\022\014\n\004name\030\n \001(\t\022\022\n\npu"
      "blic_key\030\024 \001(\t\022\014\n\004bits\030\036 \001(\004\022\r\n\005stake\030( "
      "\001(\003\022\r\n\005chash\0302 \001(\004\022\r\n\005block\030< \001(\005\022\r\n\005cou"
      "nt\030F \001(\005\"<\n\017FantasyBitAward\022\014\n\004name\030\n \001("
      "\t\022\014\n\004proj\030\024 \001(\005\022\r\n\005award\030\036 \001(\004\"O\n\rFantas"
      "yBitPnl\022\014\n\004name\030\n \001(\t\022#\n\004spos\030\024 \001(\0132\025.fa"
      "ntasybit.SettlePos\022\013\n\003pnl\030\036 \001(\003\"\\\n\016Fanta"
      "syBitProj\022\014\n\004name\030\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\020\n"
      "\010playerid\030\036 \001(\t\022\r\n\005count\030( \001(\005\022\r\n\005block\030"
      "2 \001(\005\"x\n\022GameFantasyBitProj\022\016\n\006gameid\030\n "
      "\001(\t\022(\n\004home\030\024 \003(\0132\032.fantasybit.FantasyBi"
      "tProj\022(\n\004away\030\036 \003(\0132\032.fantasybit.Fantasy"
      "BitProj"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NameData.proto", &protobuf_RegisterTypes);
  ::protobuf_ExData_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NameData_2eproto
namespace fantasybit {

// ===================================================================

void FantasyNameBal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyNameBal::kNameFieldNumber;
const int FantasyNameBal::kPublicKeyFieldNumber;
const int FantasyNameBal::kBitsFieldNumber;
const int FantasyNameBal::kStakeFieldNumber;
const int FantasyNameBal::kChashFieldNumber;
const int FantasyNameBal::kBlockFieldNumber;
const int FantasyNameBal::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyNameBal::FantasyNameBal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NameData_2eproto::InitDefaultsFantasyNameBal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyNameBal)
}
FantasyNameBal::FantasyNameBal(const FantasyNameBal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  ::memcpy(&bits_, &from.bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&bits_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameBal)
}

void FantasyNameBal::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&bits_)) + sizeof(count_));
}

FantasyNameBal::~FantasyNameBal() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameBal)
  SharedDtor();
}

void FantasyNameBal::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FantasyNameBal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyNameBal::descriptor() {
  ::protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyNameBal& FantasyNameBal::default_instance() {
  ::protobuf_NameData_2eproto::InitDefaultsFantasyNameBal();
  return *internal_default_instance();
}

FantasyNameBal* FantasyNameBal::New(::google::protobuf::Arena* arena) const {
  FantasyNameBal* n = new FantasyNameBal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyNameBal::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyNameBal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!public_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*public_key_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&bits_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyNameBal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyNameBal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyNameBal.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string public_key = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), static_cast<int>(this->public_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyNameBal.public_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bits = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stake = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_stake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 chash = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_chash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 block = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_block();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyNameBal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyNameBal)
  return false;
#undef DO_
}

void FantasyNameBal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyNameBal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBal.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string public_key = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBal.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->public_key(), output);
  }

  // optional uint64 bits = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->bits(), output);
  }

  // optional int64 stake = 40;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->stake(), output);
  }

  // optional uint64 chash = 50;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->chash(), output);
  }

  // optional int32 block = 60;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->block(), output);
  }

  // optional int32 count = 70;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyNameBal)
}

::google::protobuf::uint8* FantasyNameBal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameBal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBal.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string public_key = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), static_cast<int>(this->public_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyNameBal.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->public_key(), target);
  }

  // optional uint64 bits = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->bits(), target);
  }

  // optional int64 stake = 40;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->stake(), target);
  }

  // optional uint64 chash = 50;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->chash(), target);
  }

  // optional int32 block = 60;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->block(), target);
  }

  // optional int32 count = 70;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameBal)
  return target;
}

size_t FantasyNameBal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyNameBal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional uint64 bits = 30;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

    // optional int64 stake = 40;
    if (has_stake()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stake());
    }

    // optional uint64 chash = 50;
    if (has_chash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chash());
    }

    // optional int32 block = 60;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

    // optional int32 count = 70;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameBal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyNameBal)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyNameBal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyNameBal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyNameBal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyNameBal)
    MergeFrom(*source);
  }
}

void FantasyNameBal::MergeFrom(const FantasyNameBal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyNameBal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      bits_ = from.bits_;
    }
    if (cached_has_bits & 0x00000008u) {
      stake_ = from.stake_;
    }
    if (cached_has_bits & 0x00000010u) {
      chash_ = from.chash_;
    }
    if (cached_has_bits & 0x00000020u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyNameBal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyNameBal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameBal::CopyFrom(const FantasyNameBal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyNameBal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameBal::IsInitialized() const {
  return true;
}

void FantasyNameBal::Swap(FantasyNameBal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyNameBal::InternalSwap(FantasyNameBal* other) {
  using std::swap;
  name_.Swap(&other->name_);
  public_key_.Swap(&other->public_key_);
  swap(bits_, other->bits_);
  swap(stake_, other->stake_);
  swap(chash_, other->chash_);
  swap(block_, other->block_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyNameBal::GetMetadata() const {
  protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FantasyBitAward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyBitAward::kNameFieldNumber;
const int FantasyBitAward::kProjFieldNumber;
const int FantasyBitAward::kAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyBitAward::FantasyBitAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NameData_2eproto::InitDefaultsFantasyBitAward();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyBitAward)
}
FantasyBitAward::FantasyBitAward(const FantasyBitAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&proj_, &from.proj_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_) -
    reinterpret_cast<char*>(&proj_)) + sizeof(award_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitAward)
}

void FantasyBitAward::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&proj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&proj_)) + sizeof(award_));
}

FantasyBitAward::~FantasyBitAward() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitAward)
  SharedDtor();
}

void FantasyBitAward::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FantasyBitAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyBitAward::descriptor() {
  ::protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyBitAward& FantasyBitAward::default_instance() {
  ::protobuf_NameData_2eproto::InitDefaultsFantasyBitAward();
  return *internal_default_instance();
}

FantasyBitAward* FantasyBitAward::New(::google::protobuf::Arena* arena) const {
  FantasyBitAward* n = new FantasyBitAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyBitAward::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyBitAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&proj_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&award_) -
        reinterpret_cast<char*>(&proj_)) + sizeof(award_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyBitAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyBitAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyBitAward.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_proj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 award = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_award();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &award_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyBitAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyBitAward)
  return false;
#undef DO_
}

void FantasyBitAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyBitAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitAward.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional uint64 award = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->award(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyBitAward)
}

::google::protobuf::uint8* FantasyBitAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitAward.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional uint64 award = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->award(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitAward)
  return target;
}

size_t FantasyBitAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyBitAward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional uint64 award = 30;
    if (has_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->award());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyBitAward)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyBitAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyBitAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyBitAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyBitAward)
    MergeFrom(*source);
  }
}

void FantasyBitAward::MergeFrom(const FantasyBitAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyBitAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000004u) {
      award_ = from.award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyBitAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyBitAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitAward::CopyFrom(const FantasyBitAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyBitAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitAward::IsInitialized() const {
  return true;
}

void FantasyBitAward::Swap(FantasyBitAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyBitAward::InternalSwap(FantasyBitAward* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(proj_, other->proj_);
  swap(award_, other->award_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyBitAward::GetMetadata() const {
  protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FantasyBitPnl::InitAsDefaultInstance() {
  ::fantasybit::_FantasyBitPnl_default_instance_._instance.get_mutable()->spos_ = const_cast< ::fantasybit::SettlePos*>(
      ::fantasybit::SettlePos::internal_default_instance());
}
void FantasyBitPnl::clear_spos() {
  if (spos_ != NULL) spos_->Clear();
  clear_has_spos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyBitPnl::kNameFieldNumber;
const int FantasyBitPnl::kSposFieldNumber;
const int FantasyBitPnl::kPnlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyBitPnl::FantasyBitPnl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NameData_2eproto::InitDefaultsFantasyBitPnl();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyBitPnl)
}
FantasyBitPnl::FantasyBitPnl(const FantasyBitPnl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_spos()) {
    spos_ = new ::fantasybit::SettlePos(*from.spos_);
  } else {
    spos_ = NULL;
  }
  pnl_ = from.pnl_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitPnl)
}

void FantasyBitPnl::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&spos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pnl_) -
      reinterpret_cast<char*>(&spos_)) + sizeof(pnl_));
}

FantasyBitPnl::~FantasyBitPnl() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitPnl)
  SharedDtor();
}

void FantasyBitPnl::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spos_;
}

void FantasyBitPnl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyBitPnl::descriptor() {
  ::protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyBitPnl& FantasyBitPnl::default_instance() {
  ::protobuf_NameData_2eproto::InitDefaultsFantasyBitPnl();
  return *internal_default_instance();
}

FantasyBitPnl* FantasyBitPnl::New(::google::protobuf::Arena* arena) const {
  FantasyBitPnl* n = new FantasyBitPnl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyBitPnl::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyBitPnl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spos_ != NULL);
      spos_->Clear();
    }
  }
  pnl_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyBitPnl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyBitPnl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyBitPnl.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.SettlePos spos = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 pnl = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_pnl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pnl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyBitPnl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyBitPnl)
  return false;
#undef DO_
}

void FantasyBitPnl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyBitPnl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitPnl.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional .fantasybit.SettlePos spos = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->spos_, output);
  }

  // optional int64 pnl = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->pnl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyBitPnl)
}

::google::protobuf::uint8* FantasyBitPnl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitPnl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitPnl.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional .fantasybit.SettlePos spos = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->spos_, deterministic, target);
  }

  // optional int64 pnl = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->pnl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitPnl)
  return target;
}

size_t FantasyBitPnl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyBitPnl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .fantasybit.SettlePos spos = 20;
    if (has_spos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->spos_);
    }

    // optional int64 pnl = 30;
    if (has_pnl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pnl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitPnl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyBitPnl)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyBitPnl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyBitPnl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyBitPnl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyBitPnl)
    MergeFrom(*source);
  }
}

void FantasyBitPnl::MergeFrom(const FantasyBitPnl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyBitPnl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_spos()->::fantasybit::SettlePos::MergeFrom(from.spos());
    }
    if (cached_has_bits & 0x00000004u) {
      pnl_ = from.pnl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyBitPnl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyBitPnl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitPnl::CopyFrom(const FantasyBitPnl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyBitPnl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitPnl::IsInitialized() const {
  return true;
}

void FantasyBitPnl::Swap(FantasyBitPnl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyBitPnl::InternalSwap(FantasyBitPnl* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(spos_, other->spos_);
  swap(pnl_, other->pnl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyBitPnl::GetMetadata() const {
  protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FantasyBitProj::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FantasyBitProj::kNameFieldNumber;
const int FantasyBitProj::kProjFieldNumber;
const int FantasyBitProj::kPlayeridFieldNumber;
const int FantasyBitProj::kCountFieldNumber;
const int FantasyBitProj::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FantasyBitProj::FantasyBitProj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NameData_2eproto::InitDefaultsFantasyBitProj();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyBitProj)
}
FantasyBitProj::FantasyBitProj(const FantasyBitProj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_playerid()) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  ::memcpy(&block_, &from.block_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&block_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitProj)
}

void FantasyBitProj::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&block_)) + sizeof(count_));
}

FantasyBitProj::~FantasyBitProj() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitProj)
  SharedDtor();
}

void FantasyBitProj::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FantasyBitProj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyBitProj::descriptor() {
  ::protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FantasyBitProj& FantasyBitProj::default_instance() {
  ::protobuf_NameData_2eproto::InitDefaultsFantasyBitProj();
  return *internal_default_instance();
}

FantasyBitProj* FantasyBitProj::New(::google::protobuf::Arena* arena) const {
  FantasyBitProj* n = new FantasyBitProj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyBitProj::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.FantasyBitProj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!playerid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*playerid_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&block_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&block_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FantasyBitProj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyBitProj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyBitProj.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_proj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), static_cast<int>(this->playerid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyBitProj.playerid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 block = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_block();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyBitProj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyBitProj)
  return false;
#undef DO_
}

void FantasyBitProj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyBitProj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitProj.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitProj.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  // optional int32 count = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->count(), output);
  }

  // optional int32 block = 50;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyBitProj)
}

::google::protobuf::uint8* FantasyBitProj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitProj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitProj.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional string playerid = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), static_cast<int>(this->playerid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyBitProj.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 count = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->count(), target);
  }

  // optional int32 block = 50;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->block(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitProj)
  return target;
}

size_t FantasyBitProj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.FantasyBitProj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 block = 50;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional int32 count = 40;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitProj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.FantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  const FantasyBitProj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyBitProj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.FantasyBitProj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.FantasyBitProj)
    MergeFrom(*source);
  }
}

void FantasyBitProj::MergeFrom(const FantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.FantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (cached_has_bits & 0x00000004u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00000008u) {
      proj_ = from.proj_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FantasyBitProj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.FantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitProj::CopyFrom(const FantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.FantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitProj::IsInitialized() const {
  return true;
}

void FantasyBitProj::Swap(FantasyBitProj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyBitProj::InternalSwap(FantasyBitProj* other) {
  using std::swap;
  name_.Swap(&other->name_);
  playerid_.Swap(&other->playerid_);
  swap(block_, other->block_);
  swap(proj_, other->proj_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyBitProj::GetMetadata() const {
  protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameFantasyBitProj::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameFantasyBitProj::kGameidFieldNumber;
const int GameFantasyBitProj::kHomeFieldNumber;
const int GameFantasyBitProj::kAwayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameFantasyBitProj::GameFantasyBitProj()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_NameData_2eproto::InitDefaultsGameFantasyBitProj();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameFantasyBitProj)
}
GameFantasyBitProj::GameFantasyBitProj(const GameFantasyBitProj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      home_(from.home_),
      away_(from.away_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gameid()) {
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameFantasyBitProj)
}

void GameFantasyBitProj::SharedCtor() {
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameFantasyBitProj::~GameFantasyBitProj() {
  // @@protoc_insertion_point(destructor:fantasybit.GameFantasyBitProj)
  SharedDtor();
}

void GameFantasyBitProj::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameFantasyBitProj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameFantasyBitProj::descriptor() {
  ::protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameFantasyBitProj& GameFantasyBitProj::default_instance() {
  ::protobuf_NameData_2eproto::InitDefaultsGameFantasyBitProj();
  return *internal_default_instance();
}

GameFantasyBitProj* GameFantasyBitProj::New(::google::protobuf::Arena* arena) const {
  GameFantasyBitProj* n = new GameFantasyBitProj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameFantasyBitProj::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.GameFantasyBitProj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_.Clear();
  away_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!gameid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*gameid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameFantasyBitProj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameFantasyBitProj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), static_cast<int>(this->gameid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameFantasyBitProj.gameid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.FantasyBitProj home = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_home()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.FantasyBitProj away = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_away()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameFantasyBitProj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameFantasyBitProj)
  return false;
#undef DO_
}

void GameFantasyBitProj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameFantasyBitProj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameFantasyBitProj.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gameid(), output);
  }

  // repeated .fantasybit.FantasyBitProj home = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->home_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->home(static_cast<int>(i)), output);
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->away_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->away(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameFantasyBitProj)
}

::google::protobuf::uint8* GameFantasyBitProj::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameFantasyBitProj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string gameid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), static_cast<int>(this->gameid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameFantasyBitProj.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // repeated .fantasybit.FantasyBitProj home = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->home_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->home(static_cast<int>(i)), deterministic, target);
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->away_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->away(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameFantasyBitProj)
  return target;
}

size_t GameFantasyBitProj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.GameFantasyBitProj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.FantasyBitProj home = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->home_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->home(static_cast<int>(i)));
    }
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->away_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->away(static_cast<int>(i)));
    }
  }

  // optional string gameid = 10;
  if (has_gameid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameFantasyBitProj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.GameFantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFantasyBitProj* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameFantasyBitProj>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.GameFantasyBitProj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.GameFantasyBitProj)
    MergeFrom(*source);
  }
}

void GameFantasyBitProj::MergeFrom(const GameFantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.GameFantasyBitProj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
  if (from.has_gameid()) {
    set_has_gameid();
    gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
  }
}

void GameFantasyBitProj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.GameFantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFantasyBitProj::CopyFrom(const GameFantasyBitProj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.GameFantasyBitProj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFantasyBitProj::IsInitialized() const {
  return true;
}

void GameFantasyBitProj::Swap(GameFantasyBitProj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameFantasyBitProj::InternalSwap(GameFantasyBitProj* other) {
  using std::swap;
  home_.InternalSwap(&other->home_);
  away_.InternalSwap(&other->away_);
  gameid_.Swap(&other->gameid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameFantasyBitProj::GetMetadata() const {
  protobuf_NameData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NameData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
