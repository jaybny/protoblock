// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: P2PData.proto

#include "P2PData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fantasybit {
class PeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Peer>
      _instance;
} _Peer_default_instance_;
class SessionIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SessionId>
      _instance;
} _SessionId_default_instance_;
class WirePeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WirePeer>
      _instance;
} _WirePeer_default_instance_;
class MsgIntroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgIntro>
      _instance;
} _MsgIntro_default_instance_;
class ChainHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChainHead>
      _instance;
} _ChainHead_default_instance_;
class PeerChainStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerChainStatus>
      _instance;
} _PeerChainStatus_default_instance_;
class MsgAliveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgAlive>
      _instance;
} _MsgAlive_default_instance_;
class MsgHelloDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgHello>
      _instance;
} _MsgHello_default_instance_;
class WireMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WireMsg>
      _instance;
} _WireMsg_default_instance_;
}  // namespace fantasybit
namespace protobuf_P2PData_2eproto {
void InitDefaultsPeerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_Peer_default_instance_;
    new (ptr) ::fantasybit::Peer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::Peer::InitAsDefaultInstance();
}

void InitDefaultsPeer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerImpl);
}

void InitDefaultsSessionIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_SessionId_default_instance_;
    new (ptr) ::fantasybit::SessionId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::SessionId::InitAsDefaultInstance();
}

void InitDefaultsSessionId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionIdImpl);
}

void InitDefaultsWirePeerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_P2PData_2eproto::InitDefaultsSessionId();
  protobuf_P2PData_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::fantasybit::_WirePeer_default_instance_;
    new (ptr) ::fantasybit::WirePeer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WirePeer::InitAsDefaultInstance();
}

void InitDefaultsWirePeer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWirePeerImpl);
}

void InitDefaultsMsgIntroImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_P2PData_2eproto::InitDefaultsWirePeer();
  protobuf_P2PData_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::fantasybit::_MsgIntro_default_instance_;
    new (ptr) ::fantasybit::MsgIntro();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MsgIntro::InitAsDefaultInstance();
}

void InitDefaultsMsgIntro() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgIntroImpl);
}

void InitDefaultsChainHeadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fantasybit::_ChainHead_default_instance_;
    new (ptr) ::fantasybit::ChainHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::ChainHead::InitAsDefaultInstance();
}

void InitDefaultsChainHead() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChainHeadImpl);
}

void InitDefaultsPeerChainStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_P2PData_2eproto::InitDefaultsChainHead();
  {
    void* ptr = &::fantasybit::_PeerChainStatus_default_instance_;
    new (ptr) ::fantasybit::PeerChainStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::PeerChainStatus::InitAsDefaultInstance();
}

void InitDefaultsPeerChainStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerChainStatusImpl);
}

void InitDefaultsMsgAliveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_P2PData_2eproto::InitDefaultsPeerChainStatus();
  {
    void* ptr = &::fantasybit::_MsgAlive_default_instance_;
    new (ptr) ::fantasybit::MsgAlive();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MsgAlive::InitAsDefaultInstance();
}

void InitDefaultsMsgAlive() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgAliveImpl);
}

void InitDefaultsMsgHelloImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_P2PData_2eproto::InitDefaultsMsgIntro();
  protobuf_P2PData_2eproto::InitDefaultsWirePeer();
  {
    void* ptr = &::fantasybit::_MsgHello_default_instance_;
    new (ptr) ::fantasybit::MsgHello();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::MsgHello::InitAsDefaultInstance();
}

void InitDefaultsMsgHello() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgHelloImpl);
}

void InitDefaultsWireMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_P2PData_2eproto::InitDefaultsMsgIntro();
  protobuf_P2PData_2eproto::InitDefaultsMsgHello();
  protobuf_P2PData_2eproto::InitDefaultsMsgAlive();
  {
    void* ptr = &::fantasybit::_WireMsg_default_instance_;
    new (ptr) ::fantasybit::WireMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fantasybit::WireMsg::InitAsDefaultInstance();
}

void InitDefaultsWireMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWireMsgImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Peer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Peer, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Peer, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::Peer, is_listening_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SessionId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SessionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SessionId, network_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SessionId, wire_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SessionId, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::SessionId, uuid_),
  2,
  3,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WirePeer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WirePeer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WirePeer, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WirePeer, peer_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgIntro, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgIntro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgIntro, iam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgIntro, youare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgIntro, everyone_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ChainHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ChainHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ChainHead, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ChainHead, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::ChainHead, id_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, chain_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, last_dea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, last_irreversible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, mempool_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, mempool_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, last_block_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::PeerChainStatus, last_tx_timestamp_),
  3,
  0,
  1,
  4,
  2,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgAlive, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgAlive, peer_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgAlive, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgHello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgHello, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::MsgHello, connections_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WireMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WireMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WireMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WireMsg, intro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WireMsg, hello_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fantasybit::WireMsg, alive_),
  3,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::fantasybit::Peer)},
  { 11, 20, sizeof(::fantasybit::SessionId)},
  { 24, 31, sizeof(::fantasybit::WirePeer)},
  { 33, 41, sizeof(::fantasybit::MsgIntro)},
  { 44, 52, sizeof(::fantasybit::ChainHead)},
  { 55, 67, sizeof(::fantasybit::PeerChainStatus)},
  { 74, 81, sizeof(::fantasybit::MsgAlive)},
  { 83, 90, sizeof(::fantasybit::MsgHello)},
  { 92, 101, sizeof(::fantasybit::WireMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_SessionId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_WirePeer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_MsgIntro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_ChainHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_PeerChainStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_MsgAlive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_MsgHello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fantasybit::_WireMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "P2PData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rP2PData.proto\022\nfantasybit\"\243\001\n\004Peer\022\017\n\007"
      "address\030\n \001(\t\022\014\n\004port\030\036 \001(\r\0222\n\014is_listen"
      "ing\030( \001(\0162\034.fantasybit.Peer.IsListening\""
      "H\n\013IsListening\022\r\n\t_dontuse_\020\000\022\013\n\007NOTSURE"
      "\020\001\022\014\n\010ITHINKSO\020\002\022\007\n\003YES\020\003\022\006\n\002NO\020\004\"\250\001\n\tSe"
      "ssionId\0223\n\nnetwork_id\030\001 \001(\0162\037.fantasybit"
      ".SessionId.NetworkID\022\024\n\014wire_version\030\n \001"
      "(\r\022\022\n\nstart_time\030\024 \001(\r\022\014\n\004uuid\030\036 \001(\014\".\n\t"
      "NetworkID\022\r\n\t_dontuse_\020\000\022\010\n\004TEST\020\001\022\010\n\004PR"
      "OD\020\002\"U\n\010WirePeer\022)\n\nsession_id\030\n \001(\0132\025.f"
      "antasybit.SessionId\022\036\n\004peer\030\024 \001(\0132\020.fant"
      "asybit.Peer\"w\n\010MsgIntro\022!\n\003iam\030\n \001(\0132\024.f"
      "antasybit.WirePeer\022$\n\006youare\030\024 \001(\0132\024.fan"
      "tasybit.WirePeer\022\"\n\010everyone\030\036 \003(\0132\020.fan"
      "tasybit.Peer\"7\n\tChainHead\022\016\n\006height\030\n \001("
      "\005\022\016\n\006weight\030\024 \001(\005\022\n\n\002id\030\036 \001(\014\"\230\003\n\017PeerCh"
      "ainStatus\022;\n\013chain_state\030\001 \001(\0162&.fantasy"
      "bit.PeerChainStatus.ChainState\022\'\n\010last_d"
      "ea\030\n \001(\0132\025.fantasybit.ChainHead\0220\n\021last_"
      "irreversible\030\024 \001(\0132\025.fantasybit.ChainHea"
      "d\022\025\n\rmempool_count\030\036 \001(\r\022\024\n\014mempool_size"
      "\030( \001(\r\022\034\n\024last_block_timestamp\0302 \001(\004\022\031\n\021"
      "last_tx_timestamp\030< \001(\004\"\206\001\n\nChainState\022\r"
      "\n\t_dontuse_\020\000\022\014\n\010STARTING\020\002\022\r\n\tSEARCHING"
      "\020\004\022\t\n\005REORG\020\006\022\014\n\010STOPPING\020\010\022\014\n\010ABORTING\020"
      "\n\022\016\n\nCONNECTING\020(\022\013\n\007SYNCING\0202\022\010\n\004LIVE\020<"
      "\"O\n\010MsgAlive\0220\n\013peer_status\030\036 \001(\0132\033.fant"
      "asybit.PeerChainStatus\022\021\n\ttimestamp\030( \001("
      "\004\"[\n\010MsgHello\022$\n\006update\030\n \001(\0132\024.fantasyb"
      "it.MsgIntro\022)\n\013connections\030\024 \003(\0132\024.fanta"
      "sybit.WirePeer\"\233\001\n\007WireMsg\022!\n\004type\030\n \001(\016"
      "2\023.fantasybit.MsgType\022#\n\005intro\030\024 \001(\0132\024.f"
      "antasybit.MsgIntro\022#\n\005hello\030\036 \001(\0132\024.fant"
      "asybit.MsgHello\022#\n\005alive\030( \001(\0132\024.fantasy"
      "bit.MsgAlive*9\n\007MsgType\022\r\n\t_dontuse_\020\000\022\t"
      "\n\005INTRO\020\001\022\t\n\005HELLO\020\002\022\t\n\005ALIVE\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "P2PData.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_P2PData_2eproto
namespace fantasybit {
const ::google::protobuf::EnumDescriptor* Peer_IsListening_descriptor() {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_P2PData_2eproto::file_level_enum_descriptors[0];
}
bool Peer_IsListening_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Peer_IsListening Peer::_dontuse_;
const Peer_IsListening Peer::NOTSURE;
const Peer_IsListening Peer::ITHINKSO;
const Peer_IsListening Peer::YES;
const Peer_IsListening Peer::NO;
const Peer_IsListening Peer::IsListening_MIN;
const Peer_IsListening Peer::IsListening_MAX;
const int Peer::IsListening_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SessionId_NetworkID_descriptor() {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_P2PData_2eproto::file_level_enum_descriptors[1];
}
bool SessionId_NetworkID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionId_NetworkID SessionId::_dontuse_;
const SessionId_NetworkID SessionId::TEST;
const SessionId_NetworkID SessionId::PROD;
const SessionId_NetworkID SessionId::NetworkID_MIN;
const SessionId_NetworkID SessionId::NetworkID_MAX;
const int SessionId::NetworkID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PeerChainStatus_ChainState_descriptor() {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_P2PData_2eproto::file_level_enum_descriptors[2];
}
bool PeerChainStatus_ChainState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 6:
    case 8:
    case 10:
    case 40:
    case 50:
    case 60:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PeerChainStatus_ChainState PeerChainStatus::_dontuse_;
const PeerChainStatus_ChainState PeerChainStatus::STARTING;
const PeerChainStatus_ChainState PeerChainStatus::SEARCHING;
const PeerChainStatus_ChainState PeerChainStatus::REORG;
const PeerChainStatus_ChainState PeerChainStatus::STOPPING;
const PeerChainStatus_ChainState PeerChainStatus::ABORTING;
const PeerChainStatus_ChainState PeerChainStatus::CONNECTING;
const PeerChainStatus_ChainState PeerChainStatus::SYNCING;
const PeerChainStatus_ChainState PeerChainStatus::LIVE;
const PeerChainStatus_ChainState PeerChainStatus::ChainState_MIN;
const PeerChainStatus_ChainState PeerChainStatus::ChainState_MAX;
const int PeerChainStatus::ChainState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_P2PData_2eproto::file_level_enum_descriptors[3];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kAddressFieldNumber;
const int Peer::kPortFieldNumber;
const int Peer::kIsListeningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsPeer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_listening_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_listening_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.Peer)
}

void Peer::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_listening_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_listening_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:fantasybit.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsPeer();
  return *internal_default_instance();
}

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_listening_) -
        reinterpret_cast<char*>(&port_)) + sizeof(is_listening_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Peer.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.Peer.IsListening is_listening = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::Peer_IsListening_IsValid(value)) {
            set_is_listening(static_cast< ::fantasybit::Peer_IsListening >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                40, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Peer.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->address(), output);
  }

  // optional uint32 port = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->port(), output);
  }

  // optional .fantasybit.Peer.IsListening is_listening = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->is_listening(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Peer.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->address(), target);
  }

  // optional uint32 port = 30;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->port(), target);
  }

  // optional .fantasybit.Peer.IsListening is_listening = 40;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->is_listening(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.Peer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string address = 10;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 port = 30;
    if (has_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .fantasybit.Peer.IsListening is_listening = 40;
    if (has_is_listening()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->is_listening());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_listening_ = from.is_listening_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(port_, other->port_);
  swap(is_listening_, other->is_listening_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SessionId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionId::kNetworkIdFieldNumber;
const int SessionId::kWireVersionFieldNumber;
const int SessionId::kStartTimeFieldNumber;
const int SessionId::kUuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionId::SessionId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsSessionId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.SessionId)
}
SessionId::SessionId(const SessionId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&wire_version_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(wire_version_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.SessionId)
}

void SessionId::SharedCtor() {
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wire_version_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(wire_version_));
}

SessionId::~SessionId() {
  // @@protoc_insertion_point(destructor:fantasybit.SessionId)
  SharedDtor();
}

void SessionId::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SessionId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionId::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SessionId& SessionId::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsSessionId();
  return *internal_default_instance();
}

SessionId* SessionId::New(::google::protobuf::Arena* arena) const {
  SessionId* n = new SessionId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionId::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.SessionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!uuid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*uuid_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wire_version_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(wire_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SessionId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.SessionId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SessionId.NetworkID network_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::SessionId_NetworkID_IsValid(value)) {
            set_network_id(static_cast< ::fantasybit::SessionId_NetworkID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wire_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_wire_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wire_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes uuid = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.SessionId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.SessionId)
  return false;
#undef DO_
}

void SessionId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.SessionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SessionId.NetworkID network_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->network_id(), output);
  }

  // optional uint32 wire_version = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wire_version(), output);
  }

  // optional uint32 start_time = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->start_time(), output);
  }

  // optional bytes uuid = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.SessionId)
}

::google::protobuf::uint8* SessionId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SessionId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SessionId.NetworkID network_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->network_id(), target);
  }

  // optional uint32 wire_version = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wire_version(), target);
  }

  // optional uint32 start_time = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->start_time(), target);
  }

  // optional bytes uuid = 30;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SessionId)
  return target;
}

size_t SessionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.SessionId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes uuid = 30;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional uint32 start_time = 20;
    if (has_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional .fantasybit.SessionId.NetworkID network_id = 1;
    if (has_network_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_id());
    }

    // optional uint32 wire_version = 10;
    if (has_wire_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wire_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.SessionId)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.SessionId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.SessionId)
    MergeFrom(*source);
  }
}

void SessionId::MergeFrom(const SessionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.SessionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_id_ = from.network_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      wire_version_ = from.wire_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.SessionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionId::CopyFrom(const SessionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.SessionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionId::IsInitialized() const {
  return true;
}

void SessionId::Swap(SessionId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionId::InternalSwap(SessionId* other) {
  using std::swap;
  uuid_.Swap(&other->uuid_);
  swap(start_time_, other->start_time_);
  swap(network_id_, other->network_id_);
  swap(wire_version_, other->wire_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionId::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WirePeer::InitAsDefaultInstance() {
  ::fantasybit::_WirePeer_default_instance_._instance.get_mutable()->session_id_ = const_cast< ::fantasybit::SessionId*>(
      ::fantasybit::SessionId::internal_default_instance());
  ::fantasybit::_WirePeer_default_instance_._instance.get_mutable()->peer_ = const_cast< ::fantasybit::Peer*>(
      ::fantasybit::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WirePeer::kSessionIdFieldNumber;
const int WirePeer::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WirePeer::WirePeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsWirePeer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.WirePeer)
}
WirePeer::WirePeer(const WirePeer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_id()) {
    session_id_ = new ::fantasybit::SessionId(*from.session_id_);
  } else {
    session_id_ = NULL;
  }
  if (from.has_peer()) {
    peer_ = new ::fantasybit::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.WirePeer)
}

void WirePeer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(peer_));
}

WirePeer::~WirePeer() {
  // @@protoc_insertion_point(destructor:fantasybit.WirePeer)
  SharedDtor();
}

void WirePeer::SharedDtor() {
  if (this != internal_default_instance()) delete session_id_;
  if (this != internal_default_instance()) delete peer_;
}

void WirePeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WirePeer::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WirePeer& WirePeer::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsWirePeer();
  return *internal_default_instance();
}

WirePeer* WirePeer::New(::google::protobuf::Arena* arena) const {
  WirePeer* n = new WirePeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WirePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WirePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(session_id_ != NULL);
      session_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(peer_ != NULL);
      peer_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WirePeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.WirePeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SessionId session_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.Peer peer = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.WirePeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.WirePeer)
  return false;
#undef DO_
}

void WirePeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.WirePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SessionId session_id = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->session_id_, output);
  }

  // optional .fantasybit.Peer peer = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->peer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.WirePeer)
}

::google::protobuf::uint8* WirePeer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WirePeer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.SessionId session_id = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->session_id_, deterministic, target);
  }

  // optional .fantasybit.Peer peer = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->peer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WirePeer)
  return target;
}

size_t WirePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WirePeer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.SessionId session_id = 10;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->session_id_);
    }

    // optional .fantasybit.Peer peer = 20;
    if (has_peer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->peer_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WirePeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WirePeer)
  GOOGLE_DCHECK_NE(&from, this);
  const WirePeer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WirePeer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WirePeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WirePeer)
    MergeFrom(*source);
  }
}

void WirePeer::MergeFrom(const WirePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WirePeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_session_id()->::fantasybit::SessionId::MergeFrom(from.session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_peer()->::fantasybit::Peer::MergeFrom(from.peer());
    }
  }
}

void WirePeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WirePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WirePeer::CopyFrom(const WirePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WirePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WirePeer::IsInitialized() const {
  return true;
}

void WirePeer::Swap(WirePeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WirePeer::InternalSwap(WirePeer* other) {
  using std::swap;
  swap(session_id_, other->session_id_);
  swap(peer_, other->peer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WirePeer::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgIntro::InitAsDefaultInstance() {
  ::fantasybit::_MsgIntro_default_instance_._instance.get_mutable()->iam_ = const_cast< ::fantasybit::WirePeer*>(
      ::fantasybit::WirePeer::internal_default_instance());
  ::fantasybit::_MsgIntro_default_instance_._instance.get_mutable()->youare_ = const_cast< ::fantasybit::WirePeer*>(
      ::fantasybit::WirePeer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgIntro::kIamFieldNumber;
const int MsgIntro::kYouareFieldNumber;
const int MsgIntro::kEveryoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgIntro::MsgIntro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsMsgIntro();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MsgIntro)
}
MsgIntro::MsgIntro(const MsgIntro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      everyone_(from.everyone_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_iam()) {
    iam_ = new ::fantasybit::WirePeer(*from.iam_);
  } else {
    iam_ = NULL;
  }
  if (from.has_youare()) {
    youare_ = new ::fantasybit::WirePeer(*from.youare_);
  } else {
    youare_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.MsgIntro)
}

void MsgIntro::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&iam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&youare_) -
      reinterpret_cast<char*>(&iam_)) + sizeof(youare_));
}

MsgIntro::~MsgIntro() {
  // @@protoc_insertion_point(destructor:fantasybit.MsgIntro)
  SharedDtor();
}

void MsgIntro::SharedDtor() {
  if (this != internal_default_instance()) delete iam_;
  if (this != internal_default_instance()) delete youare_;
}

void MsgIntro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgIntro::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgIntro& MsgIntro::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsMsgIntro();
  return *internal_default_instance();
}

MsgIntro* MsgIntro::New(::google::protobuf::Arena* arena) const {
  MsgIntro* n = new MsgIntro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgIntro::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MsgIntro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  everyone_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(iam_ != NULL);
      iam_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(youare_ != NULL);
      youare_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgIntro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MsgIntro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.WirePeer iam = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_iam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.WirePeer youare = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_youare()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.Peer everyone = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_everyone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MsgIntro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MsgIntro)
  return false;
#undef DO_
}

void MsgIntro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MsgIntro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.WirePeer iam = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->iam_, output);
  }

  // optional .fantasybit.WirePeer youare = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->youare_, output);
  }

  // repeated .fantasybit.Peer everyone = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->everyone_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->everyone(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MsgIntro)
}

::google::protobuf::uint8* MsgIntro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MsgIntro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.WirePeer iam = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->iam_, deterministic, target);
  }

  // optional .fantasybit.WirePeer youare = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->youare_, deterministic, target);
  }

  // repeated .fantasybit.Peer everyone = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->everyone_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->everyone(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MsgIntro)
  return target;
}

size_t MsgIntro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MsgIntro)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.Peer everyone = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->everyone_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->everyone(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.WirePeer iam = 10;
    if (has_iam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->iam_);
    }

    // optional .fantasybit.WirePeer youare = 20;
    if (has_youare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->youare_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgIntro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MsgIntro)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgIntro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgIntro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MsgIntro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MsgIntro)
    MergeFrom(*source);
  }
}

void MsgIntro::MergeFrom(const MsgIntro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MsgIntro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  everyone_.MergeFrom(from.everyone_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_iam()->::fantasybit::WirePeer::MergeFrom(from.iam());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_youare()->::fantasybit::WirePeer::MergeFrom(from.youare());
    }
  }
}

void MsgIntro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MsgIntro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgIntro::CopyFrom(const MsgIntro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MsgIntro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIntro::IsInitialized() const {
  return true;
}

void MsgIntro::Swap(MsgIntro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgIntro::InternalSwap(MsgIntro* other) {
  using std::swap;
  everyone_.InternalSwap(&other->everyone_);
  swap(iam_, other->iam_);
  swap(youare_, other->youare_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgIntro::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChainHead::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainHead::kHeightFieldNumber;
const int ChainHead::kWeightFieldNumber;
const int ChainHead::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainHead::ChainHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsChainHead();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ChainHead)
}
ChainHead::ChainHead(const ChainHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&height_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.ChainHead)
}

void ChainHead::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&height_)) + sizeof(weight_));
}

ChainHead::~ChainHead() {
  // @@protoc_insertion_point(destructor:fantasybit.ChainHead)
  SharedDtor();
}

void ChainHead::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChainHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainHead::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChainHead& ChainHead::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsChainHead();
  return *internal_default_instance();
}

ChainHead* ChainHead::New(::google::protobuf::Arena* arena) const {
  ChainHead* n = new ChainHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainHead::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.ChainHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&height_)) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChainHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ChainHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 weight = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ChainHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ChainHead)
  return false;
#undef DO_
}

void ChainHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ChainHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // optional int32 weight = 20;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->weight(), output);
  }

  // optional bytes id = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ChainHead)
}

::google::protobuf::uint8* ChainHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ChainHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->height(), target);
  }

  // optional int32 weight = 20;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->weight(), target);
  }

  // optional bytes id = 30;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ChainHead)
  return target;
}

size_t ChainHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.ChainHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes id = 30;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional int32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 weight = 20;
    if (has_weight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.ChainHead)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.ChainHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.ChainHead)
    MergeFrom(*source);
  }
}

void ChainHead::MergeFrom(const ChainHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.ChainHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChainHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.ChainHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainHead::CopyFrom(const ChainHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.ChainHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainHead::IsInitialized() const {
  return true;
}

void ChainHead::Swap(ChainHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainHead::InternalSwap(ChainHead* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(height_, other->height_);
  swap(weight_, other->weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainHead::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PeerChainStatus::InitAsDefaultInstance() {
  ::fantasybit::_PeerChainStatus_default_instance_._instance.get_mutable()->last_dea_ = const_cast< ::fantasybit::ChainHead*>(
      ::fantasybit::ChainHead::internal_default_instance());
  ::fantasybit::_PeerChainStatus_default_instance_._instance.get_mutable()->last_irreversible_ = const_cast< ::fantasybit::ChainHead*>(
      ::fantasybit::ChainHead::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerChainStatus::kChainStateFieldNumber;
const int PeerChainStatus::kLastDeaFieldNumber;
const int PeerChainStatus::kLastIrreversibleFieldNumber;
const int PeerChainStatus::kMempoolCountFieldNumber;
const int PeerChainStatus::kMempoolSizeFieldNumber;
const int PeerChainStatus::kLastBlockTimestampFieldNumber;
const int PeerChainStatus::kLastTxTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerChainStatus::PeerChainStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsPeerChainStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PeerChainStatus)
}
PeerChainStatus::PeerChainStatus(const PeerChainStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_dea()) {
    last_dea_ = new ::fantasybit::ChainHead(*from.last_dea_);
  } else {
    last_dea_ = NULL;
  }
  if (from.has_last_irreversible()) {
    last_irreversible_ = new ::fantasybit::ChainHead(*from.last_irreversible_);
  } else {
    last_irreversible_ = NULL;
  }
  ::memcpy(&mempool_size_, &from.mempool_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_tx_timestamp_) -
    reinterpret_cast<char*>(&mempool_size_)) + sizeof(last_tx_timestamp_));
  // @@protoc_insertion_point(copy_constructor:fantasybit.PeerChainStatus)
}

void PeerChainStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_dea_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_tx_timestamp_) -
      reinterpret_cast<char*>(&last_dea_)) + sizeof(last_tx_timestamp_));
}

PeerChainStatus::~PeerChainStatus() {
  // @@protoc_insertion_point(destructor:fantasybit.PeerChainStatus)
  SharedDtor();
}

void PeerChainStatus::SharedDtor() {
  if (this != internal_default_instance()) delete last_dea_;
  if (this != internal_default_instance()) delete last_irreversible_;
}

void PeerChainStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerChainStatus::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerChainStatus& PeerChainStatus::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsPeerChainStatus();
  return *internal_default_instance();
}

PeerChainStatus* PeerChainStatus::New(::google::protobuf::Arena* arena) const {
  PeerChainStatus* n = new PeerChainStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerChainStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.PeerChainStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(last_dea_ != NULL);
      last_dea_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_irreversible_ != NULL);
      last_irreversible_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&mempool_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_tx_timestamp_) -
        reinterpret_cast<char*>(&mempool_size_)) + sizeof(last_tx_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PeerChainStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PeerChainStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::PeerChainStatus_ChainState_IsValid(value)) {
            set_chain_state(static_cast< ::fantasybit::PeerChainStatus_ChainState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.ChainHead last_dea = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_dea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.ChainHead last_irreversible = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_irreversible()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mempool_count = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_mempool_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mempool_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mempool_size = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_mempool_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mempool_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_block_timestamp = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_last_block_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_block_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_tx_timestamp = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_last_tx_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_tx_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PeerChainStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PeerChainStatus)
  return false;
#undef DO_
}

void PeerChainStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PeerChainStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chain_state(), output);
  }

  // optional .fantasybit.ChainHead last_dea = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->last_dea_, output);
  }

  // optional .fantasybit.ChainHead last_irreversible = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->last_irreversible_, output);
  }

  // optional uint32 mempool_count = 30;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->mempool_count(), output);
  }

  // optional uint32 mempool_size = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->mempool_size(), output);
  }

  // optional uint64 last_block_timestamp = 50;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->last_block_timestamp(), output);
  }

  // optional uint64 last_tx_timestamp = 60;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->last_tx_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PeerChainStatus)
}

::google::protobuf::uint8* PeerChainStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PeerChainStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chain_state(), target);
  }

  // optional .fantasybit.ChainHead last_dea = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->last_dea_, deterministic, target);
  }

  // optional .fantasybit.ChainHead last_irreversible = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->last_irreversible_, deterministic, target);
  }

  // optional uint32 mempool_count = 30;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->mempool_count(), target);
  }

  // optional uint32 mempool_size = 40;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->mempool_size(), target);
  }

  // optional uint64 last_block_timestamp = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->last_block_timestamp(), target);
  }

  // optional uint64 last_tx_timestamp = 60;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->last_tx_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PeerChainStatus)
  return target;
}

size_t PeerChainStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.PeerChainStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .fantasybit.ChainHead last_dea = 10;
    if (has_last_dea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->last_dea_);
    }

    // optional .fantasybit.ChainHead last_irreversible = 20;
    if (has_last_irreversible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->last_irreversible_);
    }

    // optional uint32 mempool_size = 40;
    if (has_mempool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mempool_size());
    }

    // optional .fantasybit.PeerChainStatus.ChainState chain_state = 1;
    if (has_chain_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chain_state());
    }

    // optional uint32 mempool_count = 30;
    if (has_mempool_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mempool_count());
    }

    // optional uint64 last_block_timestamp = 50;
    if (has_last_block_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_block_timestamp());
    }

    // optional uint64 last_tx_timestamp = 60;
    if (has_last_tx_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_tx_timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerChainStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.PeerChainStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerChainStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerChainStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.PeerChainStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.PeerChainStatus)
    MergeFrom(*source);
  }
}

void PeerChainStatus::MergeFrom(const PeerChainStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.PeerChainStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_last_dea()->::fantasybit::ChainHead::MergeFrom(from.last_dea());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_last_irreversible()->::fantasybit::ChainHead::MergeFrom(from.last_irreversible());
    }
    if (cached_has_bits & 0x00000004u) {
      mempool_size_ = from.mempool_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      chain_state_ = from.chain_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      mempool_count_ = from.mempool_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_block_timestamp_ = from.last_block_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_tx_timestamp_ = from.last_tx_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PeerChainStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.PeerChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerChainStatus::CopyFrom(const PeerChainStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.PeerChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerChainStatus::IsInitialized() const {
  return true;
}

void PeerChainStatus::Swap(PeerChainStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerChainStatus::InternalSwap(PeerChainStatus* other) {
  using std::swap;
  swap(last_dea_, other->last_dea_);
  swap(last_irreversible_, other->last_irreversible_);
  swap(mempool_size_, other->mempool_size_);
  swap(chain_state_, other->chain_state_);
  swap(mempool_count_, other->mempool_count_);
  swap(last_block_timestamp_, other->last_block_timestamp_);
  swap(last_tx_timestamp_, other->last_tx_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerChainStatus::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgAlive::InitAsDefaultInstance() {
  ::fantasybit::_MsgAlive_default_instance_._instance.get_mutable()->peer_status_ = const_cast< ::fantasybit::PeerChainStatus*>(
      ::fantasybit::PeerChainStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgAlive::kPeerStatusFieldNumber;
const int MsgAlive::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgAlive::MsgAlive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsMsgAlive();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MsgAlive)
}
MsgAlive::MsgAlive(const MsgAlive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer_status()) {
    peer_status_ = new ::fantasybit::PeerChainStatus(*from.peer_status_);
  } else {
    peer_status_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.MsgAlive)
}

void MsgAlive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&peer_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&peer_status_)) + sizeof(timestamp_));
}

MsgAlive::~MsgAlive() {
  // @@protoc_insertion_point(destructor:fantasybit.MsgAlive)
  SharedDtor();
}

void MsgAlive::SharedDtor() {
  if (this != internal_default_instance()) delete peer_status_;
}

void MsgAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAlive::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgAlive& MsgAlive::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsMsgAlive();
  return *internal_default_instance();
}

MsgAlive* MsgAlive::New(::google::protobuf::Arena* arena) const {
  MsgAlive* n = new MsgAlive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MsgAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(peer_status_ != NULL);
    peer_status_->Clear();
  }
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MsgAlive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.PeerChainStatus peer_status = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MsgAlive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MsgAlive)
  return false;
#undef DO_
}

void MsgAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MsgAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.PeerChainStatus peer_status = 30;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->peer_status_, output);
  }

  // optional uint64 timestamp = 40;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MsgAlive)
}

::google::protobuf::uint8* MsgAlive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MsgAlive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.PeerChainStatus peer_status = 30;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->peer_status_, deterministic, target);
  }

  // optional uint64 timestamp = 40;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MsgAlive)
  return target;
}

size_t MsgAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MsgAlive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.PeerChainStatus peer_status = 30;
    if (has_peer_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->peer_status_);
    }

    // optional uint64 timestamp = 40;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAlive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MsgAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgAlive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgAlive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MsgAlive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MsgAlive)
    MergeFrom(*source);
  }
}

void MsgAlive::MergeFrom(const MsgAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MsgAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_peer_status()->::fantasybit::PeerChainStatus::MergeFrom(from.peer_status());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgAlive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MsgAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAlive::CopyFrom(const MsgAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MsgAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAlive::IsInitialized() const {
  return true;
}

void MsgAlive::Swap(MsgAlive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgAlive::InternalSwap(MsgAlive* other) {
  using std::swap;
  swap(peer_status_, other->peer_status_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgAlive::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MsgHello::InitAsDefaultInstance() {
  ::fantasybit::_MsgHello_default_instance_._instance.get_mutable()->update_ = const_cast< ::fantasybit::MsgIntro*>(
      ::fantasybit::MsgIntro::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHello::kUpdateFieldNumber;
const int MsgHello::kConnectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHello::MsgHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsMsgHello();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MsgHello)
}
MsgHello::MsgHello(const MsgHello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update()) {
    update_ = new ::fantasybit::MsgIntro(*from.update_);
  } else {
    update_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fantasybit.MsgHello)
}

void MsgHello::SharedCtor() {
  _cached_size_ = 0;
  update_ = NULL;
}

MsgHello::~MsgHello() {
  // @@protoc_insertion_point(destructor:fantasybit.MsgHello)
  SharedDtor();
}

void MsgHello::SharedDtor() {
  if (this != internal_default_instance()) delete update_;
}

void MsgHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHello::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgHello& MsgHello::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsMsgHello();
  return *internal_default_instance();
}

MsgHello* MsgHello::New(::google::protobuf::Arena* arena) const {
  MsgHello* n = new MsgHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHello::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.MsgHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(update_ != NULL);
    update_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MsgHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.MsgIntro update = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fantasybit.WirePeer connections = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MsgHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MsgHello)
  return false;
#undef DO_
}

void MsgHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MsgHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.MsgIntro update = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->update_, output);
  }

  // repeated .fantasybit.WirePeer connections = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->connections(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MsgHello)
}

::google::protobuf::uint8* MsgHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MsgHello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.MsgIntro update = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->update_, deterministic, target);
  }

  // repeated .fantasybit.WirePeer connections = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->connections(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MsgHello)
  return target;
}

size_t MsgHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.MsgHello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fantasybit.WirePeer connections = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->connections_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connections(static_cast<int>(i)));
    }
  }

  // optional .fantasybit.MsgIntro update = 10;
  if (has_update()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.MsgHello)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.MsgHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.MsgHello)
    MergeFrom(*source);
  }
}

void MsgHello::MergeFrom(const MsgHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.MsgHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  if (from.has_update()) {
    mutable_update()->::fantasybit::MsgIntro::MergeFrom(from.update());
  }
}

void MsgHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.MsgHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHello::CopyFrom(const MsgHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.MsgHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHello::IsInitialized() const {
  return true;
}

void MsgHello::Swap(MsgHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHello::InternalSwap(MsgHello* other) {
  using std::swap;
  connections_.InternalSwap(&other->connections_);
  swap(update_, other->update_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHello::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WireMsg::InitAsDefaultInstance() {
  ::fantasybit::_WireMsg_default_instance_._instance.get_mutable()->intro_ = const_cast< ::fantasybit::MsgIntro*>(
      ::fantasybit::MsgIntro::internal_default_instance());
  ::fantasybit::_WireMsg_default_instance_._instance.get_mutable()->hello_ = const_cast< ::fantasybit::MsgHello*>(
      ::fantasybit::MsgHello::internal_default_instance());
  ::fantasybit::_WireMsg_default_instance_._instance.get_mutable()->alive_ = const_cast< ::fantasybit::MsgAlive*>(
      ::fantasybit::MsgAlive::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WireMsg::kTypeFieldNumber;
const int WireMsg::kIntroFieldNumber;
const int WireMsg::kHelloFieldNumber;
const int WireMsg::kAliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WireMsg::WireMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_P2PData_2eproto::InitDefaultsWireMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.WireMsg)
}
WireMsg::WireMsg(const WireMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intro()) {
    intro_ = new ::fantasybit::MsgIntro(*from.intro_);
  } else {
    intro_ = NULL;
  }
  if (from.has_hello()) {
    hello_ = new ::fantasybit::MsgHello(*from.hello_);
  } else {
    hello_ = NULL;
  }
  if (from.has_alive()) {
    alive_ = new ::fantasybit::MsgAlive(*from.alive_);
  } else {
    alive_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fantasybit.WireMsg)
}

void WireMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&intro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&intro_)) + sizeof(type_));
}

WireMsg::~WireMsg() {
  // @@protoc_insertion_point(destructor:fantasybit.WireMsg)
  SharedDtor();
}

void WireMsg::SharedDtor() {
  if (this != internal_default_instance()) delete intro_;
  if (this != internal_default_instance()) delete hello_;
  if (this != internal_default_instance()) delete alive_;
}

void WireMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WireMsg::descriptor() {
  ::protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WireMsg& WireMsg::default_instance() {
  ::protobuf_P2PData_2eproto::InitDefaultsWireMsg();
  return *internal_default_instance();
}

WireMsg* WireMsg::New(::google::protobuf::Arena* arena) const {
  WireMsg* n = new WireMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WireMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:fantasybit.WireMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(intro_ != NULL);
      intro_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hello_ != NULL);
      hello_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(alive_ != NULL);
      alive_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WireMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.WireMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.MsgType type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MsgType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.MsgIntro intro = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.MsgHello hello = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hello()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fantasybit.MsgAlive alive = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.WireMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.WireMsg)
  return false;
#undef DO_
}

void WireMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.WireMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.MsgType type = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional .fantasybit.MsgIntro intro = 20;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->intro_, output);
  }

  // optional .fantasybit.MsgHello hello = 30;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->hello_, output);
  }

  // optional .fantasybit.MsgAlive alive = 40;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->alive_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.WireMsg)
}

::google::protobuf::uint8* WireMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WireMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fantasybit.MsgType type = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional .fantasybit.MsgIntro intro = 20;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, *this->intro_, deterministic, target);
  }

  // optional .fantasybit.MsgHello hello = 30;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->hello_, deterministic, target);
  }

  // optional .fantasybit.MsgAlive alive = 40;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, *this->alive_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WireMsg)
  return target;
}

size_t WireMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fantasybit.WireMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .fantasybit.MsgIntro intro = 20;
    if (has_intro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->intro_);
    }

    // optional .fantasybit.MsgHello hello = 30;
    if (has_hello()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->hello_);
    }

    // optional .fantasybit.MsgAlive alive = 40;
    if (has_alive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->alive_);
    }

    // optional .fantasybit.MsgType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WireMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fantasybit.WireMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const WireMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WireMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fantasybit.WireMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fantasybit.WireMsg)
    MergeFrom(*source);
  }
}

void WireMsg::MergeFrom(const WireMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fantasybit.WireMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intro()->::fantasybit::MsgIntro::MergeFrom(from.intro());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_hello()->::fantasybit::MsgHello::MergeFrom(from.hello());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_alive()->::fantasybit::MsgAlive::MergeFrom(from.alive());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WireMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fantasybit.WireMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WireMsg::CopyFrom(const WireMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fantasybit.WireMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WireMsg::IsInitialized() const {
  return true;
}

void WireMsg::Swap(WireMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WireMsg::InternalSwap(WireMsg* other) {
  using std::swap;
  swap(intro_, other->intro_);
  swap(hello_, other->hello_);
  swap(alive_, other->alive_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WireMsg::GetMetadata() const {
  protobuf_P2PData_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_P2PData_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
