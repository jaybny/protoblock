// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* MyFantasyName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyFantasyName_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret2_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameProof_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TweetProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TweetProof_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignedBlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedBlockHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveWire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveWire_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyPlayerPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyPlayerPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectionTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectionTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Data_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTransition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataTransition_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GlobalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TeamState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeltaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeltaData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoData_2eproto() {
  protobuf_AddDesc_ProtoData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoData.proto");
  GOOGLE_CHECK(file != NULL);
  MyFantasyName_descriptor_ = file->message_type(0);
  static const int MyFantasyName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, status_),
  };
  MyFantasyName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyFantasyName_descriptor_,
      MyFantasyName::default_instance_,
      MyFantasyName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyFantasyName));
  FantasyPlayer_descriptor_ = file->message_type(1);
  static const int FantasyPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, bits_),
  };
  FantasyPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyPlayer_descriptor_,
      FantasyPlayer::default_instance_,
      FantasyPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyPlayer));
  Secret_descriptor_ = file->message_type(2);
  static const int Secret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, myfantasyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, nametran_),
  };
  Secret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret_descriptor_,
      Secret::default_instance_,
      Secret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret));
  Secret2_descriptor_ = file->message_type(3);
  static const int Secret2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, public_key_),
  };
  Secret2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret2_descriptor_,
      Secret2::default_instance_,
      Secret2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret2));
  OutData_descriptor_ = file->message_type(4);
  static const int OutData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, myfantasyname_),
  };
  OutData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutData_descriptor_,
      OutData::default_instance_,
      OutData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutData));
  OutData_Type_descriptor_ = OutData_descriptor_->enum_type(0);
  InData_descriptor_ = file->message_type(5);
  static const int InData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data_trans_),
  };
  InData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InData_descriptor_,
      InData::default_instance_,
      InData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InData));
  InData_Type_descriptor_ = InData_descriptor_->enum_type(0);
  NameProof_descriptor_ = file->message_type(6);
  static const int NameProof_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, type_),
  };
  NameProof_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameProof_descriptor_,
      NameProof::default_instance_,
      NameProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameProof));
  NameProof_Type_descriptor_ = NameProof_descriptor_->enum_type(0);
  TweetProof_descriptor_ = file->message_type(7);
  static const int TweetProof_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, tweet_),
  };
  TweetProof_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TweetProof_descriptor_,
      TweetProof::default_instance_,
      TweetProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TweetProof));
  Transaction_descriptor_ = file->message_type(8);
  static const int Transaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, type_),
  };
  Transaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transaction));
  NameTrans_descriptor_ = file->message_type(9);
  static const int NameTrans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, proof_),
  };
  NameTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameTrans_descriptor_,
      NameTrans::default_instance_,
      NameTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameTrans));
  SignedTransaction_descriptor_ = file->message_type(10);
  static const int SignedTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, fantasy_name_),
  };
  SignedTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedTransaction_descriptor_,
      SignedTransaction::default_instance_,
      SignedTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedTransaction));
  BlockHeader_descriptor_ = file->message_type(11);
  static const int BlockHeader_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, prev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, generator_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, generating_sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, basetarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, transaction_id_),
  };
  BlockHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockHeader_descriptor_,
      BlockHeader::default_instance_,
      BlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockHeader));
  BlockHeader_Type_descriptor_ = BlockHeader_descriptor_->enum_type(0);
  SignedBlockHeader_descriptor_ = file->message_type(12);
  static const int SignedBlockHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, sig_),
  };
  SignedBlockHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedBlockHeader_descriptor_,
      SignedBlockHeader::default_instance_,
      SignedBlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedBlockHeader));
  Block_descriptor_ = file->message_type(13);
  static const int Block_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, signedhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, signed_transactions_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  LiveWire_descriptor_ = file->message_type(14);
  static const int LiveWire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveWire, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveWire, transaction_),
  };
  LiveWire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LiveWire_descriptor_,
      LiveWire::default_instance_,
      LiveWire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveWire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveWire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LiveWire));
  NodeRequest_descriptor_ = file->message_type(15);
  static const int NodeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, myip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, myhost_),
  };
  NodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeRequest_descriptor_,
      NodeRequest::default_instance_,
      NodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeRequest));
  NodeRequest_Type_descriptor_ = NodeRequest_descriptor_->enum_type(0);
  NodeReply_descriptor_ = file->message_type(16);
  static const int NodeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, ips_),
  };
  NodeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeReply_descriptor_,
      NodeReply::default_instance_,
      NodeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeReply));
  FantasyPlayerPoints_descriptor_ = file->message_type(17);
  static const int FantasyPlayerPoints_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, result_),
  };
  FantasyPlayerPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyPlayerPoints_descriptor_,
      FantasyPlayerPoints::default_instance_,
      FantasyPlayerPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyPlayerPoints));
  ProjectionTrans_descriptor_ = file->message_type(18);
  static const int ProjectionTrans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, fpp_),
  };
  ProjectionTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProjectionTrans_descriptor_,
      ProjectionTrans::default_instance_,
      ProjectionTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProjectionTrans));
  Data_descriptor_ = file->message_type(19);
  static const int Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, type_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  Data_Type_descriptor_ = Data_descriptor_->enum_type(0);
  PlayerData_descriptor_ = file->message_type(20);
  static const int PlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, teamid_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
  TeamData_descriptor_ = file->message_type(21);
  static const int TeamData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, teamid_),
  };
  TeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamData_descriptor_,
      TeamData::default_instance_,
      TeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamData));
  ResultData_descriptor_ = file->message_type(22);
  static const int ResultData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, fpp_),
  };
  ResultData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultData_descriptor_,
      ResultData::default_instance_,
      ResultData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultData));
  DataTransition_descriptor_ = file->message_type(23);
  static const int DataTransition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, data_),
  };
  DataTransition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataTransition_descriptor_,
      DataTransition::default_instance_,
      DataTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataTransition));
  DataTransition_Type_descriptor_ = DataTransition_descriptor_->enum_type(0);
  GlobalState_descriptor_ = file->message_type(24);
  static const int GlobalState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, season_),
  };
  GlobalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalState_descriptor_,
      GlobalState::default_instance_,
      GlobalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalState));
  GlobalState_State_descriptor_ = GlobalState_descriptor_->enum_type(0);
  TeamState_descriptor_ = file->message_type(25);
  static const int TeamState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, teamid_),
  };
  TeamState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamState_descriptor_,
      TeamState::default_instance_,
      TeamState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamState));
  TeamState_State_descriptor_ = TeamState_descriptor_->enum_type(0);
  DeltaData_descriptor_ = file->message_type(26);
  static const int DeltaData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, myfantasyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, globalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, teamstates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, players_),
  };
  DeltaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeltaData_descriptor_,
      DeltaData::default_instance_,
      DeltaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeltaData));
  DeltaData_Type_descriptor_ = DeltaData_descriptor_->enum_type(0);
  MyNameStatus_descriptor_ = file->enum_type(0);
  TransType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyFantasyName_descriptor_, &MyFantasyName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyPlayer_descriptor_, &FantasyPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret_descriptor_, &Secret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret2_descriptor_, &Secret2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutData_descriptor_, &OutData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InData_descriptor_, &InData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameProof_descriptor_, &NameProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TweetProof_descriptor_, &TweetProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameTrans_descriptor_, &NameTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedTransaction_descriptor_, &SignedTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockHeader_descriptor_, &BlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedBlockHeader_descriptor_, &SignedBlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LiveWire_descriptor_, &LiveWire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeRequest_descriptor_, &NodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeReply_descriptor_, &NodeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyPlayerPoints_descriptor_, &FantasyPlayerPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProjectionTrans_descriptor_, &ProjectionTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamData_descriptor_, &TeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultData_descriptor_, &ResultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataTransition_descriptor_, &DataTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalState_descriptor_, &GlobalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamState_descriptor_, &TeamState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeltaData_descriptor_, &DeltaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoData_2eproto() {
  delete MyFantasyName::default_instance_;
  delete MyFantasyName_reflection_;
  delete FantasyPlayer::default_instance_;
  delete FantasyPlayer_reflection_;
  delete Secret::default_instance_;
  delete Secret_reflection_;
  delete Secret2::default_instance_;
  delete Secret2_reflection_;
  delete OutData::default_instance_;
  delete OutData_reflection_;
  delete InData::default_instance_;
  delete InData_reflection_;
  delete NameProof::default_instance_;
  delete NameProof_reflection_;
  delete TweetProof::default_instance_;
  delete TweetProof_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete NameTrans::default_instance_;
  delete NameTrans_reflection_;
  delete SignedTransaction::default_instance_;
  delete SignedTransaction_reflection_;
  delete BlockHeader::default_instance_;
  delete BlockHeader_reflection_;
  delete SignedBlockHeader::default_instance_;
  delete SignedBlockHeader_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete LiveWire::default_instance_;
  delete LiveWire_reflection_;
  delete NodeRequest::default_instance_;
  delete NodeRequest_reflection_;
  delete NodeReply::default_instance_;
  delete NodeReply_reflection_;
  delete FantasyPlayerPoints::default_instance_;
  delete FantasyPlayerPoints_reflection_;
  delete ProjectionTrans::default_instance_;
  delete ProjectionTrans_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
  delete TeamData::default_instance_;
  delete TeamData_reflection_;
  delete ResultData::default_instance_;
  delete ResultData_reflection_;
  delete DataTransition::default_instance_;
  delete DataTransition_reflection_;
  delete GlobalState::default_instance_;
  delete GlobalState_reflection_;
  delete TeamState::default_instance_;
  delete TeamState_reflection_;
  delete DeltaData::default_instance_;
  delete DeltaData_reflection_;
}

void protobuf_AddDesc_ProtoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoData.proto\022\nfantasybit\"G\n\rMyFanta"
    "syName\022\014\n\004name\030\001 \001(\t\022(\n\006status\030\002 \001(\0162\030.f"
    "antasybit.MyNameStatus\"+\n\rFantasyPlayer\022"
    "\014\n\004name\030\n \001(\t\022\014\n\004bits\030\024 \001(\004\"x\n\006Secret\022\023\n"
    "\013private_key\030\001 \002(\t\0220\n\rmyfantasyname\030\002 \001("
    "\0132\031.fantasybit.MyFantasyName\022\'\n\010nametran"
    "\030\n \001(\0132\025.fantasybit.NameTrans\"H\n\007Secret2"
    "\022\024\n\014fantasy_name\030\n \001(\t\022\023\n\013private_key\030\024 "
    "\001(\t\022\022\n\npublic_key\030\036 \001(\t\"\245\001\n\007OutData\022&\n\004t"
    "ype\030\001 \002(\0162\030.fantasybit.OutData.Type\0220\n\rm"
    "yfantasyname\030\002 \001(\0132\031.fantasybit.MyFantas"
    "yName\"6\n\004Type\022\021\n\rMYFANTASYNAME\020\001\022\014\n\010SNAP"
    "SHOT\020\002\022\r\n\tHEARTBEAT\020\003*\010\010d\020\200\200\200\200\002\"\200\002\n\006InDa"
    "ta\022%\n\004type\030\001 \002(\0162\027.fantasybit.InData.Typ"
    "e\022\014\n\004data\030\002 \001(\t\022\r\n\005data2\030\003 \001(\t\022\013\n\003num\030\004 "
    "\001(\005\022.\n\ndata_trans\030\005 \001(\0132\032.fantasybit.Dat"
    "aTransition\"k\n\004Type\022\014\n\010MINENAME\020\001\022\010\n\004QUI"
    "T\020\002\022\r\n\tHEARTBEAT\020\003\022\013\n\007CONNECT\020\004\022\016\n\nMAKE_"
    "BLOCK\020\005\022\013\n\007NEWNAME\020\006\022\010\n\004PROJ\020\007\022\010\n\004DATA\020\010"
    "*\010\010d\020\200\200\200\200\002\"h\n\tNameProof\022(\n\004type\030\001 \001(\0162\032."
    "fantasybit.NameProof.Type\"&\n\004Type\022\007\n\003POW"
    "\020\001\022\t\n\005TWEET\020\002\022\n\n\006ORACLE\020\003*\t\010\310\001\020\200\200\200\200\002\"`\n\n"
    "TweetProof\022\r\n\005tweet\030\n \001(\t2C\n\013tweet_proof"
    "\022\025.fantasybit.NameProof\030\311\001 \001(\0132\026.fantasy"
    "bit.TweetProof\"M\n\013Transaction\022\017\n\007version"
    "\030\001 \001(\005\022#\n\004type\030\002 \001(\0162\025.fantasybit.TransT"
    "ype*\010\010d\020\200\200\200\200\002\"\240\001\n\tNameTrans\022\024\n\014fantasy_n"
    "ame\030\n \001(\t\022\022\n\npublic_key\030\024 \001(\014\022$\n\005proof\030\036"
    " \001(\0132\025.fantasybit.NameProof2C\n\nname_tran"
    "s\022\027.fantasybit.Transaction\030\310\001 \001(\0132\025.fant"
    "asybit.NameTrans\"j\n\021SignedTransaction\022&\n"
    "\005trans\030\n \001(\0132\027.fantasybit.Transaction\022\n\n"
    "\002id\030\024 \001(\014\022\013\n\003sig\030\036 \001(\014\022\024\n\014fantasy_name\030("
    " \001(\t\"\370\001\n\013BlockHeader\022\017\n\007version\030\001 \001(\005\022\013\n"
    "\003num\030\n \001(\005\022\017\n\007prev_id\030\024 \001(\014\022\021\n\ttimestamp"
    "\030\025 \001(\005\022\024\n\014generator_pk\030\036 \001(\014\022\026\n\016generati"
    "ng_sig\030( \001(\014\022\022\n\nbasetarget\0302 \001(\005\022/\n\tbloc"
    "ktype\030< \001(\0162\034.fantasybit.BlockHeader.Typ"
    "e\022\026\n\016transaction_id\030F \001(\014\"\034\n\004Type\022\n\n\006NOR"
    "MAL\020\001\022\010\n\004DATA\020\002\"G\n\021SignedBlockHeader\022%\n\004"
    "head\030\n \001(\0132\027.fantasybit.BlockHeader\022\013\n\003s"
    "ig\030\036 \001(\t\"\201\001\n\005Block\0221\n\nsignedhead\030\n \001(\0132\035"
    ".fantasybit.SignedBlockHeader\022:\n\023signed_"
    "transactions\030\024 \003(\0132\035.fantasybit.SignedTr"
    "ansaction*\t\010\350\007\020\200\200\200\200\002\"`\n\010LiveWire\022 \n\005bloc"
    "k\030\n \001(\0132\021.fantasybit.Block\0222\n\013transactio"
    "n\030\024 \003(\0132\035.fantasybit.SignedTransaction\"\257"
    "\001\n\013NodeRequest\022*\n\004type\030\n \001(\0162\034.fantasybi"
    "t.NodeRequest.Type\022\014\n\004myip\030\024 \001(\t\022\013\n\003num\030"
    "\036 \001(\005\022\016\n\006myhost\030( \001(\t\"I\n\004Type\022\r\n\tHANDSHA"
    "KE\020\001\022\021\n\rBLOCK_REQUEST\020\002\022\021\n\rHIGHT_REQUEST"
    "\020\003\022\014\n\010NAT_TEST\020\004\"\'\n\tNodeReply\022\r\n\005hight\030\n"
    " \001(\005\022\013\n\003ips\030\024 \003(\t\"e\n\023FantasyPlayerPoints"
    "\022\016\n\006season\030\n \001(\r\022\014\n\004week\030\024 \001(\r\022\020\n\010player"
    "id\030\036 \001(\t\022\016\n\006points\030( \001(\005\022\016\n\006result\0302 \001(\002"
    "\"\212\001\n\017ProjectionTrans\022,\n\003fpp\030\n \001(\0132\037.fant"
    "asybit.FantasyPlayerPoints2I\n\nproj_trans"
    "\022\027.fantasybit.Transaction\030\311\001 \001(\0132\033.fanta"
    "sybit.ProjectionTrans\"~\n\004Data\022\017\n\007version"
    "\030\n \001(\005\022#\n\004type\030\024 \001(\0162\025.fantasybit.Data.T"
    "ype\"6\n\004Type\022\014\n\010SCHEDULE\020\000\022\n\n\006PLAYER\020\001\022\010\n"
    "\004TEAM\020\002\022\n\n\006RESULT\020\003*\010\010d\020\200\200\200\200\002\"m\n\nPlayerD"
    "ata\022\020\n\010playerid\030\n \001(\t\022\016\n\006teamid\030\024 \001(\t2=\n"
    "\013player_data\022\020.fantasybit.Data\030e \001(\0132\026.f"
    "antasybit.PlayerData\"U\n\010TeamData\022\016\n\006team"
    "id\030\n \001(\t29\n\tteam_data\022\020.fantasybit.Data\030"
    "o \001(\0132\024.fantasybit.TeamData\"z\n\nResultDat"
    "a\022,\n\003fpp\030\n \001(\0132\037.fantasybit.FantasyPlaye"
    "rPoints2>\n\013result_data\022\020.fantasybit.Data"
    "\030\312\001 \001(\0132\026.fantasybit.ResultData\"\306\002\n\016Data"
    "Transition\022-\n\004type\030\001 \001(\0162\037.fantasybit.Da"
    "taTransition.Type\022\016\n\006season\030\n \001(\r\022\014\n\004wee"
    "k\030\024 \001(\r\022\016\n\006teamid\030\036 \003(\t\022\036\n\004data\030( \003(\0132\020."
    "fantasybit.Data\"m\n\004Type\022\n\n\006ROSTER\020\001\022\017\n\013S"
    "EASONSTART\020\002\022\r\n\tSEASONEND\020\003\022\r\n\tDRAFTOVER"
    "\020\004\022\r\n\tHEARTBEAT\020\005\022\r\n\tGAMESTART\020\006\022\014\n\010WEEK"
    "OVER\020\0072H\n\ndata_trans\022\027.fantasybit.Transa"
    "ction\030\313\001 \001(\0132\032.fantasybit.DataTransition"
    "\"\220\001\n\013GlobalState\022,\n\005state\030\001 \001(\0162\035.fantas"
    "ybit.GlobalState.State\022\016\n\006season\030\n \001(\r\"C"
    "\n\005State\022\014\n\010PREDRAFT\020\001\022\r\n\tPRESEASON\020\002\022\017\n\013"
    "ROSTER53MAN\020\003\022\014\n\010INSEASON\020\004\"w\n\tTeamState"
    "\022*\n\005state\030\001 \001(\0162\033.fantasybit.TeamState.S"
    "tate\022\014\n\004week\030\n \001(\r\022\016\n\006teamid\030\024 \001(\t\" \n\005St"
    "ate\022\013\n\007PREGAME\020\001\022\n\n\006INGAME\020\002\"\275\002\n\tDeltaDa"
    "ta\022(\n\004type\030\001 \001(\0162\032.fantasybit.DeltaData."
    "Type\0220\n\rmyfantasyname\030\002 \001(\0132\031.fantasybit"
    ".MyFantasyName\022,\n\013globalstate\030\n \001(\0132\027.fa"
    "ntasybit.GlobalState\022)\n\nteamstates\030\024 \003(\013"
    "2\025.fantasybit.TeamState\022\037\n\005datas\030\036 \003(\0132\020"
    ".fantasybit.Data\022*\n\007players\030( \003(\0132\031.fant"
    "asybit.FantasyPlayer\"#\n\004Type\022\014\n\010SNAPSHOT"
    "\020\002\022\r\n\tHEARTBEAT\020\003*\t\010\350\007\020\200\200\200\200\002*d\n\014MyNameSt"
    "atus\022\010\n\004none\020\001\022\013\n\007notavil\020\002\022\r\n\trequested"
    "\020\005\022\t\n\005found\020\n\022\024\n\020transaction_sent\020\017\022\r\n\tc"
    "onfirmed\020\024*;\n\tTransType\022\010\n\004NAME\020\000\022\016\n\nPRO"
    "JECTION\020\001\022\n\n\006RESULT\020\002\022\010\n\004DATA\020\003", 3871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoData.proto", &protobuf_RegisterTypes);
  MyFantasyName::default_instance_ = new MyFantasyName();
  FantasyPlayer::default_instance_ = new FantasyPlayer();
  Secret::default_instance_ = new Secret();
  Secret2::default_instance_ = new Secret2();
  OutData::default_instance_ = new OutData();
  InData::default_instance_ = new InData();
  NameProof::default_instance_ = new NameProof();
  TweetProof::default_instance_ = new TweetProof();
  Transaction::default_instance_ = new Transaction();
  NameTrans::default_instance_ = new NameTrans();
  SignedTransaction::default_instance_ = new SignedTransaction();
  BlockHeader::default_instance_ = new BlockHeader();
  SignedBlockHeader::default_instance_ = new SignedBlockHeader();
  Block::default_instance_ = new Block();
  LiveWire::default_instance_ = new LiveWire();
  NodeRequest::default_instance_ = new NodeRequest();
  NodeReply::default_instance_ = new NodeReply();
  FantasyPlayerPoints::default_instance_ = new FantasyPlayerPoints();
  ProjectionTrans::default_instance_ = new ProjectionTrans();
  Data::default_instance_ = new Data();
  PlayerData::default_instance_ = new PlayerData();
  TeamData::default_instance_ = new TeamData();
  ResultData::default_instance_ = new ResultData();
  DataTransition::default_instance_ = new DataTransition();
  GlobalState::default_instance_ = new GlobalState();
  TeamState::default_instance_ = new TeamState();
  DeltaData::default_instance_ = new DeltaData();
  MyFantasyName::default_instance_->InitAsDefaultInstance();
  FantasyPlayer::default_instance_->InitAsDefaultInstance();
  Secret::default_instance_->InitAsDefaultInstance();
  Secret2::default_instance_->InitAsDefaultInstance();
  OutData::default_instance_->InitAsDefaultInstance();
  InData::default_instance_->InitAsDefaultInstance();
  NameProof::default_instance_->InitAsDefaultInstance();
  TweetProof::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::NameProof::default_instance(),
    201, 11, false, false,
    &::fantasybit::TweetProof::default_instance());
  Transaction::default_instance_->InitAsDefaultInstance();
  NameTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    200, 11, false, false,
    &::fantasybit::NameTrans::default_instance());
  SignedTransaction::default_instance_->InitAsDefaultInstance();
  BlockHeader::default_instance_->InitAsDefaultInstance();
  SignedBlockHeader::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  LiveWire::default_instance_->InitAsDefaultInstance();
  NodeRequest::default_instance_->InitAsDefaultInstance();
  NodeReply::default_instance_->InitAsDefaultInstance();
  FantasyPlayerPoints::default_instance_->InitAsDefaultInstance();
  ProjectionTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    201, 11, false, false,
    &::fantasybit::ProjectionTrans::default_instance());
  Data::default_instance_->InitAsDefaultInstance();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    101, 11, false, false,
    &::fantasybit::PlayerData::default_instance());
  TeamData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    111, 11, false, false,
    &::fantasybit::TeamData::default_instance());
  ResultData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    202, 11, false, false,
    &::fantasybit::ResultData::default_instance());
  DataTransition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    203, 11, false, false,
    &::fantasybit::DataTransition::default_instance());
  GlobalState::default_instance_->InitAsDefaultInstance();
  TeamState::default_instance_->InitAsDefaultInstance();
  DeltaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoData_2eproto {
  StaticDescriptorInitializer_ProtoData_2eproto() {
    protobuf_AddDesc_ProtoData_2eproto();
  }
} static_descriptor_initializer_ProtoData_2eproto_;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyNameStatus_descriptor_;
}
bool MyNameStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 5:
    case 10:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransType_descriptor_;
}
bool TransType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MyFantasyName::kNameFieldNumber;
const int MyFantasyName::kStatusFieldNumber;
#endif  // !_MSC_VER

MyFantasyName::MyFantasyName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyFantasyName::InitAsDefaultInstance() {
}

MyFantasyName::MyFantasyName(const MyFantasyName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyFantasyName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyFantasyName::~MyFantasyName() {
  SharedDtor();
}

void MyFantasyName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MyFantasyName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFantasyName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyFantasyName_descriptor_;
}

const MyFantasyName& MyFantasyName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

MyFantasyName* MyFantasyName::default_instance_ = NULL;

MyFantasyName* MyFantasyName::New() const {
  return new MyFantasyName;
}

void MyFantasyName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyFantasyName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .fantasybit.MyNameStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MyNameStatus_IsValid(value)) {
            set_status(static_cast< ::fantasybit::MyNameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyFantasyName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyFantasyName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyFantasyName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .fantasybit.MyNameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFantasyName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyFantasyName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyFantasyName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyFantasyName::MergeFrom(const MyFantasyName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyFantasyName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFantasyName::CopyFrom(const MyFantasyName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFantasyName::IsInitialized() const {

  return true;
}

void MyFantasyName::Swap(MyFantasyName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyFantasyName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyFantasyName_descriptor_;
  metadata.reflection = MyFantasyName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyPlayer::kNameFieldNumber;
const int FantasyPlayer::kBitsFieldNumber;
#endif  // !_MSC_VER

FantasyPlayer::FantasyPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyPlayer::InitAsDefaultInstance() {
}

FantasyPlayer::FantasyPlayer(const FantasyPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyPlayer::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bits_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyPlayer::~FantasyPlayer() {
  SharedDtor();
}

void FantasyPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FantasyPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyPlayer_descriptor_;
}

const FantasyPlayer& FantasyPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyPlayer* FantasyPlayer::default_instance_ = NULL;

FantasyPlayer* FantasyPlayer::New() const {
  return new FantasyPlayer;
}

void FantasyPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    bits_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional uint64 bits = 20;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 bits = 20;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 bits = 20;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyPlayer::MergeFrom(const FantasyPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayer::CopyFrom(const FantasyPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayer::IsInitialized() const {

  return true;
}

void FantasyPlayer::Swap(FantasyPlayer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(bits_, other->bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyPlayer_descriptor_;
  metadata.reflection = FantasyPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret::kPrivateKeyFieldNumber;
const int Secret::kMyfantasynameFieldNumber;
const int Secret::kNametranFieldNumber;
#endif  // !_MSC_VER

Secret::Secret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secret::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
  nametran_ = const_cast< ::fantasybit::NameTrans*>(&::fantasybit::NameTrans::default_instance());
}

Secret::Secret(const Secret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secret::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  myfantasyname_ = NULL;
  nametran_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret::~Secret() {
  SharedDtor();
}

void Secret::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (this != default_instance_) {
    delete myfantasyname_;
    delete nametran_;
  }
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret_descriptor_;
}

const Secret& Secret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret* Secret::default_instance_ = NULL;

Secret* Secret::New() const {
  return new Secret;
}

void Secret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
    if (has_nametran()) {
      if (nametran_ != NULL) nametran_->::fantasybit::NameTrans::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_nametran;
        break;
      }

      // optional .fantasybit.NameTrans nametran = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nametran:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nametran()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->private_key(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(), output);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (has_nametran()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->nametran(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(), target);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (has_nametran()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->nametran(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfantasyname());
    }

    // optional .fantasybit.NameTrans nametran = 10;
    if (has_nametran()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nametran());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
    if (from.has_nametran()) {
      mutable_nametran()->::fantasybit::NameTrans::MergeFrom(from.nametran());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nametran()) {
    if (!this->nametran().IsInitialized()) return false;
  }
  return true;
}

void Secret::Swap(Secret* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(myfantasyname_, other->myfantasyname_);
    std::swap(nametran_, other->nametran_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret_descriptor_;
  metadata.reflection = Secret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret2::kFantasyNameFieldNumber;
const int Secret2::kPrivateKeyFieldNumber;
const int Secret2::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

Secret2::Secret2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secret2::InitAsDefaultInstance() {
}

Secret2::Secret2(const Secret2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secret2::SharedCtor() {
  _cached_size_ = 0;
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret2::~Secret2() {
  SharedDtor();
}

void Secret2::SharedDtor() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void Secret2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret2_descriptor_;
}

const Secret2& Secret2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret2* Secret2::default_instance_ = NULL;

Secret2* Secret2::New() const {
  return new Secret2;
}

void Secret2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_private_key;
        break;
      }

      // optional string private_key = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_public_key;
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secret2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fantasy_name(), output);
  }

  // optional string private_key = 20;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->private_key(), output);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secret2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  // optional string private_key = 20;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->private_key(), target);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secret2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional string private_key = 20;
    if (has_private_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret2::MergeFrom(const Secret2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret2::CopyFrom(const Secret2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret2::IsInitialized() const {

  return true;
}

void Secret2::Swap(Secret2* other) {
  if (other != this) {
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(private_key_, other->private_key_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret2_descriptor_;
  metadata.reflection = Secret2_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_Type_descriptor_;
}
bool OutData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OutData_Type OutData::MYFANTASYNAME;
const OutData_Type OutData::SNAPSHOT;
const OutData_Type OutData::HEARTBEAT;
const OutData_Type OutData::Type_MIN;
const OutData_Type OutData::Type_MAX;
const int OutData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OutData::kTypeFieldNumber;
const int OutData::kMyfantasynameFieldNumber;
#endif  // !_MSC_VER

OutData::OutData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutData::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
}

OutData::OutData(const OutData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  myfantasyname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutData::~OutData() {
  SharedDtor();
}

void OutData::SharedDtor() {
  if (this != default_instance_) {
    delete myfantasyname_;
  }
}

void OutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_descriptor_;
}

const OutData& OutData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

OutData* OutData::default_instance_ = NULL;

OutData* OutData::New() const {
  return new OutData;
}

void OutData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.OutData.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::OutData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::OutData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fantasybit.OutData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfantasyname());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutData::MergeFrom(const OutData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutData::CopyFrom(const OutData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void OutData::Swap(OutData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myfantasyname_, other->myfantasyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata OutData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutData_descriptor_;
  metadata.reflection = OutData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InData_Type_descriptor_;
}
bool InData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InData_Type InData::MINENAME;
const InData_Type InData::QUIT;
const InData_Type InData::HEARTBEAT;
const InData_Type InData::CONNECT;
const InData_Type InData::MAKE_BLOCK;
const InData_Type InData::NEWNAME;
const InData_Type InData::PROJ;
const InData_Type InData::DATA;
const InData_Type InData::Type_MIN;
const InData_Type InData::Type_MAX;
const int InData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InData::kTypeFieldNumber;
const int InData::kDataFieldNumber;
const int InData::kData2FieldNumber;
const int InData::kNumFieldNumber;
const int InData::kDataTransFieldNumber;
#endif  // !_MSC_VER

InData::InData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InData::InitAsDefaultInstance() {
  data_trans_ = const_cast< ::fantasybit::DataTransition*>(&::fantasybit::DataTransition::default_instance());
}

InData::InData(const InData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  data_trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InData::~InData() {
  SharedDtor();
}

void InData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data2_ != &::google::protobuf::internal::kEmptyString) {
    delete data2_;
  }
  if (this != default_instance_) {
    delete data_trans_;
  }
}

void InData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InData_descriptor_;
}

const InData& InData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

InData* InData::default_instance_ = NULL;

InData* InData::New() const {
  return new InData;
}

void InData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_data2()) {
      if (data2_ != &::google::protobuf::internal::kEmptyString) {
        data2_->clear();
      }
    }
    num_ = 0;
    if (has_data_trans()) {
      if (data_trans_ != NULL) data_trans_->::fantasybit::DataTransition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.InData.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::InData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::InData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data2;
        break;
      }

      // optional string data2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data2().data(), this->data2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_trans;
        break;
      }

      // optional .fantasybit.DataTransition data_trans = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  // optional string data2 = 3;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data2(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (has_data_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_trans(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional string data2 = 3;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data2(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (has_data_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_trans(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fantasybit.InData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string data2 = 3;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data2());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .fantasybit.DataTransition data_trans = 5;
    if (has_data_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_trans());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InData::MergeFrom(const InData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_data2()) {
      set_data2(from.data2());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data_trans()) {
      mutable_data_trans()->::fantasybit::DataTransition::MergeFrom(from.data_trans());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InData::CopyFrom(const InData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data_trans()) {
    if (!this->data_trans().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void InData::Swap(InData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(data2_, other->data2_);
    std::swap(num_, other->num_);
    std::swap(data_trans_, other->data_trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata InData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InData_descriptor_;
  metadata.reflection = InData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameProof_Type_descriptor_;
}
bool NameProof_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NameProof_Type NameProof::POW;
const NameProof_Type NameProof::TWEET;
const NameProof_Type NameProof::ORACLE;
const NameProof_Type NameProof::Type_MIN;
const NameProof_Type NameProof::Type_MAX;
const int NameProof::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NameProof::kTypeFieldNumber;
#endif  // !_MSC_VER

NameProof::NameProof()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameProof::InitAsDefaultInstance() {
}

NameProof::NameProof(const NameProof& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameProof::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameProof::~NameProof() {
  SharedDtor();
}

void NameProof::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NameProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameProof_descriptor_;
}

const NameProof& NameProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameProof* NameProof::default_instance_ = NULL;

NameProof* NameProof::New() const {
  return new NameProof;
}

void NameProof::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NameProof.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NameProof_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NameProof_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // Extension range [200, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      200, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameProof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.NameProof.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameProof::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameProof* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameProof*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameProof::MergeFrom(const NameProof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameProof::CopyFrom(const NameProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameProof::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NameProof::Swap(NameProof* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NameProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameProof_descriptor_;
  metadata.reflection = NameProof_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TweetProof::kTweetFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TweetProof::kTweetProofFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
  TweetProof::tweet_proof(kTweetProofFieldNumber, ::fantasybit::TweetProof::default_instance());
TweetProof::TweetProof()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TweetProof::InitAsDefaultInstance() {
}

TweetProof::TweetProof(const TweetProof& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TweetProof::SharedCtor() {
  _cached_size_ = 0;
  tweet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TweetProof::~TweetProof() {
  SharedDtor();
}

void TweetProof::SharedDtor() {
  if (tweet_ != &::google::protobuf::internal::kEmptyString) {
    delete tweet_;
  }
  if (this != default_instance_) {
  }
}

void TweetProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TweetProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TweetProof_descriptor_;
}

const TweetProof& TweetProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TweetProof* TweetProof::default_instance_ = NULL;

TweetProof* TweetProof::New() const {
  return new TweetProof;
}

void TweetProof::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tweet()) {
      if (tweet_ != &::google::protobuf::internal::kEmptyString) {
        tweet_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TweetProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tweet = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tweet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tweet().data(), this->tweet().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TweetProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tweet = 10;
  if (has_tweet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tweet().data(), this->tweet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tweet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TweetProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tweet = 10;
  if (has_tweet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tweet().data(), this->tweet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tweet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TweetProof::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tweet = 10;
    if (has_tweet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tweet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TweetProof::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TweetProof* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TweetProof*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TweetProof::MergeFrom(const TweetProof& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tweet()) {
      set_tweet(from.tweet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TweetProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetProof::CopyFrom(const TweetProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetProof::IsInitialized() const {

  return true;
}

void TweetProof::Swap(TweetProof* other) {
  if (other != this) {
    std::swap(tweet_, other->tweet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TweetProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TweetProof_descriptor_;
  metadata.reflection = TweetProof_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transaction::kVersionFieldNumber;
const int Transaction::kTypeFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transaction::InitAsDefaultInstance() {
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New() const {
  return new Transaction;
}

void Transaction::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .fantasybit.TransType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TransType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TransType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .fantasybit.TransType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .fantasybit.TransType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.TransType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameTrans::kFantasyNameFieldNumber;
const int NameTrans::kPublicKeyFieldNumber;
const int NameTrans::kProofFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NameTrans::kNameTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
  NameTrans::name_trans(kNameTransFieldNumber, ::fantasybit::NameTrans::default_instance());
NameTrans::NameTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameTrans::InitAsDefaultInstance() {
  proof_ = const_cast< ::fantasybit::NameProof*>(&::fantasybit::NameProof::default_instance());
}

NameTrans::NameTrans(const NameTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameTrans::SharedCtor() {
  _cached_size_ = 0;
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proof_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameTrans::~NameTrans() {
  SharedDtor();
}

void NameTrans::SharedDtor() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
    delete proof_;
  }
}

void NameTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameTrans_descriptor_;
}

const NameTrans& NameTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameTrans* NameTrans::default_instance_ = NULL;

NameTrans* NameTrans::New() const {
  return new NameTrans;
}

void NameTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    if (has_proof()) {
      if (proof_ != NULL) proof_->::fantasybit::NameProof::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_public_key;
        break;
      }

      // optional bytes public_key = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_proof;
        break;
      }

      // optional .fantasybit.NameProof proof = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proof()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fantasy_name(), output);
  }

  // optional bytes public_key = 20;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->public_key(), output);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->proof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  // optional bytes public_key = 20;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->public_key(), target);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->proof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional bytes public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional .fantasybit.NameProof proof = 30;
    if (has_proof()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameTrans::MergeFrom(const NameTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_proof()) {
      mutable_proof()->::fantasybit::NameProof::MergeFrom(from.proof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrans::CopyFrom(const NameTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrans::IsInitialized() const {

  if (has_proof()) {
    if (!this->proof().IsInitialized()) return false;
  }
  return true;
}

void NameTrans::Swap(NameTrans* other) {
  if (other != this) {
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(public_key_, other->public_key_);
    std::swap(proof_, other->proof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameTrans_descriptor_;
  metadata.reflection = NameTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedTransaction::kTransFieldNumber;
const int SignedTransaction::kIdFieldNumber;
const int SignedTransaction::kSigFieldNumber;
const int SignedTransaction::kFantasyNameFieldNumber;
#endif  // !_MSC_VER

SignedTransaction::SignedTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedTransaction::InitAsDefaultInstance() {
  trans_ = const_cast< ::fantasybit::Transaction*>(&::fantasybit::Transaction::default_instance());
}

SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedTransaction::SharedCtor() {
  _cached_size_ = 0;
  trans_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedTransaction::~SignedTransaction() {
  SharedDtor();
}

void SignedTransaction::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (this != default_instance_) {
    delete trans_;
  }
}

void SignedTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedTransaction_descriptor_;
}

const SignedTransaction& SignedTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SignedTransaction* SignedTransaction::default_instance_ = NULL;

SignedTransaction* SignedTransaction::New() const {
  return new SignedTransaction;
}

void SignedTransaction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trans()) {
      if (trans_ != NULL) trans_->::fantasybit::Transaction::Clear();
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
    if (has_fantasy_name()) {
      if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
        fantasy_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Transaction trans = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_id;
        break;
      }

      // optional bytes id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_sig;
        break;
      }

      // optional bytes sig = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.Transaction trans = 10;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->trans(), output);
  }

  // optional bytes id = 20;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->id(), output);
  }

  // optional bytes sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->sig(), output);
  }

  // optional string fantasy_name = 40;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->fantasy_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.Transaction trans = 10;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->trans(), target);
  }

  // optional bytes id = 20;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->id(), target);
  }

  // optional bytes sig = 30;
  if (has_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->sig(), target);
  }

  // optional string fantasy_name = 40;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->fantasy_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.Transaction trans = 10;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

    // optional bytes id = 20;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig());
    }

    // optional string fantasy_name = 40;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans()) {
      mutable_trans()->::fantasybit::Transaction::MergeFrom(from.trans());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
    if (from.has_fantasy_name()) {
      set_fantasy_name(from.fantasy_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {

  if (has_trans()) {
    if (!this->trans().IsInitialized()) return false;
  }
  return true;
}

void SignedTransaction::Swap(SignedTransaction* other) {
  if (other != this) {
    std::swap(trans_, other->trans_);
    std::swap(id_, other->id_);
    std::swap(sig_, other->sig_);
    std::swap(fantasy_name_, other->fantasy_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedTransaction_descriptor_;
  metadata.reflection = SignedTransaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_Type_descriptor_;
}
bool BlockHeader_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockHeader_Type BlockHeader::NORMAL;
const BlockHeader_Type BlockHeader::DATA;
const BlockHeader_Type BlockHeader::Type_MIN;
const BlockHeader_Type BlockHeader::Type_MAX;
const int BlockHeader::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlockHeader::kVersionFieldNumber;
const int BlockHeader::kNumFieldNumber;
const int BlockHeader::kPrevIdFieldNumber;
const int BlockHeader::kTimestampFieldNumber;
const int BlockHeader::kGeneratorPkFieldNumber;
const int BlockHeader::kGeneratingSigFieldNumber;
const int BlockHeader::kBasetargetFieldNumber;
const int BlockHeader::kBlocktypeFieldNumber;
const int BlockHeader::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

BlockHeader::BlockHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockHeader::InitAsDefaultInstance() {
}

BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockHeader::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  num_ = 0;
  prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  generator_pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  generating_sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  basetarget_ = 0;
  blocktype_ = 1;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockHeader::~BlockHeader() {
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_id_;
  }
  if (generator_pk_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_pk_;
  }
  if (generating_sig_ != &::google::protobuf::internal::kEmptyString) {
    delete generating_sig_;
  }
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (this != default_instance_) {
  }
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_descriptor_;
}

const BlockHeader& BlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

BlockHeader* BlockHeader::default_instance_ = NULL;

BlockHeader* BlockHeader::New() const {
  return new BlockHeader;
}

void BlockHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    num_ = 0;
    if (has_prev_id()) {
      if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
        prev_id_->clear();
      }
    }
    timestamp_ = 0;
    if (has_generator_pk()) {
      if (generator_pk_ != &::google::protobuf::internal::kEmptyString) {
        generator_pk_->clear();
      }
    }
    if (has_generating_sig()) {
      if (generating_sig_ != &::google::protobuf::internal::kEmptyString) {
        generating_sig_->clear();
      }
    }
    basetarget_ = 0;
    blocktype_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num;
        break;
      }

      // optional int32 num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_prev_id;
        break;
      }

      // optional bytes prev_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_generator_pk;
        break;
      }

      // optional bytes generator_pk = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generator_pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generator_pk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_generating_sig;
        break;
      }

      // optional bytes generating_sig = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generating_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generating_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_basetarget;
        break;
      }

      // optional int32 basetarget = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_basetarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basetarget_)));
          set_has_basetarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_blocktype;
        break;
      }

      // optional .fantasybit.BlockHeader.Type blocktype = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::BlockHeader_Type_IsValid(value)) {
            set_blocktype(static_cast< ::fantasybit::BlockHeader_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(60, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_transaction_id;
        break;
      }

      // optional bytes transaction_id = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 num = 10;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num(), output);
  }

  // optional bytes prev_id = 20;
  if (has_prev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->prev_id(), output);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timestamp(), output);
  }

  // optional bytes generator_pk = 30;
  if (has_generator_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->generator_pk(), output);
  }

  // optional bytes generating_sig = 40;
  if (has_generating_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      40, this->generating_sig(), output);
  }

  // optional int32 basetarget = 50;
  if (has_basetarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->basetarget(), output);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->blocktype(), output);
  }

  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      70, this->transaction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 num = 10;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num(), target);
  }

  // optional bytes prev_id = 20;
  if (has_prev_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->prev_id(), target);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timestamp(), target);
  }

  // optional bytes generator_pk = 30;
  if (has_generator_pk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->generator_pk(), target);
  }

  // optional bytes generating_sig = 40;
  if (has_generating_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->generating_sig(), target);
  }

  // optional int32 basetarget = 50;
  if (has_basetarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->basetarget(), target);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->blocktype(), target);
  }

  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->transaction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional bytes prev_id = 20;
    if (has_prev_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev_id());
    }

    // optional int32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional bytes generator_pk = 30;
    if (has_generator_pk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generator_pk());
    }

    // optional bytes generating_sig = 40;
    if (has_generating_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generating_sig());
    }

    // optional int32 basetarget = 50;
    if (has_basetarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basetarget());
    }

    // optional .fantasybit.BlockHeader.Type blocktype = 60;
    if (has_blocktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocktype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes transaction_id = 70;
    if (has_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prev_id()) {
      set_prev_id(from.prev_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_generator_pk()) {
      set_generator_pk(from.generator_pk());
    }
    if (from.has_generating_sig()) {
      set_generating_sig(from.generating_sig());
    }
    if (from.has_basetarget()) {
      set_basetarget(from.basetarget());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {

  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(num_, other->num_);
    std::swap(prev_id_, other->prev_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(generator_pk_, other->generator_pk_);
    std::swap(generating_sig_, other->generating_sig_);
    std::swap(basetarget_, other->basetarget_);
    std::swap(blocktype_, other->blocktype_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockHeader_descriptor_;
  metadata.reflection = BlockHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedBlockHeader::kHeadFieldNumber;
const int SignedBlockHeader::kSigFieldNumber;
#endif  // !_MSC_VER

SignedBlockHeader::SignedBlockHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedBlockHeader::InitAsDefaultInstance() {
  head_ = const_cast< ::fantasybit::BlockHeader*>(&::fantasybit::BlockHeader::default_instance());
}

SignedBlockHeader::SignedBlockHeader(const SignedBlockHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedBlockHeader::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedBlockHeader::~SignedBlockHeader() {
  SharedDtor();
}

void SignedBlockHeader::SharedDtor() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void SignedBlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedBlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedBlockHeader_descriptor_;
}

const SignedBlockHeader& SignedBlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SignedBlockHeader* SignedBlockHeader::default_instance_ = NULL;

SignedBlockHeader* SignedBlockHeader::New() const {
  return new SignedBlockHeader;
}

void SignedBlockHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::fantasybit::BlockHeader::Clear();
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedBlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.BlockHeader head = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_sig;
        break;
      }

      // optional string sig = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedBlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.BlockHeader head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->head(), output);
  }

  // optional string sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedBlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.BlockHeader head = 10;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->head(), target);
  }

  // optional string sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedBlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.BlockHeader head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // optional string sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedBlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedBlockHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedBlockHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedBlockHeader::MergeFrom(const SignedBlockHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::fantasybit::BlockHeader::MergeFrom(from.head());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedBlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBlockHeader::CopyFrom(const SignedBlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBlockHeader::IsInitialized() const {

  return true;
}

void SignedBlockHeader::Swap(SignedBlockHeader* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedBlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedBlockHeader_descriptor_;
  metadata.reflection = SignedBlockHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kSignedheadFieldNumber;
const int Block::kSignedTransactionsFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
  signedhead_ = const_cast< ::fantasybit::SignedBlockHeader*>(&::fantasybit::SignedBlockHeader::default_instance());
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  signedhead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != default_instance_) {
    delete signedhead_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signedhead()) {
      if (signedhead_ != NULL) signedhead_->::fantasybit::SignedBlockHeader::Clear();
    }
  }
  signed_transactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SignedBlockHeader signedhead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_signed_transactions;
        break;
      }

      // repeated .fantasybit.SignedTransaction signed_transactions = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_transactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signed_transactions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_signed_transactions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->signedhead(), output);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->signed_transactions(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->signedhead(), target);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->signed_transactions(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SignedBlockHeader signedhead = 10;
    if (has_signedhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signedhead());
    }

  }
  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  total_size += 2 * this->signed_transactions_size();
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signed_transactions(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  signed_transactions_.MergeFrom(from.signed_transactions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedhead()) {
      mutable_signedhead()->::fantasybit::SignedBlockHeader::MergeFrom(from.signedhead());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  for (int i = 0; i < signed_transactions_size(); i++) {
    if (!this->signed_transactions(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    std::swap(signedhead_, other->signedhead_);
    signed_transactions_.Swap(&other->signed_transactions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveWire::kBlockFieldNumber;
const int LiveWire::kTransactionFieldNumber;
#endif  // !_MSC_VER

LiveWire::LiveWire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LiveWire::InitAsDefaultInstance() {
  block_ = const_cast< ::fantasybit::Block*>(&::fantasybit::Block::default_instance());
}

LiveWire::LiveWire(const LiveWire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LiveWire::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveWire::~LiveWire() {
  SharedDtor();
}

void LiveWire::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void LiveWire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveWire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveWire_descriptor_;
}

const LiveWire& LiveWire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

LiveWire* LiveWire::default_instance_ = NULL;

LiveWire* LiveWire::New() const {
  return new LiveWire;
}

void LiveWire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::fantasybit::Block::Clear();
    }
  }
  transaction_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LiveWire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Block block = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_transaction;
        break;
      }

      // repeated .fantasybit.SignedTransaction transaction = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_transaction;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LiveWire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.Block block = 10;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->block(), output);
  }

  // repeated .fantasybit.SignedTransaction transaction = 20;
  for (int i = 0; i < this->transaction_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->transaction(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LiveWire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.Block block = 10;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->block(), target);
  }

  // repeated .fantasybit.SignedTransaction transaction = 20;
  for (int i = 0; i < this->transaction_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->transaction(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LiveWire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.Block block = 10;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  // repeated .fantasybit.SignedTransaction transaction = 20;
  total_size += 2 * this->transaction_size();
  for (int i = 0; i < this->transaction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transaction(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveWire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LiveWire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveWire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveWire::MergeFrom(const LiveWire& from) {
  GOOGLE_CHECK_NE(&from, this);
  transaction_.MergeFrom(from.transaction_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::fantasybit::Block::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LiveWire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveWire::CopyFrom(const LiveWire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveWire::IsInitialized() const {

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  for (int i = 0; i < transaction_size(); i++) {
    if (!this->transaction(i).IsInitialized()) return false;
  }
  return true;
}

void LiveWire::Swap(LiveWire* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    transaction_.Swap(&other->transaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LiveWire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveWire_descriptor_;
  metadata.reflection = LiveWire_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_Type_descriptor_;
}
bool NodeRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeRequest_Type NodeRequest::HANDSHAKE;
const NodeRequest_Type NodeRequest::BLOCK_REQUEST;
const NodeRequest_Type NodeRequest::HIGHT_REQUEST;
const NodeRequest_Type NodeRequest::NAT_TEST;
const NodeRequest_Type NodeRequest::Type_MIN;
const NodeRequest_Type NodeRequest::Type_MAX;
const int NodeRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeRequest::kTypeFieldNumber;
const int NodeRequest::kMyipFieldNumber;
const int NodeRequest::kNumFieldNumber;
const int NodeRequest::kMyhostFieldNumber;
#endif  // !_MSC_VER

NodeRequest::NodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeRequest::InitAsDefaultInstance() {
}

NodeRequest::NodeRequest(const NodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  myip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  myhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRequest::~NodeRequest() {
  SharedDtor();
}

void NodeRequest::SharedDtor() {
  if (myip_ != &::google::protobuf::internal::kEmptyString) {
    delete myip_;
  }
  if (myhost_ != &::google::protobuf::internal::kEmptyString) {
    delete myhost_;
  }
  if (this != default_instance_) {
  }
}

void NodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_descriptor_;
}

const NodeRequest& NodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NodeRequest* NodeRequest::default_instance_ = NULL;

NodeRequest* NodeRequest::New() const {
  return new NodeRequest;
}

void NodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_myip()) {
      if (myip_ != &::google::protobuf::internal::kEmptyString) {
        myip_->clear();
      }
    }
    num_ = 0;
    if (has_myhost()) {
      if (myhost_ != &::google::protobuf::internal::kEmptyString) {
        myhost_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NodeRequest.Type type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NodeRequest_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NodeRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_myip;
        break;
      }

      // optional string myip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myip().data(), this->myip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_num;
        break;
      }

      // optional int32 num = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_myhost;
        break;
      }

      // optional string myhost = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myhost().data(), this->myhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string myip = 20;
  if (has_myip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myip().data(), this->myip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->myip(), output);
  }

  // optional int32 num = 30;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->num(), output);
  }

  // optional string myhost = 40;
  if (has_myhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myhost().data(), this->myhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->myhost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string myip = 20;
  if (has_myip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myip().data(), this->myip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->myip(), target);
  }

  // optional int32 num = 30;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->num(), target);
  }

  // optional string myhost = 40;
  if (has_myhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myhost().data(), this->myhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->myhost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.NodeRequest.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string myip = 20;
    if (has_myip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myip());
    }

    // optional int32 num = 30;
    if (has_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string myhost = 40;
    if (has_myhost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myhost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myip()) {
      set_myip(from.myip());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_myhost()) {
      set_myhost(from.myhost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {

  return true;
}

void NodeRequest::Swap(NodeRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myip_, other->myip_);
    std::swap(num_, other->num_);
    std::swap(myhost_, other->myhost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRequest_descriptor_;
  metadata.reflection = NodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeReply::kHightFieldNumber;
const int NodeReply::kIpsFieldNumber;
#endif  // !_MSC_VER

NodeReply::NodeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeReply::InitAsDefaultInstance() {
}

NodeReply::NodeReply(const NodeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeReply::SharedCtor() {
  _cached_size_ = 0;
  hight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeReply::~NodeReply() {
  SharedDtor();
}

void NodeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeReply_descriptor_;
}

const NodeReply& NodeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NodeReply* NodeReply::default_instance_ = NULL;

NodeReply* NodeReply::New() const {
  return new NodeReply;
}

void NodeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hight_ = 0;
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
          set_has_hight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        break;
      }

      // repeated string ips = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hight = 10;
  if (has_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hight(), output);
  }

  // repeated string ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ips(i).data(), this->ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hight = 10;
  if (has_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hight(), target);
  }

  // repeated string ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->ips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hight = 10;
    if (has_hight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hight());
    }

  }
  // repeated string ips = 20;
  total_size += 2 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeReply::MergeFrom(const NodeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hight()) {
      set_hight(from.hight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReply::CopyFrom(const NodeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {

  return true;
}

void NodeReply::Swap(NodeReply* other) {
  if (other != this) {
    std::swap(hight_, other->hight_);
    ips_.Swap(&other->ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeReply_descriptor_;
  metadata.reflection = NodeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyPlayerPoints::kSeasonFieldNumber;
const int FantasyPlayerPoints::kWeekFieldNumber;
const int FantasyPlayerPoints::kPlayeridFieldNumber;
const int FantasyPlayerPoints::kPointsFieldNumber;
const int FantasyPlayerPoints::kResultFieldNumber;
#endif  // !_MSC_VER

FantasyPlayerPoints::FantasyPlayerPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyPlayerPoints::InitAsDefaultInstance() {
}

FantasyPlayerPoints::FantasyPlayerPoints(const FantasyPlayerPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyPlayerPoints::SharedCtor() {
  _cached_size_ = 0;
  season_ = 0u;
  week_ = 0u;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  points_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyPlayerPoints::~FantasyPlayerPoints() {
  SharedDtor();
}

void FantasyPlayerPoints::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void FantasyPlayerPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayerPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyPlayerPoints_descriptor_;
}

const FantasyPlayerPoints& FantasyPlayerPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyPlayerPoints* FantasyPlayerPoints::default_instance_ = NULL;

FantasyPlayerPoints* FantasyPlayerPoints::New() const {
  return new FantasyPlayerPoints;
}

void FantasyPlayerPoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    season_ = 0u;
    week_ = 0u;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    points_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyPlayerPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_points;
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_result;
        break;
      }

      // optional float result = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyPlayerPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  // optional float result = 50;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyPlayerPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  // optional float result = 50;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyPlayerPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional float result = 50;
    if (has_result()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayerPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyPlayerPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyPlayerPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyPlayerPoints::MergeFrom(const FantasyPlayerPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyPlayerPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayerPoints::CopyFrom(const FantasyPlayerPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayerPoints::IsInitialized() const {

  return true;
}

void FantasyPlayerPoints::Swap(FantasyPlayerPoints* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    std::swap(playerid_, other->playerid_);
    std::swap(points_, other->points_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyPlayerPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyPlayerPoints_descriptor_;
  metadata.reflection = FantasyPlayerPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProjectionTrans::kFppFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProjectionTrans::kProjTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
  ProjectionTrans::proj_trans(kProjTransFieldNumber, ::fantasybit::ProjectionTrans::default_instance());
ProjectionTrans::ProjectionTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProjectionTrans::InitAsDefaultInstance() {
  fpp_ = const_cast< ::fantasybit::FantasyPlayerPoints*>(&::fantasybit::FantasyPlayerPoints::default_instance());
}

ProjectionTrans::ProjectionTrans(const ProjectionTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProjectionTrans::SharedCtor() {
  _cached_size_ = 0;
  fpp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectionTrans::~ProjectionTrans() {
  SharedDtor();
}

void ProjectionTrans::SharedDtor() {
  if (this != default_instance_) {
    delete fpp_;
  }
}

void ProjectionTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectionTrans_descriptor_;
}

const ProjectionTrans& ProjectionTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ProjectionTrans* ProjectionTrans::default_instance_ = NULL;

ProjectionTrans* ProjectionTrans::New() const {
  return new ProjectionTrans;
}

void ProjectionTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fpp()) {
      if (fpp_ != NULL) fpp_->::fantasybit::FantasyPlayerPoints::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProjectionTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.FantasyPlayerPoints fpp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjectionTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.FantasyPlayerPoints fpp = 10;
  if (has_fpp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fpp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProjectionTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.FantasyPlayerPoints fpp = 10;
  if (has_fpp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fpp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProjectionTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.FantasyPlayerPoints fpp = 10;
    if (has_fpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProjectionTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProjectionTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjectionTrans::MergeFrom(const ProjectionTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fpp()) {
      mutable_fpp()->::fantasybit::FantasyPlayerPoints::MergeFrom(from.fpp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProjectionTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTrans::CopyFrom(const ProjectionTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTrans::IsInitialized() const {

  return true;
}

void ProjectionTrans::Swap(ProjectionTrans* other) {
  if (other != this) {
    std::swap(fpp_, other->fpp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProjectionTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectionTrans_descriptor_;
  metadata.reflection = ProjectionTrans_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Data_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Type_descriptor_;
}
bool Data_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Data_Type Data::SCHEDULE;
const Data_Type Data::PLAYER;
const Data_Type Data::TEAM;
const Data_Type Data::RESULT;
const Data_Type Data::Type_MIN;
const Data_Type Data::Type_MAX;
const int Data::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Data::kVersionFieldNumber;
const int Data::kTypeFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }

      // optional .fantasybit.Data.Type type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::Data_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::Data_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.Data.Type type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kPlayeridFieldNumber;
const int PlayerData::kTeamidFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PlayerData::kPlayerDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
  PlayerData::player_data(kPlayerDataFieldNumber, ::fantasybit::PlayerData::default_instance());
PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerData::InitAsDefaultInstance() {
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (this != default_instance_) {
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamid;
        break;
      }

      // optional string teamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->playerid(), output);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamData::kTeamidFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TeamData::kTeamDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TeamData >, 11, false >
  TeamData::team_data(kTeamDataFieldNumber, ::fantasybit::TeamData::default_instance());
TeamData::TeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamData::InitAsDefaultInstance() {
}

TeamData::TeamData(const TeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamData::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamData::~TeamData() {
  SharedDtor();
}

void TeamData::SharedDtor() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (this != default_instance_) {
  }
}

void TeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamData_descriptor_;
}

const TeamData& TeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TeamData* TeamData::default_instance_ = NULL;

TeamData* TeamData::New() const {
  return new TeamData;
}

void TeamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string teamid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string teamid = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamData::MergeFrom(const TeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamData::CopyFrom(const TeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamData::IsInitialized() const {

  return true;
}

void TeamData::Swap(TeamData* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamData_descriptor_;
  metadata.reflection = TeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultData::kFppFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ResultData::kResultDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
  ResultData::result_data(kResultDataFieldNumber, ::fantasybit::ResultData::default_instance());
ResultData::ResultData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultData::InitAsDefaultInstance() {
  fpp_ = const_cast< ::fantasybit::FantasyPlayerPoints*>(&::fantasybit::FantasyPlayerPoints::default_instance());
}

ResultData::ResultData(const ResultData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultData::SharedCtor() {
  _cached_size_ = 0;
  fpp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultData::~ResultData() {
  SharedDtor();
}

void ResultData::SharedDtor() {
  if (this != default_instance_) {
    delete fpp_;
  }
}

void ResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultData_descriptor_;
}

const ResultData& ResultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ResultData* ResultData::default_instance_ = NULL;

ResultData* ResultData::New() const {
  return new ResultData;
}

void ResultData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fpp()) {
      if (fpp_ != NULL) fpp_->::fantasybit::FantasyPlayerPoints::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.FantasyPlayerPoints fpp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.FantasyPlayerPoints fpp = 10;
  if (has_fpp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->fpp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.FantasyPlayerPoints fpp = 10;
  if (has_fpp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->fpp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.FantasyPlayerPoints fpp = 10;
    if (has_fpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fpp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultData::MergeFrom(const ResultData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fpp()) {
      mutable_fpp()->::fantasybit::FantasyPlayerPoints::MergeFrom(from.fpp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultData::CopyFrom(const ResultData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultData::IsInitialized() const {

  return true;
}

void ResultData::Swap(ResultData* other) {
  if (other != this) {
    std::swap(fpp_, other->fpp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultData_descriptor_;
  metadata.reflection = ResultData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataTransition_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransition_Type_descriptor_;
}
bool DataTransition_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataTransition_Type DataTransition::ROSTER;
const DataTransition_Type DataTransition::SEASONSTART;
const DataTransition_Type DataTransition::SEASONEND;
const DataTransition_Type DataTransition::DRAFTOVER;
const DataTransition_Type DataTransition::HEARTBEAT;
const DataTransition_Type DataTransition::GAMESTART;
const DataTransition_Type DataTransition::WEEKOVER;
const DataTransition_Type DataTransition::Type_MIN;
const DataTransition_Type DataTransition::Type_MAX;
const int DataTransition::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataTransition::kTypeFieldNumber;
const int DataTransition::kSeasonFieldNumber;
const int DataTransition::kWeekFieldNumber;
const int DataTransition::kTeamidFieldNumber;
const int DataTransition::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int DataTransition::kDataTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
  DataTransition::data_trans(kDataTransFieldNumber, ::fantasybit::DataTransition::default_instance());
DataTransition::DataTransition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataTransition::InitAsDefaultInstance() {
}

DataTransition::DataTransition(const DataTransition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataTransition::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTransition::~DataTransition() {
  SharedDtor();
}

void DataTransition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransition_descriptor_;
}

const DataTransition& DataTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

DataTransition* DataTransition::default_instance_ = NULL;

DataTransition* DataTransition::New() const {
  return new DataTransition;
}

void DataTransition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    season_ = 0u;
    week_ = 0u;
  }
  teamid_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.DataTransition.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::DataTransition_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::DataTransition_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_teamid;
        break;
      }

      // repeated string teamid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid(this->teamid_size() - 1).data(),
            this->teamid(this->teamid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_teamid;
        if (input->ExpectTag(322)) goto parse_data;
        break;
      }

      // repeated .fantasybit.Data data = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.DataTransition.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // repeated string teamid = 30;
  for (int i = 0; i < this->teamid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->teamid(i).data(), this->teamid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->teamid(i), output);
  }

  // repeated .fantasybit.Data data = 40;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.DataTransition.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // repeated string teamid = 30;
  for (int i = 0; i < this->teamid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid(i).data(), this->teamid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->teamid(i), target);
  }

  // repeated .fantasybit.Data data = 40;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.DataTransition.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  // repeated string teamid = 30;
  total_size += 2 * this->teamid_size();
  for (int i = 0; i < this->teamid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->teamid(i));
  }

  // repeated .fantasybit.Data data = 40;
  total_size += 2 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTransition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataTransition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataTransition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTransition::MergeFrom(const DataTransition& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamid_.MergeFrom(from.teamid_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransition::CopyFrom(const DataTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransition::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void DataTransition::Swap(DataTransition* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(season_, other->season_);
    std::swap(week_, other->week_);
    teamid_.Swap(&other->teamid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTransition_descriptor_;
  metadata.reflection = DataTransition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GlobalState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalState_State_descriptor_;
}
bool GlobalState_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlobalState_State GlobalState::PREDRAFT;
const GlobalState_State GlobalState::PRESEASON;
const GlobalState_State GlobalState::ROSTER53MAN;
const GlobalState_State GlobalState::INSEASON;
const GlobalState_State GlobalState::State_MIN;
const GlobalState_State GlobalState::State_MAX;
const int GlobalState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GlobalState::kStateFieldNumber;
const int GlobalState::kSeasonFieldNumber;
#endif  // !_MSC_VER

GlobalState::GlobalState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalState::InitAsDefaultInstance() {
}

GlobalState::GlobalState(const GlobalState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  season_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalState::~GlobalState() {
  SharedDtor();
}

void GlobalState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalState_descriptor_;
}

const GlobalState& GlobalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

GlobalState* GlobalState::default_instance_ = NULL;

GlobalState* GlobalState::New() const {
  return new GlobalState;
}

void GlobalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    season_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GlobalState.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::GlobalState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::GlobalState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.GlobalState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.GlobalState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.GlobalState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalState::MergeFrom(const GlobalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalState::CopyFrom(const GlobalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalState::IsInitialized() const {

  return true;
}

void GlobalState::Swap(GlobalState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalState_descriptor_;
  metadata.reflection = GlobalState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamState_State_descriptor_;
}
bool TeamState_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TeamState_State TeamState::PREGAME;
const TeamState_State TeamState::INGAME;
const TeamState_State TeamState::State_MIN;
const TeamState_State TeamState::State_MAX;
const int TeamState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TeamState::kStateFieldNumber;
const int TeamState::kWeekFieldNumber;
const int TeamState::kTeamidFieldNumber;
#endif  // !_MSC_VER

TeamState::TeamState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamState::InitAsDefaultInstance() {
}

TeamState::TeamState(const TeamState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  week_ = 0u;
  teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamState::~TeamState() {
  SharedDtor();
}

void TeamState::SharedDtor() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (this != default_instance_) {
  }
}

void TeamState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamState_descriptor_;
}

const TeamState& TeamState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TeamState* TeamState::default_instance_ = NULL;

TeamState* TeamState::New() const {
  return new TeamState;
}

void TeamState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    week_ = 0u;
    if (has_teamid()) {
      if (teamid_ != &::google::protobuf::internal::kEmptyString) {
        teamid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TeamState.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TeamState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::TeamState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_week;
        break;
      }

      // optional uint32 week = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamid;
        break;
      }

      // optional string teamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.TeamState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 week = 10;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week(), output);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.TeamState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 week = 10;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week(), target);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.TeamState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamState::MergeFrom(const TeamState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamState::CopyFrom(const TeamState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamState::IsInitialized() const {

  return true;
}

void TeamState::Swap(TeamState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(week_, other->week_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamState_descriptor_;
  metadata.reflection = TeamState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaData_Type_descriptor_;
}
bool DeltaData_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeltaData_Type DeltaData::SNAPSHOT;
const DeltaData_Type DeltaData::HEARTBEAT;
const DeltaData_Type DeltaData::Type_MIN;
const DeltaData_Type DeltaData::Type_MAX;
const int DeltaData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeltaData::kTypeFieldNumber;
const int DeltaData::kMyfantasynameFieldNumber;
const int DeltaData::kGlobalstateFieldNumber;
const int DeltaData::kTeamstatesFieldNumber;
const int DeltaData::kDatasFieldNumber;
const int DeltaData::kPlayersFieldNumber;
#endif  // !_MSC_VER

DeltaData::DeltaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeltaData::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
  globalstate_ = const_cast< ::fantasybit::GlobalState*>(&::fantasybit::GlobalState::default_instance());
}

DeltaData::DeltaData(const DeltaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeltaData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  myfantasyname_ = NULL;
  globalstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaData::~DeltaData() {
  SharedDtor();
}

void DeltaData::SharedDtor() {
  if (this != default_instance_) {
    delete myfantasyname_;
    delete globalstate_;
  }
}

void DeltaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaData_descriptor_;
}

const DeltaData& DeltaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

DeltaData* DeltaData::default_instance_ = NULL;

DeltaData* DeltaData::New() const {
  return new DeltaData;
}

void DeltaData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
    if (has_globalstate()) {
      if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
    }
  }
  teamstates_.Clear();
  datas_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeltaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.DeltaData.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::DeltaData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::DeltaData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_globalstate;
        break;
      }

      // optional .fantasybit.GlobalState globalstate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globalstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamstates;
        break;
      }

      // repeated .fantasybit.TeamState teamstates = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamstates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamstates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_teamstates;
        if (input->ExpectTag(242)) goto parse_datas;
        break;
      }

      // repeated .fantasybit.Data datas = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_datas;
        if (input->ExpectTag(322)) goto parse_players;
        break;
      }

      // repeated .fantasybit.FantasyPlayer players = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeltaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.DeltaData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(), output);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->globalstate(), output);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (int i = 0; i < this->teamstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->teamstates(i), output);
  }

  // repeated .fantasybit.Data datas = 30;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->datas(i), output);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->players(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeltaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.DeltaData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(), target);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->globalstate(), target);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (int i = 0; i < this->teamstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->teamstates(i), target);
  }

  // repeated .fantasybit.Data datas = 30;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->datas(i), target);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->players(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeltaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.DeltaData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfantasyname());
    }

    // optional .fantasybit.GlobalState globalstate = 10;
    if (has_globalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->globalstate());
    }

  }
  // repeated .fantasybit.TeamState teamstates = 20;
  total_size += 2 * this->teamstates_size();
  for (int i = 0; i < this->teamstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamstates(i));
  }

  // repeated .fantasybit.Data datas = 30;
  total_size += 2 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeltaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeltaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeltaData::MergeFrom(const DeltaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamstates_.MergeFrom(from.teamstates_);
  datas_.MergeFrom(from.datas_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
    if (from.has_globalstate()) {
      mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from.globalstate());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeltaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaData::CopyFrom(const DeltaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaData::IsInitialized() const {

  for (int i = 0; i < datas_size(); i++) {
    if (!this->datas(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DeltaData::Swap(DeltaData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(myfantasyname_, other->myfantasyname_);
    std::swap(globalstate_, other->globalstate_);
    teamstates_.Swap(&other->teamstates_);
    datas_.Swap(&other->datas_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata DeltaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeltaData_descriptor_;
  metadata.reflection = DeltaData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
