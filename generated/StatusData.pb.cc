// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatusData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StatusData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* PlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameStatus_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TeamDepth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDepth_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalState_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerGameStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_StatusData_2eproto() {
  protobuf_AddDesc_StatusData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StatusData.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerStatus_descriptor_ = file->message_type(0);
  static const int PlayerStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, status_),
  };
  PlayerStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerStatus_descriptor_,
      PlayerStatus::default_instance_,
      PlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStatus, _internal_metadata_),
      -1);
  PlayerStatus_Status_descriptor_ = PlayerStatus_descriptor_->enum_type(0);
  GameStatus_descriptor_ = file->message_type(1);
  static const int GameStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, datetime_),
  };
  GameStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameStatus_descriptor_,
      GameStatus::default_instance_,
      GameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatus, _internal_metadata_),
      -1);
  GameStatus_Status_descriptor_ = GameStatus_descriptor_->enum_type(0);
  TeamDepth_descriptor_ = file->message_type(2);
  static const int TeamDepth_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, qb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, rb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, wr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, te_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, k_),
  };
  TeamDepth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamDepth_descriptor_,
      TeamDepth::default_instance_,
      TeamDepth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, _has_bits_[0]),
      -1,
      -1,
      sizeof(TeamDepth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDepth, _internal_metadata_),
      -1);
  GlobalState_descriptor_ = file->message_type(3);
  static const int GlobalState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, week_),
  };
  GlobalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GlobalState_descriptor_,
      GlobalState::default_instance_,
      GlobalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, _has_bits_[0]),
      -1,
      -1,
      sizeof(GlobalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalState, _internal_metadata_),
      -1);
  GlobalState_State_descriptor_ = GlobalState_descriptor_->enum_type(0);
  PlayerGameStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StatusData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerStatus_descriptor_, &PlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameStatus_descriptor_, &GameStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamDepth_descriptor_, &TeamDepth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GlobalState_descriptor_, &GlobalState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StatusData_2eproto() {
  delete PlayerStatus::default_instance_;
  delete PlayerStatus_reflection_;
  delete GameStatus::default_instance_;
  delete GameStatus_reflection_;
  delete TeamDepth::default_instance_;
  delete TeamDepth_reflection_;
  delete GlobalState::default_instance_;
  delete GlobalState_reflection_;
}

void protobuf_AddDesc_StatusData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020StatusData.proto\022\nfantasybit\"\206\001\n\014Playe"
    "rStatus\022\016\n\006teamid\030\024 \001(\t\022/\n\006status\030\036 \001(\0162"
    "\037.fantasybit.PlayerStatus.Status\"5\n\006Stat"
    "us\022\n\n\006ACTIVE\020\000\022\014\n\010INACTIVE\020\001\022\t\n\005OTHER\020\003\022"
    "\006\n\002FA\020\004\"\231\001\n\nGameStatus\022-\n\006status\030\n \001(\0162\035"
    ".fantasybit.GameStatus.Status\022\020\n\010datetim"
    "e\030\024 \001(\r\"J\n\006Status\022\r\n\tSCHEDULED\020\000\022\013\n\007PREG"
    "AME\020\002\022\n\n\006INGAME\020\003\022\014\n\010POSTGAME\020\005\022\n\n\006CLOSE"
    "D\020\004\"F\n\tTeamDepth\022\n\n\002qb\030\n \003(\t\022\n\n\002rb\030\024 \003(\t"
    "\022\n\n\002wr\030\036 \003(\t\022\n\n\002te\030( \003(\t\022\t\n\001k\0302 \003(\t\"\177\n\013G"
    "lobalState\022,\n\005state\030\001 \001(\0162\035.fantasybit.G"
    "lobalState.State\022\016\n\006season\030\n \001(\r\022\014\n\004week"
    "\030\024 \001(\r\"$\n\005State\022\r\n\tOFFSEASON\020\n\022\014\n\010INSEAS"
    "ON\020\036*+\n\020PlayerGameStatus\022\007\n\003OUT\020\000\022\006\n\002IN\020"
    "\001\022\006\n\002NA\020\002", 569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StatusData.proto", &protobuf_RegisterTypes);
  PlayerStatus::default_instance_ = new PlayerStatus();
  GameStatus::default_instance_ = new GameStatus();
  TeamDepth::default_instance_ = new TeamDepth();
  GlobalState::default_instance_ = new GlobalState();
  PlayerStatus::default_instance_->InitAsDefaultInstance();
  GameStatus::default_instance_->InitAsDefaultInstance();
  TeamDepth::default_instance_->InitAsDefaultInstance();
  GlobalState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StatusData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StatusData_2eproto {
  StaticDescriptorInitializer_StatusData_2eproto() {
    protobuf_AddDesc_StatusData_2eproto();
  }
} static_descriptor_initializer_StatusData_2eproto_;
const ::google::protobuf::EnumDescriptor* PlayerGameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGameStatus_descriptor_;
}
bool PlayerGameStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStatus_Status_descriptor_;
}
bool PlayerStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerStatus_Status PlayerStatus::ACTIVE;
const PlayerStatus_Status PlayerStatus::INACTIVE;
const PlayerStatus_Status PlayerStatus::OTHER;
const PlayerStatus_Status PlayerStatus::FA;
const PlayerStatus_Status PlayerStatus::Status_MIN;
const PlayerStatus_Status PlayerStatus::Status_MAX;
const int PlayerStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerStatus::kTeamidFieldNumber;
const int PlayerStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

PlayerStatus::PlayerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerStatus)
}

void PlayerStatus::InitAsDefaultInstance() {
}

PlayerStatus::PlayerStatus(const PlayerStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerStatus)
}

void PlayerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStatus::~PlayerStatus() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerStatus)
  SharedDtor();
}

void PlayerStatus::SharedDtor() {
  teamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStatus_descriptor_;
}

const PlayerStatus& PlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

PlayerStatus* PlayerStatus::default_instance_ = NULL;

PlayerStatus* PlayerStatus::New(::google::protobuf::Arena* arena) const {
  PlayerStatus* n = new PlayerStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerStatus::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_teamid()) {
      teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string teamid = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerStatus.teamid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_status;
        break;
      }

      // optional .fantasybit.PlayerStatus.Status status = 30;
      case 30: {
        if (tag == 240) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::PlayerStatus_Status_IsValid(value)) {
            set_status(static_cast< ::fantasybit::PlayerStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerStatus)
  return false;
#undef DO_
}

void PlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerStatus)
  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerStatus.teamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->teamid(), output);
  }

  // optional .fantasybit.PlayerStatus.Status status = 30;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerStatus)
}

::google::protobuf::uint8* PlayerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerStatus)
  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerStatus.teamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  // optional .fantasybit.PlayerStatus.Status status = 30;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerStatus)
  return target;
}

int PlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

    // optional .fantasybit.PlayerStatus.Status status = 30;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerStatus::MergeFrom(const PlayerStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_has_teamid();
      teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStatus::CopyFrom(const PlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStatus::IsInitialized() const {

  return true;
}

void PlayerStatus::Swap(PlayerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerStatus::InternalSwap(PlayerStatus* other) {
  teamid_.Swap(&other->teamid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStatus_descriptor_;
  metadata.reflection = PlayerStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerStatus

// optional string teamid = 20;
bool PlayerStatus::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerStatus::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerStatus::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerStatus::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
 const ::std::string& PlayerStatus::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerStatus.teamid)
  return teamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerStatus::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerStatus.teamid)
}
 void PlayerStatus::set_teamid(const char* value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerStatus.teamid)
}
 void PlayerStatus::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerStatus.teamid)
}
 ::std::string* PlayerStatus::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerStatus.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerStatus::release_teamid() {
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerStatus::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerStatus.teamid)
}

// optional .fantasybit.PlayerStatus.Status status = 30;
bool PlayerStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::fantasybit::PlayerStatus_Status PlayerStatus::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerStatus.status)
  return static_cast< ::fantasybit::PlayerStatus_Status >(status_);
}
 void PlayerStatus::set_status(::fantasybit::PlayerStatus_Status value) {
  assert(::fantasybit::PlayerStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GameStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_Status_descriptor_;
}
bool GameStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameStatus_Status GameStatus::SCHEDULED;
const GameStatus_Status GameStatus::PREGAME;
const GameStatus_Status GameStatus::INGAME;
const GameStatus_Status GameStatus::POSTGAME;
const GameStatus_Status GameStatus::CLOSED;
const GameStatus_Status GameStatus::Status_MIN;
const GameStatus_Status GameStatus::Status_MAX;
const int GameStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameStatus::kStatusFieldNumber;
const int GameStatus::kDatetimeFieldNumber;
#endif  // !_MSC_VER

GameStatus::GameStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameStatus)
}

void GameStatus::InitAsDefaultInstance() {
}

GameStatus::GameStatus(const GameStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameStatus)
}

void GameStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  datetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatus::~GameStatus() {
  // @@protoc_insertion_point(destructor:fantasybit.GameStatus)
  SharedDtor();
}

void GameStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_descriptor_;
}

const GameStatus& GameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

GameStatus* GameStatus::default_instance_ = NULL;

GameStatus* GameStatus::New(::google::protobuf::Arena* arena) const {
  GameStatus* n = new GameStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, datetime_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GameStatus.Status status = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::GameStatus_Status_IsValid(value)) {
            set_status(static_cast< ::fantasybit::GameStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_datetime;
        break;
      }

      // optional uint32 datetime = 20;
      case 20: {
        if (tag == 160) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameStatus)
  return false;
#undef DO_
}

void GameStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameStatus)
  // optional .fantasybit.GameStatus.Status status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->status(), output);
  }

  // optional uint32 datetime = 20;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameStatus)
}

::google::protobuf::uint8* GameStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameStatus)
  // optional .fantasybit.GameStatus.Status status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->status(), target);
  }

  // optional uint32 datetime = 20;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameStatus)
  return target;
}

int GameStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.GameStatus.Status status = 10;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 datetime = 20;
    if (has_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datetime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatus::MergeFrom(const GameStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatus::CopyFrom(const GameStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatus::IsInitialized() const {

  return true;
}

void GameStatus::Swap(GameStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStatus::InternalSwap(GameStatus* other) {
  std::swap(status_, other->status_);
  std::swap(datetime_, other->datetime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatus_descriptor_;
  metadata.reflection = GameStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameStatus

// optional .fantasybit.GameStatus.Status status = 10;
bool GameStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void GameStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::fantasybit::GameStatus_Status GameStatus::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatus.status)
  return static_cast< ::fantasybit::GameStatus_Status >(status_);
}
 void GameStatus::set_status(::fantasybit::GameStatus_Status value) {
  assert(::fantasybit::GameStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameStatus.status)
}

// optional uint32 datetime = 20;
bool GameStatus::has_datetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameStatus::set_has_datetime() {
  _has_bits_[0] |= 0x00000002u;
}
void GameStatus::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameStatus::clear_datetime() {
  datetime_ = 0u;
  clear_has_datetime();
}
 ::google::protobuf::uint32 GameStatus::datetime() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameStatus.datetime)
  return datetime_;
}
 void GameStatus::set_datetime(::google::protobuf::uint32 value) {
  set_has_datetime();
  datetime_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameStatus.datetime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TeamDepth::kQbFieldNumber;
const int TeamDepth::kRbFieldNumber;
const int TeamDepth::kWrFieldNumber;
const int TeamDepth::kTeFieldNumber;
const int TeamDepth::kKFieldNumber;
#endif  // !_MSC_VER

TeamDepth::TeamDepth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TeamDepth)
}

void TeamDepth::InitAsDefaultInstance() {
}

TeamDepth::TeamDepth(const TeamDepth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamDepth)
}

void TeamDepth::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDepth::~TeamDepth() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamDepth)
  SharedDtor();
}

void TeamDepth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDepth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDepth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDepth_descriptor_;
}

const TeamDepth& TeamDepth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

TeamDepth* TeamDepth::default_instance_ = NULL;

TeamDepth* TeamDepth::New(::google::protobuf::Arena* arena) const {
  TeamDepth* n = new TeamDepth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamDepth::Clear() {
  qb_.Clear();
  rb_.Clear();
  wr_.Clear();
  te_.Clear();
  k_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TeamDepth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TeamDepth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string qb = 10;
      case 10: {
        if (tag == 82) {
         parse_qb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_qb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qb(this->qb_size() - 1).data(),
            this->qb(this->qb_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamDepth.qb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_qb;
        if (input->ExpectTag(162)) goto parse_rb;
        break;
      }

      // repeated string rb = 20;
      case 20: {
        if (tag == 162) {
         parse_rb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rb(this->rb_size() - 1).data(),
            this->rb(this->rb_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamDepth.rb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_rb;
        if (input->ExpectTag(242)) goto parse_wr;
        break;
      }

      // repeated string wr = 30;
      case 30: {
        if (tag == 242) {
         parse_wr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wr(this->wr_size() - 1).data(),
            this->wr(this->wr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamDepth.wr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_wr;
        if (input->ExpectTag(322)) goto parse_te;
        break;
      }

      // repeated string te = 40;
      case 40: {
        if (tag == 322) {
         parse_te:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_te()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->te(this->te_size() - 1).data(),
            this->te(this->te_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamDepth.te");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_te;
        if (input->ExpectTag(402)) goto parse_k;
        break;
      }

      // repeated string k = 50;
      case 50: {
        if (tag == 402) {
         parse_k:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_k()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k(this->k_size() - 1).data(),
            this->k(this->k_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamDepth.k");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_k;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TeamDepth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TeamDepth)
  return false;
#undef DO_
}

void TeamDepth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TeamDepth)
  // repeated string qb = 10;
  for (int i = 0; i < this->qb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qb(i).data(), this->qb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.qb");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->qb(i), output);
  }

  // repeated string rb = 20;
  for (int i = 0; i < this->rb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rb(i).data(), this->rb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.rb");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->rb(i), output);
  }

  // repeated string wr = 30;
  for (int i = 0; i < this->wr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wr(i).data(), this->wr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.wr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->wr(i), output);
  }

  // repeated string te = 40;
  for (int i = 0; i < this->te_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->te(i).data(), this->te(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.te");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->te(i), output);
  }

  // repeated string k = 50;
  for (int i = 0; i < this->k_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k(i).data(), this->k(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.k");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->k(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TeamDepth)
}

::google::protobuf::uint8* TeamDepth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamDepth)
  // repeated string qb = 10;
  for (int i = 0; i < this->qb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qb(i).data(), this->qb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.qb");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->qb(i), target);
  }

  // repeated string rb = 20;
  for (int i = 0; i < this->rb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rb(i).data(), this->rb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.rb");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->rb(i), target);
  }

  // repeated string wr = 30;
  for (int i = 0; i < this->wr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wr(i).data(), this->wr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.wr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(30, this->wr(i), target);
  }

  // repeated string te = 40;
  for (int i = 0; i < this->te_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->te(i).data(), this->te(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.te");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(40, this->te(i), target);
  }

  // repeated string k = 50;
  for (int i = 0; i < this->k_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k(i).data(), this->k(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamDepth.k");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(50, this->k(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamDepth)
  return target;
}

int TeamDepth::ByteSize() const {
  int total_size = 0;

  // repeated string qb = 10;
  total_size += 1 * this->qb_size();
  for (int i = 0; i < this->qb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->qb(i));
  }

  // repeated string rb = 20;
  total_size += 2 * this->rb_size();
  for (int i = 0; i < this->rb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rb(i));
  }

  // repeated string wr = 30;
  total_size += 2 * this->wr_size();
  for (int i = 0; i < this->wr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wr(i));
  }

  // repeated string te = 40;
  total_size += 2 * this->te_size();
  for (int i = 0; i < this->te_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->te(i));
  }

  // repeated string k = 50;
  total_size += 2 * this->k_size();
  for (int i = 0; i < this->k_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->k(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDepth::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamDepth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamDepth>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDepth::MergeFrom(const TeamDepth& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  qb_.MergeFrom(from.qb_);
  rb_.MergeFrom(from.rb_);
  wr_.MergeFrom(from.wr_);
  te_.MergeFrom(from.te_);
  k_.MergeFrom(from.k_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TeamDepth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDepth::CopyFrom(const TeamDepth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDepth::IsInitialized() const {

  return true;
}

void TeamDepth::Swap(TeamDepth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamDepth::InternalSwap(TeamDepth* other) {
  qb_.UnsafeArenaSwap(&other->qb_);
  rb_.UnsafeArenaSwap(&other->rb_);
  wr_.UnsafeArenaSwap(&other->wr_);
  te_.UnsafeArenaSwap(&other->te_);
  k_.UnsafeArenaSwap(&other->k_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamDepth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDepth_descriptor_;
  metadata.reflection = TeamDepth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamDepth

// repeated string qb = 10;
int TeamDepth::qb_size() const {
  return qb_.size();
}
void TeamDepth::clear_qb() {
  qb_.Clear();
}
 const ::std::string& TeamDepth::qb(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamDepth.qb)
  return qb_.Get(index);
}
 ::std::string* TeamDepth::mutable_qb(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamDepth.qb)
  return qb_.Mutable(index);
}
 void TeamDepth::set_qb(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.TeamDepth.qb)
  qb_.Mutable(index)->assign(value);
}
 void TeamDepth::set_qb(int index, const char* value) {
  qb_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamDepth.qb)
}
 void TeamDepth::set_qb(int index, const char* value, size_t size) {
  qb_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamDepth.qb)
}
 ::std::string* TeamDepth::add_qb() {
  return qb_.Add();
}
 void TeamDepth::add_qb(const ::std::string& value) {
  qb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.TeamDepth.qb)
}
 void TeamDepth::add_qb(const char* value) {
  qb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.TeamDepth.qb)
}
 void TeamDepth::add_qb(const char* value, size_t size) {
  qb_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.TeamDepth.qb)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TeamDepth::qb() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamDepth.qb)
  return qb_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TeamDepth::mutable_qb() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamDepth.qb)
  return &qb_;
}

// repeated string rb = 20;
int TeamDepth::rb_size() const {
  return rb_.size();
}
void TeamDepth::clear_rb() {
  rb_.Clear();
}
 const ::std::string& TeamDepth::rb(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamDepth.rb)
  return rb_.Get(index);
}
 ::std::string* TeamDepth::mutable_rb(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamDepth.rb)
  return rb_.Mutable(index);
}
 void TeamDepth::set_rb(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.TeamDepth.rb)
  rb_.Mutable(index)->assign(value);
}
 void TeamDepth::set_rb(int index, const char* value) {
  rb_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamDepth.rb)
}
 void TeamDepth::set_rb(int index, const char* value, size_t size) {
  rb_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamDepth.rb)
}
 ::std::string* TeamDepth::add_rb() {
  return rb_.Add();
}
 void TeamDepth::add_rb(const ::std::string& value) {
  rb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.TeamDepth.rb)
}
 void TeamDepth::add_rb(const char* value) {
  rb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.TeamDepth.rb)
}
 void TeamDepth::add_rb(const char* value, size_t size) {
  rb_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.TeamDepth.rb)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TeamDepth::rb() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamDepth.rb)
  return rb_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TeamDepth::mutable_rb() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamDepth.rb)
  return &rb_;
}

// repeated string wr = 30;
int TeamDepth::wr_size() const {
  return wr_.size();
}
void TeamDepth::clear_wr() {
  wr_.Clear();
}
 const ::std::string& TeamDepth::wr(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamDepth.wr)
  return wr_.Get(index);
}
 ::std::string* TeamDepth::mutable_wr(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamDepth.wr)
  return wr_.Mutable(index);
}
 void TeamDepth::set_wr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.TeamDepth.wr)
  wr_.Mutable(index)->assign(value);
}
 void TeamDepth::set_wr(int index, const char* value) {
  wr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamDepth.wr)
}
 void TeamDepth::set_wr(int index, const char* value, size_t size) {
  wr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamDepth.wr)
}
 ::std::string* TeamDepth::add_wr() {
  return wr_.Add();
}
 void TeamDepth::add_wr(const ::std::string& value) {
  wr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.TeamDepth.wr)
}
 void TeamDepth::add_wr(const char* value) {
  wr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.TeamDepth.wr)
}
 void TeamDepth::add_wr(const char* value, size_t size) {
  wr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.TeamDepth.wr)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TeamDepth::wr() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamDepth.wr)
  return wr_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TeamDepth::mutable_wr() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamDepth.wr)
  return &wr_;
}

// repeated string te = 40;
int TeamDepth::te_size() const {
  return te_.size();
}
void TeamDepth::clear_te() {
  te_.Clear();
}
 const ::std::string& TeamDepth::te(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamDepth.te)
  return te_.Get(index);
}
 ::std::string* TeamDepth::mutable_te(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamDepth.te)
  return te_.Mutable(index);
}
 void TeamDepth::set_te(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.TeamDepth.te)
  te_.Mutable(index)->assign(value);
}
 void TeamDepth::set_te(int index, const char* value) {
  te_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamDepth.te)
}
 void TeamDepth::set_te(int index, const char* value, size_t size) {
  te_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamDepth.te)
}
 ::std::string* TeamDepth::add_te() {
  return te_.Add();
}
 void TeamDepth::add_te(const ::std::string& value) {
  te_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.TeamDepth.te)
}
 void TeamDepth::add_te(const char* value) {
  te_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.TeamDepth.te)
}
 void TeamDepth::add_te(const char* value, size_t size) {
  te_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.TeamDepth.te)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TeamDepth::te() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamDepth.te)
  return te_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TeamDepth::mutable_te() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamDepth.te)
  return &te_;
}

// repeated string k = 50;
int TeamDepth::k_size() const {
  return k_.size();
}
void TeamDepth::clear_k() {
  k_.Clear();
}
 const ::std::string& TeamDepth::k(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamDepth.k)
  return k_.Get(index);
}
 ::std::string* TeamDepth::mutable_k(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamDepth.k)
  return k_.Mutable(index);
}
 void TeamDepth::set_k(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.TeamDepth.k)
  k_.Mutable(index)->assign(value);
}
 void TeamDepth::set_k(int index, const char* value) {
  k_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamDepth.k)
}
 void TeamDepth::set_k(int index, const char* value, size_t size) {
  k_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamDepth.k)
}
 ::std::string* TeamDepth::add_k() {
  return k_.Add();
}
 void TeamDepth::add_k(const ::std::string& value) {
  k_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.TeamDepth.k)
}
 void TeamDepth::add_k(const char* value) {
  k_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.TeamDepth.k)
}
 void TeamDepth::add_k(const char* value, size_t size) {
  k_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.TeamDepth.k)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TeamDepth::k() const {
  // @@protoc_insertion_point(field_list:fantasybit.TeamDepth.k)
  return k_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TeamDepth::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.TeamDepth.k)
  return &k_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GlobalState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalState_State_descriptor_;
}
bool GlobalState_State_IsValid(int value) {
  switch(value) {
    case 10:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlobalState_State GlobalState::OFFSEASON;
const GlobalState_State GlobalState::INSEASON;
const GlobalState_State GlobalState::State_MIN;
const GlobalState_State GlobalState::State_MAX;
const int GlobalState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GlobalState::kStateFieldNumber;
const int GlobalState::kSeasonFieldNumber;
const int GlobalState::kWeekFieldNumber;
#endif  // !_MSC_VER

GlobalState::GlobalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GlobalState)
}

void GlobalState::InitAsDefaultInstance() {
}

GlobalState::GlobalState(const GlobalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GlobalState)
}

void GlobalState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 10;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalState::~GlobalState() {
  // @@protoc_insertion_point(destructor:fantasybit.GlobalState)
  SharedDtor();
}

void GlobalState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalState_descriptor_;
}

const GlobalState& GlobalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StatusData_2eproto();
  return *default_instance_;
}

GlobalState* GlobalState::default_instance_ = NULL;

GlobalState* GlobalState::New(::google::protobuf::Arena* arena) const {
  GlobalState* n = new GlobalState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GlobalState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(season_, week_);
    state_ = 10;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GlobalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GlobalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GlobalState.State state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::GlobalState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::GlobalState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (tag == 80) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (tag == 160) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GlobalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GlobalState)
  return false;
#undef DO_
}

void GlobalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GlobalState)
  // optional .fantasybit.GlobalState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GlobalState)
}

::google::protobuf::uint8* GlobalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GlobalState)
  // optional .fantasybit.GlobalState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GlobalState)
  return target;
}

int GlobalState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .fantasybit.GlobalState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GlobalState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalState::MergeFrom(const GlobalState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GlobalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalState::CopyFrom(const GlobalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalState::IsInitialized() const {

  return true;
}

void GlobalState::Swap(GlobalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalState::InternalSwap(GlobalState* other) {
  std::swap(state_, other->state_);
  std::swap(season_, other->season_);
  std::swap(week_, other->week_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalState_descriptor_;
  metadata.reflection = GlobalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalState

// optional .fantasybit.GlobalState.State state = 1;
bool GlobalState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GlobalState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void GlobalState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalState::clear_state() {
  state_ = 10;
  clear_has_state();
}
 ::fantasybit::GlobalState_State GlobalState::state() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalState.state)
  return static_cast< ::fantasybit::GlobalState_State >(state_);
}
 void GlobalState::set_state(::fantasybit::GlobalState_State value) {
  assert(::fantasybit::GlobalState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GlobalState.state)
}

// optional uint32 season = 10;
bool GlobalState::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlobalState::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
void GlobalState::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalState::clear_season() {
  season_ = 0u;
  clear_has_season();
}
 ::google::protobuf::uint32 GlobalState::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalState.season)
  return season_;
}
 void GlobalState::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GlobalState.season)
}

// optional uint32 week = 20;
bool GlobalState::has_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GlobalState::set_has_week() {
  _has_bits_[0] |= 0x00000004u;
}
void GlobalState::clear_has_week() {
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalState::clear_week() {
  week_ = 0u;
  clear_has_week();
}
 ::google::protobuf::uint32 GlobalState::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.GlobalState.week)
  return week_;
}
 void GlobalState::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GlobalState.week)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
