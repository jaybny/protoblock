// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#ifndef PROTOBUF_NameData_2eproto__INCLUDED
#define PROTOBUF_NameData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_NameData_2eproto();
void protobuf_AssignDesc_NameData_2eproto();
void protobuf_ShutdownFile_NameData_2eproto();

class FantasyBitAward;
class FantasyBitProj;
class FantasyNameBal;

// ===================================================================

class FantasyNameBal : public ::google::protobuf::Message {
 public:
  FantasyNameBal();
  virtual ~FantasyNameBal();

  FantasyNameBal(const FantasyNameBal& from);

  inline FantasyNameBal& operator=(const FantasyNameBal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameBal& default_instance();

  void Swap(FantasyNameBal* other);

  // implements Message ----------------------------------------------

  inline FantasyNameBal* New() const { return New(NULL); }

  FantasyNameBal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyNameBal& from);
  void MergeFrom(const FantasyNameBal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FantasyNameBal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string public_key = 20;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 20;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional uint64 bits = 30;
  bool has_bits() const;
  void clear_bits();
  static const int kBitsFieldNumber = 30;
  ::google::protobuf::uint64 bits() const;
  void set_bits(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameBal)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_bits();
  inline void clear_has_bits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::google::protobuf::uint64 bits_;
  friend void  protobuf_AddDesc_NameData_2eproto();
  friend void protobuf_AssignDesc_NameData_2eproto();
  friend void protobuf_ShutdownFile_NameData_2eproto();

  void InitAsDefaultInstance();
  static FantasyNameBal* default_instance_;
};
// -------------------------------------------------------------------

class FantasyBitAward : public ::google::protobuf::Message {
 public:
  FantasyBitAward();
  virtual ~FantasyBitAward();

  FantasyBitAward(const FantasyBitAward& from);

  inline FantasyBitAward& operator=(const FantasyBitAward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyBitAward& default_instance();

  void Swap(FantasyBitAward* other);

  // implements Message ----------------------------------------------

  inline FantasyBitAward* New() const { return New(NULL); }

  FantasyBitAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyBitAward& from);
  void MergeFrom(const FantasyBitAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FantasyBitAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // optional uint64 award = 30;
  bool has_award() const;
  void clear_award();
  static const int kAwardFieldNumber = 30;
  ::google::protobuf::uint64 award() const;
  void set_award(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitAward)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_proj();
  inline void clear_has_proj();
  inline void set_has_award();
  inline void clear_has_award();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 award_;
  ::google::protobuf::int32 proj_;
  friend void  protobuf_AddDesc_NameData_2eproto();
  friend void protobuf_AssignDesc_NameData_2eproto();
  friend void protobuf_ShutdownFile_NameData_2eproto();

  void InitAsDefaultInstance();
  static FantasyBitAward* default_instance_;
};
// -------------------------------------------------------------------

class FantasyBitProj : public ::google::protobuf::Message {
 public:
  FantasyBitProj();
  virtual ~FantasyBitProj();

  FantasyBitProj(const FantasyBitProj& from);

  inline FantasyBitProj& operator=(const FantasyBitProj& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyBitProj& default_instance();

  void Swap(FantasyBitProj* other);

  // implements Message ----------------------------------------------

  inline FantasyBitProj* New() const { return New(NULL); }

  FantasyBitProj* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyBitProj& from);
  void MergeFrom(const FantasyBitProj& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FantasyBitProj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 proj = 20;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 20;
  ::google::protobuf::int32 proj() const;
  void set_proj(::google::protobuf::int32 value);

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyBitProj)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_proj();
  inline void clear_has_proj();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 proj_;
  friend void  protobuf_AddDesc_NameData_2eproto();
  friend void protobuf_AssignDesc_NameData_2eproto();
  friend void protobuf_ShutdownFile_NameData_2eproto();

  void InitAsDefaultInstance();
  static FantasyBitProj* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FantasyNameBal

// optional string name = 10;
inline bool FantasyNameBal::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameBal::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameBal::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameBal::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyNameBal::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBal::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.name)
}
inline void FantasyNameBal::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBal.name)
}
inline void FantasyNameBal::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBal.name)
}
inline ::std::string* FantasyNameBal::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBal.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBal::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBal::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBal.name)
}

// optional string public_key = 20;
inline bool FantasyNameBal::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameBal::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameBal::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameBal::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& FantasyNameBal::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBal::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.public_key)
}
inline void FantasyNameBal::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyNameBal.public_key)
}
inline void FantasyNameBal::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyNameBal.public_key)
}
inline ::std::string* FantasyNameBal::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyNameBal.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyNameBal::release_public_key() {
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyNameBal::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyNameBal.public_key)
}

// optional uint64 bits = 30;
inline bool FantasyNameBal::has_bits() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyNameBal::set_has_bits() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyNameBal::clear_has_bits() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyNameBal::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
  clear_has_bits();
}
inline ::google::protobuf::uint64 FantasyNameBal::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyNameBal.bits)
  return bits_;
}
inline void FantasyNameBal::set_bits(::google::protobuf::uint64 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyNameBal.bits)
}

// -------------------------------------------------------------------

// FantasyBitAward

// optional string name = 10;
inline bool FantasyBitAward::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyBitAward::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyBitAward::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyBitAward::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyBitAward::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitAward::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.name)
}
inline void FantasyBitAward::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitAward.name)
}
inline void FantasyBitAward::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitAward.name)
}
inline ::std::string* FantasyBitAward::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitAward.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitAward::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitAward::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitAward.name)
}

// optional int32 proj = 20;
inline bool FantasyBitAward::has_proj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyBitAward::set_has_proj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyBitAward::clear_has_proj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyBitAward::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 FantasyBitAward::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.proj)
  return proj_;
}
inline void FantasyBitAward::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.proj)
}

// optional uint64 award = 30;
inline bool FantasyBitAward::has_award() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyBitAward::set_has_award() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyBitAward::clear_has_award() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyBitAward::clear_award() {
  award_ = GOOGLE_ULONGLONG(0);
  clear_has_award();
}
inline ::google::protobuf::uint64 FantasyBitAward::award() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitAward.award)
  return award_;
}
inline void FantasyBitAward::set_award(::google::protobuf::uint64 value) {
  set_has_award();
  award_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitAward.award)
}

// -------------------------------------------------------------------

// FantasyBitProj

// optional string name = 10;
inline bool FantasyBitProj::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyBitProj::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyBitProj::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyBitProj::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyBitProj::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitProj::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.name)
}
inline void FantasyBitProj::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitProj.name)
}
inline void FantasyBitProj::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitProj.name)
}
inline ::std::string* FantasyBitProj::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitProj.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitProj::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitProj::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitProj.name)
}

// optional int32 proj = 20;
inline bool FantasyBitProj::has_proj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyBitProj::set_has_proj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyBitProj::clear_has_proj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyBitProj::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 FantasyBitProj::proj() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.proj)
  return proj_;
}
inline void FantasyBitProj::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.proj)
}

// optional string playerid = 30;
inline bool FantasyBitProj::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyBitProj::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyBitProj::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyBitProj::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& FantasyBitProj::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyBitProj.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitProj::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyBitProj.playerid)
}
inline void FantasyBitProj::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyBitProj.playerid)
}
inline void FantasyBitProj::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyBitProj.playerid)
}
inline ::std::string* FantasyBitProj::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyBitProj.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyBitProj::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyBitProj::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyBitProj.playerid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NameData_2eproto__INCLUDED
