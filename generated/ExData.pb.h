// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExData.proto

#ifndef PROTOBUF_ExData_2eproto__INCLUDED
#define PROTOBUF_ExData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ExData_2eproto();
void protobuf_AssignDesc_ExData_2eproto();
void protobuf_ShutdownFile_ExData_2eproto();

class SettlePos;
class BookPos;
class GameSettlePos;
class OrderCore;
class Order;
class MarketTicker;
class BookDelta;

enum MarketTicker_Type {
  MarketTicker_Type_BID = 1,
  MarketTicker_Type_ASK = 2,
  MarketTicker_Type_LAST = 3
};
bool MarketTicker_Type_IsValid(int value);
const MarketTicker_Type MarketTicker_Type_Type_MIN = MarketTicker_Type_BID;
const MarketTicker_Type MarketTicker_Type_Type_MAX = MarketTicker_Type_LAST;
const int MarketTicker_Type_Type_ARRAYSIZE = MarketTicker_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketTicker_Type_descriptor();
inline const ::std::string& MarketTicker_Type_Name(MarketTicker_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketTicker_Type_descriptor(), value);
}
inline bool MarketTicker_Type_Parse(
    const ::std::string& name, MarketTicker_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketTicker_Type>(
    MarketTicker_Type_descriptor(), name, value);
}
// ===================================================================

class SettlePos : public ::google::protobuf::Message {
 public:
  SettlePos();
  virtual ~SettlePos();

  SettlePos(const SettlePos& from);

  inline SettlePos& operator=(const SettlePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettlePos& default_instance();

  void Swap(SettlePos* other);

  // implements Message ----------------------------------------------

  SettlePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SettlePos& from);
  void MergeFrom(const SettlePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pk = 10;
  inline bool has_pk() const;
  inline void clear_pk();
  static const int kPkFieldNumber = 10;
  inline const ::std::string& pk() const;
  inline void set_pk(const ::std::string& value);
  inline void set_pk(const char* value);
  inline void set_pk(const char* value, size_t size);
  inline ::std::string* mutable_pk();
  inline ::std::string* release_pk();
  inline void set_allocated_pk(::std::string* pk);

  // optional int32 qty = 20;
  inline bool has_qty() const;
  inline void clear_qty();
  static const int kQtyFieldNumber = 20;
  inline ::google::protobuf::int32 qty() const;
  inline void set_qty(::google::protobuf::int32 value);

  // optional int32 price = 25;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 25;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.SettlePos)
 private:
  inline void set_has_pk();
  inline void clear_has_pk();
  inline void set_has_qty();
  inline void clear_has_qty();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pk_;
  ::google::protobuf::int32 qty_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static SettlePos* default_instance_;
};
// -------------------------------------------------------------------

class BookPos : public ::google::protobuf::Message {
 public:
  BookPos();
  virtual ~BookPos();

  BookPos(const BookPos& from);

  inline BookPos& operator=(const BookPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BookPos& default_instance();

  void Swap(BookPos* other);

  // implements Message ----------------------------------------------

  BookPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BookPos& from);
  void MergeFrom(const BookPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 30;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  inline void set_allocated_playerid(::std::string* playerid);

  // repeated .fantasybit.SettlePos positions = 40;
  inline int positions_size() const;
  inline void clear_positions();
  static const int kPositionsFieldNumber = 40;
  inline const ::fantasybit::SettlePos& positions(int index) const;
  inline ::fantasybit::SettlePos* mutable_positions(int index);
  inline ::fantasybit::SettlePos* add_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::SettlePos >&
      positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::SettlePos >*
      mutable_positions();

  // @@protoc_insertion_point(class_scope:fantasybit.BookPos)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* playerid_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::SettlePos > positions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static BookPos* default_instance_;
};
// -------------------------------------------------------------------

class GameSettlePos : public ::google::protobuf::Message {
 public:
  GameSettlePos();
  virtual ~GameSettlePos();

  GameSettlePos(const GameSettlePos& from);

  inline GameSettlePos& operator=(const GameSettlePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSettlePos& default_instance();

  void Swap(GameSettlePos* other);

  // implements Message ----------------------------------------------

  GameSettlePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSettlePos& from);
  void MergeFrom(const GameSettlePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 10;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 10;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // repeated .fantasybit.BookPos home = 20;
  inline int home_size() const;
  inline void clear_home();
  static const int kHomeFieldNumber = 20;
  inline const ::fantasybit::BookPos& home(int index) const;
  inline ::fantasybit::BookPos* mutable_home(int index);
  inline ::fantasybit::BookPos* add_home();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >&
      home() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >*
      mutable_home();

  // repeated .fantasybit.BookPos away = 30;
  inline int away_size() const;
  inline void clear_away();
  static const int kAwayFieldNumber = 30;
  inline const ::fantasybit::BookPos& away(int index) const;
  inline ::fantasybit::BookPos* mutable_away(int index);
  inline ::fantasybit::BookPos* add_away();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >&
      away() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >*
      mutable_away();

  // @@protoc_insertion_point(class_scope:fantasybit.GameSettlePos)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gameid_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos > home_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos > away_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static GameSettlePos* default_instance_;
};
// -------------------------------------------------------------------

class OrderCore : public ::google::protobuf::Message {
 public:
  OrderCore();
  virtual ~OrderCore();

  OrderCore(const OrderCore& from);

  inline OrderCore& operator=(const OrderCore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderCore& default_instance();

  void Swap(OrderCore* other);

  // implements Message ----------------------------------------------

  OrderCore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderCore& from);
  void MergeFrom(const OrderCore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool buyside = 10;
  inline bool has_buyside() const;
  inline void clear_buyside();
  static const int kBuysideFieldNumber = 10;
  inline bool buyside() const;
  inline void set_buyside(bool value);

  // optional int32 size = 20;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 20;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int32 price = 30;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 30;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.OrderCore)
 private:
  inline void set_has_buyside();
  inline void clear_has_buyside();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool buyside_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static OrderCore* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  void Swap(Order* other);

  // implements Message ----------------------------------------------

  Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 refnum = 10;
  inline bool has_refnum() const;
  inline void clear_refnum();
  static const int kRefnumFieldNumber = 10;
  inline ::google::protobuf::int32 refnum() const;
  inline void set_refnum(::google::protobuf::int32 value);

  // optional .fantasybit.OrderCore core = 20;
  inline bool has_core() const;
  inline void clear_core();
  static const int kCoreFieldNumber = 20;
  inline const ::fantasybit::OrderCore& core() const;
  inline ::fantasybit::OrderCore* mutable_core();
  inline ::fantasybit::OrderCore* release_core();
  inline void set_allocated_core(::fantasybit::OrderCore* core);

  // @@protoc_insertion_point(class_scope:fantasybit.Order)
 private:
  inline void set_has_refnum();
  inline void clear_has_refnum();
  inline void set_has_core();
  inline void clear_has_core();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::OrderCore* core_;
  ::google::protobuf::int32 refnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// -------------------------------------------------------------------

class MarketTicker : public ::google::protobuf::Message {
 public:
  MarketTicker();
  virtual ~MarketTicker();

  MarketTicker(const MarketTicker& from);

  inline MarketTicker& operator=(const MarketTicker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketTicker& default_instance();

  void Swap(MarketTicker* other);

  // implements Message ----------------------------------------------

  MarketTicker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketTicker& from);
  void MergeFrom(const MarketTicker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MarketTicker_Type Type;
  static const Type BID = MarketTicker_Type_BID;
  static const Type ASK = MarketTicker_Type_ASK;
  static const Type LAST = MarketTicker_Type_LAST;
  static inline bool Type_IsValid(int value) {
    return MarketTicker_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MarketTicker_Type_Type_MIN;
  static const Type Type_MAX =
    MarketTicker_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MarketTicker_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MarketTicker_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MarketTicker_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MarketTicker_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.MarketTicker.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fantasybit::MarketTicker_Type type() const;
  inline void set_type(::fantasybit::MarketTicker_Type value);

  // optional int32 size = 20;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 20;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int32 price = 30;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 30;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.MarketTicker)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static MarketTicker* default_instance_;
};
// -------------------------------------------------------------------

class BookDelta : public ::google::protobuf::Message {
 public:
  BookDelta();
  virtual ~BookDelta();

  BookDelta(const BookDelta& from);

  inline BookDelta& operator=(const BookDelta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BookDelta& default_instance();

  void Swap(BookDelta* other);

  // implements Message ----------------------------------------------

  BookDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BookDelta& from);
  void MergeFrom(const BookDelta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string public_key = 10;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 10;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // optional int32 seqnum = 20;
  inline bool has_seqnum() const;
  inline void clear_seqnum();
  static const int kSeqnumFieldNumber = 20;
  inline ::google::protobuf::int32 seqnum() const;
  inline void set_seqnum(::google::protobuf::int32 value);

  // optional string playerid = 30;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  inline void set_allocated_playerid(::std::string* playerid);

  // optional .fantasybit.OrderCore newnew = 40;
  inline bool has_newnew() const;
  inline void clear_newnew();
  static const int kNewnewFieldNumber = 40;
  inline const ::fantasybit::OrderCore& newnew() const;
  inline ::fantasybit::OrderCore* mutable_newnew();
  inline ::fantasybit::OrderCore* release_newnew();
  inline void set_allocated_newnew(::fantasybit::OrderCore* newnew);

  // repeated .fantasybit.Order removes = 50;
  inline int removes_size() const;
  inline void clear_removes();
  static const int kRemovesFieldNumber = 50;
  inline const ::fantasybit::Order& removes(int index) const;
  inline ::fantasybit::Order* mutable_removes(int index);
  inline ::fantasybit::Order* add_removes();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >&
      removes() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >*
      mutable_removes();

  // repeated .fantasybit.MarketTicker level2tic = 60;
  inline int level2tic_size() const;
  inline void clear_level2tic();
  static const int kLevel2TicFieldNumber = 60;
  inline const ::fantasybit::MarketTicker& level2tic(int index) const;
  inline ::fantasybit::MarketTicker* mutable_level2tic(int index);
  inline ::fantasybit::MarketTicker* add_level2tic();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >&
      level2tic() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >*
      mutable_level2tic();

  // repeated .fantasybit.MarketTicker level1tic = 70;
  inline int level1tic_size() const;
  inline void clear_level1tic();
  static const int kLevel1TicFieldNumber = 70;
  inline const ::fantasybit::MarketTicker& level1tic(int index) const;
  inline ::fantasybit::MarketTicker* mutable_level1tic(int index);
  inline ::fantasybit::MarketTicker* add_level1tic();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >&
      level1tic() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >*
      mutable_level1tic();

  // @@protoc_insertion_point(class_scope:fantasybit.BookDelta)
 private:
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_seqnum();
  inline void clear_has_seqnum();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_newnew();
  inline void clear_has_newnew();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* public_key_;
  ::std::string* playerid_;
  ::fantasybit::OrderCore* newnew_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Order > removes_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker > level2tic_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker > level1tic_;
  ::google::protobuf::int32 seqnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ExData_2eproto();
  friend void protobuf_AssignDesc_ExData_2eproto();
  friend void protobuf_ShutdownFile_ExData_2eproto();

  void InitAsDefaultInstance();
  static BookDelta* default_instance_;
};
// ===================================================================


// ===================================================================

// SettlePos

// optional string pk = 10;
inline bool SettlePos::has_pk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SettlePos::set_has_pk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SettlePos::clear_has_pk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SettlePos::clear_pk() {
  if (pk_ != &::google::protobuf::internal::kEmptyString) {
    pk_->clear();
  }
  clear_has_pk();
}
inline const ::std::string& SettlePos::pk() const {
  return *pk_;
}
inline void SettlePos::set_pk(const ::std::string& value) {
  set_has_pk();
  if (pk_ == &::google::protobuf::internal::kEmptyString) {
    pk_ = new ::std::string;
  }
  pk_->assign(value);
}
inline void SettlePos::set_pk(const char* value) {
  set_has_pk();
  if (pk_ == &::google::protobuf::internal::kEmptyString) {
    pk_ = new ::std::string;
  }
  pk_->assign(value);
}
inline void SettlePos::set_pk(const char* value, size_t size) {
  set_has_pk();
  if (pk_ == &::google::protobuf::internal::kEmptyString) {
    pk_ = new ::std::string;
  }
  pk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SettlePos::mutable_pk() {
  set_has_pk();
  if (pk_ == &::google::protobuf::internal::kEmptyString) {
    pk_ = new ::std::string;
  }
  return pk_;
}
inline ::std::string* SettlePos::release_pk() {
  clear_has_pk();
  if (pk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pk_;
    pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SettlePos::set_allocated_pk(::std::string* pk) {
  if (pk_ != &::google::protobuf::internal::kEmptyString) {
    delete pk_;
  }
  if (pk) {
    set_has_pk();
    pk_ = pk;
  } else {
    clear_has_pk();
    pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 qty = 20;
inline bool SettlePos::has_qty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SettlePos::set_has_qty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SettlePos::clear_has_qty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SettlePos::clear_qty() {
  qty_ = 0;
  clear_has_qty();
}
inline ::google::protobuf::int32 SettlePos::qty() const {
  return qty_;
}
inline void SettlePos::set_qty(::google::protobuf::int32 value) {
  set_has_qty();
  qty_ = value;
}

// optional int32 price = 25;
inline bool SettlePos::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SettlePos::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SettlePos::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SettlePos::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 SettlePos::price() const {
  return price_;
}
inline void SettlePos::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// BookPos

// optional string playerid = 30;
inline bool BookPos::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BookPos::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BookPos::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BookPos::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& BookPos::playerid() const {
  return *playerid_;
}
inline void BookPos::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BookPos::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BookPos::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookPos::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* BookPos::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BookPos::set_allocated_playerid(::std::string* playerid) {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playerid) {
    set_has_playerid();
    playerid_ = playerid;
  } else {
    clear_has_playerid();
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .fantasybit.SettlePos positions = 40;
inline int BookPos::positions_size() const {
  return positions_.size();
}
inline void BookPos::clear_positions() {
  positions_.Clear();
}
inline const ::fantasybit::SettlePos& BookPos::positions(int index) const {
  return positions_.Get(index);
}
inline ::fantasybit::SettlePos* BookPos::mutable_positions(int index) {
  return positions_.Mutable(index);
}
inline ::fantasybit::SettlePos* BookPos::add_positions() {
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::SettlePos >&
BookPos::positions() const {
  return positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::SettlePos >*
BookPos::mutable_positions() {
  return &positions_;
}

// -------------------------------------------------------------------

// GameSettlePos

// optional string gameid = 10;
inline bool GameSettlePos::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSettlePos::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSettlePos::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSettlePos::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& GameSettlePos::gameid() const {
  return *gameid_;
}
inline void GameSettlePos::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void GameSettlePos::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void GameSettlePos::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameSettlePos::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* GameSettlePos::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameSettlePos::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .fantasybit.BookPos home = 20;
inline int GameSettlePos::home_size() const {
  return home_.size();
}
inline void GameSettlePos::clear_home() {
  home_.Clear();
}
inline const ::fantasybit::BookPos& GameSettlePos::home(int index) const {
  return home_.Get(index);
}
inline ::fantasybit::BookPos* GameSettlePos::mutable_home(int index) {
  return home_.Mutable(index);
}
inline ::fantasybit::BookPos* GameSettlePos::add_home() {
  return home_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >&
GameSettlePos::home() const {
  return home_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >*
GameSettlePos::mutable_home() {
  return &home_;
}

// repeated .fantasybit.BookPos away = 30;
inline int GameSettlePos::away_size() const {
  return away_.size();
}
inline void GameSettlePos::clear_away() {
  away_.Clear();
}
inline const ::fantasybit::BookPos& GameSettlePos::away(int index) const {
  return away_.Get(index);
}
inline ::fantasybit::BookPos* GameSettlePos::mutable_away(int index) {
  return away_.Mutable(index);
}
inline ::fantasybit::BookPos* GameSettlePos::add_away() {
  return away_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >&
GameSettlePos::away() const {
  return away_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::BookPos >*
GameSettlePos::mutable_away() {
  return &away_;
}

// -------------------------------------------------------------------

// OrderCore

// optional bool buyside = 10;
inline bool OrderCore::has_buyside() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderCore::set_has_buyside() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderCore::clear_has_buyside() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderCore::clear_buyside() {
  buyside_ = false;
  clear_has_buyside();
}
inline bool OrderCore::buyside() const {
  return buyside_;
}
inline void OrderCore::set_buyside(bool value) {
  set_has_buyside();
  buyside_ = value;
}

// optional int32 size = 20;
inline bool OrderCore::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderCore::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderCore::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderCore::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 OrderCore::size() const {
  return size_;
}
inline void OrderCore::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int32 price = 30;
inline bool OrderCore::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderCore::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderCore::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderCore::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 OrderCore::price() const {
  return price_;
}
inline void OrderCore::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// Order

// optional int32 refnum = 10;
inline bool Order::has_refnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_refnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_refnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_refnum() {
  refnum_ = 0;
  clear_has_refnum();
}
inline ::google::protobuf::int32 Order::refnum() const {
  return refnum_;
}
inline void Order::set_refnum(::google::protobuf::int32 value) {
  set_has_refnum();
  refnum_ = value;
}

// optional .fantasybit.OrderCore core = 20;
inline bool Order::has_core() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_core() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_core() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_core() {
  if (core_ != NULL) core_->::fantasybit::OrderCore::Clear();
  clear_has_core();
}
inline const ::fantasybit::OrderCore& Order::core() const {
  return core_ != NULL ? *core_ : *default_instance_->core_;
}
inline ::fantasybit::OrderCore* Order::mutable_core() {
  set_has_core();
  if (core_ == NULL) core_ = new ::fantasybit::OrderCore;
  return core_;
}
inline ::fantasybit::OrderCore* Order::release_core() {
  clear_has_core();
  ::fantasybit::OrderCore* temp = core_;
  core_ = NULL;
  return temp;
}
inline void Order::set_allocated_core(::fantasybit::OrderCore* core) {
  delete core_;
  core_ = core;
  if (core) {
    set_has_core();
  } else {
    clear_has_core();
  }
}

// -------------------------------------------------------------------

// MarketTicker

// optional .fantasybit.MarketTicker.Type type = 1;
inline bool MarketTicker::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketTicker::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketTicker::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketTicker::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::MarketTicker_Type MarketTicker::type() const {
  return static_cast< ::fantasybit::MarketTicker_Type >(type_);
}
inline void MarketTicker::set_type(::fantasybit::MarketTicker_Type value) {
  assert(::fantasybit::MarketTicker_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 size = 20;
inline bool MarketTicker::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketTicker::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketTicker::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketTicker::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 MarketTicker::size() const {
  return size_;
}
inline void MarketTicker::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int32 price = 30;
inline bool MarketTicker::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketTicker::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketTicker::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketTicker::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 MarketTicker::price() const {
  return price_;
}
inline void MarketTicker::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// BookDelta

// optional string public_key = 10;
inline bool BookDelta::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BookDelta::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BookDelta::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BookDelta::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& BookDelta::public_key() const {
  return *public_key_;
}
inline void BookDelta::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void BookDelta::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void BookDelta::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookDelta::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* BookDelta::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BookDelta::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 seqnum = 20;
inline bool BookDelta::has_seqnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BookDelta::set_has_seqnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BookDelta::clear_has_seqnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BookDelta::clear_seqnum() {
  seqnum_ = 0;
  clear_has_seqnum();
}
inline ::google::protobuf::int32 BookDelta::seqnum() const {
  return seqnum_;
}
inline void BookDelta::set_seqnum(::google::protobuf::int32 value) {
  set_has_seqnum();
  seqnum_ = value;
}

// optional string playerid = 30;
inline bool BookDelta::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BookDelta::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BookDelta::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BookDelta::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& BookDelta::playerid() const {
  return *playerid_;
}
inline void BookDelta::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BookDelta::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BookDelta::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BookDelta::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* BookDelta::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BookDelta::set_allocated_playerid(::std::string* playerid) {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playerid) {
    set_has_playerid();
    playerid_ = playerid;
  } else {
    clear_has_playerid();
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .fantasybit.OrderCore newnew = 40;
inline bool BookDelta::has_newnew() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BookDelta::set_has_newnew() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BookDelta::clear_has_newnew() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BookDelta::clear_newnew() {
  if (newnew_ != NULL) newnew_->::fantasybit::OrderCore::Clear();
  clear_has_newnew();
}
inline const ::fantasybit::OrderCore& BookDelta::newnew() const {
  return newnew_ != NULL ? *newnew_ : *default_instance_->newnew_;
}
inline ::fantasybit::OrderCore* BookDelta::mutable_newnew() {
  set_has_newnew();
  if (newnew_ == NULL) newnew_ = new ::fantasybit::OrderCore;
  return newnew_;
}
inline ::fantasybit::OrderCore* BookDelta::release_newnew() {
  clear_has_newnew();
  ::fantasybit::OrderCore* temp = newnew_;
  newnew_ = NULL;
  return temp;
}
inline void BookDelta::set_allocated_newnew(::fantasybit::OrderCore* newnew) {
  delete newnew_;
  newnew_ = newnew;
  if (newnew) {
    set_has_newnew();
  } else {
    clear_has_newnew();
  }
}

// repeated .fantasybit.Order removes = 50;
inline int BookDelta::removes_size() const {
  return removes_.size();
}
inline void BookDelta::clear_removes() {
  removes_.Clear();
}
inline const ::fantasybit::Order& BookDelta::removes(int index) const {
  return removes_.Get(index);
}
inline ::fantasybit::Order* BookDelta::mutable_removes(int index) {
  return removes_.Mutable(index);
}
inline ::fantasybit::Order* BookDelta::add_removes() {
  return removes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >&
BookDelta::removes() const {
  return removes_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Order >*
BookDelta::mutable_removes() {
  return &removes_;
}

// repeated .fantasybit.MarketTicker level2tic = 60;
inline int BookDelta::level2tic_size() const {
  return level2tic_.size();
}
inline void BookDelta::clear_level2tic() {
  level2tic_.Clear();
}
inline const ::fantasybit::MarketTicker& BookDelta::level2tic(int index) const {
  return level2tic_.Get(index);
}
inline ::fantasybit::MarketTicker* BookDelta::mutable_level2tic(int index) {
  return level2tic_.Mutable(index);
}
inline ::fantasybit::MarketTicker* BookDelta::add_level2tic() {
  return level2tic_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >&
BookDelta::level2tic() const {
  return level2tic_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >*
BookDelta::mutable_level2tic() {
  return &level2tic_;
}

// repeated .fantasybit.MarketTicker level1tic = 70;
inline int BookDelta::level1tic_size() const {
  return level1tic_.size();
}
inline void BookDelta::clear_level1tic() {
  level1tic_.Clear();
}
inline const ::fantasybit::MarketTicker& BookDelta::level1tic(int index) const {
  return level1tic_.Get(index);
}
inline ::fantasybit::MarketTicker* BookDelta::mutable_level1tic(int index) {
  return level1tic_.Mutable(index);
}
inline ::fantasybit::MarketTicker* BookDelta::add_level1tic() {
  return level1tic_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >&
BookDelta::level1tic() const {
  return level1tic_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::MarketTicker >*
BookDelta::mutable_level1tic() {
  return &level1tic_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MarketTicker_Type>() {
  return ::fantasybit::MarketTicker_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExData_2eproto__INCLUDED
