// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* SettlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettlePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* BookPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BookPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSettlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSettlePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketTicker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketTicker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketTicker_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BookDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BookDelta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExData_2eproto() {
  protobuf_AddDesc_ExData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExData.proto");
  GOOGLE_CHECK(file != NULL);
  SettlePos_descriptor_ = file->message_type(0);
  static const int SettlePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, price_),
  };
  SettlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettlePos_descriptor_,
      SettlePos::default_instance_,
      SettlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettlePos));
  BookPos_descriptor_ = file->message_type(1);
  static const int BookPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, positions_),
  };
  BookPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BookPos_descriptor_,
      BookPos::default_instance_,
      BookPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BookPos));
  GameSettlePos_descriptor_ = file->message_type(2);
  static const int GameSettlePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, away_),
  };
  GameSettlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSettlePos_descriptor_,
      GameSettlePos::default_instance_,
      GameSettlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSettlePos));
  OrderCore_descriptor_ = file->message_type(3);
  static const int OrderCore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, buyside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, price_),
  };
  OrderCore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCore_descriptor_,
      OrderCore::default_instance_,
      OrderCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCore));
  Order_descriptor_ = file->message_type(4);
  static const int Order_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, refnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, core_),
  };
  Order_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Order));
  MarketTicker_descriptor_ = file->message_type(5);
  static const int MarketTicker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, price_),
  };
  MarketTicker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketTicker_descriptor_,
      MarketTicker::default_instance_,
      MarketTicker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTicker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketTicker));
  MarketTicker_Type_descriptor_ = MarketTicker_descriptor_->enum_type(0);
  BookDelta_descriptor_ = file->message_type(6);
  static const int BookDelta_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, seqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, newnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, removes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, level2tic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, level1tic_),
  };
  BookDelta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BookDelta_descriptor_,
      BookDelta::default_instance_,
      BookDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BookDelta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BookDelta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettlePos_descriptor_, &SettlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BookPos_descriptor_, &BookPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSettlePos_descriptor_, &GameSettlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCore_descriptor_, &OrderCore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketTicker_descriptor_, &MarketTicker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BookDelta_descriptor_, &BookDelta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExData_2eproto() {
  delete SettlePos::default_instance_;
  delete SettlePos_reflection_;
  delete BookPos::default_instance_;
  delete BookPos_reflection_;
  delete GameSettlePos::default_instance_;
  delete GameSettlePos_reflection_;
  delete OrderCore::default_instance_;
  delete OrderCore_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete MarketTicker::default_instance_;
  delete MarketTicker_reflection_;
  delete BookDelta::default_instance_;
  delete BookDelta_reflection_;
}

void protobuf_AddDesc_ExData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014ExData.proto\022\nfantasybit\"3\n\tSettlePos\022"
    "\n\n\002pk\030\n \001(\t\022\013\n\003qty\030\024 \001(\005\022\r\n\005price\030\031 \001(\005\""
    "E\n\007BookPos\022\020\n\010playerid\030\036 \001(\t\022(\n\tposition"
    "s\030( \003(\0132\025.fantasybit.SettlePos\"e\n\rGameSe"
    "ttlePos\022\016\n\006gameid\030\n \001(\t\022!\n\004home\030\024 \003(\0132\023."
    "fantasybit.BookPos\022!\n\004away\030\036 \003(\0132\023.fanta"
    "sybit.BookPos\"9\n\tOrderCore\022\017\n\007buyside\030\n "
    "\001(\010\022\014\n\004size\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\"<\n\005Orde"
    "r\022\016\n\006refnum\030\n \001(\005\022#\n\004core\030\024 \001(\0132\025.fantas"
    "ybit.OrderCore\"|\n\014MarketTicker\022+\n\004type\030\001"
    " \001(\0162\035.fantasybit.MarketTicker.Type\022\014\n\004s"
    "ize\030\024 \001(\005\022\r\n\005price\030\036 \001(\005\"\"\n\004Type\022\007\n\003BID\020"
    "\001\022\007\n\003ASK\020\002\022\010\n\004LAST\020\003\"\346\001\n\tBookDelta\022\022\n\npu"
    "blic_key\030\n \001(\t\022\016\n\006seqnum\030\024 \001(\005\022\020\n\010player"
    "id\030\036 \001(\t\022%\n\006newnew\030( \001(\0132\025.fantasybit.Or"
    "derCore\022\"\n\007removes\0302 \003(\0132\021.fantasybit.Or"
    "der\022+\n\tlevel2tic\030< \003(\0132\030.fantasybit.Mark"
    "etTicker\022+\n\tlevel1tic\030F \003(\0132\030.fantasybit"
    ".MarketTicker", 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExData.proto", &protobuf_RegisterTypes);
  SettlePos::default_instance_ = new SettlePos();
  BookPos::default_instance_ = new BookPos();
  GameSettlePos::default_instance_ = new GameSettlePos();
  OrderCore::default_instance_ = new OrderCore();
  Order::default_instance_ = new Order();
  MarketTicker::default_instance_ = new MarketTicker();
  BookDelta::default_instance_ = new BookDelta();
  SettlePos::default_instance_->InitAsDefaultInstance();
  BookPos::default_instance_->InitAsDefaultInstance();
  GameSettlePos::default_instance_->InitAsDefaultInstance();
  OrderCore::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  MarketTicker::default_instance_->InitAsDefaultInstance();
  BookDelta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExData_2eproto {
  StaticDescriptorInitializer_ExData_2eproto() {
    protobuf_AddDesc_ExData_2eproto();
  }
} static_descriptor_initializer_ExData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SettlePos::kPkFieldNumber;
const int SettlePos::kQtyFieldNumber;
const int SettlePos::kPriceFieldNumber;
#endif  // !_MSC_VER

SettlePos::SettlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SettlePos::InitAsDefaultInstance() {
}

SettlePos::SettlePos(const SettlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SettlePos::SharedCtor() {
  _cached_size_ = 0;
  pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qty_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettlePos::~SettlePos() {
  SharedDtor();
}

void SettlePos::SharedDtor() {
  if (pk_ != &::google::protobuf::internal::kEmptyString) {
    delete pk_;
  }
  if (this != default_instance_) {
  }
}

void SettlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettlePos_descriptor_;
}

const SettlePos& SettlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

SettlePos* SettlePos::default_instance_ = NULL;

SettlePos* SettlePos::New() const {
  return new SettlePos;
}

void SettlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pk()) {
      if (pk_ != &::google::protobuf::internal::kEmptyString) {
        pk_->clear();
      }
    }
    qty_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pk().data(), this->pk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_qty;
        break;
      }

      // optional int32 qty = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qty_)));
          set_has_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_price;
        break;
      }

      // optional int32 price = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pk = 10;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pk(), output);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->qty(), output);
  }

  // optional int32 price = 25;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SettlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pk = 10;
  if (has_pk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pk().data(), this->pk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pk(), target);
  }

  // optional int32 qty = 20;
  if (has_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->qty(), target);
  }

  // optional int32 price = 25;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SettlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pk = 10;
    if (has_pk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pk());
    }

    // optional int32 qty = 20;
    if (has_qty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qty());
    }

    // optional int32 price = 25;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettlePos::MergeFrom(const SettlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pk()) {
      set_pk(from.pk());
    }
    if (from.has_qty()) {
      set_qty(from.qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlePos::CopyFrom(const SettlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlePos::IsInitialized() const {

  return true;
}

void SettlePos::Swap(SettlePos* other) {
  if (other != this) {
    std::swap(pk_, other->pk_);
    std::swap(qty_, other->qty_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettlePos_descriptor_;
  metadata.reflection = SettlePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BookPos::kPlayeridFieldNumber;
const int BookPos::kPositionsFieldNumber;
#endif  // !_MSC_VER

BookPos::BookPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BookPos::InitAsDefaultInstance() {
}

BookPos::BookPos(const BookPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BookPos::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookPos::~BookPos() {
  SharedDtor();
}

void BookPos::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void BookPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BookPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookPos_descriptor_;
}

const BookPos& BookPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

BookPos* BookPos::default_instance_ = NULL;

BookPos* BookPos::New() const {
  return new BookPos;
}

void BookPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BookPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_positions;
        break;
      }

      // repeated .fantasybit.SettlePos positions = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_positions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // repeated .fantasybit.SettlePos positions = 40;
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->positions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BookPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // repeated .fantasybit.SettlePos positions = 40;
  for (int i = 0; i < this->positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->positions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BookPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

  }
  // repeated .fantasybit.SettlePos positions = 40;
  total_size += 2 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BookPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BookPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BookPos::MergeFrom(const BookPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  positions_.MergeFrom(from.positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BookPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookPos::CopyFrom(const BookPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookPos::IsInitialized() const {

  return true;
}

void BookPos::Swap(BookPos* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    positions_.Swap(&other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BookPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BookPos_descriptor_;
  metadata.reflection = BookPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSettlePos::kGameidFieldNumber;
const int GameSettlePos::kHomeFieldNumber;
const int GameSettlePos::kAwayFieldNumber;
#endif  // !_MSC_VER

GameSettlePos::GameSettlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSettlePos::InitAsDefaultInstance() {
}

GameSettlePos::GameSettlePos(const GameSettlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSettlePos::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSettlePos::~GameSettlePos() {
  SharedDtor();
}

void GameSettlePos::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void GameSettlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSettlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSettlePos_descriptor_;
}

const GameSettlePos& GameSettlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

GameSettlePos* GameSettlePos::default_instance_ = NULL;

GameSettlePos* GameSettlePos::New() const {
  return new GameSettlePos;
}

void GameSettlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
  }
  home_.Clear();
  away_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSettlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_home;
        break;
      }

      // repeated .fantasybit.BookPos home = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_home()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_home;
        if (input->ExpectTag(242)) goto parse_away;
        break;
      }

      // repeated .fantasybit.BookPos away = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_away:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_away()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_away;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSettlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gameid(), output);
  }

  // repeated .fantasybit.BookPos home = 20;
  for (int i = 0; i < this->home_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->home(i), output);
  }

  // repeated .fantasybit.BookPos away = 30;
  for (int i = 0; i < this->away_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->away(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSettlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // repeated .fantasybit.BookPos home = 20;
  for (int i = 0; i < this->home_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->home(i), target);
  }

  // repeated .fantasybit.BookPos away = 30;
  for (int i = 0; i < this->away_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->away(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSettlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  // repeated .fantasybit.BookPos home = 20;
  total_size += 2 * this->home_size();
  for (int i = 0; i < this->home_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->home(i));
  }

  // repeated .fantasybit.BookPos away = 30;
  total_size += 2 * this->away_size();
  for (int i = 0; i < this->away_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->away(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSettlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSettlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSettlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSettlePos::MergeFrom(const GameSettlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSettlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSettlePos::CopyFrom(const GameSettlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSettlePos::IsInitialized() const {

  return true;
}

void GameSettlePos::Swap(GameSettlePos* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    home_.Swap(&other->home_);
    away_.Swap(&other->away_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSettlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSettlePos_descriptor_;
  metadata.reflection = GameSettlePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCore::kBuysideFieldNumber;
const int OrderCore::kSizeFieldNumber;
const int OrderCore::kPriceFieldNumber;
#endif  // !_MSC_VER

OrderCore::OrderCore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderCore::InitAsDefaultInstance() {
}

OrderCore::OrderCore(const OrderCore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderCore::SharedCtor() {
  _cached_size_ = 0;
  buyside_ = false;
  size_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCore::~OrderCore() {
  SharedDtor();
}

void OrderCore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCore_descriptor_;
}

const OrderCore& OrderCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

OrderCore* OrderCore::default_instance_ = NULL;

OrderCore* OrderCore::New() const {
  return new OrderCore;
}

void OrderCore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyside_ = false;
    size_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool buyside = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buyside_)));
          set_has_buyside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_size;
        break;
      }

      // optional int32 size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderCore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool buyside = 10;
  if (has_buyside()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->buyside(), output);
  }

  // optional int32 size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderCore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool buyside = 10;
  if (has_buyside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->buyside(), target);
  }

  // optional int32 size = 20;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool buyside = 10;
    if (has_buyside()) {
      total_size += 1 + 1;
    }

    // optional int32 size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCore::MergeFrom(const OrderCore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyside()) {
      set_buyside(from.buyside());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCore::CopyFrom(const OrderCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCore::IsInitialized() const {

  return true;
}

void OrderCore::Swap(OrderCore* other) {
  if (other != this) {
    std::swap(buyside_, other->buyside_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCore_descriptor_;
  metadata.reflection = OrderCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Order::kRefnumFieldNumber;
const int Order::kCoreFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Order::InitAsDefaultInstance() {
  core_ = const_cast< ::fantasybit::OrderCore*>(&::fantasybit::OrderCore::default_instance());
}

Order::Order(const Order& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Order::SharedCtor() {
  _cached_size_ = 0;
  refnum_ = 0;
  core_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Order::~Order() {
  SharedDtor();
}

void Order::SharedDtor() {
  if (this != default_instance_) {
    delete core_;
  }
}

void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New() const {
  return new Order;
}

void Order::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refnum_ = 0;
    if (has_core()) {
      if (core_ != NULL) core_->::fantasybit::OrderCore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refnum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refnum_)));
          set_has_refnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_core;
        break;
      }

      // optional .fantasybit.OrderCore core = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_core:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_core()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refnum = 10;
  if (has_refnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refnum(), output);
  }

  // optional .fantasybit.OrderCore core = 20;
  if (has_core()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->core(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refnum = 10;
  if (has_refnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refnum(), target);
  }

  // optional .fantasybit.OrderCore core = 20;
  if (has_core()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->core(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refnum = 10;
    if (has_refnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refnum());
    }

    // optional .fantasybit.OrderCore core = 20;
    if (has_core()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->core());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refnum()) {
      set_refnum(from.refnum());
    }
    if (from.has_core()) {
      mutable_core()->::fantasybit::OrderCore::MergeFrom(from.core());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {

  return true;
}

void Order::Swap(Order* other) {
  if (other != this) {
    std::swap(refnum_, other->refnum_);
    std::swap(core_, other->core_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarketTicker_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketTicker_Type_descriptor_;
}
bool MarketTicker_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarketTicker_Type MarketTicker::BID;
const MarketTicker_Type MarketTicker::ASK;
const MarketTicker_Type MarketTicker::LAST;
const MarketTicker_Type MarketTicker::Type_MIN;
const MarketTicker_Type MarketTicker::Type_MAX;
const int MarketTicker::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarketTicker::kTypeFieldNumber;
const int MarketTicker::kSizeFieldNumber;
const int MarketTicker::kPriceFieldNumber;
#endif  // !_MSC_VER

MarketTicker::MarketTicker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketTicker::InitAsDefaultInstance() {
}

MarketTicker::MarketTicker(const MarketTicker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketTicker::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  size_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketTicker::~MarketTicker() {
  SharedDtor();
}

void MarketTicker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketTicker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketTicker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketTicker_descriptor_;
}

const MarketTicker& MarketTicker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

MarketTicker* MarketTicker::default_instance_ = NULL;

MarketTicker* MarketTicker::New() const {
  return new MarketTicker;
}

void MarketTicker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    size_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketTicker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.MarketTicker.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MarketTicker_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::MarketTicker_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_size;
        break;
      }

      // optional int32 size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_price;
        break;
      }

      // optional int32 price = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketTicker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .fantasybit.MarketTicker.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 size = 20;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->size(), output);
  }

  // optional int32 price = 30;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketTicker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .fantasybit.MarketTicker.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 size = 20;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->size(), target);
  }

  // optional int32 price = 30;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketTicker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.MarketTicker.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 size = 20;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 price = 30;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketTicker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketTicker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketTicker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketTicker::MergeFrom(const MarketTicker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketTicker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTicker::CopyFrom(const MarketTicker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTicker::IsInitialized() const {

  return true;
}

void MarketTicker::Swap(MarketTicker* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketTicker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketTicker_descriptor_;
  metadata.reflection = MarketTicker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BookDelta::kPublicKeyFieldNumber;
const int BookDelta::kSeqnumFieldNumber;
const int BookDelta::kPlayeridFieldNumber;
const int BookDelta::kNewnewFieldNumber;
const int BookDelta::kRemovesFieldNumber;
const int BookDelta::kLevel2TicFieldNumber;
const int BookDelta::kLevel1TicFieldNumber;
#endif  // !_MSC_VER

BookDelta::BookDelta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BookDelta::InitAsDefaultInstance() {
  newnew_ = const_cast< ::fantasybit::OrderCore*>(&::fantasybit::OrderCore::default_instance());
}

BookDelta::BookDelta(const BookDelta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BookDelta::SharedCtor() {
  _cached_size_ = 0;
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seqnum_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newnew_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BookDelta::~BookDelta() {
  SharedDtor();
}

void BookDelta::SharedDtor() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete newnew_;
  }
}

void BookDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BookDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookDelta_descriptor_;
}

const BookDelta& BookDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExData_2eproto();
  return *default_instance_;
}

BookDelta* BookDelta::default_instance_ = NULL;

BookDelta* BookDelta::New() const {
  return new BookDelta;
}

void BookDelta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    seqnum_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_newnew()) {
      if (newnew_ != NULL) newnew_->::fantasybit::OrderCore::Clear();
    }
  }
  removes_.Clear();
  level2tic_.Clear();
  level1tic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BookDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string public_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_seqnum;
        break;
      }

      // optional int32 seqnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqnum_)));
          set_has_seqnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_newnew;
        break;
      }

      // optional .fantasybit.OrderCore newnew = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newnew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newnew()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_removes;
        break;
      }

      // repeated .fantasybit.Order removes = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_removes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_removes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_removes;
        if (input->ExpectTag(482)) goto parse_level2tic;
        break;
      }

      // repeated .fantasybit.MarketTicker level2tic = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level2tic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level2tic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_level2tic;
        if (input->ExpectTag(562)) goto parse_level1tic;
        break;
      }

      // repeated .fantasybit.MarketTicker level1tic = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level1tic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level1tic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_level1tic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BookDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->public_key(), output);
  }

  // optional int32 seqnum = 20;
  if (has_seqnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->seqnum(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->playerid(), output);
  }

  // optional .fantasybit.OrderCore newnew = 40;
  if (has_newnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->newnew(), output);
  }

  // repeated .fantasybit.Order removes = 50;
  for (int i = 0; i < this->removes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->removes(i), output);
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  for (int i = 0; i < this->level2tic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->level2tic(i), output);
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  for (int i = 0; i < this->level1tic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->level1tic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BookDelta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string public_key = 10;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->public_key(), target);
  }

  // optional int32 seqnum = 20;
  if (has_seqnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->seqnum(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional .fantasybit.OrderCore newnew = 40;
  if (has_newnew()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->newnew(), target);
  }

  // repeated .fantasybit.Order removes = 50;
  for (int i = 0; i < this->removes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->removes(i), target);
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  for (int i = 0; i < this->level2tic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->level2tic(i), target);
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  for (int i = 0; i < this->level1tic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->level1tic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BookDelta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string public_key = 10;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional int32 seqnum = 20;
    if (has_seqnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqnum());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.OrderCore newnew = 40;
    if (has_newnew()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newnew());
    }

  }
  // repeated .fantasybit.Order removes = 50;
  total_size += 2 * this->removes_size();
  for (int i = 0; i < this->removes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removes(i));
  }

  // repeated .fantasybit.MarketTicker level2tic = 60;
  total_size += 2 * this->level2tic_size();
  for (int i = 0; i < this->level2tic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level2tic(i));
  }

  // repeated .fantasybit.MarketTicker level1tic = 70;
  total_size += 2 * this->level1tic_size();
  for (int i = 0; i < this->level1tic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level1tic(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BookDelta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BookDelta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BookDelta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BookDelta::MergeFrom(const BookDelta& from) {
  GOOGLE_CHECK_NE(&from, this);
  removes_.MergeFrom(from.removes_);
  level2tic_.MergeFrom(from.level2tic_);
  level1tic_.MergeFrom(from.level1tic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_seqnum()) {
      set_seqnum(from.seqnum());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newnew()) {
      mutable_newnew()->::fantasybit::OrderCore::MergeFrom(from.newnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BookDelta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BookDelta::CopyFrom(const BookDelta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookDelta::IsInitialized() const {

  return true;
}

void BookDelta::Swap(BookDelta* other) {
  if (other != this) {
    std::swap(public_key_, other->public_key_);
    std::swap(seqnum_, other->seqnum_);
    std::swap(playerid_, other->playerid_);
    std::swap(newnew_, other->newnew_);
    removes_.Swap(&other->removes_);
    level2tic_.Swap(&other->level2tic_);
    level1tic_.Swap(&other->level1tic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BookDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BookDelta_descriptor_;
  metadata.reflection = BookDelta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
