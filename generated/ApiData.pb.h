// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApiData.proto

#ifndef PROTOBUF_ApiData_2eproto__INCLUDED
#define PROTOBUF_ApiData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ApiData_2eproto();
void protobuf_AssignDesc_ApiData_2eproto();
void protobuf_ShutdownFile_ApiData_2eproto();

class FantasyNameHash;
class Distribution;

// ===================================================================

class FantasyNameHash : public ::google::protobuf::Message {
 public:
  FantasyNameHash();
  virtual ~FantasyNameHash();

  FantasyNameHash(const FantasyNameHash& from);

  inline FantasyNameHash& operator=(const FantasyNameHash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameHash& default_instance();

  void Swap(FantasyNameHash* other);

  // implements Message ----------------------------------------------

  FantasyNameHash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyNameHash& from);
  void MergeFrom(const FantasyNameHash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 hash = 30;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 30;
  inline ::google::protobuf::uint64 hash() const;
  inline void set_hash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameHash)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hash();
  inline void clear_has_hash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 hash_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static FantasyNameHash* default_instance_;
};
// -------------------------------------------------------------------

class Distribution : public ::google::protobuf::Message {
 public:
  Distribution();
  virtual ~Distribution();

  Distribution(const Distribution& from);

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Distribution& default_instance();

  void Swap(Distribution* other);

  // implements Message ----------------------------------------------

  Distribution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Distribution& from);
  void MergeFrom(const Distribution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 2;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  inline void set_allocated_gameid(::std::string* gameid);

  // optional string teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline const ::std::string& teamid() const;
  inline void set_teamid(const ::std::string& value);
  inline void set_teamid(const char* value);
  inline void set_teamid(const char* value, size_t size);
  inline ::std::string* mutable_teamid();
  inline ::std::string* release_teamid();
  inline void set_allocated_teamid(::std::string* teamid);

  // optional int32 season = 5;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 5;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);

  // optional int32 week = 6;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 6;
  inline ::google::protobuf::int32 week() const;
  inline void set_week(::google::protobuf::int32 value);

  // optional uint64 fantasy_nameid = 1;
  inline bool has_fantasy_nameid() const;
  inline void clear_fantasy_nameid();
  static const int kFantasyNameidFieldNumber = 1;
  inline ::google::protobuf::uint64 fantasy_nameid() const;
  inline void set_fantasy_nameid(::google::protobuf::uint64 value);

  // optional string playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  inline void set_allocated_playerid(::std::string* playerid);

  // optional int32 proj = 7;
  inline bool has_proj() const;
  inline void clear_proj();
  static const int kProjFieldNumber = 7;
  inline ::google::protobuf::int32 proj() const;
  inline void set_proj(::google::protobuf::int32 value);

  // optional float award = 8;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 8;
  inline float award() const;
  inline void set_award(float value);

  // optional float result = 9;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline float result() const;
  inline void set_result(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.Distribution)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_fantasy_nameid();
  inline void clear_has_fantasy_nameid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_proj();
  inline void clear_has_proj();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* gameid_;
  ::std::string* teamid_;
  ::google::protobuf::int32 season_;
  ::google::protobuf::int32 week_;
  ::google::protobuf::uint64 fantasy_nameid_;
  ::std::string* playerid_;
  ::google::protobuf::int32 proj_;
  float award_;
  float result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ApiData_2eproto();
  friend void protobuf_AssignDesc_ApiData_2eproto();
  friend void protobuf_ShutdownFile_ApiData_2eproto();

  void InitAsDefaultInstance();
  static Distribution* default_instance_;
};
// ===================================================================


// ===================================================================

// FantasyNameHash

// optional string name = 10;
inline bool FantasyNameHash::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameHash::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameHash::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameHash::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FantasyNameHash::name() const {
  return *name_;
}
inline void FantasyNameHash::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameHash::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameHash::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameHash::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FantasyNameHash::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameHash::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 hash = 30;
inline bool FantasyNameHash::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameHash::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameHash::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameHash::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 FantasyNameHash::hash() const {
  return hash_;
}
inline void FantasyNameHash::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
}

// -------------------------------------------------------------------

// Distribution

// optional string gameid = 2;
inline bool Distribution::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Distribution::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Distribution::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Distribution::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& Distribution::gameid() const {
  return *gameid_;
}
inline void Distribution::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void Distribution::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void Distribution::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Distribution::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* Distribution::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Distribution::set_allocated_gameid(::std::string* gameid) {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (gameid) {
    set_has_gameid();
    gameid_ = gameid;
  } else {
    clear_has_gameid();
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string teamid = 4;
inline bool Distribution::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Distribution::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Distribution::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Distribution::clear_teamid() {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    teamid_->clear();
  }
  clear_has_teamid();
}
inline const ::std::string& Distribution::teamid() const {
  return *teamid_;
}
inline void Distribution::set_teamid(const ::std::string& value) {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  teamid_->assign(value);
}
inline void Distribution::set_teamid(const char* value) {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  teamid_->assign(value);
}
inline void Distribution::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  teamid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Distribution::mutable_teamid() {
  set_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    teamid_ = new ::std::string;
  }
  return teamid_;
}
inline ::std::string* Distribution::release_teamid() {
  clear_has_teamid();
  if (teamid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teamid_;
    teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Distribution::set_allocated_teamid(::std::string* teamid) {
  if (teamid_ != &::google::protobuf::internal::kEmptyString) {
    delete teamid_;
  }
  if (teamid) {
    set_has_teamid();
    teamid_ = teamid;
  } else {
    clear_has_teamid();
    teamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 season = 5;
inline bool Distribution::has_season() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Distribution::set_has_season() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Distribution::clear_has_season() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Distribution::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 Distribution::season() const {
  return season_;
}
inline void Distribution::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// optional int32 week = 6;
inline bool Distribution::has_week() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Distribution::set_has_week() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Distribution::clear_has_week() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Distribution::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 Distribution::week() const {
  return week_;
}
inline void Distribution::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
}

// optional uint64 fantasy_nameid = 1;
inline bool Distribution::has_fantasy_nameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Distribution::set_has_fantasy_nameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Distribution::clear_has_fantasy_nameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Distribution::clear_fantasy_nameid() {
  fantasy_nameid_ = GOOGLE_ULONGLONG(0);
  clear_has_fantasy_nameid();
}
inline ::google::protobuf::uint64 Distribution::fantasy_nameid() const {
  return fantasy_nameid_;
}
inline void Distribution::set_fantasy_nameid(::google::protobuf::uint64 value) {
  set_has_fantasy_nameid();
  fantasy_nameid_ = value;
}

// optional string playerid = 3;
inline bool Distribution::has_playerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Distribution::set_has_playerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Distribution::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Distribution::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& Distribution::playerid() const {
  return *playerid_;
}
inline void Distribution::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void Distribution::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void Distribution::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Distribution::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* Distribution::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Distribution::set_allocated_playerid(::std::string* playerid) {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playerid) {
    set_has_playerid();
    playerid_ = playerid;
  } else {
    clear_has_playerid();
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 proj = 7;
inline bool Distribution::has_proj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Distribution::set_has_proj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Distribution::clear_has_proj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Distribution::clear_proj() {
  proj_ = 0;
  clear_has_proj();
}
inline ::google::protobuf::int32 Distribution::proj() const {
  return proj_;
}
inline void Distribution::set_proj(::google::protobuf::int32 value) {
  set_has_proj();
  proj_ = value;
}

// optional float award = 8;
inline bool Distribution::has_award() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Distribution::set_has_award() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Distribution::clear_has_award() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Distribution::clear_award() {
  award_ = 0;
  clear_has_award();
}
inline float Distribution::award() const {
  return award_;
}
inline void Distribution::set_award(float value) {
  set_has_award();
  award_ = value;
}

// optional float result = 9;
inline bool Distribution::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Distribution::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Distribution::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Distribution::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float Distribution::result() const {
  return result_;
}
inline void Distribution::set_result(float value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ApiData_2eproto__INCLUDED
