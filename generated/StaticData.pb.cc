// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StaticData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StaticData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* PlayerBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeeklySchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeeklySchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Kstats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Kstats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dstats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dstats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ostats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ostats_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stats_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StaticData_2eproto() {
  protobuf_AddDesc_StaticData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StaticData.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerBase_descriptor_ = file->message_type(0);
  static const int PlayerBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, position_),
  };
  PlayerBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerBase_descriptor_,
      PlayerBase::default_instance_,
      PlayerBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBase, _internal_metadata_),
      -1);
  GameInfo_descriptor_ = file->message_type(1);
  static const int GameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, away_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, time_),
  };
  GameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _internal_metadata_),
      -1);
  WeeklySchedule_descriptor_ = file->message_type(2);
  static const int WeeklySchedule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, byes_),
  };
  WeeklySchedule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WeeklySchedule_descriptor_,
      WeeklySchedule::default_instance_,
      WeeklySchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, _has_bits_[0]),
      -1,
      -1,
      sizeof(WeeklySchedule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeeklySchedule, _internal_metadata_),
      -1);
  Kstats_descriptor_ = file->message_type(3);
  static const int Kstats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, pa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, fg_),
  };
  Kstats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Kstats_descriptor_,
      Kstats::default_instance_,
      Kstats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Kstats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kstats, _internal_metadata_),
      -1);
  Dstats_descriptor_ = file->message_type(4);
  static const int Dstats_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, twopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, onept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, deftd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, sfty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, turnovers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, sacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, ptsa_),
  };
  Dstats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Dstats_descriptor_,
      Dstats::default_instance_,
      Dstats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Dstats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dstats, _internal_metadata_),
      -1);
  Ostats_descriptor_ = file->message_type(5);
  static const int Ostats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, passyds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, passtd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rushyds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rushtd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, recyds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rectd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, rec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, pint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, fumble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, twopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, onept_),
  };
  Ostats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ostats_descriptor_,
      Ostats::default_instance_,
      Ostats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ostats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ostats, _internal_metadata_),
      -1);
  Stats_descriptor_ = file->message_type(6);
  static const int Stats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, ostats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, dstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, kstats_),
  };
  Stats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Stats_descriptor_,
      Stats::default_instance_,
      Stats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _has_bits_[0]),
      -1,
      -1,
      sizeof(Stats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _internal_metadata_),
      -1);
  PlayerResult_descriptor_ = file->message_type(7);
  static const int PlayerResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, fantaybitaward_),
  };
  PlayerResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerResult_descriptor_,
      PlayerResult::default_instance_,
      PlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _internal_metadata_),
      -1);
  GameResult_descriptor_ = file->message_type(8);
  static const int GameResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, home_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, away_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, kickofftime_),
  };
  GameResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameResult_descriptor_,
      GameResult::default_instance_,
      GameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResult, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StaticData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerBase_descriptor_, &PlayerBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WeeklySchedule_descriptor_, &WeeklySchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Kstats_descriptor_, &Kstats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Dstats_descriptor_, &Dstats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ostats_descriptor_, &Ostats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Stats_descriptor_, &Stats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerResult_descriptor_, &PlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameResult_descriptor_, &GameResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StaticData_2eproto() {
  delete PlayerBase::default_instance_;
  delete PlayerBase_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete WeeklySchedule::default_instance_;
  delete WeeklySchedule_reflection_;
  delete Kstats::default_instance_;
  delete Kstats_reflection_;
  delete Dstats::default_instance_;
  delete Dstats_reflection_;
  delete Ostats::default_instance_;
  delete Ostats_reflection_;
  delete Stats::default_instance_;
  delete Stats_reflection_;
  delete PlayerResult::default_instance_;
  delete PlayerResult_reflection_;
  delete GameResult::default_instance_;
  delete GameResult_reflection_;
}

void protobuf_AddDesc_StaticData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_NameData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020StaticData.proto\022\nfantasybit\032\016NameData"
    ".proto\";\n\nPlayerBase\022\r\n\005first\030\036 \001(\t\022\014\n\004l"
    "ast\030( \001(\t\022\020\n\010position\0302 \001(\t\"@\n\010GameInfo\022"
    "\n\n\002id\030\n \001(\t\022\014\n\004home\030\024 \001(\t\022\014\n\004away\030\036 \001(\t\022"
    "\014\n\004time\030( \001(\r\"C\n\016WeeklySchedule\022#\n\005games"
    "\030\n \003(\0132\024.fantasybit.GameInfo\022\014\n\004byes\030\024 \003"
    "(\t\" \n\006Kstats\022\n\n\002pa\030\n \001(\005\022\n\n\002fg\030\024 \003(\005\"w\n\006"
    "Dstats\022\r\n\005twopt\030d \001(\005\022\r\n\005onept\030n \001(\005\022\r\n\005"
    "deftd\030x \001(\005\022\r\n\004sfty\030\202\001 \001(\005\022\022\n\tturnovers\030"
    "\214\001 \001(\005\022\016\n\005sacks\030\226\001 \001(\005\022\r\n\004ptsa\030\240\001 \001(\005\"\262\001"
    "\n\006Ostats\022\017\n\007passyds\030\n \001(\005\022\016\n\006passtd\030\024 \001("
    "\005\022\017\n\007rushyds\030\036 \001(\005\022\016\n\006rushtd\030( \001(\005\022\016\n\006re"
    "cyds\0302 \001(\005\022\r\n\005rectd\030< \001(\005\022\013\n\003rec\030F \001(\005\022\014"
    "\n\004pint\030P \001(\005\022\016\n\006fumble\030Z \001(\005\022\r\n\005twopt\030d "
    "\001(\005\022\r\n\005onept\030n \001(\005\"s\n\005Stats\022\"\n\006ostats\030\n "
    "\001(\0132\022.fantasybit.Ostats\022\"\n\006dstats\030\024 \001(\0132"
    "\022.fantasybit.Dstats\022\"\n\006kstats\030\036 \001(\0132\022.fa"
    "ntasybit.Kstats\"\207\001\n\014PlayerResult\022\020\n\010play"
    "erid\030\024 \001(\t\022\016\n\006result\030( \001(\002\022 \n\005stats\0302 \001("
    "\0132\021.fantasybit.Stats\0223\n\016fantaybitaward\030<"
    " \003(\0132\033.fantasybit.FantasyBitAward\"\217\001\n\nGa"
    "meResult\022\016\n\006gameid\030\001 \001(\t\022-\n\013home_result\030"
    "\n \003(\0132\030.fantasybit.PlayerResult\022-\n\013away_"
    "result\030\024 \003(\0132\030.fantasybit.PlayerResult\022\023"
    "\n\013kickofftime\030\036 \001(\r", 979);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StaticData.proto", &protobuf_RegisterTypes);
  PlayerBase::default_instance_ = new PlayerBase();
  GameInfo::default_instance_ = new GameInfo();
  WeeklySchedule::default_instance_ = new WeeklySchedule();
  Kstats::default_instance_ = new Kstats();
  Dstats::default_instance_ = new Dstats();
  Ostats::default_instance_ = new Ostats();
  Stats::default_instance_ = new Stats();
  PlayerResult::default_instance_ = new PlayerResult();
  GameResult::default_instance_ = new GameResult();
  PlayerBase::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  WeeklySchedule::default_instance_->InitAsDefaultInstance();
  Kstats::default_instance_->InitAsDefaultInstance();
  Dstats::default_instance_->InitAsDefaultInstance();
  Ostats::default_instance_->InitAsDefaultInstance();
  Stats::default_instance_->InitAsDefaultInstance();
  PlayerResult::default_instance_->InitAsDefaultInstance();
  GameResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StaticData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StaticData_2eproto {
  StaticDescriptorInitializer_StaticData_2eproto() {
    protobuf_AddDesc_StaticData_2eproto();
  }
} static_descriptor_initializer_StaticData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int PlayerBase::kFirstFieldNumber;
const int PlayerBase::kLastFieldNumber;
const int PlayerBase::kPositionFieldNumber;
#endif  // !_MSC_VER

PlayerBase::PlayerBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerBase)
}

void PlayerBase::InitAsDefaultInstance() {
}

PlayerBase::PlayerBase(const PlayerBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerBase)
}

void PlayerBase::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBase::~PlayerBase() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerBase)
  SharedDtor();
}

void PlayerBase::SharedDtor() {
  first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBase_descriptor_;
}

const PlayerBase& PlayerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

PlayerBase* PlayerBase::default_instance_ = NULL;

PlayerBase* PlayerBase::New(::google::protobuf::Arena* arena) const {
  PlayerBase* n = new PlayerBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerBase::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_first()) {
      first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last()) {
      last_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_position()) {
      position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first = 30;
      case 30: {
        if (tag == 242) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first().data(), this->first().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerBase.first");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_last;
        break;
      }

      // optional string last = 40;
      case 40: {
        if (tag == 322) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last().data(), this->last().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerBase.last");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_position;
        break;
      }

      // optional string position = 50;
      case 50: {
        if (tag == 402) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerBase.position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerBase)
  return false;
#undef DO_
}

void PlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerBase)
  // optional string first = 30;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.first");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->first(), output);
  }

  // optional string last = 40;
  if (has_last()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last().data(), this->last().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.last");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->last(), output);
  }

  // optional string position = 50;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerBase)
}

::google::protobuf::uint8* PlayerBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerBase)
  // optional string first = 30;
  if (has_first()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first().data(), this->first().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.first");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->first(), target);
  }

  // optional string last = 40;
  if (has_last()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last().data(), this->last().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.last");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->last(), target);
  }

  // optional string position = 50;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerBase.position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerBase)
  return target;
}

int PlayerBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string first = 30;
    if (has_first()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first());
    }

    // optional string last = 40;
    if (has_last()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last());
    }

    // optional string position = 50;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerBase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBase::MergeFrom(const PlayerBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_has_first();
      first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
    }
    if (from.has_last()) {
      set_has_last();
      last_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_);
    }
    if (from.has_position()) {
      set_has_position();
      position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBase::CopyFrom(const PlayerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBase::IsInitialized() const {

  return true;
}

void PlayerBase::Swap(PlayerBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerBase::InternalSwap(PlayerBase* other) {
  first_.Swap(&other->first_);
  last_.Swap(&other->last_);
  position_.Swap(&other->position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBase_descriptor_;
  metadata.reflection = PlayerBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerBase

// optional string first = 30;
bool PlayerBase::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerBase::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerBase::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerBase::clear_first() {
  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first();
}
 const ::std::string& PlayerBase::first() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.first)
  return first_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerBase::set_first(const ::std::string& value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.first)
}
 void PlayerBase::set_first(const char* value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.first)
}
 void PlayerBase::set_first(const char* value, size_t size) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.first)
}
 ::std::string* PlayerBase::mutable_first() {
  set_has_first();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.first)
  return first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerBase::release_first() {
  clear_has_first();
  return first_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerBase::set_allocated_first(::std::string* first) {
  if (first != NULL) {
    set_has_first();
  } else {
    clear_has_first();
  }
  first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.first)
}

// optional string last = 40;
bool PlayerBase::has_last() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerBase::set_has_last() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerBase::clear_has_last() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerBase::clear_last() {
  last_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last();
}
 const ::std::string& PlayerBase::last() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.last)
  return last_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerBase::set_last(const ::std::string& value) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.last)
}
 void PlayerBase::set_last(const char* value) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.last)
}
 void PlayerBase::set_last(const char* value, size_t size) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.last)
}
 ::std::string* PlayerBase::mutable_last() {
  set_has_last();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.last)
  return last_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerBase::release_last() {
  clear_has_last();
  return last_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerBase::set_allocated_last(::std::string* last) {
  if (last != NULL) {
    set_has_last();
  } else {
    clear_has_last();
  }
  last_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.last)
}

// optional string position = 50;
bool PlayerBase::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerBase::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerBase::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerBase::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_position();
}
 const ::std::string& PlayerBase::position() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.position)
  return position_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerBase::set_position(const ::std::string& value) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.position)
}
 void PlayerBase::set_position(const char* value) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.position)
}
 void PlayerBase::set_position(const char* value, size_t size) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.position)
}
 ::std::string* PlayerBase::mutable_position() {
  set_has_position();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerBase::release_position() {
  clear_has_position();
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerBase::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    set_has_position();
  } else {
    clear_has_position();
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kIdFieldNumber;
const int GameInfo::kHomeFieldNumber;
const int GameInfo::kAwayFieldNumber;
const int GameInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameInfo)
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameInfo)
}

void GameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  away_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:fantasybit.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  home_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  away_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New(::google::protobuf::Arena* arena) const {
  GameInfo* n = new GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInfo::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_home()) {
      home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_away()) {
      away_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameInfo.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_home;
        break;
      }

      // optional string home = 20;
      case 20: {
        if (tag == 162) {
         parse_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->home().data(), this->home().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameInfo.home");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_away;
        break;
      }

      // optional string away = 30;
      case 30: {
        if (tag == 242) {
         parse_away:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_away()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->away().data(), this->away().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameInfo.away");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_time;
        break;
      }

      // optional uint32 time = 40;
      case 40: {
        if (tag == 320) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameInfo)
  // optional string id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->id(), output);
  }

  // optional string home = 20;
  if (has_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home().data(), this->home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.home");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->home(), output);
  }

  // optional string away = 30;
  if (has_away()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->away().data(), this->away().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.away");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->away(), output);
  }

  // optional uint32 time = 40;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameInfo)
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameInfo)
  // optional string id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->id(), target);
  }

  // optional string home = 20;
  if (has_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home().data(), this->home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.home");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->home(), target);
  }

  // optional string away = 30;
  if (has_away()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->away().data(), this->away().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameInfo.away");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->away(), target);
  }

  // optional uint32 time = 40;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameInfo)
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string home = 20;
    if (has_home()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home());
    }

    // optional string away = 30;
    if (has_away()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->away());
    }

    // optional uint32 time = 40;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_home()) {
      set_has_home();
      home_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.home_);
    }
    if (from.has_away()) {
      set_has_away();
      away_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.away_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  id_.Swap(&other->id_);
  home_.Swap(&other->home_);
  away_.Swap(&other->away_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInfo

// optional string id = 10;
bool GameInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GameInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& GameInfo::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.id)
}
 void GameInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.id)
}
 void GameInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.id)
}
 ::std::string* GameInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameInfo::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.id)
}

// optional string home = 20;
bool GameInfo::has_home() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameInfo::set_has_home() {
  _has_bits_[0] |= 0x00000002u;
}
void GameInfo::clear_has_home() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameInfo::clear_home() {
  home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_home();
}
 const ::std::string& GameInfo::home() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.home)
  return home_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameInfo::set_home(const ::std::string& value) {
  set_has_home();
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.home)
}
 void GameInfo::set_home(const char* value) {
  set_has_home();
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.home)
}
 void GameInfo::set_home(const char* value, size_t size) {
  set_has_home();
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.home)
}
 ::std::string* GameInfo::mutable_home() {
  set_has_home();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.home)
  return home_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameInfo::release_home() {
  clear_has_home();
  return home_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameInfo::set_allocated_home(::std::string* home) {
  if (home != NULL) {
    set_has_home();
  } else {
    clear_has_home();
  }
  home_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.home)
}

// optional string away = 30;
bool GameInfo::has_away() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameInfo::set_has_away() {
  _has_bits_[0] |= 0x00000004u;
}
void GameInfo::clear_has_away() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameInfo::clear_away() {
  away_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_away();
}
 const ::std::string& GameInfo::away() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.away)
  return away_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameInfo::set_away(const ::std::string& value) {
  set_has_away();
  away_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.away)
}
 void GameInfo::set_away(const char* value) {
  set_has_away();
  away_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.away)
}
 void GameInfo::set_away(const char* value, size_t size) {
  set_has_away();
  away_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.away)
}
 ::std::string* GameInfo::mutable_away() {
  set_has_away();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.away)
  return away_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameInfo::release_away() {
  clear_has_away();
  return away_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameInfo::set_allocated_away(::std::string* away) {
  if (away != NULL) {
    set_has_away();
  } else {
    clear_has_away();
  }
  away_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), away);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.away)
}

// optional uint32 time = 40;
bool GameInfo::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameInfo::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void GameInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 GameInfo::time() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.time)
  return time_;
}
 void GameInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int WeeklySchedule::kGamesFieldNumber;
const int WeeklySchedule::kByesFieldNumber;
#endif  // !_MSC_VER

WeeklySchedule::WeeklySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.WeeklySchedule)
}

void WeeklySchedule::InitAsDefaultInstance() {
}

WeeklySchedule::WeeklySchedule(const WeeklySchedule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.WeeklySchedule)
}

void WeeklySchedule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeeklySchedule::~WeeklySchedule() {
  // @@protoc_insertion_point(destructor:fantasybit.WeeklySchedule)
  SharedDtor();
}

void WeeklySchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeeklySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeeklySchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeeklySchedule_descriptor_;
}

const WeeklySchedule& WeeklySchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

WeeklySchedule* WeeklySchedule::default_instance_ = NULL;

WeeklySchedule* WeeklySchedule::New(::google::protobuf::Arena* arena) const {
  WeeklySchedule* n = new WeeklySchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeeklySchedule::Clear() {
  games_.Clear();
  byes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WeeklySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.WeeklySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fantasybit.GameInfo games = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_games;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_byes;
        break;
      }

      // repeated string byes = 20;
      case 20: {
        if (tag == 162) {
         parse_byes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_byes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->byes(this->byes_size() - 1).data(),
            this->byes(this->byes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.WeeklySchedule.byes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_byes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.WeeklySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.WeeklySchedule)
  return false;
#undef DO_
}

void WeeklySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.WeeklySchedule)
  // repeated .fantasybit.GameInfo games = 10;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->games(i), output);
  }

  // repeated string byes = 20;
  for (int i = 0; i < this->byes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->byes(i).data(), this->byes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.WeeklySchedule.byes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->byes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.WeeklySchedule)
}

::google::protobuf::uint8* WeeklySchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.WeeklySchedule)
  // repeated .fantasybit.GameInfo games = 10;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->games(i), target);
  }

  // repeated string byes = 20;
  for (int i = 0; i < this->byes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->byes(i).data(), this->byes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.WeeklySchedule.byes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->byes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.WeeklySchedule)
  return target;
}

int WeeklySchedule::ByteSize() const {
  int total_size = 0;

  // repeated .fantasybit.GameInfo games = 10;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  // repeated string byes = 20;
  total_size += 2 * this->byes_size();
  for (int i = 0; i < this->byes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->byes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeeklySchedule::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WeeklySchedule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WeeklySchedule>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeeklySchedule::MergeFrom(const WeeklySchedule& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  games_.MergeFrom(from.games_);
  byes_.MergeFrom(from.byes_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WeeklySchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeeklySchedule::CopyFrom(const WeeklySchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeeklySchedule::IsInitialized() const {

  return true;
}

void WeeklySchedule::Swap(WeeklySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeeklySchedule::InternalSwap(WeeklySchedule* other) {
  games_.UnsafeArenaSwap(&other->games_);
  byes_.UnsafeArenaSwap(&other->byes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeeklySchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeeklySchedule_descriptor_;
  metadata.reflection = WeeklySchedule_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeeklySchedule

// repeated .fantasybit.GameInfo games = 10;
int WeeklySchedule::games_size() const {
  return games_.size();
}
void WeeklySchedule::clear_games() {
  games_.Clear();
}
const ::fantasybit::GameInfo& WeeklySchedule::games(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.WeeklySchedule.games)
  return games_.Get(index);
}
::fantasybit::GameInfo* WeeklySchedule::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeeklySchedule.games)
  return games_.Mutable(index);
}
::fantasybit::GameInfo* WeeklySchedule::add_games() {
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo >*
WeeklySchedule::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.WeeklySchedule.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo >&
WeeklySchedule::games() const {
  // @@protoc_insertion_point(field_list:fantasybit.WeeklySchedule.games)
  return games_;
}

// repeated string byes = 20;
int WeeklySchedule::byes_size() const {
  return byes_.size();
}
void WeeklySchedule::clear_byes() {
  byes_.Clear();
}
 const ::std::string& WeeklySchedule::byes(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.WeeklySchedule.byes)
  return byes_.Get(index);
}
 ::std::string* WeeklySchedule::mutable_byes(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeeklySchedule.byes)
  return byes_.Mutable(index);
}
 void WeeklySchedule::set_byes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.WeeklySchedule.byes)
  byes_.Mutable(index)->assign(value);
}
 void WeeklySchedule::set_byes(int index, const char* value) {
  byes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.WeeklySchedule.byes)
}
 void WeeklySchedule::set_byes(int index, const char* value, size_t size) {
  byes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeeklySchedule.byes)
}
 ::std::string* WeeklySchedule::add_byes() {
  return byes_.Add();
}
 void WeeklySchedule::add_byes(const ::std::string& value) {
  byes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.byes)
}
 void WeeklySchedule::add_byes(const char* value) {
  byes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.WeeklySchedule.byes)
}
 void WeeklySchedule::add_byes(const char* value, size_t size) {
  byes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.WeeklySchedule.byes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
WeeklySchedule::byes() const {
  // @@protoc_insertion_point(field_list:fantasybit.WeeklySchedule.byes)
  return byes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
WeeklySchedule::mutable_byes() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.WeeklySchedule.byes)
  return &byes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Kstats::kPaFieldNumber;
const int Kstats::kFgFieldNumber;
#endif  // !_MSC_VER

Kstats::Kstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Kstats)
}

void Kstats::InitAsDefaultInstance() {
}

Kstats::Kstats(const Kstats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Kstats)
}

void Kstats::SharedCtor() {
  _cached_size_ = 0;
  pa_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Kstats::~Kstats() {
  // @@protoc_insertion_point(destructor:fantasybit.Kstats)
  SharedDtor();
}

void Kstats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Kstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kstats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Kstats_descriptor_;
}

const Kstats& Kstats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Kstats* Kstats::default_instance_ = NULL;

Kstats* Kstats::New(::google::protobuf::Arena* arena) const {
  Kstats* n = new Kstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Kstats::Clear() {
  pa_ = 0;
  fg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Kstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Kstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pa = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pa_)));
          set_has_pa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_fg;
        break;
      }

      // repeated int32 fg = 20;
      case 20: {
        if (tag == 160) {
         parse_fg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_fg())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fg())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_fg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Kstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Kstats)
  return false;
#undef DO_
}

void Kstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Kstats)
  // optional int32 pa = 10;
  if (has_pa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pa(), output);
  }

  // repeated int32 fg = 20;
  for (int i = 0; i < this->fg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->fg(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Kstats)
}

::google::protobuf::uint8* Kstats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Kstats)
  // optional int32 pa = 10;
  if (has_pa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pa(), target);
  }

  // repeated int32 fg = 20;
  for (int i = 0; i < this->fg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->fg(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Kstats)
  return target;
}

int Kstats::ByteSize() const {
  int total_size = 0;

  // optional int32 pa = 10;
  if (has_pa()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pa());
  }

  // repeated int32 fg = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->fg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fg(i));
    }
    total_size += 2 * this->fg_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kstats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Kstats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Kstats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Kstats::MergeFrom(const Kstats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fg_.MergeFrom(from.fg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pa()) {
      set_pa(from.pa());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Kstats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kstats::CopyFrom(const Kstats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kstats::IsInitialized() const {

  return true;
}

void Kstats::Swap(Kstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kstats::InternalSwap(Kstats* other) {
  std::swap(pa_, other->pa_);
  fg_.UnsafeArenaSwap(&other->fg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Kstats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Kstats_descriptor_;
  metadata.reflection = Kstats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Kstats

// optional int32 pa = 10;
bool Kstats::has_pa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Kstats::set_has_pa() {
  _has_bits_[0] |= 0x00000001u;
}
void Kstats::clear_has_pa() {
  _has_bits_[0] &= ~0x00000001u;
}
void Kstats::clear_pa() {
  pa_ = 0;
  clear_has_pa();
}
 ::google::protobuf::int32 Kstats::pa() const {
  // @@protoc_insertion_point(field_get:fantasybit.Kstats.pa)
  return pa_;
}
 void Kstats::set_pa(::google::protobuf::int32 value) {
  set_has_pa();
  pa_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Kstats.pa)
}

// repeated int32 fg = 20;
int Kstats::fg_size() const {
  return fg_.size();
}
void Kstats::clear_fg() {
  fg_.Clear();
}
 ::google::protobuf::int32 Kstats::fg(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.Kstats.fg)
  return fg_.Get(index);
}
 void Kstats::set_fg(int index, ::google::protobuf::int32 value) {
  fg_.Set(index, value);
  // @@protoc_insertion_point(field_set:fantasybit.Kstats.fg)
}
 void Kstats::add_fg(::google::protobuf::int32 value) {
  fg_.Add(value);
  // @@protoc_insertion_point(field_add:fantasybit.Kstats.fg)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Kstats::fg() const {
  // @@protoc_insertion_point(field_list:fantasybit.Kstats.fg)
  return fg_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Kstats::mutable_fg() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.Kstats.fg)
  return &fg_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Dstats::kTwoptFieldNumber;
const int Dstats::kOneptFieldNumber;
const int Dstats::kDeftdFieldNumber;
const int Dstats::kSftyFieldNumber;
const int Dstats::kTurnoversFieldNumber;
const int Dstats::kSacksFieldNumber;
const int Dstats::kPtsaFieldNumber;
#endif  // !_MSC_VER

Dstats::Dstats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Dstats)
}

void Dstats::InitAsDefaultInstance() {
}

Dstats::Dstats(const Dstats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Dstats)
}

void Dstats::SharedCtor() {
  _cached_size_ = 0;
  twopt_ = 0;
  onept_ = 0;
  deftd_ = 0;
  sfty_ = 0;
  turnovers_ = 0;
  sacks_ = 0;
  ptsa_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dstats::~Dstats() {
  // @@protoc_insertion_point(destructor:fantasybit.Dstats)
  SharedDtor();
}

void Dstats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dstats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dstats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dstats_descriptor_;
}

const Dstats& Dstats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Dstats* Dstats::default_instance_ = NULL;

Dstats* Dstats::New(::google::protobuf::Arena* arena) const {
  Dstats* n = new Dstats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dstats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Dstats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(twopt_, ptsa_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Dstats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Dstats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 twopt = 100;
      case 100: {
        if (tag == 800) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twopt_)));
          set_has_twopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_onept;
        break;
      }

      // optional int32 onept = 110;
      case 110: {
        if (tag == 880) {
         parse_onept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onept_)));
          set_has_onept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_deftd;
        break;
      }

      // optional int32 deftd = 120;
      case 120: {
        if (tag == 960) {
         parse_deftd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deftd_)));
          set_has_deftd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1040)) goto parse_sfty;
        break;
      }

      // optional int32 sfty = 130;
      case 130: {
        if (tag == 1040) {
         parse_sfty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sfty_)));
          set_has_sfty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1120)) goto parse_turnovers;
        break;
      }

      // optional int32 turnovers = 140;
      case 140: {
        if (tag == 1120) {
         parse_turnovers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnovers_)));
          set_has_turnovers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1200)) goto parse_sacks;
        break;
      }

      // optional int32 sacks = 150;
      case 150: {
        if (tag == 1200) {
         parse_sacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sacks_)));
          set_has_sacks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1280)) goto parse_ptsa;
        break;
      }

      // optional int32 ptsa = 160;
      case 160: {
        if (tag == 1280) {
         parse_ptsa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptsa_)));
          set_has_ptsa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Dstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Dstats)
  return false;
#undef DO_
}

void Dstats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Dstats)
  // optional int32 twopt = 100;
  if (has_twopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->twopt(), output);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->onept(), output);
  }

  // optional int32 deftd = 120;
  if (has_deftd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(120, this->deftd(), output);
  }

  // optional int32 sfty = 130;
  if (has_sfty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(130, this->sfty(), output);
  }

  // optional int32 turnovers = 140;
  if (has_turnovers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(140, this->turnovers(), output);
  }

  // optional int32 sacks = 150;
  if (has_sacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(150, this->sacks(), output);
  }

  // optional int32 ptsa = 160;
  if (has_ptsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(160, this->ptsa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Dstats)
}

::google::protobuf::uint8* Dstats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Dstats)
  // optional int32 twopt = 100;
  if (has_twopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->twopt(), target);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->onept(), target);
  }

  // optional int32 deftd = 120;
  if (has_deftd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(120, this->deftd(), target);
  }

  // optional int32 sfty = 130;
  if (has_sfty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(130, this->sfty(), target);
  }

  // optional int32 turnovers = 140;
  if (has_turnovers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(140, this->turnovers(), target);
  }

  // optional int32 sacks = 150;
  if (has_sacks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(150, this->sacks(), target);
  }

  // optional int32 ptsa = 160;
  if (has_ptsa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(160, this->ptsa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Dstats)
  return target;
}

int Dstats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 twopt = 100;
    if (has_twopt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twopt());
    }

    // optional int32 onept = 110;
    if (has_onept()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onept());
    }

    // optional int32 deftd = 120;
    if (has_deftd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deftd());
    }

    // optional int32 sfty = 130;
    if (has_sfty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sfty());
    }

    // optional int32 turnovers = 140;
    if (has_turnovers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnovers());
    }

    // optional int32 sacks = 150;
    if (has_sacks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sacks());
    }

    // optional int32 ptsa = 160;
    if (has_ptsa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptsa());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dstats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Dstats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Dstats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dstats::MergeFrom(const Dstats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_twopt()) {
      set_twopt(from.twopt());
    }
    if (from.has_onept()) {
      set_onept(from.onept());
    }
    if (from.has_deftd()) {
      set_deftd(from.deftd());
    }
    if (from.has_sfty()) {
      set_sfty(from.sfty());
    }
    if (from.has_turnovers()) {
      set_turnovers(from.turnovers());
    }
    if (from.has_sacks()) {
      set_sacks(from.sacks());
    }
    if (from.has_ptsa()) {
      set_ptsa(from.ptsa());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Dstats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dstats::CopyFrom(const Dstats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dstats::IsInitialized() const {

  return true;
}

void Dstats::Swap(Dstats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dstats::InternalSwap(Dstats* other) {
  std::swap(twopt_, other->twopt_);
  std::swap(onept_, other->onept_);
  std::swap(deftd_, other->deftd_);
  std::swap(sfty_, other->sfty_);
  std::swap(turnovers_, other->turnovers_);
  std::swap(sacks_, other->sacks_);
  std::swap(ptsa_, other->ptsa_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dstats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dstats_descriptor_;
  metadata.reflection = Dstats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dstats

// optional int32 twopt = 100;
bool Dstats::has_twopt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dstats::set_has_twopt() {
  _has_bits_[0] |= 0x00000001u;
}
void Dstats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dstats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
 ::google::protobuf::int32 Dstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.twopt)
  return twopt_;
}
 void Dstats::set_twopt(::google::protobuf::int32 value) {
  set_has_twopt();
  twopt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.twopt)
}

// optional int32 onept = 110;
bool Dstats::has_onept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dstats::set_has_onept() {
  _has_bits_[0] |= 0x00000002u;
}
void Dstats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dstats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
 ::google::protobuf::int32 Dstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.onept)
  return onept_;
}
 void Dstats::set_onept(::google::protobuf::int32 value) {
  set_has_onept();
  onept_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.onept)
}

// optional int32 deftd = 120;
bool Dstats::has_deftd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dstats::set_has_deftd() {
  _has_bits_[0] |= 0x00000004u;
}
void Dstats::clear_has_deftd() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dstats::clear_deftd() {
  deftd_ = 0;
  clear_has_deftd();
}
 ::google::protobuf::int32 Dstats::deftd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.deftd)
  return deftd_;
}
 void Dstats::set_deftd(::google::protobuf::int32 value) {
  set_has_deftd();
  deftd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.deftd)
}

// optional int32 sfty = 130;
bool Dstats::has_sfty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dstats::set_has_sfty() {
  _has_bits_[0] |= 0x00000008u;
}
void Dstats::clear_has_sfty() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dstats::clear_sfty() {
  sfty_ = 0;
  clear_has_sfty();
}
 ::google::protobuf::int32 Dstats::sfty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.sfty)
  return sfty_;
}
 void Dstats::set_sfty(::google::protobuf::int32 value) {
  set_has_sfty();
  sfty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.sfty)
}

// optional int32 turnovers = 140;
bool Dstats::has_turnovers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dstats::set_has_turnovers() {
  _has_bits_[0] |= 0x00000010u;
}
void Dstats::clear_has_turnovers() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dstats::clear_turnovers() {
  turnovers_ = 0;
  clear_has_turnovers();
}
 ::google::protobuf::int32 Dstats::turnovers() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.turnovers)
  return turnovers_;
}
 void Dstats::set_turnovers(::google::protobuf::int32 value) {
  set_has_turnovers();
  turnovers_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.turnovers)
}

// optional int32 sacks = 150;
bool Dstats::has_sacks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dstats::set_has_sacks() {
  _has_bits_[0] |= 0x00000020u;
}
void Dstats::clear_has_sacks() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dstats::clear_sacks() {
  sacks_ = 0;
  clear_has_sacks();
}
 ::google::protobuf::int32 Dstats::sacks() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.sacks)
  return sacks_;
}
 void Dstats::set_sacks(::google::protobuf::int32 value) {
  set_has_sacks();
  sacks_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.sacks)
}

// optional int32 ptsa = 160;
bool Dstats::has_ptsa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dstats::set_has_ptsa() {
  _has_bits_[0] |= 0x00000040u;
}
void Dstats::clear_has_ptsa() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dstats::clear_ptsa() {
  ptsa_ = 0;
  clear_has_ptsa();
}
 ::google::protobuf::int32 Dstats::ptsa() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.ptsa)
  return ptsa_;
}
 void Dstats::set_ptsa(::google::protobuf::int32 value) {
  set_has_ptsa();
  ptsa_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.ptsa)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Ostats::kPassydsFieldNumber;
const int Ostats::kPasstdFieldNumber;
const int Ostats::kRushydsFieldNumber;
const int Ostats::kRushtdFieldNumber;
const int Ostats::kRecydsFieldNumber;
const int Ostats::kRectdFieldNumber;
const int Ostats::kRecFieldNumber;
const int Ostats::kPintFieldNumber;
const int Ostats::kFumbleFieldNumber;
const int Ostats::kTwoptFieldNumber;
const int Ostats::kOneptFieldNumber;
#endif  // !_MSC_VER

Ostats::Ostats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Ostats)
}

void Ostats::InitAsDefaultInstance() {
}

Ostats::Ostats(const Ostats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Ostats)
}

void Ostats::SharedCtor() {
  _cached_size_ = 0;
  passyds_ = 0;
  passtd_ = 0;
  rushyds_ = 0;
  rushtd_ = 0;
  recyds_ = 0;
  rectd_ = 0;
  rec_ = 0;
  pint_ = 0;
  fumble_ = 0;
  twopt_ = 0;
  onept_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ostats::~Ostats() {
  // @@protoc_insertion_point(destructor:fantasybit.Ostats)
  SharedDtor();
}

void Ostats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ostats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ostats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ostats_descriptor_;
}

const Ostats& Ostats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Ostats* Ostats::default_instance_ = NULL;

Ostats* Ostats::New(::google::protobuf::Arena* arena) const {
  Ostats* n = new Ostats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ostats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ostats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(passyds_, pint_);
  }
  ZR_(fumble_, onept_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ostats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Ostats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 passyds = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passyds_)));
          set_has_passyds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_passtd;
        break;
      }

      // optional int32 passtd = 20;
      case 20: {
        if (tag == 160) {
         parse_passtd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtd_)));
          set_has_passtd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_rushyds;
        break;
      }

      // optional int32 rushyds = 30;
      case 30: {
        if (tag == 240) {
         parse_rushyds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rushyds_)));
          set_has_rushyds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_rushtd;
        break;
      }

      // optional int32 rushtd = 40;
      case 40: {
        if (tag == 320) {
         parse_rushtd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rushtd_)));
          set_has_rushtd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_recyds;
        break;
      }

      // optional int32 recyds = 50;
      case 50: {
        if (tag == 400) {
         parse_recyds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recyds_)));
          set_has_recyds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_rectd;
        break;
      }

      // optional int32 rectd = 60;
      case 60: {
        if (tag == 480) {
         parse_rectd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rectd_)));
          set_has_rectd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_rec;
        break;
      }

      // optional int32 rec = 70;
      case 70: {
        if (tag == 560) {
         parse_rec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rec_)));
          set_has_rec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_pint;
        break;
      }

      // optional int32 pint = 80;
      case 80: {
        if (tag == 640) {
         parse_pint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pint_)));
          set_has_pint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_fumble;
        break;
      }

      // optional int32 fumble = 90;
      case 90: {
        if (tag == 720) {
         parse_fumble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fumble_)));
          set_has_fumble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_twopt;
        break;
      }

      // optional int32 twopt = 100;
      case 100: {
        if (tag == 800) {
         parse_twopt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twopt_)));
          set_has_twopt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_onept;
        break;
      }

      // optional int32 onept = 110;
      case 110: {
        if (tag == 880) {
         parse_onept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onept_)));
          set_has_onept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Ostats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Ostats)
  return false;
#undef DO_
}

void Ostats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Ostats)
  // optional int32 passyds = 10;
  if (has_passyds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->passyds(), output);
  }

  // optional int32 passtd = 20;
  if (has_passtd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->passtd(), output);
  }

  // optional int32 rushyds = 30;
  if (has_rushyds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rushyds(), output);
  }

  // optional int32 rushtd = 40;
  if (has_rushtd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rushtd(), output);
  }

  // optional int32 recyds = 50;
  if (has_recyds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->recyds(), output);
  }

  // optional int32 rectd = 60;
  if (has_rectd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->rectd(), output);
  }

  // optional int32 rec = 70;
  if (has_rec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->rec(), output);
  }

  // optional int32 pint = 80;
  if (has_pint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->pint(), output);
  }

  // optional int32 fumble = 90;
  if (has_fumble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(90, this->fumble(), output);
  }

  // optional int32 twopt = 100;
  if (has_twopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->twopt(), output);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(110, this->onept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Ostats)
}

::google::protobuf::uint8* Ostats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Ostats)
  // optional int32 passyds = 10;
  if (has_passyds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->passyds(), target);
  }

  // optional int32 passtd = 20;
  if (has_passtd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->passtd(), target);
  }

  // optional int32 rushyds = 30;
  if (has_rushyds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rushyds(), target);
  }

  // optional int32 rushtd = 40;
  if (has_rushtd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rushtd(), target);
  }

  // optional int32 recyds = 50;
  if (has_recyds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->recyds(), target);
  }

  // optional int32 rectd = 60;
  if (has_rectd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->rectd(), target);
  }

  // optional int32 rec = 70;
  if (has_rec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->rec(), target);
  }

  // optional int32 pint = 80;
  if (has_pint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->pint(), target);
  }

  // optional int32 fumble = 90;
  if (has_fumble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(90, this->fumble(), target);
  }

  // optional int32 twopt = 100;
  if (has_twopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->twopt(), target);
  }

  // optional int32 onept = 110;
  if (has_onept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(110, this->onept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Ostats)
  return target;
}

int Ostats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 passyds = 10;
    if (has_passyds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passyds());
    }

    // optional int32 passtd = 20;
    if (has_passtd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtd());
    }

    // optional int32 rushyds = 30;
    if (has_rushyds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rushyds());
    }

    // optional int32 rushtd = 40;
    if (has_rushtd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rushtd());
    }

    // optional int32 recyds = 50;
    if (has_recyds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recyds());
    }

    // optional int32 rectd = 60;
    if (has_rectd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rectd());
    }

    // optional int32 rec = 70;
    if (has_rec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rec());
    }

    // optional int32 pint = 80;
    if (has_pint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pint());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 fumble = 90;
    if (has_fumble()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fumble());
    }

    // optional int32 twopt = 100;
    if (has_twopt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twopt());
    }

    // optional int32 onept = 110;
    if (has_onept()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onept());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ostats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ostats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ostats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ostats::MergeFrom(const Ostats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passyds()) {
      set_passyds(from.passyds());
    }
    if (from.has_passtd()) {
      set_passtd(from.passtd());
    }
    if (from.has_rushyds()) {
      set_rushyds(from.rushyds());
    }
    if (from.has_rushtd()) {
      set_rushtd(from.rushtd());
    }
    if (from.has_recyds()) {
      set_recyds(from.recyds());
    }
    if (from.has_rectd()) {
      set_rectd(from.rectd());
    }
    if (from.has_rec()) {
      set_rec(from.rec());
    }
    if (from.has_pint()) {
      set_pint(from.pint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fumble()) {
      set_fumble(from.fumble());
    }
    if (from.has_twopt()) {
      set_twopt(from.twopt());
    }
    if (from.has_onept()) {
      set_onept(from.onept());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ostats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ostats::CopyFrom(const Ostats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ostats::IsInitialized() const {

  return true;
}

void Ostats::Swap(Ostats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ostats::InternalSwap(Ostats* other) {
  std::swap(passyds_, other->passyds_);
  std::swap(passtd_, other->passtd_);
  std::swap(rushyds_, other->rushyds_);
  std::swap(rushtd_, other->rushtd_);
  std::swap(recyds_, other->recyds_);
  std::swap(rectd_, other->rectd_);
  std::swap(rec_, other->rec_);
  std::swap(pint_, other->pint_);
  std::swap(fumble_, other->fumble_);
  std::swap(twopt_, other->twopt_);
  std::swap(onept_, other->onept_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ostats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ostats_descriptor_;
  metadata.reflection = Ostats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ostats

// optional int32 passyds = 10;
bool Ostats::has_passyds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ostats::set_has_passyds() {
  _has_bits_[0] |= 0x00000001u;
}
void Ostats::clear_has_passyds() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ostats::clear_passyds() {
  passyds_ = 0;
  clear_has_passyds();
}
 ::google::protobuf::int32 Ostats::passyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.passyds)
  return passyds_;
}
 void Ostats::set_passyds(::google::protobuf::int32 value) {
  set_has_passyds();
  passyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.passyds)
}

// optional int32 passtd = 20;
bool Ostats::has_passtd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ostats::set_has_passtd() {
  _has_bits_[0] |= 0x00000002u;
}
void Ostats::clear_has_passtd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ostats::clear_passtd() {
  passtd_ = 0;
  clear_has_passtd();
}
 ::google::protobuf::int32 Ostats::passtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.passtd)
  return passtd_;
}
 void Ostats::set_passtd(::google::protobuf::int32 value) {
  set_has_passtd();
  passtd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.passtd)
}

// optional int32 rushyds = 30;
bool Ostats::has_rushyds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ostats::set_has_rushyds() {
  _has_bits_[0] |= 0x00000004u;
}
void Ostats::clear_has_rushyds() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ostats::clear_rushyds() {
  rushyds_ = 0;
  clear_has_rushyds();
}
 ::google::protobuf::int32 Ostats::rushyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rushyds)
  return rushyds_;
}
 void Ostats::set_rushyds(::google::protobuf::int32 value) {
  set_has_rushyds();
  rushyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rushyds)
}

// optional int32 rushtd = 40;
bool Ostats::has_rushtd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ostats::set_has_rushtd() {
  _has_bits_[0] |= 0x00000008u;
}
void Ostats::clear_has_rushtd() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ostats::clear_rushtd() {
  rushtd_ = 0;
  clear_has_rushtd();
}
 ::google::protobuf::int32 Ostats::rushtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rushtd)
  return rushtd_;
}
 void Ostats::set_rushtd(::google::protobuf::int32 value) {
  set_has_rushtd();
  rushtd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rushtd)
}

// optional int32 recyds = 50;
bool Ostats::has_recyds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ostats::set_has_recyds() {
  _has_bits_[0] |= 0x00000010u;
}
void Ostats::clear_has_recyds() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ostats::clear_recyds() {
  recyds_ = 0;
  clear_has_recyds();
}
 ::google::protobuf::int32 Ostats::recyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.recyds)
  return recyds_;
}
 void Ostats::set_recyds(::google::protobuf::int32 value) {
  set_has_recyds();
  recyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.recyds)
}

// optional int32 rectd = 60;
bool Ostats::has_rectd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ostats::set_has_rectd() {
  _has_bits_[0] |= 0x00000020u;
}
void Ostats::clear_has_rectd() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ostats::clear_rectd() {
  rectd_ = 0;
  clear_has_rectd();
}
 ::google::protobuf::int32 Ostats::rectd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rectd)
  return rectd_;
}
 void Ostats::set_rectd(::google::protobuf::int32 value) {
  set_has_rectd();
  rectd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rectd)
}

// optional int32 rec = 70;
bool Ostats::has_rec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ostats::set_has_rec() {
  _has_bits_[0] |= 0x00000040u;
}
void Ostats::clear_has_rec() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ostats::clear_rec() {
  rec_ = 0;
  clear_has_rec();
}
 ::google::protobuf::int32 Ostats::rec() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rec)
  return rec_;
}
 void Ostats::set_rec(::google::protobuf::int32 value) {
  set_has_rec();
  rec_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rec)
}

// optional int32 pint = 80;
bool Ostats::has_pint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ostats::set_has_pint() {
  _has_bits_[0] |= 0x00000080u;
}
void Ostats::clear_has_pint() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ostats::clear_pint() {
  pint_ = 0;
  clear_has_pint();
}
 ::google::protobuf::int32 Ostats::pint() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.pint)
  return pint_;
}
 void Ostats::set_pint(::google::protobuf::int32 value) {
  set_has_pint();
  pint_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.pint)
}

// optional int32 fumble = 90;
bool Ostats::has_fumble() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ostats::set_has_fumble() {
  _has_bits_[0] |= 0x00000100u;
}
void Ostats::clear_has_fumble() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ostats::clear_fumble() {
  fumble_ = 0;
  clear_has_fumble();
}
 ::google::protobuf::int32 Ostats::fumble() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.fumble)
  return fumble_;
}
 void Ostats::set_fumble(::google::protobuf::int32 value) {
  set_has_fumble();
  fumble_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.fumble)
}

// optional int32 twopt = 100;
bool Ostats::has_twopt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ostats::set_has_twopt() {
  _has_bits_[0] |= 0x00000200u;
}
void Ostats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ostats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
 ::google::protobuf::int32 Ostats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.twopt)
  return twopt_;
}
 void Ostats::set_twopt(::google::protobuf::int32 value) {
  set_has_twopt();
  twopt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.twopt)
}

// optional int32 onept = 110;
bool Ostats::has_onept() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ostats::set_has_onept() {
  _has_bits_[0] |= 0x00000400u;
}
void Ostats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ostats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
 ::google::protobuf::int32 Ostats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.onept)
  return onept_;
}
 void Ostats::set_onept(::google::protobuf::int32 value) {
  set_has_onept();
  onept_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.onept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Stats::kOstatsFieldNumber;
const int Stats::kDstatsFieldNumber;
const int Stats::kKstatsFieldNumber;
#endif  // !_MSC_VER

Stats::Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Stats)
}

void Stats::InitAsDefaultInstance() {
  ostats_ = const_cast< ::fantasybit::Ostats*>(&::fantasybit::Ostats::default_instance());
  dstats_ = const_cast< ::fantasybit::Dstats*>(&::fantasybit::Dstats::default_instance());
  kstats_ = const_cast< ::fantasybit::Kstats*>(&::fantasybit::Kstats::default_instance());
}

Stats::Stats(const Stats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Stats)
}

void Stats::SharedCtor() {
  _cached_size_ = 0;
  ostats_ = NULL;
  dstats_ = NULL;
  kstats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:fantasybit.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != default_instance_) {
    delete ostats_;
    delete dstats_;
    delete kstats_;
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stats_descriptor_;
}

const Stats& Stats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

Stats* Stats::default_instance_ = NULL;

Stats* Stats::New(::google::protobuf::Arena* arena) const {
  Stats* n = new Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ostats()) {
      if (ostats_ != NULL) ostats_->::fantasybit::Ostats::Clear();
    }
    if (has_dstats()) {
      if (dstats_ != NULL) dstats_->::fantasybit::Dstats::Clear();
    }
    if (has_kstats()) {
      if (kstats_ != NULL) kstats_->::fantasybit::Kstats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Ostats ostats = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ostats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_dstats;
        break;
      }

      // optional .fantasybit.Dstats dstats = 20;
      case 20: {
        if (tag == 162) {
         parse_dstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_kstats;
        break;
      }

      // optional .fantasybit.Kstats kstats = 30;
      case 30: {
        if (tag == 242) {
         parse_kstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Stats)
  // optional .fantasybit.Ostats ostats = 10;
  if (has_ostats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ostats_, output);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (has_dstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->dstats_, output);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (has_kstats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->kstats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Stats)
}

::google::protobuf::uint8* Stats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Stats)
  // optional .fantasybit.Ostats ostats = 10;
  if (has_ostats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->ostats_, target);
  }

  // optional .fantasybit.Dstats dstats = 20;
  if (has_dstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->dstats_, target);
  }

  // optional .fantasybit.Kstats kstats = 30;
  if (has_kstats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *this->kstats_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Stats)
  return target;
}

int Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .fantasybit.Ostats ostats = 10;
    if (has_ostats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ostats_);
    }

    // optional .fantasybit.Dstats dstats = 20;
    if (has_dstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dstats_);
    }

    // optional .fantasybit.Kstats kstats = 30;
    if (has_kstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kstats_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Stats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ostats()) {
      mutable_ostats()->::fantasybit::Ostats::MergeFrom(from.ostats());
    }
    if (from.has_dstats()) {
      mutable_dstats()->::fantasybit::Dstats::MergeFrom(from.dstats());
    }
    if (from.has_kstats()) {
      mutable_kstats()->::fantasybit::Kstats::MergeFrom(from.kstats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {

  return true;
}

void Stats::Swap(Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats::InternalSwap(Stats* other) {
  std::swap(ostats_, other->ostats_);
  std::swap(dstats_, other->dstats_);
  std::swap(kstats_, other->kstats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stats_descriptor_;
  metadata.reflection = Stats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stats

// optional .fantasybit.Ostats ostats = 10;
bool Stats::has_ostats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stats::set_has_ostats() {
  _has_bits_[0] |= 0x00000001u;
}
void Stats::clear_has_ostats() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stats::clear_ostats() {
  if (ostats_ != NULL) ostats_->::fantasybit::Ostats::Clear();
  clear_has_ostats();
}
const ::fantasybit::Ostats& Stats::ostats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.ostats)
  return ostats_ != NULL ? *ostats_ : *default_instance_->ostats_;
}
::fantasybit::Ostats* Stats::mutable_ostats() {
  set_has_ostats();
  if (ostats_ == NULL) {
    ostats_ = new ::fantasybit::Ostats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.ostats)
  return ostats_;
}
::fantasybit::Ostats* Stats::release_ostats() {
  clear_has_ostats();
  ::fantasybit::Ostats* temp = ostats_;
  ostats_ = NULL;
  return temp;
}
void Stats::set_allocated_ostats(::fantasybit::Ostats* ostats) {
  delete ostats_;
  ostats_ = ostats;
  if (ostats) {
    set_has_ostats();
  } else {
    clear_has_ostats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.ostats)
}

// optional .fantasybit.Dstats dstats = 20;
bool Stats::has_dstats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stats::set_has_dstats() {
  _has_bits_[0] |= 0x00000002u;
}
void Stats::clear_has_dstats() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stats::clear_dstats() {
  if (dstats_ != NULL) dstats_->::fantasybit::Dstats::Clear();
  clear_has_dstats();
}
const ::fantasybit::Dstats& Stats::dstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.dstats)
  return dstats_ != NULL ? *dstats_ : *default_instance_->dstats_;
}
::fantasybit::Dstats* Stats::mutable_dstats() {
  set_has_dstats();
  if (dstats_ == NULL) {
    dstats_ = new ::fantasybit::Dstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.dstats)
  return dstats_;
}
::fantasybit::Dstats* Stats::release_dstats() {
  clear_has_dstats();
  ::fantasybit::Dstats* temp = dstats_;
  dstats_ = NULL;
  return temp;
}
void Stats::set_allocated_dstats(::fantasybit::Dstats* dstats) {
  delete dstats_;
  dstats_ = dstats;
  if (dstats) {
    set_has_dstats();
  } else {
    clear_has_dstats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.dstats)
}

// optional .fantasybit.Kstats kstats = 30;
bool Stats::has_kstats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stats::set_has_kstats() {
  _has_bits_[0] |= 0x00000004u;
}
void Stats::clear_has_kstats() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stats::clear_kstats() {
  if (kstats_ != NULL) kstats_->::fantasybit::Kstats::Clear();
  clear_has_kstats();
}
const ::fantasybit::Kstats& Stats::kstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.kstats)
  return kstats_ != NULL ? *kstats_ : *default_instance_->kstats_;
}
::fantasybit::Kstats* Stats::mutable_kstats() {
  set_has_kstats();
  if (kstats_ == NULL) {
    kstats_ = new ::fantasybit::Kstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.kstats)
  return kstats_;
}
::fantasybit::Kstats* Stats::release_kstats() {
  clear_has_kstats();
  ::fantasybit::Kstats* temp = kstats_;
  kstats_ = NULL;
  return temp;
}
void Stats::set_allocated_kstats(::fantasybit::Kstats* kstats) {
  delete kstats_;
  kstats_ = kstats;
  if (kstats) {
    set_has_kstats();
  } else {
    clear_has_kstats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.kstats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PlayerResult::kPlayeridFieldNumber;
const int PlayerResult::kResultFieldNumber;
const int PlayerResult::kStatsFieldNumber;
const int PlayerResult::kFantaybitawardFieldNumber;
#endif  // !_MSC_VER

PlayerResult::PlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerResult)
}

void PlayerResult::InitAsDefaultInstance() {
  stats_ = const_cast< ::fantasybit::Stats*>(&::fantasybit::Stats::default_instance());
}

PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerResult)
}

void PlayerResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stats_;
  }
}

void PlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerResult_descriptor_;
}

const PlayerResult& PlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

PlayerResult* PlayerResult::default_instance_ = NULL;

PlayerResult* PlayerResult::New(::google::protobuf::Arena* arena) const {
  PlayerResult* n = new PlayerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerResult::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_playerid()) {
      playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    result_ = 0;
    if (has_stats()) {
      if (stats_ != NULL) stats_->::fantasybit::Stats::Clear();
    }
  }
  fantaybitaward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerResult.playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_result;
        break;
      }

      // optional float result = 40;
      case 40: {
        if (tag == 325) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_stats;
        break;
      }

      // optional .fantasybit.Stats stats = 50;
      case 50: {
        if (tag == 402) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_fantaybitaward;
        break;
      }

      // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
      case 60: {
        if (tag == 482) {
         parse_fantaybitaward:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fantaybitaward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fantaybitaward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_loop_fantaybitaward;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerResult)
  return false;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerResult)
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->playerid(), output);
  }

  // optional float result = 40;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->result(), output);
  }

  // optional .fantasybit.Stats stats = 50;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->stats_, output);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (unsigned int i = 0, n = this->fantaybitaward_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->fantaybitaward(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerResult)
}

::google::protobuf::uint8* PlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerResult)
  // optional string playerid = 20;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerResult.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->playerid(), target);
  }

  // optional float result = 40;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->result(), target);
  }

  // optional .fantasybit.Stats stats = 50;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, *this->stats_, target);
  }

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  for (unsigned int i = 0, n = this->fantaybitaward_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->fantaybitaward(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerResult)
  return target;
}

int PlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string playerid = 20;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional float result = 40;
    if (has_result()) {
      total_size += 2 + 4;
    }

    // optional .fantasybit.Stats stats = 50;
    if (has_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

  }
  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  total_size += 2 * this->fantaybitaward_size();
  for (int i = 0; i < this->fantaybitaward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantaybitaward(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  fantaybitaward_.MergeFrom(from.fantaybitaward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_stats()) {
      mutable_stats()->::fantasybit::Stats::MergeFrom(from.stats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {

  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  playerid_.Swap(&other->playerid_);
  std::swap(result_, other->result_);
  std::swap(stats_, other->stats_);
  fantaybitaward_.UnsafeArenaSwap(&other->fantaybitaward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerResult_descriptor_;
  metadata.reflection = PlayerResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerResult

// optional string playerid = 20;
bool PlayerResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerResult::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
 const ::std::string& PlayerResult::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerResult::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.playerid)
}
 void PlayerResult::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResult.playerid)
}
 void PlayerResult::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResult.playerid)
}
 ::std::string* PlayerResult::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerResult::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerResult::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.playerid)
}

// optional float result = 40;
bool PlayerResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
 float PlayerResult::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.result)
  return result_;
}
 void PlayerResult::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.result)
}

// optional .fantasybit.Stats stats = 50;
bool PlayerResult::has_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerResult::set_has_stats() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerResult::clear_has_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerResult::clear_stats() {
  if (stats_ != NULL) stats_->::fantasybit::Stats::Clear();
  clear_has_stats();
}
const ::fantasybit::Stats& PlayerResult::stats() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
::fantasybit::Stats* PlayerResult::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::fantasybit::Stats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.stats)
  return stats_;
}
::fantasybit::Stats* PlayerResult::release_stats() {
  clear_has_stats();
  ::fantasybit::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void PlayerResult::set_allocated_stats(::fantasybit::Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.stats)
}

// repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
int PlayerResult::fantaybitaward_size() const {
  return fantaybitaward_.size();
}
void PlayerResult::clear_fantaybitaward() {
  fantaybitaward_.Clear();
}
const ::fantasybit::FantasyBitAward& PlayerResult::fantaybitaward(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Get(index);
}
::fantasybit::FantasyBitAward* PlayerResult::mutable_fantaybitaward(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Mutable(index);
}
::fantasybit::FantasyBitAward* PlayerResult::add_fantaybitaward() {
  // @@protoc_insertion_point(field_add:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward >*
PlayerResult::mutable_fantaybitaward() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.PlayerResult.fantaybitaward)
  return &fantaybitaward_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward >&
PlayerResult::fantaybitaward() const {
  // @@protoc_insertion_point(field_list:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GameResult::kGameidFieldNumber;
const int GameResult::kHomeResultFieldNumber;
const int GameResult::kAwayResultFieldNumber;
const int GameResult::kKickofftimeFieldNumber;
#endif  // !_MSC_VER

GameResult::GameResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameResult)
}

void GameResult::InitAsDefaultInstance() {
}

GameResult::GameResult(const GameResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameResult)
}

void GameResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kickofftime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:fantasybit.GameResult)
  SharedDtor();
}

void GameResult::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameResult_descriptor_;
}

const GameResult& GameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StaticData_2eproto();
  return *default_instance_;
}

GameResult* GameResult::default_instance_ = NULL;

GameResult* GameResult::New(::google::protobuf::Arena* arena) const {
  GameResult* n = new GameResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResult::Clear() {
  if (_has_bits_[0 / 32] & 9u) {
    if (has_gameid()) {
      gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    kickofftime_ = 0u;
  }
  home_result_.Clear();
  away_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameResult.gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_home_result;
        break;
      }

      // repeated .fantasybit.PlayerResult home_result = 10;
      case 10: {
        if (tag == 82) {
         parse_home_result:
          DO_(input->IncrementRecursionDepth());
         parse_loop_home_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_home_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_home_result;
        if (input->ExpectTag(162)) goto parse_loop_away_result;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .fantasybit.PlayerResult away_result = 20;
      case 20: {
        if (tag == 162) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_away_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_away_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_away_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(240)) goto parse_kickofftime;
        break;
      }

      // optional uint32 kickofftime = 30;
      case 30: {
        if (tag == 240) {
         parse_kickofftime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickofftime_)));
          set_has_kickofftime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameResult)
  return false;
#undef DO_
}

void GameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameResult)
  // optional string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameResult.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gameid(), output);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (unsigned int i = 0, n = this->home_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->home_result(i), output);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (unsigned int i = 0, n = this->away_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->away_result(i), output);
  }

  // optional uint32 kickofftime = 30;
  if (has_kickofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->kickofftime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameResult)
}

::google::protobuf::uint8* GameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameResult)
  // optional string gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameResult.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }

  // repeated .fantasybit.PlayerResult home_result = 10;
  for (unsigned int i = 0, n = this->home_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->home_result(i), target);
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  for (unsigned int i = 0, n = this->away_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->away_result(i), target);
  }

  // optional uint32 kickofftime = 30;
  if (has_kickofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->kickofftime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameResult)
  return target;
}

int GameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional string gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional uint32 kickofftime = 30;
    if (has_kickofftime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickofftime());
    }

  }
  // repeated .fantasybit.PlayerResult home_result = 10;
  total_size += 1 * this->home_result_size();
  for (int i = 0; i < this->home_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->home_result(i));
  }

  // repeated .fantasybit.PlayerResult away_result = 20;
  total_size += 2 * this->away_result_size();
  for (int i = 0; i < this->away_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->away_result(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  home_result_.MergeFrom(from.home_result_);
  away_result_.MergeFrom(from.away_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (from.has_kickofftime()) {
      set_kickofftime(from.kickofftime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {

  return true;
}

void GameResult::Swap(GameResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResult::InternalSwap(GameResult* other) {
  gameid_.Swap(&other->gameid_);
  home_result_.UnsafeArenaSwap(&other->home_result_);
  away_result_.UnsafeArenaSwap(&other->away_result_);
  std::swap(kickofftime_, other->kickofftime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameResult_descriptor_;
  metadata.reflection = GameResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameResult

// optional string gameid = 1;
bool GameResult::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameResult::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameResult::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameResult::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
 const ::std::string& GameResult::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.gameid)
  return gameid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameResult::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.gameid)
}
 void GameResult::set_gameid(const char* value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResult.gameid)
}
 void GameResult::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResult.gameid)
}
 ::std::string* GameResult::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameResult::release_gameid() {
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameResult::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResult.gameid)
}

// repeated .fantasybit.PlayerResult home_result = 10;
int GameResult::home_result_size() const {
  return home_result_.size();
}
void GameResult::clear_home_result() {
  home_result_.Clear();
}
const ::fantasybit::PlayerResult& GameResult::home_result(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.home_result)
  return home_result_.Get(index);
}
::fantasybit::PlayerResult* GameResult::mutable_home_result(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.home_result)
  return home_result_.Mutable(index);
}
::fantasybit::PlayerResult* GameResult::add_home_result() {
  // @@protoc_insertion_point(field_add:fantasybit.GameResult.home_result)
  return home_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >*
GameResult::mutable_home_result() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameResult.home_result)
  return &home_result_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >&
GameResult::home_result() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameResult.home_result)
  return home_result_;
}

// repeated .fantasybit.PlayerResult away_result = 20;
int GameResult::away_result_size() const {
  return away_result_.size();
}
void GameResult::clear_away_result() {
  away_result_.Clear();
}
const ::fantasybit::PlayerResult& GameResult::away_result(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.away_result)
  return away_result_.Get(index);
}
::fantasybit::PlayerResult* GameResult::mutable_away_result(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.away_result)
  return away_result_.Mutable(index);
}
::fantasybit::PlayerResult* GameResult::add_away_result() {
  // @@protoc_insertion_point(field_add:fantasybit.GameResult.away_result)
  return away_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >*
GameResult::mutable_away_result() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameResult.away_result)
  return &away_result_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >&
GameResult::away_result() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameResult.away_result)
  return away_result_;
}

// optional uint32 kickofftime = 30;
bool GameResult::has_kickofftime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameResult::set_has_kickofftime() {
  _has_bits_[0] |= 0x00000008u;
}
void GameResult::clear_has_kickofftime() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameResult::clear_kickofftime() {
  kickofftime_ = 0u;
  clear_has_kickofftime();
}
 ::google::protobuf::uint32 GameResult::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.kickofftime)
  return kickofftime_;
}
 void GameResult::set_kickofftime(::google::protobuf::uint32 value) {
  set_has_kickofftime();
  kickofftime_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.kickofftime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
