// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* MyFantasyName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyFantasyName_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret2_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameProof_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TweetProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TweetProof_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignedBlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedBlockHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyPlayerPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyPlayerPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProjectionTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProjectionTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Data_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScheduleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScheduleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataTransition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataTransition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataTransition_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TeamState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeltaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeltaData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoData_2eproto() {
  protobuf_AddDesc_ProtoData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoData.proto");
  GOOGLE_CHECK(file != NULL);
  MyFantasyName_descriptor_ = file->message_type(0);
  static const int MyFantasyName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, status_),
  };
  MyFantasyName_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyFantasyName_descriptor_,
      MyFantasyName::default_instance_,
      MyFantasyName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _has_bits_[0]),
      -1,
      -1,
      sizeof(MyFantasyName),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _internal_metadata_),
      -1);
  FantasyPlayer_descriptor_ = file->message_type(1);
  static const int FantasyPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, bits_),
  };
  FantasyPlayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FantasyPlayer_descriptor_,
      FantasyPlayer::default_instance_,
      FantasyPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(FantasyPlayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayer, _internal_metadata_),
      -1);
  Secret_descriptor_ = file->message_type(2);
  static const int Secret_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, myfantasyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, nametran_),
  };
  Secret_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Secret_descriptor_,
      Secret::default_instance_,
      Secret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _has_bits_[0]),
      -1,
      -1,
      sizeof(Secret),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _internal_metadata_),
      -1);
  Secret2_descriptor_ = file->message_type(3);
  static const int Secret2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, public_key_),
  };
  Secret2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Secret2_descriptor_,
      Secret2::default_instance_,
      Secret2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, _has_bits_[0]),
      -1,
      -1,
      sizeof(Secret2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret2, _internal_metadata_),
      -1);
  OutData_descriptor_ = file->message_type(4);
  static const int OutData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, myfantasyname_),
  };
  OutData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OutData_descriptor_,
      OutData::default_instance_,
      OutData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _extensions_),
      sizeof(OutData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _internal_metadata_),
      -1);
  OutData_Type_descriptor_ = OutData_descriptor_->enum_type(0);
  InData_descriptor_ = file->message_type(5);
  static const int InData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, data_trans_),
  };
  InData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InData_descriptor_,
      InData::default_instance_,
      InData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _extensions_),
      sizeof(InData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InData, _internal_metadata_),
      -1);
  InData_Type_descriptor_ = InData_descriptor_->enum_type(0);
  NameProof_descriptor_ = file->message_type(6);
  static const int NameProof_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, type_),
  };
  NameProof_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NameProof_descriptor_,
      NameProof::default_instance_,
      NameProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _extensions_),
      sizeof(NameProof),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameProof, _internal_metadata_),
      -1);
  NameProof_Type_descriptor_ = NameProof_descriptor_->enum_type(0);
  TweetProof_descriptor_ = file->message_type(7);
  static const int TweetProof_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, tweet_),
  };
  TweetProof_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TweetProof_descriptor_,
      TweetProof::default_instance_,
      TweetProof_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, _has_bits_[0]),
      -1,
      -1,
      sizeof(TweetProof),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TweetProof, _internal_metadata_),
      -1);
  Transaction_descriptor_ = file->message_type(8);
  static const int Transaction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, type_),
  };
  Transaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _extensions_),
      sizeof(Transaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
      -1);
  NameTrans_descriptor_ = file->message_type(9);
  static const int NameTrans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, fantasy_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, proof_),
  };
  NameTrans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NameTrans_descriptor_,
      NameTrans::default_instance_,
      NameTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, _has_bits_[0]),
      -1,
      -1,
      sizeof(NameTrans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTrans, _internal_metadata_),
      -1);
  SignedTransaction_descriptor_ = file->message_type(10);
  static const int SignedTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, fantasy_name_),
  };
  SignedTransaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignedTransaction_descriptor_,
      SignedTransaction::default_instance_,
      SignedTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignedTransaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedTransaction, _internal_metadata_),
      -1);
  BlockHeader_descriptor_ = file->message_type(11);
  static const int BlockHeader_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, prev_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, generator_pk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, generating_sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, basetarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, blocktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, transaction_id_),
  };
  BlockHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockHeader_descriptor_,
      BlockHeader::default_instance_,
      BlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlockHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _internal_metadata_),
      -1);
  BlockHeader_Type_descriptor_ = BlockHeader_descriptor_->enum_type(0);
  SignedBlockHeader_descriptor_ = file->message_type(12);
  static const int SignedBlockHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, sig_),
  };
  SignedBlockHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignedBlockHeader_descriptor_,
      SignedBlockHeader::default_instance_,
      SignedBlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignedBlockHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedBlockHeader, _internal_metadata_),
      -1);
  Block_descriptor_ = file->message_type(13);
  static const int Block_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, signedhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, signed_transactions_),
  };
  Block_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _extensions_),
      sizeof(Block),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _internal_metadata_),
      -1);
  NodeRequest_descriptor_ = file->message_type(14);
  static const int NodeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, myip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, myhost_),
  };
  NodeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeRequest_descriptor_,
      NodeRequest::default_instance_,
      NodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeRequest, _internal_metadata_),
      -1);
  NodeRequest_Type_descriptor_ = NodeRequest_descriptor_->enum_type(0);
  NodeReply_descriptor_ = file->message_type(15);
  static const int NodeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, hight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, ips_),
  };
  NodeReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeReply_descriptor_,
      NodeReply::default_instance_,
      NodeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeReply, _internal_metadata_),
      -1);
  FantasyPlayerPoints_descriptor_ = file->message_type(16);
  static const int FantasyPlayerPoints_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, result_),
  };
  FantasyPlayerPoints_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FantasyPlayerPoints_descriptor_,
      FantasyPlayerPoints::default_instance_,
      FantasyPlayerPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, _has_bits_[0]),
      -1,
      -1,
      sizeof(FantasyPlayerPoints),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyPlayerPoints, _internal_metadata_),
      -1);
  ProjectionTrans_descriptor_ = file->message_type(17);
  static const int ProjectionTrans_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, points_),
  };
  ProjectionTrans_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProjectionTrans_descriptor_,
      ProjectionTrans::default_instance_,
      ProjectionTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProjectionTrans),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProjectionTrans, _internal_metadata_),
      -1);
  Data_descriptor_ = file->message_type(18);
  static const int Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, type_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _extensions_),
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
      -1);
  Data_Type_descriptor_ = Data_descriptor_->enum_type(0);
  PlayerData_descriptor_ = file->message_type(19);
  static const int PlayerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_game_status_),
  };
  PlayerData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _internal_metadata_),
      -1);
  GameData_descriptor_ = file->message_type(20);
  static const int GameData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, status_),
  };
  GameData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameData_descriptor_,
      GameData::default_instance_,
      GameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _has_bits_[0]),
      -1,
      -1,
      sizeof(GameData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameData, _internal_metadata_),
      -1);
  ResultData_descriptor_ = file->message_type(21);
  static const int ResultData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, game_result_),
  };
  ResultData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResultData_descriptor_,
      ResultData::default_instance_,
      ResultData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResultData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _internal_metadata_),
      -1);
  ScheduleData_descriptor_ = file->message_type(22);
  static const int ScheduleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, weekly_),
  };
  ScheduleData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScheduleData_descriptor_,
      ScheduleData::default_instance_,
      ScheduleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScheduleData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScheduleData, _internal_metadata_),
      -1);
  DataTransition_descriptor_ = file->message_type(23);
  static const int DataTransition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, gamedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, data_),
  };
  DataTransition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataTransition_descriptor_,
      DataTransition::default_instance_,
      DataTransition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataTransition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataTransition, _internal_metadata_),
      -1);
  DataTransition_Type_descriptor_ = DataTransition_descriptor_->enum_type(0);
  TeamState_descriptor_ = file->message_type(24);
  static const int TeamState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, teamid_),
  };
  TeamState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamState_descriptor_,
      TeamState::default_instance_,
      TeamState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, _has_bits_[0]),
      -1,
      -1,
      sizeof(TeamState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamState, _internal_metadata_),
      -1);
  TeamState_State_descriptor_ = TeamState_descriptor_->enum_type(0);
  DeltaData_descriptor_ = file->message_type(25);
  static const int DeltaData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, myfantasyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, globalstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, teamstates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, players_),
  };
  DeltaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeltaData_descriptor_,
      DeltaData::default_instance_,
      DeltaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _extensions_),
      sizeof(DeltaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeltaData, _internal_metadata_),
      -1);
  DeltaData_Type_descriptor_ = DeltaData_descriptor_->enum_type(0);
  MyNameStatus_descriptor_ = file->enum_type(0);
  TransType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyFantasyName_descriptor_, &MyFantasyName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FantasyPlayer_descriptor_, &FantasyPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Secret_descriptor_, &Secret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Secret2_descriptor_, &Secret2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OutData_descriptor_, &OutData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InData_descriptor_, &InData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NameProof_descriptor_, &NameProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TweetProof_descriptor_, &TweetProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NameTrans_descriptor_, &NameTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignedTransaction_descriptor_, &SignedTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockHeader_descriptor_, &BlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignedBlockHeader_descriptor_, &SignedBlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeRequest_descriptor_, &NodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeReply_descriptor_, &NodeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FantasyPlayerPoints_descriptor_, &FantasyPlayerPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProjectionTrans_descriptor_, &ProjectionTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerData_descriptor_, &PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameData_descriptor_, &GameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResultData_descriptor_, &ResultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScheduleData_descriptor_, &ScheduleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataTransition_descriptor_, &DataTransition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamState_descriptor_, &TeamState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeltaData_descriptor_, &DeltaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoData_2eproto() {
  delete MyFantasyName::default_instance_;
  delete MyFantasyName_reflection_;
  delete FantasyPlayer::default_instance_;
  delete FantasyPlayer_reflection_;
  delete Secret::default_instance_;
  delete Secret_reflection_;
  delete Secret2::default_instance_;
  delete Secret2_reflection_;
  delete OutData::default_instance_;
  delete OutData_reflection_;
  delete InData::default_instance_;
  delete InData_reflection_;
  delete NameProof::default_instance_;
  delete NameProof_reflection_;
  delete TweetProof::default_instance_;
  delete TweetProof_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete NameTrans::default_instance_;
  delete NameTrans_reflection_;
  delete SignedTransaction::default_instance_;
  delete SignedTransaction_reflection_;
  delete BlockHeader::default_instance_;
  delete BlockHeader_reflection_;
  delete SignedBlockHeader::default_instance_;
  delete SignedBlockHeader_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete NodeRequest::default_instance_;
  delete NodeRequest_reflection_;
  delete NodeReply::default_instance_;
  delete NodeReply_reflection_;
  delete FantasyPlayerPoints::default_instance_;
  delete FantasyPlayerPoints_reflection_;
  delete ProjectionTrans::default_instance_;
  delete ProjectionTrans_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
  delete GameData::default_instance_;
  delete GameData_reflection_;
  delete ResultData::default_instance_;
  delete ResultData_reflection_;
  delete ScheduleData::default_instance_;
  delete ScheduleData_reflection_;
  delete DataTransition::default_instance_;
  delete DataTransition_reflection_;
  delete TeamState::default_instance_;
  delete TeamState_reflection_;
  delete DeltaData::default_instance_;
  delete DeltaData_reflection_;
}

void protobuf_AddDesc_ProtoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_StaticData_2eproto();
  ::fantasybit::protobuf_AddDesc_StatusData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoData.proto\022\nfantasybit\032\020StaticDat"
    "a.proto\032\020StatusData.proto\"G\n\rMyFantasyNa"
    "me\022\014\n\004name\030\001 \001(\t\022(\n\006status\030\002 \001(\0162\030.fanta"
    "sybit.MyNameStatus\"+\n\rFantasyPlayer\022\014\n\004n"
    "ame\030\n \001(\t\022\014\n\004bits\030\024 \001(\004\"x\n\006Secret\022\023\n\013pri"
    "vate_key\030\001 \002(\t\0220\n\rmyfantasyname\030\002 \001(\0132\031."
    "fantasybit.MyFantasyName\022\'\n\010nametran\030\n \001"
    "(\0132\025.fantasybit.NameTrans\"H\n\007Secret2\022\023\n\013"
    "private_key\030\001 \001(\t\022\024\n\014fantasy_name\030\024 \001(\t\022"
    "\022\n\npublic_key\030\036 \001(\t\"\245\001\n\007OutData\022&\n\004type\030"
    "\001 \002(\0162\030.fantasybit.OutData.Type\0220\n\rmyfan"
    "tasyname\030\002 \001(\0132\031.fantasybit.MyFantasyNam"
    "e\"6\n\004Type\022\021\n\rMYFANTASYNAME\020\001\022\014\n\010SNAPSHOT"
    "\020\002\022\r\n\tHEARTBEAT\020\003*\010\010d\020\200\200\200\200\002\"\200\002\n\006InData\022%"
    "\n\004type\030\001 \002(\0162\027.fantasybit.InData.Type\022\014\n"
    "\004data\030\002 \001(\t\022\r\n\005data2\030\003 \001(\t\022\013\n\003num\030\004 \001(\005\022"
    ".\n\ndata_trans\030\005 \001(\0132\032.fantasybit.DataTra"
    "nsition\"k\n\004Type\022\014\n\010MINENAME\020\001\022\010\n\004QUIT\020\002\022"
    "\r\n\tHEARTBEAT\020\003\022\013\n\007CONNECT\020\004\022\016\n\nMAKE_BLOC"
    "K\020\005\022\013\n\007NEWNAME\020\006\022\010\n\004PROJ\020\007\022\010\n\004DATA\020\010*\010\010d"
    "\020\200\200\200\200\002\"h\n\tNameProof\022(\n\004type\030\001 \001(\0162\032.fant"
    "asybit.NameProof.Type\"&\n\004Type\022\007\n\003POW\020\001\022\t"
    "\n\005TWEET\020\002\022\n\n\006ORACLE\020\003*\t\010\310\001\020\200\200\200\200\002\"`\n\nTwee"
    "tProof\022\r\n\005tweet\030\n \001(\t2C\n\013tweet_proof\022\025.f"
    "antasybit.NameProof\030\311\001 \001(\0132\026.fantasybit."
    "TweetProof\"M\n\013Transaction\022\017\n\007version\030\001 \001"
    "(\005\022#\n\004type\030\002 \001(\0162\025.fantasybit.TransType*"
    "\010\010d\020\200\200\200\200\002\"\240\001\n\tNameTrans\022\024\n\014fantasy_name\030"
    "\n \001(\t\022\022\n\npublic_key\030\024 \001(\014\022$\n\005proof\030\036 \001(\013"
    "2\025.fantasybit.NameProof2C\n\nname_trans\022\027."
    "fantasybit.Transaction\030\310\001 \001(\0132\025.fantasyb"
    "it.NameTrans\"j\n\021SignedTransaction\022&\n\005tra"
    "ns\030\n \001(\0132\027.fantasybit.Transaction\022\n\n\002id\030"
    "\024 \001(\014\022\013\n\003sig\030\036 \001(\014\022\024\n\014fantasy_name\030( \001(\t"
    "\"\370\001\n\013BlockHeader\022\017\n\007version\030\001 \001(\005\022\013\n\003num"
    "\030\n \001(\005\022\017\n\007prev_id\030\024 \001(\014\022\021\n\ttimestamp\030\025 \001"
    "(\005\022\024\n\014generator_pk\030\036 \001(\014\022\026\n\016generating_s"
    "ig\030( \001(\014\022\022\n\nbasetarget\0302 \001(\005\022/\n\tblocktyp"
    "e\030< \001(\0162\034.fantasybit.BlockHeader.Type\022\026\n"
    "\016transaction_id\030F \001(\014\"\034\n\004Type\022\n\n\006NORMAL\020"
    "\001\022\010\n\004DATA\020\002\"G\n\021SignedBlockHeader\022%\n\004head"
    "\030\n \001(\0132\027.fantasybit.BlockHeader\022\013\n\003sig\030\036"
    " \001(\t\"\201\001\n\005Block\0221\n\nsignedhead\030\n \001(\0132\035.fan"
    "tasybit.SignedBlockHeader\022:\n\023signed_tran"
    "sactions\030\024 \003(\0132\035.fantasybit.SignedTransa"
    "ction*\t\010\350\007\020\200\200\200\200\002\"\257\001\n\013NodeRequest\022*\n\004type"
    "\030\n \001(\0162\034.fantasybit.NodeRequest.Type\022\014\n\004"
    "myip\030\024 \001(\t\022\013\n\003num\030\036 \001(\005\022\016\n\006myhost\030( \001(\t\""
    "I\n\004Type\022\r\n\tHANDSHAKE\020\001\022\021\n\rBLOCK_REQUEST\020"
    "\002\022\021\n\rHIGHT_REQUEST\020\003\022\014\n\010NAT_TEST\020\004\"\'\n\tNo"
    "deReply\022\r\n\005hight\030\n \001(\005\022\013\n\003ips\030\024 \003(\t\"e\n\023F"
    "antasyPlayerPoints\022\016\n\006season\030\n \001(\r\022\014\n\004we"
    "ek\030\024 \001(\r\022\020\n\010playerid\030\036 \001(\t\022\016\n\006points\030( \001"
    "(\005\022\016\n\006result\0302 \001(\002\"\234\001\n\017ProjectionTrans\022\016"
    "\n\006season\030\n \001(\r\022\014\n\004week\030\024 \001(\r\022\020\n\010playerid"
    "\030\036 \001(\t\022\016\n\006points\030( \001(\0052I\n\nproj_trans\022\027.f"
    "antasybit.Transaction\030\311\001 \001(\0132\033.fantasybi"
    "t.ProjectionTrans\"~\n\004Data\022\017\n\007version\030\n \001"
    "(\005\022#\n\004type\030\024 \001(\0162\025.fantasybit.Data.Type\""
    "6\n\004Type\022\014\n\010SCHEDULE\020\000\022\n\n\006PLAYER\020\001\022\010\n\004GAM"
    "E\020\002\022\n\n\006RESULT\020\003*\010\010d\020\200\200\200\200\002\"\365\001\n\nPlayerData"
    "\022\020\n\010playerid\030\n \001(\t\022+\n\013player_base\030\024 \001(\0132"
    "\026.fantasybit.PlayerBase\022/\n\rplayer_status"
    "\030\036 \001(\0132\030.fantasybit.PlayerStatus\0228\n\022play"
    "er_game_status\030( \001(\0162\034.fantasybit.Player"
    "GameStatus2=\n\013player_data\022\020.fantasybit.D"
    "ata\030e \001(\0132\026.fantasybit.PlayerData\"}\n\010Gam"
    "eData\022\016\n\006gameid\030\n \001(\t\022&\n\006status\030\024 \001(\0132\026."
    "fantasybit.GameStatus29\n\tgame_data\022\020.fan"
    "tasybit.Data\030o \001(\0132\024.fantasybit.GameData"
    "\"y\n\nResultData\022+\n\013game_result\030\n \001(\0132\026.fa"
    "ntasybit.GameResult2>\n\013result_data\022\020.fan"
    "tasybit.Data\030\312\001 \001(\0132\026.fantasybit.ResultD"
    "ata\"\214\001\n\014ScheduleData\022\014\n\004week\030\001 \001(\005\022*\n\006we"
    "ekly\030\n \001(\0132\032.fantasybit.WeeklySchedule2B"
    "\n\rschedule_data\022\020.fantasybit.Data\030\256\002 \001(\013"
    "2\030.fantasybit.ScheduleData\"\303\002\n\016DataTrans"
    "ition\022-\n\004type\030\001 \001(\0162\037.fantasybit.DataTra"
    "nsition.Type\022\016\n\006season\030\n \001(\r\022\014\n\004week\030\024 \001"
    "(\r\022&\n\010gamedata\030\036 \003(\0132\024.fantasybit.GameDa"
    "ta\022\036\n\004data\030( \003(\0132\020.fantasybit.Data\"R\n\004Ty"
    "pe\022\017\n\013SEASONSTART\020\002\022\r\n\tSEASONEND\020\003\022\r\n\tHE"
    "ARTBEAT\020\005\022\r\n\tGAMESTART\020\006\022\014\n\010WEEKOVER\020\0072H"
    "\n\ndata_trans\022\027.fantasybit.Transaction\030\313\001"
    " \001(\0132\032.fantasybit.DataTransition\"w\n\tTeam"
    "State\022*\n\005state\030\001 \001(\0162\033.fantasybit.TeamSt"
    "ate.State\022\014\n\004week\030\n \001(\r\022\016\n\006teamid\030\024 \001(\t\""
    " \n\005State\022\013\n\007PREGAME\020\001\022\n\n\006INGAME\020\002\"\275\002\n\tDe"
    "ltaData\022(\n\004type\030\001 \001(\0162\032.fantasybit.Delta"
    "Data.Type\0220\n\rmyfantasyname\030\002 \003(\0132\031.fanta"
    "sybit.MyFantasyName\022,\n\013globalstate\030\n \001(\013"
    "2\027.fantasybit.GlobalState\022)\n\nteamstates\030"
    "\024 \003(\0132\025.fantasybit.TeamState\022\037\n\005datas\030\036 "
    "\003(\0132\020.fantasybit.Data\022*\n\007players\030( \003(\0132\031"
    ".fantasybit.FantasyPlayer\"#\n\004Type\022\014\n\010SNA"
    "PSHOT\020\002\022\r\n\tHEARTBEAT\020\003*\t\010\350\007\020\200\200\200\200\002*Y\n\014MyN"
    "ameStatus\022\010\n\004none\020\001\022\013\n\007notavil\020\002\022\r\n\trequ"
    "ested\020\005\022\024\n\020transaction_sent\020\017\022\r\n\tconfirm"
    "ed\020\024*;\n\tTransType\022\010\n\004NAME\020\000\022\016\n\nPROJECTIO"
    "N\020\001\022\n\n\006RESULT\020\002\022\010\n\004DATA\020\003", 3985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoData.proto", &protobuf_RegisterTypes);
  MyFantasyName::default_instance_ = new MyFantasyName();
  FantasyPlayer::default_instance_ = new FantasyPlayer();
  Secret::default_instance_ = new Secret();
  Secret2::default_instance_ = new Secret2();
  OutData::default_instance_ = new OutData();
  InData::default_instance_ = new InData();
  NameProof::default_instance_ = new NameProof();
  TweetProof::default_instance_ = new TweetProof();
  Transaction::default_instance_ = new Transaction();
  NameTrans::default_instance_ = new NameTrans();
  SignedTransaction::default_instance_ = new SignedTransaction();
  BlockHeader::default_instance_ = new BlockHeader();
  SignedBlockHeader::default_instance_ = new SignedBlockHeader();
  Block::default_instance_ = new Block();
  NodeRequest::default_instance_ = new NodeRequest();
  NodeReply::default_instance_ = new NodeReply();
  FantasyPlayerPoints::default_instance_ = new FantasyPlayerPoints();
  ProjectionTrans::default_instance_ = new ProjectionTrans();
  Data::default_instance_ = new Data();
  PlayerData::default_instance_ = new PlayerData();
  GameData::default_instance_ = new GameData();
  ResultData::default_instance_ = new ResultData();
  ScheduleData::default_instance_ = new ScheduleData();
  DataTransition::default_instance_ = new DataTransition();
  TeamState::default_instance_ = new TeamState();
  DeltaData::default_instance_ = new DeltaData();
  MyFantasyName::default_instance_->InitAsDefaultInstance();
  FantasyPlayer::default_instance_->InitAsDefaultInstance();
  Secret::default_instance_->InitAsDefaultInstance();
  Secret2::default_instance_->InitAsDefaultInstance();
  OutData::default_instance_->InitAsDefaultInstance();
  InData::default_instance_->InitAsDefaultInstance();
  NameProof::default_instance_->InitAsDefaultInstance();
  TweetProof::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::NameProof::default_instance(),
    201, 11, false, false,
    &::fantasybit::TweetProof::default_instance());
  Transaction::default_instance_->InitAsDefaultInstance();
  NameTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    200, 11, false, false,
    &::fantasybit::NameTrans::default_instance());
  SignedTransaction::default_instance_->InitAsDefaultInstance();
  BlockHeader::default_instance_->InitAsDefaultInstance();
  SignedBlockHeader::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  NodeRequest::default_instance_->InitAsDefaultInstance();
  NodeReply::default_instance_->InitAsDefaultInstance();
  FantasyPlayerPoints::default_instance_->InitAsDefaultInstance();
  ProjectionTrans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    201, 11, false, false,
    &::fantasybit::ProjectionTrans::default_instance());
  Data::default_instance_->InitAsDefaultInstance();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    101, 11, false, false,
    &::fantasybit::PlayerData::default_instance());
  GameData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    111, 11, false, false,
    &::fantasybit::GameData::default_instance());
  ResultData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    202, 11, false, false,
    &::fantasybit::ResultData::default_instance());
  ScheduleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Data::default_instance(),
    302, 11, false, false,
    &::fantasybit::ScheduleData::default_instance());
  DataTransition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::Transaction::default_instance(),
    203, 11, false, false,
    &::fantasybit::DataTransition::default_instance());
  TeamState::default_instance_->InitAsDefaultInstance();
  DeltaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoData_2eproto {
  StaticDescriptorInitializer_ProtoData_2eproto() {
    protobuf_AddDesc_ProtoData_2eproto();
  }
} static_descriptor_initializer_ProtoData_2eproto_;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyNameStatus_descriptor_;
}
bool MyNameStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 5:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransType_descriptor_;
}
bool TransType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MyFantasyName::kNameFieldNumber;
const int MyFantasyName::kStatusFieldNumber;
#endif  // !_MSC_VER

MyFantasyName::MyFantasyName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.MyFantasyName)
}

void MyFantasyName::InitAsDefaultInstance() {
}

MyFantasyName::MyFantasyName(const MyFantasyName& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.MyFantasyName)
}

void MyFantasyName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyFantasyName::~MyFantasyName() {
  // @@protoc_insertion_point(destructor:fantasybit.MyFantasyName)
  SharedDtor();
}

void MyFantasyName::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MyFantasyName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFantasyName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyFantasyName_descriptor_;
}

const MyFantasyName& MyFantasyName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

MyFantasyName* MyFantasyName::default_instance_ = NULL;

MyFantasyName* MyFantasyName::New(::google::protobuf::Arena* arena) const {
  MyFantasyName* n = new MyFantasyName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyFantasyName::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MyFantasyName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.MyFantasyName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.MyFantasyName.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .fantasybit.MyNameStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MyNameStatus_IsValid(value)) {
            set_status(static_cast< ::fantasybit::MyNameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.MyFantasyName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.MyFantasyName)
  return false;
#undef DO_
}

void MyFantasyName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.MyFantasyName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MyFantasyName.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.MyFantasyName)
}

::google::protobuf::uint8* MyFantasyName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.MyFantasyName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.MyFantasyName.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.MyFantasyName)
  return target;
}

int MyFantasyName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .fantasybit.MyNameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFantasyName::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyFantasyName* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyFantasyName>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyFantasyName::MergeFrom(const MyFantasyName& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MyFantasyName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFantasyName::CopyFrom(const MyFantasyName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFantasyName::IsInitialized() const {

  return true;
}

void MyFantasyName::Swap(MyFantasyName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyFantasyName::InternalSwap(MyFantasyName* other) {
  name_.Swap(&other->name_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyFantasyName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyFantasyName_descriptor_;
  metadata.reflection = MyFantasyName_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyFantasyName

// optional string name = 1;
bool MyFantasyName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MyFantasyName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MyFantasyName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MyFantasyName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MyFantasyName::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.MyFantasyName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MyFantasyName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MyFantasyName.name)
}
 void MyFantasyName::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MyFantasyName.name)
}
 void MyFantasyName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MyFantasyName.name)
}
 ::std::string* MyFantasyName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.MyFantasyName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MyFantasyName::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MyFantasyName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MyFantasyName.name)
}

// optional .fantasybit.MyNameStatus status = 2;
bool MyFantasyName::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MyFantasyName::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void MyFantasyName::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void MyFantasyName::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::fantasybit::MyNameStatus MyFantasyName::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.MyFantasyName.status)
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
 void MyFantasyName::set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MyFantasyName.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FantasyPlayer::kNameFieldNumber;
const int FantasyPlayer::kBitsFieldNumber;
#endif  // !_MSC_VER

FantasyPlayer::FantasyPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyPlayer)
}

void FantasyPlayer::InitAsDefaultInstance() {
}

FantasyPlayer::FantasyPlayer(const FantasyPlayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyPlayer)
}

void FantasyPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bits_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyPlayer::~FantasyPlayer() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyPlayer)
  SharedDtor();
}

void FantasyPlayer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FantasyPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyPlayer_descriptor_;
}

const FantasyPlayer& FantasyPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyPlayer* FantasyPlayer::default_instance_ = NULL;

FantasyPlayer* FantasyPlayer::New(::google::protobuf::Arena* arena) const {
  FantasyPlayer* n = new FantasyPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyPlayer::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bits_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FantasyPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyPlayer.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 20;
      case 20: {
        if (tag == 160) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyPlayer)
  return false;
#undef DO_
}

void FantasyPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyPlayer)
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional uint64 bits = 20;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyPlayer)
}

::google::protobuf::uint8* FantasyPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyPlayer)
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional uint64 bits = 20;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyPlayer)
  return target;
}

int FantasyPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 bits = 20;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FantasyPlayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyPlayer>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyPlayer::MergeFrom(const FantasyPlayer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FantasyPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayer::CopyFrom(const FantasyPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayer::IsInitialized() const {

  return true;
}

void FantasyPlayer::Swap(FantasyPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyPlayer::InternalSwap(FantasyPlayer* other) {
  name_.Swap(&other->name_);
  std::swap(bits_, other->bits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyPlayer_descriptor_;
  metadata.reflection = FantasyPlayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FantasyPlayer

// optional string name = 10;
bool FantasyPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FantasyPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void FantasyPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void FantasyPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FantasyPlayer::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FantasyPlayer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayer.name)
}
 void FantasyPlayer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyPlayer.name)
}
 void FantasyPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyPlayer.name)
}
 ::std::string* FantasyPlayer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyPlayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FantasyPlayer::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FantasyPlayer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyPlayer.name)
}

// optional uint64 bits = 20;
bool FantasyPlayer::has_bits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FantasyPlayer::set_has_bits() {
  _has_bits_[0] |= 0x00000002u;
}
void FantasyPlayer::clear_has_bits() {
  _has_bits_[0] &= ~0x00000002u;
}
void FantasyPlayer::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
  clear_has_bits();
}
 ::google::protobuf::uint64 FantasyPlayer::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayer.bits)
  return bits_;
}
 void FantasyPlayer::set_bits(::google::protobuf::uint64 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayer.bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Secret::kPrivateKeyFieldNumber;
const int Secret::kMyfantasynameFieldNumber;
const int Secret::kNametranFieldNumber;
#endif  // !_MSC_VER

Secret::Secret()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Secret)
}

void Secret::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
  nametran_ = const_cast< ::fantasybit::NameTrans*>(&::fantasybit::NameTrans::default_instance());
}

Secret::Secret(const Secret& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret)
}

void Secret::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  myfantasyname_ = NULL;
  nametran_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret)
  SharedDtor();
}

void Secret::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete myfantasyname_;
    delete nametran_;
  }
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret_descriptor_;
}

const Secret& Secret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret* Secret::default_instance_ = NULL;

Secret* Secret::New(::google::protobuf::Arena* arena) const {
  Secret* n = new Secret;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_private_key()) {
      private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
    if (has_nametran()) {
      if (nametran_ != NULL) nametran_->::fantasybit::NameTrans::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Secret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string private_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret.private_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (tag == 18) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_nametran;
        break;
      }

      // optional .fantasybit.NameTrans nametran = 10;
      case 10: {
        if (tag == 82) {
         parse_nametran:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nametran()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Secret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Secret)
  return false;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Secret)
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_key(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->myfantasyname_, output);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (has_nametran()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->nametran_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Secret)
}

::google::protobuf::uint8* Secret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret)
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->myfantasyname_, target);
  }

  // optional .fantasybit.NameTrans nametran = 10;
  if (has_nametran()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->nametran_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret)
  return target;
}

int Secret::ByteSize() const {
  int total_size = 0;

  // required string private_key = 1;
  if (has_private_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_key());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->myfantasyname_);
    }

    // optional .fantasybit.NameTrans nametran = 10;
    if (has_nametran()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nametran_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Secret* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
    if (from.has_nametran()) {
      mutable_nametran()->::fantasybit::NameTrans::MergeFrom(from.nametran());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nametran()) {
    if (!this->nametran_->IsInitialized()) return false;
  }
  return true;
}

void Secret::Swap(Secret* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret::InternalSwap(Secret* other) {
  private_key_.Swap(&other->private_key_);
  std::swap(myfantasyname_, other->myfantasyname_);
  std::swap(nametran_, other->nametran_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret_descriptor_;
  metadata.reflection = Secret_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Secret

// required string private_key = 1;
bool Secret::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Secret::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Secret::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Secret::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
 const ::std::string& Secret::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret.private_key)
}
 void Secret::set_private_key(const char* value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret.private_key)
}
 void Secret::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret.private_key)
}
 ::std::string* Secret::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Secret::release_private_key() {
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.private_key)
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
bool Secret::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Secret::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
void Secret::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
void Secret::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
const ::fantasybit::MyFantasyName& Secret::myfantasyname() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.myfantasyname)
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
::fantasybit::MyFantasyName* Secret::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) {
    myfantasyname_ = new ::fantasybit::MyFantasyName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.myfantasyname)
  return myfantasyname_;
}
::fantasybit::MyFantasyName* Secret::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
void Secret::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.myfantasyname)
}

// optional .fantasybit.NameTrans nametran = 10;
bool Secret::has_nametran() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Secret::set_has_nametran() {
  _has_bits_[0] |= 0x00000004u;
}
void Secret::clear_has_nametran() {
  _has_bits_[0] &= ~0x00000004u;
}
void Secret::clear_nametran() {
  if (nametran_ != NULL) nametran_->::fantasybit::NameTrans::Clear();
  clear_has_nametran();
}
const ::fantasybit::NameTrans& Secret::nametran() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.nametran)
  return nametran_ != NULL ? *nametran_ : *default_instance_->nametran_;
}
::fantasybit::NameTrans* Secret::mutable_nametran() {
  set_has_nametran();
  if (nametran_ == NULL) {
    nametran_ = new ::fantasybit::NameTrans;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.nametran)
  return nametran_;
}
::fantasybit::NameTrans* Secret::release_nametran() {
  clear_has_nametran();
  ::fantasybit::NameTrans* temp = nametran_;
  nametran_ = NULL;
  return temp;
}
void Secret::set_allocated_nametran(::fantasybit::NameTrans* nametran) {
  delete nametran_;
  nametran_ = nametran;
  if (nametran) {
    set_has_nametran();
  } else {
    clear_has_nametran();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.nametran)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Secret2::kPrivateKeyFieldNumber;
const int Secret2::kFantasyNameFieldNumber;
const int Secret2::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

Secret2::Secret2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Secret2)
}

void Secret2::InitAsDefaultInstance() {
}

Secret2::Secret2(const Secret2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Secret2)
}

void Secret2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  private_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret2::~Secret2() {
  // @@protoc_insertion_point(destructor:fantasybit.Secret2)
  SharedDtor();
}

void Secret2::SharedDtor() {
  private_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Secret2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret2_descriptor_;
}

const Secret2& Secret2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret2* Secret2::default_instance_ = NULL;

Secret2* Secret2::New(::google::protobuf::Arena* arena) const {
  Secret2* n = new Secret2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret2::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_private_key()) {
      private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fantasy_name()) {
      fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_public_key()) {
      public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Secret2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Secret2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret2.private_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 20;
      case 20: {
        if (tag == 162) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret2.fantasy_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_public_key;
        break;
      }

      // optional string public_key = 30;
      case 30: {
        if (tag == 242) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.Secret2.public_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Secret2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Secret2)
  return false;
#undef DO_
}

void Secret2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Secret2)
  // optional string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.private_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_key(), output);
  }

  // optional string fantasy_name = 20;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->fantasy_name(), output);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Secret2)
}

::google::protobuf::uint8* Secret2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Secret2)
  // optional string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.private_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional string fantasy_name = 20;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->fantasy_name(), target);
  }

  // optional string public_key = 30;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.Secret2.public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Secret2)
  return target;
}

int Secret2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional string fantasy_name = 20;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional string public_key = 30;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret2::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Secret2* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret2>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret2::MergeFrom(const Secret2& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_has_private_key();
      private_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_);
    }
    if (from.has_fantasy_name()) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
    if (from.has_public_key()) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Secret2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret2::CopyFrom(const Secret2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret2::IsInitialized() const {

  return true;
}

void Secret2::Swap(Secret2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret2::InternalSwap(Secret2* other) {
  private_key_.Swap(&other->private_key_);
  fantasy_name_.Swap(&other->fantasy_name_);
  public_key_.Swap(&other->public_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret2_descriptor_;
  metadata.reflection = Secret2_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Secret2

// optional string private_key = 1;
bool Secret2::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Secret2::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Secret2::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Secret2::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
 const ::std::string& Secret2::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret2::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.private_key)
}
 void Secret2::set_private_key(const char* value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.private_key)
}
 void Secret2::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.private_key)
}
 ::std::string* Secret2::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Secret2::release_private_key() {
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret2::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.private_key)
}

// optional string fantasy_name = 20;
bool Secret2::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Secret2::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Secret2::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Secret2::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
 const ::std::string& Secret2::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.fantasy_name)
  return fantasy_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret2::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.fantasy_name)
}
 void Secret2::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.fantasy_name)
}
 void Secret2::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.fantasy_name)
}
 ::std::string* Secret2::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Secret2::release_fantasy_name() {
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret2::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.fantasy_name)
}

// optional string public_key = 30;
bool Secret2::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Secret2::set_has_public_key() {
  _has_bits_[0] |= 0x00000004u;
}
void Secret2::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void Secret2::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
 const ::std::string& Secret2::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret2::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.public_key)
}
 void Secret2::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.public_key)
}
 void Secret2::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.public_key)
}
 ::std::string* Secret2::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Secret2::release_public_key() {
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Secret2::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.public_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_Type_descriptor_;
}
bool OutData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OutData_Type OutData::MYFANTASYNAME;
const OutData_Type OutData::SNAPSHOT;
const OutData_Type OutData::HEARTBEAT;
const OutData_Type OutData::Type_MIN;
const OutData_Type OutData::Type_MAX;
const int OutData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OutData::kTypeFieldNumber;
const int OutData::kMyfantasynameFieldNumber;
#endif  // !_MSC_VER

OutData::OutData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.OutData)
}

void OutData::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
}

OutData::OutData(const OutData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.OutData)
}

void OutData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  myfantasyname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutData::~OutData() {
  // @@protoc_insertion_point(destructor:fantasybit.OutData)
  SharedDtor();
}

void OutData::SharedDtor() {
  if (this != default_instance_) {
    delete myfantasyname_;
  }
}

void OutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_descriptor_;
}

const OutData& OutData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

OutData* OutData::default_instance_ = NULL;

OutData* OutData::New(::google::protobuf::Arena* arena) const {
  OutData* n = new OutData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.OutData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.OutData.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::OutData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::OutData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (tag == 18) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.OutData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.OutData)
  return false;
#undef DO_
}

void OutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.OutData)
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->myfantasyname_, output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.OutData)
}

::google::protobuf::uint8* OutData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.OutData)
  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->myfantasyname_, target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.OutData)
  return target;
}

int OutData::ByteSize() const {
  int total_size = 0;

  // required .fantasybit.OutData.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->myfantasyname_);
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OutData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OutData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutData::MergeFrom(const OutData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OutData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutData::CopyFrom(const OutData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void OutData::Swap(OutData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutData::InternalSwap(OutData* other) {
  std::swap(type_, other->type_);
  std::swap(myfantasyname_, other->myfantasyname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata OutData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutData_descriptor_;
  metadata.reflection = OutData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OutData

// required .fantasybit.OutData.Type type = 1;
bool OutData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OutData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void OutData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void OutData::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::fantasybit::OutData_Type OutData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.OutData.type)
  return static_cast< ::fantasybit::OutData_Type >(type_);
}
 void OutData::set_type(::fantasybit::OutData_Type value) {
  assert(::fantasybit::OutData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OutData.type)
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
bool OutData::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OutData::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
void OutData::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
void OutData::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
const ::fantasybit::MyFantasyName& OutData::myfantasyname() const {
  // @@protoc_insertion_point(field_get:fantasybit.OutData.myfantasyname)
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
::fantasybit::MyFantasyName* OutData::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) {
    myfantasyname_ = new ::fantasybit::MyFantasyName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.OutData.myfantasyname)
  return myfantasyname_;
}
::fantasybit::MyFantasyName* OutData::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
void OutData::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OutData.myfantasyname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* InData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InData_Type_descriptor_;
}
bool InData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InData_Type InData::MINENAME;
const InData_Type InData::QUIT;
const InData_Type InData::HEARTBEAT;
const InData_Type InData::CONNECT;
const InData_Type InData::MAKE_BLOCK;
const InData_Type InData::NEWNAME;
const InData_Type InData::PROJ;
const InData_Type InData::DATA;
const InData_Type InData::Type_MIN;
const InData_Type InData::Type_MAX;
const int InData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InData::kTypeFieldNumber;
const int InData::kDataFieldNumber;
const int InData::kData2FieldNumber;
const int InData::kNumFieldNumber;
const int InData::kDataTransFieldNumber;
#endif  // !_MSC_VER

InData::InData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.InData)
}

void InData::InitAsDefaultInstance() {
  data_trans_ = const_cast< ::fantasybit::DataTransition*>(&::fantasybit::DataTransition::default_instance());
}

InData::InData(const InData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.InData)
}

void InData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  data_trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InData::~InData() {
  // @@protoc_insertion_point(destructor:fantasybit.InData)
  SharedDtor();
}

void InData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_trans_;
  }
}

void InData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InData_descriptor_;
}

const InData& InData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

InData* InData::default_instance_ = NULL;

InData* InData::New(::google::protobuf::Arena* arena) const {
  InData* n = new InData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    type_ = 1;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data2()) {
      data2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_ = 0;
    if (has_data_trans()) {
      if (data_trans_ != NULL) data_trans_->::fantasybit::DataTransition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.InData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.InData.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::InData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::InData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.InData.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data2;
        break;
      }

      // optional string data2 = 3;
      case 3: {
        if (tag == 26) {
         parse_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data2().data(), this->data2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.InData.data2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data_trans;
        break;
      }

      // optional .fantasybit.DataTransition data_trans = 5;
      case 5: {
        if (tag == 42) {
         parse_data_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_trans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.InData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.InData)
  return false;
#undef DO_
}

void InData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.InData)
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // optional string data2 = 3;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data2(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (has_data_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->data_trans_, output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.InData)
}

::google::protobuf::uint8* InData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.InData)
  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // optional string data2 = 3;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.InData.data2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data2(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional .fantasybit.DataTransition data_trans = 5;
  if (has_data_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->data_trans_, target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.InData)
  return target;
}

int InData::ByteSize() const {
  int total_size = 0;

  // required .fantasybit.InData.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string data2 = 3;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data2());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .fantasybit.DataTransition data_trans = 5;
    if (has_data_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_trans_);
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InData::MergeFrom(const InData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_data2()) {
      set_has_data2();
      data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_data_trans()) {
      mutable_data_trans()->::fantasybit::DataTransition::MergeFrom(from.data_trans());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InData::CopyFrom(const InData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data_trans()) {
    if (!this->data_trans_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void InData::Swap(InData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InData::InternalSwap(InData* other) {
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  data2_.Swap(&other->data2_);
  std::swap(num_, other->num_);
  std::swap(data_trans_, other->data_trans_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata InData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InData_descriptor_;
  metadata.reflection = InData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InData

// required .fantasybit.InData.Type type = 1;
bool InData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void InData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void InData::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::fantasybit::InData_Type InData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.type)
  return static_cast< ::fantasybit::InData_Type >(type_);
}
 void InData::set_type(::fantasybit::InData_Type value) {
  assert(::fantasybit::InData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InData.type)
}

// optional string data = 2;
bool InData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void InData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void InData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& InData::data() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InData.data)
}
 void InData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InData.data)
}
 void InData::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InData.data)
}
 ::std::string* InData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InData::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data)
}

// optional string data2 = 3;
bool InData::has_data2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InData::set_has_data2() {
  _has_bits_[0] |= 0x00000004u;
}
void InData::clear_has_data2() {
  _has_bits_[0] &= ~0x00000004u;
}
void InData::clear_data2() {
  data2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data2();
}
 const ::std::string& InData::data2() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data2)
  return data2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InData::set_data2(const ::std::string& value) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InData.data2)
}
 void InData::set_data2(const char* value) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InData.data2)
}
 void InData::set_data2(const char* value, size_t size) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InData.data2)
}
 ::std::string* InData::mutable_data2() {
  set_has_data2();
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data2)
  return data2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InData::release_data2() {
  clear_has_data2();
  return data2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InData::set_allocated_data2(::std::string* data2) {
  if (data2 != NULL) {
    set_has_data2();
  } else {
    clear_has_data2();
  }
  data2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data2);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data2)
}

// optional int32 num = 4;
bool InData::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InData::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
void InData::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void InData::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 InData::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.num)
  return num_;
}
 void InData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InData.num)
}

// optional .fantasybit.DataTransition data_trans = 5;
bool InData::has_data_trans() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InData::set_has_data_trans() {
  _has_bits_[0] |= 0x00000010u;
}
void InData::clear_has_data_trans() {
  _has_bits_[0] &= ~0x00000010u;
}
void InData::clear_data_trans() {
  if (data_trans_ != NULL) data_trans_->::fantasybit::DataTransition::Clear();
  clear_has_data_trans();
}
const ::fantasybit::DataTransition& InData::data_trans() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data_trans)
  return data_trans_ != NULL ? *data_trans_ : *default_instance_->data_trans_;
}
::fantasybit::DataTransition* InData::mutable_data_trans() {
  set_has_data_trans();
  if (data_trans_ == NULL) {
    data_trans_ = new ::fantasybit::DataTransition;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data_trans)
  return data_trans_;
}
::fantasybit::DataTransition* InData::release_data_trans() {
  clear_has_data_trans();
  ::fantasybit::DataTransition* temp = data_trans_;
  data_trans_ = NULL;
  return temp;
}
void InData::set_allocated_data_trans(::fantasybit::DataTransition* data_trans) {
  delete data_trans_;
  data_trans_ = data_trans;
  if (data_trans) {
    set_has_data_trans();
  } else {
    clear_has_data_trans();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data_trans)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameProof_Type_descriptor_;
}
bool NameProof_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NameProof_Type NameProof::POW;
const NameProof_Type NameProof::TWEET;
const NameProof_Type NameProof::ORACLE;
const NameProof_Type NameProof::Type_MIN;
const NameProof_Type NameProof::Type_MAX;
const int NameProof::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NameProof::kTypeFieldNumber;
#endif  // !_MSC_VER

NameProof::NameProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NameProof)
}

void NameProof::InitAsDefaultInstance() {
}

NameProof::NameProof(const NameProof& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameProof)
}

void NameProof::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameProof::~NameProof() {
  // @@protoc_insertion_point(destructor:fantasybit.NameProof)
  SharedDtor();
}

void NameProof::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NameProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameProof_descriptor_;
}

const NameProof& NameProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameProof* NameProof::default_instance_ = NULL;

NameProof* NameProof::New(::google::protobuf::Arena* arena) const {
  NameProof* n = new NameProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameProof::Clear() {
  _extensions_.Clear();
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NameProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NameProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NameProof.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NameProof_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NameProof_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((1600u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NameProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NameProof)
  return false;
#undef DO_
}

void NameProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NameProof)
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // Extension range [200, 536870912)
  _extensions_.SerializeWithCachedSizes(
      200, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NameProof)
}

::google::protobuf::uint8* NameProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameProof)
  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // Extension range [200, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      200, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameProof)
  return target;
}

int NameProof::ByteSize() const {
  int total_size = 0;

  // optional .fantasybit.NameProof.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameProof::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NameProof* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NameProof>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameProof::MergeFrom(const NameProof& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NameProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameProof::CopyFrom(const NameProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameProof::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NameProof::Swap(NameProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameProof::InternalSwap(NameProof* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NameProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameProof_descriptor_;
  metadata.reflection = NameProof_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameProof

// optional .fantasybit.NameProof.Type type = 1;
bool NameProof::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NameProof::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NameProof::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NameProof::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::fantasybit::NameProof_Type NameProof::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameProof.type)
  return static_cast< ::fantasybit::NameProof_Type >(type_);
}
 void NameProof::set_type(::fantasybit::NameProof_Type value) {
  assert(::fantasybit::NameProof_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NameProof.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TweetProof::kTweetFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int TweetProof::kTweetProofFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
  TweetProof::tweet_proof(kTweetProofFieldNumber, ::fantasybit::TweetProof::default_instance());
TweetProof::TweetProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TweetProof)
}

void TweetProof::InitAsDefaultInstance() {
}

TweetProof::TweetProof(const TweetProof& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.TweetProof)
}

void TweetProof::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tweet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TweetProof::~TweetProof() {
  // @@protoc_insertion_point(destructor:fantasybit.TweetProof)
  SharedDtor();
}

void TweetProof::SharedDtor() {
  tweet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TweetProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TweetProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TweetProof_descriptor_;
}

const TweetProof& TweetProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TweetProof* TweetProof::default_instance_ = NULL;

TweetProof* TweetProof::New(::google::protobuf::Arena* arena) const {
  TweetProof* n = new TweetProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TweetProof::Clear() {
  if (has_tweet()) {
    tweet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TweetProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TweetProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tweet = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tweet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tweet().data(), this->tweet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TweetProof.tweet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TweetProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TweetProof)
  return false;
#undef DO_
}

void TweetProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TweetProof)
  // optional string tweet = 10;
  if (has_tweet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tweet().data(), this->tweet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TweetProof.tweet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tweet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TweetProof)
}

::google::protobuf::uint8* TweetProof::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TweetProof)
  // optional string tweet = 10;
  if (has_tweet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tweet().data(), this->tweet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TweetProof.tweet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tweet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TweetProof)
  return target;
}

int TweetProof::ByteSize() const {
  int total_size = 0;

  // optional string tweet = 10;
  if (has_tweet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tweet());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TweetProof::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TweetProof* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TweetProof>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TweetProof::MergeFrom(const TweetProof& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tweet()) {
      set_has_tweet();
      tweet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tweet_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TweetProof::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TweetProof::CopyFrom(const TweetProof& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TweetProof::IsInitialized() const {

  return true;
}

void TweetProof::Swap(TweetProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TweetProof::InternalSwap(TweetProof* other) {
  tweet_.Swap(&other->tweet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TweetProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TweetProof_descriptor_;
  metadata.reflection = TweetProof_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TweetProof

// optional string tweet = 10;
bool TweetProof::has_tweet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TweetProof::set_has_tweet() {
  _has_bits_[0] |= 0x00000001u;
}
void TweetProof::clear_has_tweet() {
  _has_bits_[0] &= ~0x00000001u;
}
void TweetProof::clear_tweet() {
  tweet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tweet();
}
 const ::std::string& TweetProof::tweet() const {
  // @@protoc_insertion_point(field_get:fantasybit.TweetProof.tweet)
  return tweet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TweetProof::set_tweet(const ::std::string& value) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TweetProof.tweet)
}
 void TweetProof::set_tweet(const char* value) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TweetProof.tweet)
}
 void TweetProof::set_tweet(const char* value, size_t size) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TweetProof.tweet)
}
 ::std::string* TweetProof::mutable_tweet() {
  set_has_tweet();
  // @@protoc_insertion_point(field_mutable:fantasybit.TweetProof.tweet)
  return tweet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TweetProof::release_tweet() {
  clear_has_tweet();
  return tweet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TweetProof::set_allocated_tweet(::std::string* tweet) {
  if (tweet != NULL) {
    set_has_tweet();
  } else {
    clear_has_tweet();
  }
  tweet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tweet);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TweetProof.tweet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Transaction::kVersionFieldNumber;
const int Transaction::kTypeFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Transaction)
}

void Transaction::InitAsDefaultInstance() {
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Transaction)
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:fantasybit.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
  _extensions_.Clear();
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transaction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .fantasybit.TransType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TransType_IsValid(value)) {
            set_type(static_cast< ::fantasybit::TransType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Transaction)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional .fantasybit.TransType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Transaction)
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Transaction)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional .fantasybit.TransType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Transaction)
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.TransType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// optional int32 version = 1;
bool Transaction::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transaction::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Transaction::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transaction::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 Transaction::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.version)
  return version_;
}
 void Transaction::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.version)
}

// optional .fantasybit.TransType type = 2;
bool Transaction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transaction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Transaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transaction::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::fantasybit::TransType Transaction::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.type)
  return static_cast< ::fantasybit::TransType >(type_);
}
 void Transaction::set_type(::fantasybit::TransType value) {
  assert(::fantasybit::TransType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NameTrans::kFantasyNameFieldNumber;
const int NameTrans::kPublicKeyFieldNumber;
const int NameTrans::kProofFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NameTrans::kNameTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
  NameTrans::name_trans(kNameTransFieldNumber, ::fantasybit::NameTrans::default_instance());
NameTrans::NameTrans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NameTrans)
}

void NameTrans::InitAsDefaultInstance() {
  proof_ = const_cast< ::fantasybit::NameProof*>(&::fantasybit::NameProof::default_instance());
}

NameTrans::NameTrans(const NameTrans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.NameTrans)
}

void NameTrans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proof_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameTrans::~NameTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.NameTrans)
  SharedDtor();
}

void NameTrans::SharedDtor() {
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete proof_;
  }
}

void NameTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameTrans_descriptor_;
}

const NameTrans& NameTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameTrans* NameTrans::default_instance_ = NULL;

NameTrans* NameTrans::New(::google::protobuf::Arena* arena) const {
  NameTrans* n = new NameTrans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameTrans::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_fantasy_name()) {
      fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_public_key()) {
      public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_proof()) {
      if (proof_ != NULL) proof_->::fantasybit::NameProof::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NameTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NameTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fantasy_name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NameTrans.fantasy_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_public_key;
        break;
      }

      // optional bytes public_key = 20;
      case 20: {
        if (tag == 162) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_proof;
        break;
      }

      // optional .fantasybit.NameProof proof = 30;
      case 30: {
        if (tag == 242) {
         parse_proof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NameTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NameTrans)
  return false;
#undef DO_
}

void NameTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NameTrans)
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fantasy_name(), output);
  }

  // optional bytes public_key = 20;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->public_key(), output);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->proof_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NameTrans)
}

::google::protobuf::uint8* NameTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NameTrans)
  // optional string fantasy_name = 10;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NameTrans.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fantasy_name(), target);
  }

  // optional bytes public_key = 20;
  if (has_public_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->public_key(), target);
  }

  // optional .fantasybit.NameProof proof = 30;
  if (has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *this->proof_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NameTrans)
  return target;
}

int NameTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string fantasy_name = 10;
    if (has_fantasy_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

    // optional bytes public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional .fantasybit.NameProof proof = 30;
    if (has_proof()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->proof_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameTrans::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NameTrans* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NameTrans>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameTrans::MergeFrom(const NameTrans& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_name()) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
    if (from.has_public_key()) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (from.has_proof()) {
      mutable_proof()->::fantasybit::NameProof::MergeFrom(from.proof());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NameTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrans::CopyFrom(const NameTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrans::IsInitialized() const {

  if (has_proof()) {
    if (!this->proof_->IsInitialized()) return false;
  }
  return true;
}

void NameTrans::Swap(NameTrans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameTrans::InternalSwap(NameTrans* other) {
  fantasy_name_.Swap(&other->fantasy_name_);
  public_key_.Swap(&other->public_key_);
  std::swap(proof_, other->proof_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NameTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameTrans_descriptor_;
  metadata.reflection = NameTrans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameTrans

// optional string fantasy_name = 10;
bool NameTrans::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NameTrans::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NameTrans::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NameTrans::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
 const ::std::string& NameTrans::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.fantasy_name)
  return fantasy_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameTrans::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.fantasy_name)
}
 void NameTrans::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.fantasy_name)
}
 void NameTrans::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.fantasy_name)
}
 ::std::string* NameTrans::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameTrans::release_fantasy_name() {
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameTrans::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.fantasy_name)
}

// optional bytes public_key = 20;
bool NameTrans::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NameTrans::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
void NameTrans::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void NameTrans::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
 const ::std::string& NameTrans::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameTrans::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.public_key)
}
 void NameTrans::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.public_key)
}
 void NameTrans::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.public_key)
}
 ::std::string* NameTrans::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameTrans::release_public_key() {
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameTrans::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.public_key)
}

// optional .fantasybit.NameProof proof = 30;
bool NameTrans::has_proof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NameTrans::set_has_proof() {
  _has_bits_[0] |= 0x00000004u;
}
void NameTrans::clear_has_proof() {
  _has_bits_[0] &= ~0x00000004u;
}
void NameTrans::clear_proof() {
  if (proof_ != NULL) proof_->::fantasybit::NameProof::Clear();
  clear_has_proof();
}
const ::fantasybit::NameProof& NameTrans::proof() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.proof)
  return proof_ != NULL ? *proof_ : *default_instance_->proof_;
}
::fantasybit::NameProof* NameTrans::mutable_proof() {
  set_has_proof();
  if (proof_ == NULL) {
    proof_ = new ::fantasybit::NameProof;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.proof)
  return proof_;
}
::fantasybit::NameProof* NameTrans::release_proof() {
  clear_has_proof();
  ::fantasybit::NameProof* temp = proof_;
  proof_ = NULL;
  return temp;
}
void NameTrans::set_allocated_proof(::fantasybit::NameProof* proof) {
  delete proof_;
  proof_ = proof;
  if (proof) {
    set_has_proof();
  } else {
    clear_has_proof();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.proof)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SignedTransaction::kTransFieldNumber;
const int SignedTransaction::kIdFieldNumber;
const int SignedTransaction::kSigFieldNumber;
const int SignedTransaction::kFantasyNameFieldNumber;
#endif  // !_MSC_VER

SignedTransaction::SignedTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.SignedTransaction)
}

void SignedTransaction::InitAsDefaultInstance() {
  trans_ = const_cast< ::fantasybit::Transaction*>(&::fantasybit::Transaction::default_instance());
}

SignedTransaction::SignedTransaction(const SignedTransaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.SignedTransaction)
}

void SignedTransaction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trans_ = NULL;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedTransaction::~SignedTransaction() {
  // @@protoc_insertion_point(destructor:fantasybit.SignedTransaction)
  SharedDtor();
}

void SignedTransaction::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete trans_;
  }
}

void SignedTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedTransaction_descriptor_;
}

const SignedTransaction& SignedTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SignedTransaction* SignedTransaction::default_instance_ = NULL;

SignedTransaction* SignedTransaction::New(::google::protobuf::Arena* arena) const {
  SignedTransaction* n = new SignedTransaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedTransaction::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_trans()) {
      if (trans_ != NULL) trans_->::fantasybit::Transaction::Clear();
    }
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sig()) {
      sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fantasy_name()) {
      fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignedTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.SignedTransaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.Transaction trans = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_id;
        break;
      }

      // optional bytes id = 20;
      case 20: {
        if (tag == 162) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_sig;
        break;
      }

      // optional bytes sig = 30;
      case 30: {
        if (tag == 242) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_fantasy_name;
        break;
      }

      // optional string fantasy_name = 40;
      case 40: {
        if (tag == 322) {
         parse_fantasy_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_name().data(), this->fantasy_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.SignedTransaction.fantasy_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.SignedTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.SignedTransaction)
  return false;
#undef DO_
}

void SignedTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.SignedTransaction)
  // optional .fantasybit.Transaction trans = 10;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->trans_, output);
  }

  // optional bytes id = 20;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->id(), output);
  }

  // optional bytes sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->sig(), output);
  }

  // optional string fantasy_name = 40;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedTransaction.fantasy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->fantasy_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.SignedTransaction)
}

::google::protobuf::uint8* SignedTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SignedTransaction)
  // optional .fantasybit.Transaction trans = 10;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->trans_, target);
  }

  // optional bytes id = 20;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->id(), target);
  }

  // optional bytes sig = 30;
  if (has_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->sig(), target);
  }

  // optional string fantasy_name = 40;
  if (has_fantasy_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_name().data(), this->fantasy_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedTransaction.fantasy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->fantasy_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SignedTransaction)
  return target;
}

int SignedTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .fantasybit.Transaction trans = 10;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trans_);
    }

    // optional bytes id = 20;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional bytes sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig());
    }

    // optional string fantasy_name = 40;
    if (has_fantasy_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignedTransaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedTransaction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedTransaction::MergeFrom(const SignedTransaction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans()) {
      mutable_trans()->::fantasybit::Transaction::MergeFrom(from.trans());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_sig()) {
      set_has_sig();
      sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
    }
    if (from.has_fantasy_name()) {
      set_has_fantasy_name();
      fantasy_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignedTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedTransaction::CopyFrom(const SignedTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedTransaction::IsInitialized() const {

  if (has_trans()) {
    if (!this->trans_->IsInitialized()) return false;
  }
  return true;
}

void SignedTransaction::Swap(SignedTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedTransaction::InternalSwap(SignedTransaction* other) {
  std::swap(trans_, other->trans_);
  id_.Swap(&other->id_);
  sig_.Swap(&other->sig_);
  fantasy_name_.Swap(&other->fantasy_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignedTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedTransaction_descriptor_;
  metadata.reflection = SignedTransaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignedTransaction

// optional .fantasybit.Transaction trans = 10;
bool SignedTransaction::has_trans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignedTransaction::set_has_trans() {
  _has_bits_[0] |= 0x00000001u;
}
void SignedTransaction::clear_has_trans() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignedTransaction::clear_trans() {
  if (trans_ != NULL) trans_->::fantasybit::Transaction::Clear();
  clear_has_trans();
}
const ::fantasybit::Transaction& SignedTransaction::trans() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.trans)
  return trans_ != NULL ? *trans_ : *default_instance_->trans_;
}
::fantasybit::Transaction* SignedTransaction::mutable_trans() {
  set_has_trans();
  if (trans_ == NULL) {
    trans_ = new ::fantasybit::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.trans)
  return trans_;
}
::fantasybit::Transaction* SignedTransaction::release_trans() {
  clear_has_trans();
  ::fantasybit::Transaction* temp = trans_;
  trans_ = NULL;
  return temp;
}
void SignedTransaction::set_allocated_trans(::fantasybit::Transaction* trans) {
  delete trans_;
  trans_ = trans;
  if (trans) {
    set_has_trans();
  } else {
    clear_has_trans();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.trans)
}

// optional bytes id = 20;
bool SignedTransaction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignedTransaction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SignedTransaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignedTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& SignedTransaction::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedTransaction::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.id)
}
 void SignedTransaction::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.id)
}
 void SignedTransaction::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.id)
}
 ::std::string* SignedTransaction::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignedTransaction::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedTransaction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.id)
}

// optional bytes sig = 30;
bool SignedTransaction::has_sig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignedTransaction::set_has_sig() {
  _has_bits_[0] |= 0x00000004u;
}
void SignedTransaction::clear_has_sig() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignedTransaction::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
 const ::std::string& SignedTransaction::sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.sig)
  return sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedTransaction::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.sig)
}
 void SignedTransaction::set_sig(const char* value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.sig)
}
 void SignedTransaction::set_sig(const void* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.sig)
}
 ::std::string* SignedTransaction::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignedTransaction::release_sig() {
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedTransaction::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.sig)
}

// optional string fantasy_name = 40;
bool SignedTransaction::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignedTransaction::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000008u;
}
void SignedTransaction::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignedTransaction::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
 const ::std::string& SignedTransaction::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.fantasy_name)
  return fantasy_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedTransaction::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.fantasy_name)
}
 void SignedTransaction::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.fantasy_name)
}
 void SignedTransaction::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.fantasy_name)
}
 ::std::string* SignedTransaction::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignedTransaction::release_fantasy_name() {
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedTransaction::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.fantasy_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_Type_descriptor_;
}
bool BlockHeader_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockHeader_Type BlockHeader::NORMAL;
const BlockHeader_Type BlockHeader::DATA;
const BlockHeader_Type BlockHeader::Type_MIN;
const BlockHeader_Type BlockHeader::Type_MAX;
const int BlockHeader::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlockHeader::kVersionFieldNumber;
const int BlockHeader::kNumFieldNumber;
const int BlockHeader::kPrevIdFieldNumber;
const int BlockHeader::kTimestampFieldNumber;
const int BlockHeader::kGeneratorPkFieldNumber;
const int BlockHeader::kGeneratingSigFieldNumber;
const int BlockHeader::kBasetargetFieldNumber;
const int BlockHeader::kBlocktypeFieldNumber;
const int BlockHeader::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

BlockHeader::BlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.BlockHeader)
}

void BlockHeader::InitAsDefaultInstance() {
}

BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  num_ = 0;
  prev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
  generator_pk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generating_sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  basetarget_ = 0;
  blocktype_ = 1;
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:fantasybit.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  prev_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_pk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generating_sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockHeader_descriptor_;
}

const BlockHeader& BlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

BlockHeader* BlockHeader::default_instance_ = NULL;

BlockHeader* BlockHeader::New(::google::protobuf::Arena* arena) const {
  BlockHeader* n = new BlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockHeader::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlockHeader*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(version_, num_);
    ZR_(timestamp_, basetarget_);
    if (has_prev_id()) {
      prev_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_generator_pk()) {
      generator_pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_generating_sig()) {
      generating_sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    blocktype_ = 1;
  }
  if (has_transaction_id()) {
    transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.BlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num;
        break;
      }

      // optional int32 num = 10;
      case 10: {
        if (tag == 80) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_prev_id;
        break;
      }

      // optional bytes prev_id = 20;
      case 20: {
        if (tag == 162) {
         parse_prev_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 21;
      case 21: {
        if (tag == 168) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_generator_pk;
        break;
      }

      // optional bytes generator_pk = 30;
      case 30: {
        if (tag == 242) {
         parse_generator_pk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generator_pk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_generating_sig;
        break;
      }

      // optional bytes generating_sig = 40;
      case 40: {
        if (tag == 322) {
         parse_generating_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generating_sig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_basetarget;
        break;
      }

      // optional int32 basetarget = 50;
      case 50: {
        if (tag == 400) {
         parse_basetarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basetarget_)));
          set_has_basetarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_blocktype;
        break;
      }

      // optional .fantasybit.BlockHeader.Type blocktype = 60;
      case 60: {
        if (tag == 480) {
         parse_blocktype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::BlockHeader_Type_IsValid(value)) {
            set_blocktype(static_cast< ::fantasybit::BlockHeader_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(60, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_transaction_id;
        break;
      }

      // optional bytes transaction_id = 70;
      case 70: {
        if (tag == 562) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.BlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.BlockHeader)
  return false;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.BlockHeader)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 num = 10;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num(), output);
  }

  // optional bytes prev_id = 20;
  if (has_prev_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->prev_id(), output);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timestamp(), output);
  }

  // optional bytes generator_pk = 30;
  if (has_generator_pk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->generator_pk(), output);
  }

  // optional bytes generating_sig = 40;
  if (has_generating_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->generating_sig(), output);
  }

  // optional int32 basetarget = 50;
  if (has_basetarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->basetarget(), output);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->blocktype(), output);
  }

  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      70, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.BlockHeader)
}

::google::protobuf::uint8* BlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.BlockHeader)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 num = 10;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num(), target);
  }

  // optional bytes prev_id = 20;
  if (has_prev_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->prev_id(), target);
  }

  // optional int32 timestamp = 21;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timestamp(), target);
  }

  // optional bytes generator_pk = 30;
  if (has_generator_pk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        30, this->generator_pk(), target);
  }

  // optional bytes generating_sig = 40;
  if (has_generating_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        40, this->generating_sig(), target);
  }

  // optional int32 basetarget = 50;
  if (has_basetarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->basetarget(), target);
  }

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  if (has_blocktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->blocktype(), target);
  }

  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        70, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.BlockHeader)
  return target;
}

int BlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional bytes prev_id = 20;
    if (has_prev_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev_id());
    }

    // optional int32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

    // optional bytes generator_pk = 30;
    if (has_generator_pk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generator_pk());
    }

    // optional bytes generating_sig = 40;
    if (has_generating_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generating_sig());
    }

    // optional int32 basetarget = 50;
    if (has_basetarget()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basetarget());
    }

    // optional .fantasybit.BlockHeader.Type blocktype = 60;
    if (has_blocktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blocktype());
    }

  }
  // optional bytes transaction_id = 70;
  if (has_transaction_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlockHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prev_id()) {
      set_has_prev_id();
      prev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_id_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_generator_pk()) {
      set_has_generator_pk();
      generator_pk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_pk_);
    }
    if (from.has_generating_sig()) {
      set_has_generating_sig();
      generating_sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generating_sig_);
    }
    if (from.has_basetarget()) {
      set_basetarget(from.basetarget());
    }
    if (from.has_blocktype()) {
      set_blocktype(from.blocktype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_id()) {
      set_has_transaction_id();
      transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {

  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockHeader::InternalSwap(BlockHeader* other) {
  std::swap(version_, other->version_);
  std::swap(num_, other->num_);
  prev_id_.Swap(&other->prev_id_);
  std::swap(timestamp_, other->timestamp_);
  generator_pk_.Swap(&other->generator_pk_);
  generating_sig_.Swap(&other->generating_sig_);
  std::swap(basetarget_, other->basetarget_);
  std::swap(blocktype_, other->blocktype_);
  transaction_id_.Swap(&other->transaction_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockHeader_descriptor_;
  metadata.reflection = BlockHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockHeader

// optional int32 version = 1;
bool BlockHeader::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlockHeader::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BlockHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlockHeader::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 BlockHeader::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.version)
  return version_;
}
 void BlockHeader::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.version)
}

// optional int32 num = 10;
bool BlockHeader::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlockHeader::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void BlockHeader::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlockHeader::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 BlockHeader::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.num)
  return num_;
}
 void BlockHeader::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.num)
}

// optional bytes prev_id = 20;
bool BlockHeader::has_prev_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlockHeader::set_has_prev_id() {
  _has_bits_[0] |= 0x00000004u;
}
void BlockHeader::clear_has_prev_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlockHeader::clear_prev_id() {
  prev_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_id();
}
 const ::std::string& BlockHeader::prev_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.prev_id)
  return prev_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_prev_id(const ::std::string& value) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.prev_id)
}
 void BlockHeader::set_prev_id(const char* value) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.prev_id)
}
 void BlockHeader::set_prev_id(const void* value, size_t size) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.prev_id)
}
 ::std::string* BlockHeader::mutable_prev_id() {
  set_has_prev_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.prev_id)
  return prev_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockHeader::release_prev_id() {
  clear_has_prev_id();
  return prev_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_allocated_prev_id(::std::string* prev_id) {
  if (prev_id != NULL) {
    set_has_prev_id();
  } else {
    clear_has_prev_id();
  }
  prev_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.prev_id)
}

// optional int32 timestamp = 21;
bool BlockHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlockHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void BlockHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlockHeader::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 ::google::protobuf::int32 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.timestamp)
  return timestamp_;
}
 void BlockHeader::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.timestamp)
}

// optional bytes generator_pk = 30;
bool BlockHeader::has_generator_pk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlockHeader::set_has_generator_pk() {
  _has_bits_[0] |= 0x00000010u;
}
void BlockHeader::clear_has_generator_pk() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlockHeader::clear_generator_pk() {
  generator_pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generator_pk();
}
 const ::std::string& BlockHeader::generator_pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.generator_pk)
  return generator_pk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_generator_pk(const ::std::string& value) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.generator_pk)
}
 void BlockHeader::set_generator_pk(const char* value) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.generator_pk)
}
 void BlockHeader::set_generator_pk(const void* value, size_t size) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.generator_pk)
}
 ::std::string* BlockHeader::mutable_generator_pk() {
  set_has_generator_pk();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.generator_pk)
  return generator_pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockHeader::release_generator_pk() {
  clear_has_generator_pk();
  return generator_pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_allocated_generator_pk(::std::string* generator_pk) {
  if (generator_pk != NULL) {
    set_has_generator_pk();
  } else {
    clear_has_generator_pk();
  }
  generator_pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generator_pk);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.generator_pk)
}

// optional bytes generating_sig = 40;
bool BlockHeader::has_generating_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlockHeader::set_has_generating_sig() {
  _has_bits_[0] |= 0x00000020u;
}
void BlockHeader::clear_has_generating_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlockHeader::clear_generating_sig() {
  generating_sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generating_sig();
}
 const ::std::string& BlockHeader::generating_sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.generating_sig)
  return generating_sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_generating_sig(const ::std::string& value) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.generating_sig)
}
 void BlockHeader::set_generating_sig(const char* value) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.generating_sig)
}
 void BlockHeader::set_generating_sig(const void* value, size_t size) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.generating_sig)
}
 ::std::string* BlockHeader::mutable_generating_sig() {
  set_has_generating_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.generating_sig)
  return generating_sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockHeader::release_generating_sig() {
  clear_has_generating_sig();
  return generating_sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_allocated_generating_sig(::std::string* generating_sig) {
  if (generating_sig != NULL) {
    set_has_generating_sig();
  } else {
    clear_has_generating_sig();
  }
  generating_sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generating_sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.generating_sig)
}

// optional int32 basetarget = 50;
bool BlockHeader::has_basetarget() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BlockHeader::set_has_basetarget() {
  _has_bits_[0] |= 0x00000040u;
}
void BlockHeader::clear_has_basetarget() {
  _has_bits_[0] &= ~0x00000040u;
}
void BlockHeader::clear_basetarget() {
  basetarget_ = 0;
  clear_has_basetarget();
}
 ::google::protobuf::int32 BlockHeader::basetarget() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.basetarget)
  return basetarget_;
}
 void BlockHeader::set_basetarget(::google::protobuf::int32 value) {
  set_has_basetarget();
  basetarget_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.basetarget)
}

// optional .fantasybit.BlockHeader.Type blocktype = 60;
bool BlockHeader::has_blocktype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BlockHeader::set_has_blocktype() {
  _has_bits_[0] |= 0x00000080u;
}
void BlockHeader::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000080u;
}
void BlockHeader::clear_blocktype() {
  blocktype_ = 1;
  clear_has_blocktype();
}
 ::fantasybit::BlockHeader_Type BlockHeader::blocktype() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.blocktype)
  return static_cast< ::fantasybit::BlockHeader_Type >(blocktype_);
}
 void BlockHeader::set_blocktype(::fantasybit::BlockHeader_Type value) {
  assert(::fantasybit::BlockHeader_Type_IsValid(value));
  set_has_blocktype();
  blocktype_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.blocktype)
}

// optional bytes transaction_id = 70;
bool BlockHeader::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BlockHeader::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000100u;
}
void BlockHeader::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void BlockHeader::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_id();
}
 const ::std::string& BlockHeader::transaction_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.transaction_id)
}
 void BlockHeader::set_transaction_id(const char* value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.transaction_id)
}
 void BlockHeader::set_transaction_id(const void* value, size_t size) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.transaction_id)
}
 ::std::string* BlockHeader::mutable_transaction_id() {
  set_has_transaction_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockHeader::release_transaction_id() {
  clear_has_transaction_id();
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockHeader::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    set_has_transaction_id();
  } else {
    clear_has_transaction_id();
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SignedBlockHeader::kHeadFieldNumber;
const int SignedBlockHeader::kSigFieldNumber;
#endif  // !_MSC_VER

SignedBlockHeader::SignedBlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.SignedBlockHeader)
}

void SignedBlockHeader::InitAsDefaultInstance() {
  head_ = const_cast< ::fantasybit::BlockHeader*>(&::fantasybit::BlockHeader::default_instance());
}

SignedBlockHeader::SignedBlockHeader(const SignedBlockHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.SignedBlockHeader)
}

void SignedBlockHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedBlockHeader::~SignedBlockHeader() {
  // @@protoc_insertion_point(destructor:fantasybit.SignedBlockHeader)
  SharedDtor();
}

void SignedBlockHeader::SharedDtor() {
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete head_;
  }
}

void SignedBlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedBlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedBlockHeader_descriptor_;
}

const SignedBlockHeader& SignedBlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

SignedBlockHeader* SignedBlockHeader::default_instance_ = NULL;

SignedBlockHeader* SignedBlockHeader::New(::google::protobuf::Arena* arena) const {
  SignedBlockHeader* n = new SignedBlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedBlockHeader::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::fantasybit::BlockHeader::Clear();
    }
    if (has_sig()) {
      sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignedBlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.SignedBlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.BlockHeader head = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_sig;
        break;
      }

      // optional string sig = 30;
      case 30: {
        if (tag == 242) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.SignedBlockHeader.sig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.SignedBlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.SignedBlockHeader)
  return false;
#undef DO_
}

void SignedBlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.SignedBlockHeader)
  // optional .fantasybit.BlockHeader head = 10;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->head_, output);
  }

  // optional string sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedBlockHeader.sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->sig(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.SignedBlockHeader)
}

::google::protobuf::uint8* SignedBlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.SignedBlockHeader)
  // optional .fantasybit.BlockHeader head = 10;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->head_, target);
  }

  // optional string sig = 30;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.SignedBlockHeader.sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->sig(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.SignedBlockHeader)
  return target;
}

int SignedBlockHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .fantasybit.BlockHeader head = 10;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->head_);
    }

    // optional string sig = 30;
    if (has_sig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedBlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignedBlockHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedBlockHeader>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedBlockHeader::MergeFrom(const SignedBlockHeader& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::fantasybit::BlockHeader::MergeFrom(from.head());
    }
    if (from.has_sig()) {
      set_has_sig();
      sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignedBlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedBlockHeader::CopyFrom(const SignedBlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedBlockHeader::IsInitialized() const {

  return true;
}

void SignedBlockHeader::Swap(SignedBlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedBlockHeader::InternalSwap(SignedBlockHeader* other) {
  std::swap(head_, other->head_);
  sig_.Swap(&other->sig_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignedBlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedBlockHeader_descriptor_;
  metadata.reflection = SignedBlockHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignedBlockHeader

// optional .fantasybit.BlockHeader head = 10;
bool SignedBlockHeader::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignedBlockHeader::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void SignedBlockHeader::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignedBlockHeader::clear_head() {
  if (head_ != NULL) head_->::fantasybit::BlockHeader::Clear();
  clear_has_head();
}
const ::fantasybit::BlockHeader& SignedBlockHeader::head() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedBlockHeader.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::fantasybit::BlockHeader* SignedBlockHeader::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::fantasybit::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedBlockHeader.head)
  return head_;
}
::fantasybit::BlockHeader* SignedBlockHeader::release_head() {
  clear_has_head();
  ::fantasybit::BlockHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void SignedBlockHeader::set_allocated_head(::fantasybit::BlockHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedBlockHeader.head)
}

// optional string sig = 30;
bool SignedBlockHeader::has_sig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignedBlockHeader::set_has_sig() {
  _has_bits_[0] |= 0x00000002u;
}
void SignedBlockHeader::clear_has_sig() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignedBlockHeader::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
 const ::std::string& SignedBlockHeader::sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedBlockHeader.sig)
  return sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedBlockHeader::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedBlockHeader.sig)
}
 void SignedBlockHeader::set_sig(const char* value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedBlockHeader.sig)
}
 void SignedBlockHeader::set_sig(const char* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedBlockHeader.sig)
}
 ::std::string* SignedBlockHeader::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedBlockHeader.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignedBlockHeader::release_sig() {
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignedBlockHeader::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedBlockHeader.sig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Block::kSignedheadFieldNumber;
const int Block::kSignedTransactionsFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Block)
}

void Block::InitAsDefaultInstance() {
  signedhead_ = const_cast< ::fantasybit::SignedBlockHeader*>(&::fantasybit::SignedBlockHeader::default_instance());
}

Block::Block(const Block& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Block)
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  signedhead_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:fantasybit.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != default_instance_) {
    delete signedhead_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
  _extensions_.Clear();
  if (has_signedhead()) {
    if (signedhead_ != NULL) signedhead_->::fantasybit::SignedBlockHeader::Clear();
  }
  signed_transactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SignedBlockHeader signedhead = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedhead()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_signed_transactions;
        break;
      }

      // repeated .fantasybit.SignedTransaction signed_transactions = 20;
      case 20: {
        if (tag == 162) {
         parse_signed_transactions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_signed_transactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_signed_transactions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_signed_transactions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Block)
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->signedhead_, output);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (unsigned int i = 0, n = this->signed_transactions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->signed_transactions(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Block)
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Block)
  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->signedhead_, target);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  for (unsigned int i = 0, n = this->signed_transactions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->signed_transactions(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Block)
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  if (has_signedhead()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signedhead_);
  }

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  total_size += 2 * this->signed_transactions_size();
  for (int i = 0; i < this->signed_transactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signed_transactions(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Block* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  signed_transactions_.MergeFrom(from.signed_transactions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signedhead()) {
      mutable_signedhead()->::fantasybit::SignedBlockHeader::MergeFrom(from.signedhead());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->signed_transactions())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  std::swap(signedhead_, other->signedhead_);
  signed_transactions_.UnsafeArenaSwap(&other->signed_transactions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// optional .fantasybit.SignedBlockHeader signedhead = 10;
bool Block::has_signedhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Block::set_has_signedhead() {
  _has_bits_[0] |= 0x00000001u;
}
void Block::clear_has_signedhead() {
  _has_bits_[0] &= ~0x00000001u;
}
void Block::clear_signedhead() {
  if (signedhead_ != NULL) signedhead_->::fantasybit::SignedBlockHeader::Clear();
  clear_has_signedhead();
}
const ::fantasybit::SignedBlockHeader& Block::signedhead() const {
  // @@protoc_insertion_point(field_get:fantasybit.Block.signedhead)
  return signedhead_ != NULL ? *signedhead_ : *default_instance_->signedhead_;
}
::fantasybit::SignedBlockHeader* Block::mutable_signedhead() {
  set_has_signedhead();
  if (signedhead_ == NULL) {
    signedhead_ = new ::fantasybit::SignedBlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Block.signedhead)
  return signedhead_;
}
::fantasybit::SignedBlockHeader* Block::release_signedhead() {
  clear_has_signedhead();
  ::fantasybit::SignedBlockHeader* temp = signedhead_;
  signedhead_ = NULL;
  return temp;
}
void Block::set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead) {
  delete signedhead_;
  signedhead_ = signedhead;
  if (signedhead) {
    set_has_signedhead();
  } else {
    clear_has_signedhead();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Block.signedhead)
}

// repeated .fantasybit.SignedTransaction signed_transactions = 20;
int Block::signed_transactions_size() const {
  return signed_transactions_.size();
}
void Block::clear_signed_transactions() {
  signed_transactions_.Clear();
}
const ::fantasybit::SignedTransaction& Block::signed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.Block.signed_transactions)
  return signed_transactions_.Get(index);
}
::fantasybit::SignedTransaction* Block::mutable_signed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.Block.signed_transactions)
  return signed_transactions_.Mutable(index);
}
::fantasybit::SignedTransaction* Block::add_signed_transactions() {
  // @@protoc_insertion_point(field_add:fantasybit.Block.signed_transactions)
  return signed_transactions_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
Block::mutable_signed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.Block.signed_transactions)
  return &signed_transactions_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
Block::signed_transactions() const {
  // @@protoc_insertion_point(field_list:fantasybit.Block.signed_transactions)
  return signed_transactions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_Type_descriptor_;
}
bool NodeRequest_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeRequest_Type NodeRequest::HANDSHAKE;
const NodeRequest_Type NodeRequest::BLOCK_REQUEST;
const NodeRequest_Type NodeRequest::HIGHT_REQUEST;
const NodeRequest_Type NodeRequest::NAT_TEST;
const NodeRequest_Type NodeRequest::Type_MIN;
const NodeRequest_Type NodeRequest::Type_MAX;
const int NodeRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeRequest::kTypeFieldNumber;
const int NodeRequest::kMyipFieldNumber;
const int NodeRequest::kNumFieldNumber;
const int NodeRequest::kMyhostFieldNumber;
#endif  // !_MSC_VER

NodeRequest::NodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NodeRequest)
}

void NodeRequest::InitAsDefaultInstance() {
}

NodeRequest::NodeRequest(const NodeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.NodeRequest)
}

void NodeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  myip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_ = 0;
  myhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeRequest::~NodeRequest() {
  // @@protoc_insertion_point(destructor:fantasybit.NodeRequest)
  SharedDtor();
}

void NodeRequest::SharedDtor() {
  myip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  myhost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeRequest_descriptor_;
}

const NodeRequest& NodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NodeRequest* NodeRequest::default_instance_ = NULL;

NodeRequest* NodeRequest::New(::google::protobuf::Arena* arena) const {
  NodeRequest* n = new NodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeRequest::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 1;
    if (has_myip()) {
      myip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_ = 0;
    if (has_myhost()) {
      myhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.NodeRequest.Type type = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::NodeRequest_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::NodeRequest_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_myip;
        break;
      }

      // optional string myip = 20;
      case 20: {
        if (tag == 162) {
         parse_myip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->myip().data(), this->myip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NodeRequest.myip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_num;
        break;
      }

      // optional int32 num = 30;
      case 30: {
        if (tag == 240) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_myhost;
        break;
      }

      // optional string myhost = 40;
      case 40: {
        if (tag == 322) {
         parse_myhost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->myhost().data(), this->myhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NodeRequest.myhost");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NodeRequest)
  return false;
#undef DO_
}

void NodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NodeRequest)
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional string myip = 20;
  if (has_myip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myip().data(), this->myip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->myip(), output);
  }

  // optional int32 num = 30;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->num(), output);
  }

  // optional string myhost = 40;
  if (has_myhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myhost().data(), this->myhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myhost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->myhost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NodeRequest)
}

::google::protobuf::uint8* NodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NodeRequest)
  // optional .fantasybit.NodeRequest.Type type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional string myip = 20;
  if (has_myip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myip().data(), this->myip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->myip(), target);
  }

  // optional int32 num = 30;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->num(), target);
  }

  // optional string myhost = 40;
  if (has_myhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->myhost().data(), this->myhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeRequest.myhost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->myhost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NodeRequest)
  return target;
}

int NodeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .fantasybit.NodeRequest.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string myip = 20;
    if (has_myip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myip());
    }

    // optional int32 num = 30;
    if (has_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string myhost = 40;
    if (has_myhost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myhost());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeRequest::MergeFrom(const NodeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_myip()) {
      set_has_myip();
      myip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.myip_);
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_myhost()) {
      set_has_myhost();
      myhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.myhost_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeRequest::CopyFrom(const NodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeRequest::IsInitialized() const {

  return true;
}

void NodeRequest::Swap(NodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeRequest::InternalSwap(NodeRequest* other) {
  std::swap(type_, other->type_);
  myip_.Swap(&other->myip_);
  std::swap(num_, other->num_);
  myhost_.Swap(&other->myhost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeRequest_descriptor_;
  metadata.reflection = NodeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeRequest

// optional .fantasybit.NodeRequest.Type type = 10;
bool NodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::fantasybit::NodeRequest_Type NodeRequest::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.type)
  return static_cast< ::fantasybit::NodeRequest_Type >(type_);
}
 void NodeRequest::set_type(::fantasybit::NodeRequest_Type value) {
  assert(::fantasybit::NodeRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.type)
}

// optional string myip = 20;
bool NodeRequest::has_myip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeRequest::set_has_myip() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeRequest::clear_has_myip() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeRequest::clear_myip() {
  myip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myip();
}
 const ::std::string& NodeRequest::myip() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.myip)
  return myip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeRequest::set_myip(const ::std::string& value) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.myip)
}
 void NodeRequest::set_myip(const char* value) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeRequest.myip)
}
 void NodeRequest::set_myip(const char* value, size_t size) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeRequest.myip)
}
 ::std::string* NodeRequest::mutable_myip() {
  set_has_myip();
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeRequest.myip)
  return myip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeRequest::release_myip() {
  clear_has_myip();
  return myip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeRequest::set_allocated_myip(::std::string* myip) {
  if (myip != NULL) {
    set_has_myip();
  } else {
    clear_has_myip();
  }
  myip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myip);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NodeRequest.myip)
}

// optional int32 num = 30;
bool NodeRequest::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeRequest::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
 ::google::protobuf::int32 NodeRequest::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.num)
  return num_;
}
 void NodeRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.num)
}

// optional string myhost = 40;
bool NodeRequest::has_myhost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NodeRequest::set_has_myhost() {
  _has_bits_[0] |= 0x00000008u;
}
void NodeRequest::clear_has_myhost() {
  _has_bits_[0] &= ~0x00000008u;
}
void NodeRequest::clear_myhost() {
  myhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myhost();
}
 const ::std::string& NodeRequest::myhost() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.myhost)
  return myhost_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeRequest::set_myhost(const ::std::string& value) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.myhost)
}
 void NodeRequest::set_myhost(const char* value) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeRequest.myhost)
}
 void NodeRequest::set_myhost(const char* value, size_t size) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeRequest.myhost)
}
 ::std::string* NodeRequest::mutable_myhost() {
  set_has_myhost();
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeRequest.myhost)
  return myhost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NodeRequest::release_myhost() {
  clear_has_myhost();
  return myhost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeRequest::set_allocated_myhost(::std::string* myhost) {
  if (myhost != NULL) {
    set_has_myhost();
  } else {
    clear_has_myhost();
  }
  myhost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myhost);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NodeRequest.myhost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NodeReply::kHightFieldNumber;
const int NodeReply::kIpsFieldNumber;
#endif  // !_MSC_VER

NodeReply::NodeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.NodeReply)
}

void NodeReply::InitAsDefaultInstance() {
}

NodeReply::NodeReply(const NodeReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.NodeReply)
}

void NodeReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeReply::~NodeReply() {
  // @@protoc_insertion_point(destructor:fantasybit.NodeReply)
  SharedDtor();
}

void NodeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeReply_descriptor_;
}

const NodeReply& NodeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NodeReply* NodeReply::default_instance_ = NULL;

NodeReply* NodeReply::New(::google::protobuf::Arena* arena) const {
  NodeReply* n = new NodeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeReply::Clear() {
  hight_ = 0;
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.NodeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hight = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
          set_has_hight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        break;
      }

      // repeated string ips = 20;
      case 20: {
        if (tag == 162) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.NodeReply.ips");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.NodeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.NodeReply)
  return false;
#undef DO_
}

void NodeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.NodeReply)
  // optional int32 hight = 10;
  if (has_hight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hight(), output);
  }

  // repeated string ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeReply.ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.NodeReply)
}

::google::protobuf::uint8* NodeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.NodeReply)
  // optional int32 hight = 10;
  if (has_hight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hight(), target);
  }

  // repeated string ips = 20;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.NodeReply.ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->ips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.NodeReply)
  return target;
}

int NodeReply::ByteSize() const {
  int total_size = 0;

  // optional int32 hight = 10;
  if (has_hight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hight());
  }

  // repeated string ips = 20;
  total_size += 2 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeReply::MergeFrom(const NodeReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hight()) {
      set_hight(from.hight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeReply::CopyFrom(const NodeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeReply::IsInitialized() const {

  return true;
}

void NodeReply::Swap(NodeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeReply::InternalSwap(NodeReply* other) {
  std::swap(hight_, other->hight_);
  ips_.UnsafeArenaSwap(&other->ips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeReply_descriptor_;
  metadata.reflection = NodeReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeReply

// optional int32 hight = 10;
bool NodeReply::has_hight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeReply::set_has_hight() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeReply::clear_has_hight() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeReply::clear_hight() {
  hight_ = 0;
  clear_has_hight();
}
 ::google::protobuf::int32 NodeReply::hight() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeReply.hight)
  return hight_;
}
 void NodeReply::set_hight(::google::protobuf::int32 value) {
  set_has_hight();
  hight_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.hight)
}

// repeated string ips = 20;
int NodeReply::ips_size() const {
  return ips_.size();
}
void NodeReply::clear_ips() {
  ips_.Clear();
}
 const ::std::string& NodeReply::ips(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeReply.ips)
  return ips_.Get(index);
}
 ::std::string* NodeReply::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeReply.ips)
  return ips_.Mutable(index);
}
 void NodeReply::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.ips)
  ips_.Mutable(index)->assign(value);
}
 void NodeReply::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeReply.ips)
}
 void NodeReply::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeReply.ips)
}
 ::std::string* NodeReply::add_ips() {
  return ips_.Add();
}
 void NodeReply::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.NodeReply.ips)
}
 void NodeReply::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.NodeReply.ips)
}
 void NodeReply::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.NodeReply.ips)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeReply::ips() const {
  // @@protoc_insertion_point(field_list:fantasybit.NodeReply.ips)
  return ips_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeReply::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.NodeReply.ips)
  return &ips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FantasyPlayerPoints::kSeasonFieldNumber;
const int FantasyPlayerPoints::kWeekFieldNumber;
const int FantasyPlayerPoints::kPlayeridFieldNumber;
const int FantasyPlayerPoints::kPointsFieldNumber;
const int FantasyPlayerPoints::kResultFieldNumber;
#endif  // !_MSC_VER

FantasyPlayerPoints::FantasyPlayerPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyPlayerPoints)
}

void FantasyPlayerPoints::InitAsDefaultInstance() {
}

FantasyPlayerPoints::FantasyPlayerPoints(const FantasyPlayerPoints& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyPlayerPoints)
}

void FantasyPlayerPoints::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  season_ = 0u;
  week_ = 0u;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyPlayerPoints::~FantasyPlayerPoints() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyPlayerPoints)
  SharedDtor();
}

void FantasyPlayerPoints::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FantasyPlayerPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyPlayerPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyPlayerPoints_descriptor_;
}

const FantasyPlayerPoints& FantasyPlayerPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyPlayerPoints* FantasyPlayerPoints::default_instance_ = NULL;

FantasyPlayerPoints* FantasyPlayerPoints::New(::google::protobuf::Arena* arena) const {
  FantasyPlayerPoints* n = new FantasyPlayerPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FantasyPlayerPoints::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FantasyPlayerPoints*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(season_, week_);
    ZR_(points_, result_);
    if (has_playerid()) {
      playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FantasyPlayerPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyPlayerPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (tag == 160) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (tag == 242) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.FantasyPlayerPoints.playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_points;
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (tag == 320) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(405)) goto parse_result;
        break;
      }

      // optional float result = 50;
      case 50: {
        if (tag == 405) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyPlayerPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyPlayerPoints)
  return false;
#undef DO_
}

void FantasyPlayerPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyPlayerPoints)
  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayerPoints.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  // optional float result = 50;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyPlayerPoints)
}

::google::protobuf::uint8* FantasyPlayerPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyPlayerPoints)
  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.FantasyPlayerPoints.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  // optional float result = 50;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyPlayerPoints)
  return target;
}

int FantasyPlayerPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional float result = 50;
    if (has_result()) {
      total_size += 2 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyPlayerPoints::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FantasyPlayerPoints* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FantasyPlayerPoints>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyPlayerPoints::MergeFrom(const FantasyPlayerPoints& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_playerid()) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FantasyPlayerPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyPlayerPoints::CopyFrom(const FantasyPlayerPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyPlayerPoints::IsInitialized() const {

  return true;
}

void FantasyPlayerPoints::Swap(FantasyPlayerPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FantasyPlayerPoints::InternalSwap(FantasyPlayerPoints* other) {
  std::swap(season_, other->season_);
  std::swap(week_, other->week_);
  playerid_.Swap(&other->playerid_);
  std::swap(points_, other->points_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FantasyPlayerPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyPlayerPoints_descriptor_;
  metadata.reflection = FantasyPlayerPoints_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FantasyPlayerPoints

// optional uint32 season = 10;
bool FantasyPlayerPoints::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FantasyPlayerPoints::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
void FantasyPlayerPoints::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
void FantasyPlayerPoints::clear_season() {
  season_ = 0u;
  clear_has_season();
}
 ::google::protobuf::uint32 FantasyPlayerPoints::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.season)
  return season_;
}
 void FantasyPlayerPoints::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.season)
}

// optional uint32 week = 20;
bool FantasyPlayerPoints::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FantasyPlayerPoints::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
void FantasyPlayerPoints::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
void FantasyPlayerPoints::clear_week() {
  week_ = 0u;
  clear_has_week();
}
 ::google::protobuf::uint32 FantasyPlayerPoints::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.week)
  return week_;
}
 void FantasyPlayerPoints::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.week)
}

// optional string playerid = 30;
bool FantasyPlayerPoints::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FantasyPlayerPoints::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
void FantasyPlayerPoints::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void FantasyPlayerPoints::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
 const ::std::string& FantasyPlayerPoints::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FantasyPlayerPoints::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.playerid)
}
 void FantasyPlayerPoints::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyPlayerPoints.playerid)
}
 void FantasyPlayerPoints::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyPlayerPoints.playerid)
}
 ::std::string* FantasyPlayerPoints::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyPlayerPoints.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FantasyPlayerPoints::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FantasyPlayerPoints::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyPlayerPoints.playerid)
}

// optional int32 points = 40;
bool FantasyPlayerPoints::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FantasyPlayerPoints::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
void FantasyPlayerPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
void FantasyPlayerPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
 ::google::protobuf::int32 FantasyPlayerPoints::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.points)
  return points_;
}
 void FantasyPlayerPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.points)
}

// optional float result = 50;
bool FantasyPlayerPoints::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FantasyPlayerPoints::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void FantasyPlayerPoints::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void FantasyPlayerPoints::clear_result() {
  result_ = 0;
  clear_has_result();
}
 float FantasyPlayerPoints::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.result)
  return result_;
}
 void FantasyPlayerPoints::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ProjectionTrans::kSeasonFieldNumber;
const int ProjectionTrans::kWeekFieldNumber;
const int ProjectionTrans::kPlayeridFieldNumber;
const int ProjectionTrans::kPointsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ProjectionTrans::kProjTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
  ProjectionTrans::proj_trans(kProjTransFieldNumber, ::fantasybit::ProjectionTrans::default_instance());
ProjectionTrans::ProjectionTrans()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ProjectionTrans)
}

void ProjectionTrans::InitAsDefaultInstance() {
}

ProjectionTrans::ProjectionTrans(const ProjectionTrans& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.ProjectionTrans)
}

void ProjectionTrans::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  season_ = 0u;
  week_ = 0u;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectionTrans::~ProjectionTrans() {
  // @@protoc_insertion_point(destructor:fantasybit.ProjectionTrans)
  SharedDtor();
}

void ProjectionTrans::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ProjectionTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProjectionTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProjectionTrans_descriptor_;
}

const ProjectionTrans& ProjectionTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ProjectionTrans* ProjectionTrans::default_instance_ = NULL;

ProjectionTrans* ProjectionTrans::New(::google::protobuf::Arena* arena) const {
  ProjectionTrans* n = new ProjectionTrans;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProjectionTrans::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProjectionTrans*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(season_, week_);
    if (has_playerid()) {
      playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    points_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProjectionTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ProjectionTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (tag == 160) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (tag == 242) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.ProjectionTrans.playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_points;
        break;
      }

      // optional int32 points = 40;
      case 40: {
        if (tag == 320) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ProjectionTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ProjectionTrans)
  return false;
#undef DO_
}

void ProjectionTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ProjectionTrans)
  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjectionTrans.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  // optional int32 points = 40;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ProjectionTrans)
}

::google::protobuf::uint8* ProjectionTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ProjectionTrans)
  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.ProjectionTrans.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  // optional int32 points = 40;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ProjectionTrans)
  return target;
}

int ProjectionTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional int32 points = 40;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectionTrans::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProjectionTrans* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProjectionTrans>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProjectionTrans::MergeFrom(const ProjectionTrans& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_playerid()) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProjectionTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectionTrans::CopyFrom(const ProjectionTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectionTrans::IsInitialized() const {

  return true;
}

void ProjectionTrans::Swap(ProjectionTrans* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectionTrans::InternalSwap(ProjectionTrans* other) {
  std::swap(season_, other->season_);
  std::swap(week_, other->week_);
  playerid_.Swap(&other->playerid_);
  std::swap(points_, other->points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProjectionTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProjectionTrans_descriptor_;
  metadata.reflection = ProjectionTrans_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProjectionTrans

// optional uint32 season = 10;
bool ProjectionTrans::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProjectionTrans::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
void ProjectionTrans::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProjectionTrans::clear_season() {
  season_ = 0u;
  clear_has_season();
}
 ::google::protobuf::uint32 ProjectionTrans::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.season)
  return season_;
}
 void ProjectionTrans::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.season)
}

// optional uint32 week = 20;
bool ProjectionTrans::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProjectionTrans::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
void ProjectionTrans::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProjectionTrans::clear_week() {
  week_ = 0u;
  clear_has_week();
}
 ::google::protobuf::uint32 ProjectionTrans::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.week)
  return week_;
}
 void ProjectionTrans::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.week)
}

// optional string playerid = 30;
bool ProjectionTrans::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProjectionTrans::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
void ProjectionTrans::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProjectionTrans::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
 const ::std::string& ProjectionTrans::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProjectionTrans::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.playerid)
}
 void ProjectionTrans::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjectionTrans.playerid)
}
 void ProjectionTrans::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjectionTrans.playerid)
}
 ::std::string* ProjectionTrans::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjectionTrans.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ProjectionTrans::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ProjectionTrans::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjectionTrans.playerid)
}

// optional int32 points = 40;
bool ProjectionTrans::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProjectionTrans::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
void ProjectionTrans::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProjectionTrans::clear_points() {
  points_ = 0;
  clear_has_points();
}
 ::google::protobuf::int32 ProjectionTrans::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.points)
  return points_;
}
 void ProjectionTrans::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Data_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_Type_descriptor_;
}
bool Data_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Data_Type Data::SCHEDULE;
const Data_Type Data::PLAYER;
const Data_Type Data::GAME;
const Data_Type Data::RESULT;
const Data_Type Data::Type_MIN;
const Data_Type Data::Type_MAX;
const int Data::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Data::kVersionFieldNumber;
const int Data::kTypeFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:fantasybit.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
  _extensions_.Clear();
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Data*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }

      // optional .fantasybit.Data.Type type = 20;
      case 20: {
        if (tag == 160) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::Data_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::Data_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.Data)
  // optional int32 version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.Data)
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.Data)
  // optional int32 version = 10;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // optional .fantasybit.Data.Type type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.Data)
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .fantasybit.Data.Type type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional int32 version = 10;
bool Data::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Data::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Data::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Data::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 Data::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.Data.version)
  return version_;
}
 void Data::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Data.version)
}

// optional .fantasybit.Data.Type type = 20;
bool Data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::fantasybit::Data_Type Data::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.Data.type)
  return static_cast< ::fantasybit::Data_Type >(type_);
}
 void Data::set_type(::fantasybit::Data_Type value) {
  assert(::fantasybit::Data_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Data.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kPlayeridFieldNumber;
const int PlayerData::kPlayerBaseFieldNumber;
const int PlayerData::kPlayerStatusFieldNumber;
const int PlayerData::kPlayerGameStatusFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PlayerData::kPlayerDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
  PlayerData::player_data(kPlayerDataFieldNumber, ::fantasybit::PlayerData::default_instance());
PlayerData::PlayerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.PlayerData)
}

void PlayerData::InitAsDefaultInstance() {
  player_base_ = const_cast< ::fantasybit::PlayerBase*>(&::fantasybit::PlayerBase::default_instance());
  player_status_ = const_cast< ::fantasybit::PlayerStatus*>(&::fantasybit::PlayerStatus::default_instance());
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.PlayerData)
}

void PlayerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_base_ = NULL;
  player_status_ = NULL;
  player_game_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:fantasybit.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete player_base_;
    delete player_status_;
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New(::google::protobuf::Arena* arena) const {
  PlayerData* n = new PlayerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_playerid()) {
      playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_player_base()) {
      if (player_base_ != NULL) player_base_->::fantasybit::PlayerBase::Clear();
    }
    if (has_player_status()) {
      if (player_status_ != NULL) player_status_->::fantasybit::PlayerStatus::Clear();
    }
    player_game_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.PlayerData.playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_player_base;
        break;
      }

      // optional .fantasybit.PlayerBase player_base = 20;
      case 20: {
        if (tag == 162) {
         parse_player_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_player_status;
        break;
      }

      // optional .fantasybit.PlayerStatus player_status = 30;
      case 30: {
        if (tag == 242) {
         parse_player_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_player_game_status;
        break;
      }

      // optional .fantasybit.PlayerGameStatus player_game_status = 40;
      case 40: {
        if (tag == 320) {
         parse_player_game_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::PlayerGameStatus_IsValid(value)) {
            set_player_game_status(static_cast< ::fantasybit::PlayerGameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.PlayerData)
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerData.playerid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playerid(), output);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (has_player_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->player_base_, output);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->player_status_, output);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (has_player_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->player_game_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.PlayerData)
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.PlayerData)
  // optional string playerid = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.PlayerData.playerid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerid(), target);
  }

  // optional .fantasybit.PlayerBase player_base = 20;
  if (has_player_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->player_base_, target);
  }

  // optional .fantasybit.PlayerStatus player_status = 30;
  if (has_player_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *this->player_status_, target);
  }

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  if (has_player_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->player_game_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.PlayerData)
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string playerid = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

    // optional .fantasybit.PlayerBase player_base = 20;
    if (has_player_base()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_base_);
    }

    // optional .fantasybit.PlayerStatus player_status = 30;
    if (has_player_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_status_);
    }

    // optional .fantasybit.PlayerGameStatus player_game_status = 40;
    if (has_player_game_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player_game_status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_has_playerid();
      playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
    }
    if (from.has_player_base()) {
      mutable_player_base()->::fantasybit::PlayerBase::MergeFrom(from.player_base());
    }
    if (from.has_player_status()) {
      mutable_player_status()->::fantasybit::PlayerStatus::MergeFrom(from.player_status());
    }
    if (from.has_player_game_status()) {
      set_player_game_status(from.player_game_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerData::InternalSwap(PlayerData* other) {
  playerid_.Swap(&other->playerid_);
  std::swap(player_base_, other->player_base_);
  std::swap(player_status_, other->player_status_);
  std::swap(player_game_status_, other->player_game_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerData

// optional string playerid = 10;
bool PlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
 const ::std::string& PlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerData::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerData.playerid)
}
 void PlayerData::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerData.playerid)
}
 void PlayerData::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerData.playerid)
}
 ::std::string* PlayerData::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerData::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.playerid)
}

// optional .fantasybit.PlayerBase player_base = 20;
bool PlayerData::has_player_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerData::set_has_player_base() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerData::clear_has_player_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerData::clear_player_base() {
  if (player_base_ != NULL) player_base_->::fantasybit::PlayerBase::Clear();
  clear_has_player_base();
}
const ::fantasybit::PlayerBase& PlayerData::player_base() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_base)
  return player_base_ != NULL ? *player_base_ : *default_instance_->player_base_;
}
::fantasybit::PlayerBase* PlayerData::mutable_player_base() {
  set_has_player_base();
  if (player_base_ == NULL) {
    player_base_ = new ::fantasybit::PlayerBase;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.player_base)
  return player_base_;
}
::fantasybit::PlayerBase* PlayerData::release_player_base() {
  clear_has_player_base();
  ::fantasybit::PlayerBase* temp = player_base_;
  player_base_ = NULL;
  return temp;
}
void PlayerData::set_allocated_player_base(::fantasybit::PlayerBase* player_base) {
  delete player_base_;
  player_base_ = player_base;
  if (player_base) {
    set_has_player_base();
  } else {
    clear_has_player_base();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.player_base)
}

// optional .fantasybit.PlayerStatus player_status = 30;
bool PlayerData::has_player_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerData::set_has_player_status() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerData::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerData::clear_player_status() {
  if (player_status_ != NULL) player_status_->::fantasybit::PlayerStatus::Clear();
  clear_has_player_status();
}
const ::fantasybit::PlayerStatus& PlayerData::player_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_status)
  return player_status_ != NULL ? *player_status_ : *default_instance_->player_status_;
}
::fantasybit::PlayerStatus* PlayerData::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) {
    player_status_ = new ::fantasybit::PlayerStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.player_status)
  return player_status_;
}
::fantasybit::PlayerStatus* PlayerData::release_player_status() {
  clear_has_player_status();
  ::fantasybit::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
void PlayerData::set_allocated_player_status(::fantasybit::PlayerStatus* player_status) {
  delete player_status_;
  player_status_ = player_status;
  if (player_status) {
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.player_status)
}

// optional .fantasybit.PlayerGameStatus player_game_status = 40;
bool PlayerData::has_player_game_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerData::set_has_player_game_status() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerData::clear_has_player_game_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerData::clear_player_game_status() {
  player_game_status_ = 0;
  clear_has_player_game_status();
}
 ::fantasybit::PlayerGameStatus PlayerData::player_game_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_game_status)
  return static_cast< ::fantasybit::PlayerGameStatus >(player_game_status_);
}
 void PlayerData::set_player_game_status(::fantasybit::PlayerGameStatus value) {
  assert(::fantasybit::PlayerGameStatus_IsValid(value));
  set_has_player_game_status();
  player_game_status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerData.player_game_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GameData::kGameidFieldNumber;
const int GameData::kStatusFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int GameData::kGameDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GameData >, 11, false >
  GameData::game_data(kGameDataFieldNumber, ::fantasybit::GameData::default_instance());
GameData::GameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameData)
}

void GameData::InitAsDefaultInstance() {
  status_ = const_cast< ::fantasybit::GameStatus*>(&::fantasybit::GameStatus::default_instance());
}

GameData::GameData(const GameData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameData)
}

void GameData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameData::~GameData() {
  // @@protoc_insertion_point(destructor:fantasybit.GameData)
  SharedDtor();
}

void GameData::SharedDtor() {
  gameid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void GameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameData_descriptor_;
}

const GameData& GameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

GameData* GameData::default_instance_ = NULL;

GameData* GameData::New(::google::protobuf::Arena* arena) const {
  GameData* n = new GameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameData::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_gameid()) {
      gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_status()) {
      if (status_ != NULL) status_->::fantasybit::GameStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.GameData.gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_status;
        break;
      }

      // optional .fantasybit.GameStatus status = 20;
      case 20: {
        if (tag == 162) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameData)
  return false;
#undef DO_
}

void GameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameData)
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameData.gameid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gameid(), output);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameData)
}

::google::protobuf::uint8* GameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameData)
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.GameData.gameid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // optional .fantasybit.GameStatus status = 20;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->status_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameData)
  return target;
}

int GameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string gameid = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

    // optional .fantasybit.GameStatus status = 20;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameData::MergeFrom(const GameData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_has_gameid();
      gameid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gameid_);
    }
    if (from.has_status()) {
      mutable_status()->::fantasybit::GameStatus::MergeFrom(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameData::CopyFrom(const GameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {

  return true;
}

void GameData::Swap(GameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameData::InternalSwap(GameData* other) {
  gameid_.Swap(&other->gameid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameData_descriptor_;
  metadata.reflection = GameData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameData

// optional string gameid = 10;
bool GameData::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameData::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
void GameData::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameData::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
 const ::std::string& GameData::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameData.gameid)
  return gameid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameData::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameData.gameid)
}
 void GameData::set_gameid(const char* value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameData.gameid)
}
 void GameData::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameData.gameid)
}
 ::std::string* GameData::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameData.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameData::release_gameid() {
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameData::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameData.gameid)
}

// optional .fantasybit.GameStatus status = 20;
bool GameData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void GameData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameData::clear_status() {
  if (status_ != NULL) status_->::fantasybit::GameStatus::Clear();
  clear_has_status();
}
const ::fantasybit::GameStatus& GameData::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameData.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::fantasybit::GameStatus* GameData::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::fantasybit::GameStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameData.status)
  return status_;
}
::fantasybit::GameStatus* GameData::release_status() {
  clear_has_status();
  ::fantasybit::GameStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void GameData::set_allocated_status(::fantasybit::GameStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameData.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ResultData::kGameResultFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ResultData::kResultDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
  ResultData::result_data(kResultDataFieldNumber, ::fantasybit::ResultData::default_instance());
ResultData::ResultData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ResultData)
}

void ResultData::InitAsDefaultInstance() {
  game_result_ = const_cast< ::fantasybit::GameResult*>(&::fantasybit::GameResult::default_instance());
}

ResultData::ResultData(const ResultData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.ResultData)
}

void ResultData::SharedCtor() {
  _cached_size_ = 0;
  game_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultData::~ResultData() {
  // @@protoc_insertion_point(destructor:fantasybit.ResultData)
  SharedDtor();
}

void ResultData::SharedDtor() {
  if (this != default_instance_) {
    delete game_result_;
  }
}

void ResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultData_descriptor_;
}

const ResultData& ResultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ResultData* ResultData::default_instance_ = NULL;

ResultData* ResultData::New(::google::protobuf::Arena* arena) const {
  ResultData* n = new ResultData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResultData::Clear() {
  if (has_game_result()) {
    if (game_result_ != NULL) game_result_->::fantasybit::GameResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ResultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.GameResult game_result = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ResultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ResultData)
  return false;
#undef DO_
}

void ResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ResultData)
  // optional .fantasybit.GameResult game_result = 10;
  if (has_game_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->game_result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ResultData)
}

::google::protobuf::uint8* ResultData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ResultData)
  // optional .fantasybit.GameResult game_result = 10;
  if (has_game_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->game_result_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ResultData)
  return target;
}

int ResultData::ByteSize() const {
  int total_size = 0;

  // optional .fantasybit.GameResult game_result = 10;
  if (has_game_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_result_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResultData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResultData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultData::MergeFrom(const ResultData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_result()) {
      mutable_game_result()->::fantasybit::GameResult::MergeFrom(from.game_result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResultData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultData::CopyFrom(const ResultData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultData::IsInitialized() const {

  return true;
}

void ResultData::Swap(ResultData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResultData::InternalSwap(ResultData* other) {
  std::swap(game_result_, other->game_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultData_descriptor_;
  metadata.reflection = ResultData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResultData

// optional .fantasybit.GameResult game_result = 10;
bool ResultData::has_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResultData::set_has_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ResultData::clear_has_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResultData::clear_game_result() {
  if (game_result_ != NULL) game_result_->::fantasybit::GameResult::Clear();
  clear_has_game_result();
}
const ::fantasybit::GameResult& ResultData::game_result() const {
  // @@protoc_insertion_point(field_get:fantasybit.ResultData.game_result)
  return game_result_ != NULL ? *game_result_ : *default_instance_->game_result_;
}
::fantasybit::GameResult* ResultData::mutable_game_result() {
  set_has_game_result();
  if (game_result_ == NULL) {
    game_result_ = new ::fantasybit::GameResult;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ResultData.game_result)
  return game_result_;
}
::fantasybit::GameResult* ResultData::release_game_result() {
  clear_has_game_result();
  ::fantasybit::GameResult* temp = game_result_;
  game_result_ = NULL;
  return temp;
}
void ResultData::set_allocated_game_result(::fantasybit::GameResult* game_result) {
  delete game_result_;
  game_result_ = game_result;
  if (game_result) {
    set_has_game_result();
  } else {
    clear_has_game_result();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ResultData.game_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ScheduleData::kWeekFieldNumber;
const int ScheduleData::kWeeklyFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ScheduleData::kScheduleDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ScheduleData >, 11, false >
  ScheduleData::schedule_data(kScheduleDataFieldNumber, ::fantasybit::ScheduleData::default_instance());
ScheduleData::ScheduleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.ScheduleData)
}

void ScheduleData::InitAsDefaultInstance() {
  weekly_ = const_cast< ::fantasybit::WeeklySchedule*>(&::fantasybit::WeeklySchedule::default_instance());
}

ScheduleData::ScheduleData(const ScheduleData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.ScheduleData)
}

void ScheduleData::SharedCtor() {
  _cached_size_ = 0;
  week_ = 0;
  weekly_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScheduleData::~ScheduleData() {
  // @@protoc_insertion_point(destructor:fantasybit.ScheduleData)
  SharedDtor();
}

void ScheduleData::SharedDtor() {
  if (this != default_instance_) {
    delete weekly_;
  }
}

void ScheduleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScheduleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScheduleData_descriptor_;
}

const ScheduleData& ScheduleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

ScheduleData* ScheduleData::default_instance_ = NULL;

ScheduleData* ScheduleData::New(::google::protobuf::Arena* arena) const {
  ScheduleData* n = new ScheduleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScheduleData::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    week_ = 0;
    if (has_weekly()) {
      if (weekly_ != NULL) weekly_->::fantasybit::WeeklySchedule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScheduleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.ScheduleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 week = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_weekly;
        break;
      }

      // optional .fantasybit.WeeklySchedule weekly = 10;
      case 10: {
        if (tag == 82) {
         parse_weekly:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekly()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.ScheduleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.ScheduleData)
  return false;
#undef DO_
}

void ScheduleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.ScheduleData)
  // optional int32 week = 1;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->week(), output);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (has_weekly()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->weekly_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.ScheduleData)
}

::google::protobuf::uint8* ScheduleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.ScheduleData)
  // optional int32 week = 1;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->week(), target);
  }

  // optional .fantasybit.WeeklySchedule weekly = 10;
  if (has_weekly()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->weekly_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.ScheduleData)
  return target;
}

int ScheduleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 week = 1;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week());
    }

    // optional .fantasybit.WeeklySchedule weekly = 10;
    if (has_weekly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weekly_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScheduleData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScheduleData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScheduleData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScheduleData::MergeFrom(const ScheduleData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_weekly()) {
      mutable_weekly()->::fantasybit::WeeklySchedule::MergeFrom(from.weekly());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScheduleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScheduleData::CopyFrom(const ScheduleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleData::IsInitialized() const {

  return true;
}

void ScheduleData::Swap(ScheduleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScheduleData::InternalSwap(ScheduleData* other) {
  std::swap(week_, other->week_);
  std::swap(weekly_, other->weekly_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScheduleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScheduleData_descriptor_;
  metadata.reflection = ScheduleData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScheduleData

// optional int32 week = 1;
bool ScheduleData::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScheduleData::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
void ScheduleData::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScheduleData::clear_week() {
  week_ = 0;
  clear_has_week();
}
 ::google::protobuf::int32 ScheduleData::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ScheduleData.week)
  return week_;
}
 void ScheduleData::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ScheduleData.week)
}

// optional .fantasybit.WeeklySchedule weekly = 10;
bool ScheduleData::has_weekly() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScheduleData::set_has_weekly() {
  _has_bits_[0] |= 0x00000002u;
}
void ScheduleData::clear_has_weekly() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScheduleData::clear_weekly() {
  if (weekly_ != NULL) weekly_->::fantasybit::WeeklySchedule::Clear();
  clear_has_weekly();
}
const ::fantasybit::WeeklySchedule& ScheduleData::weekly() const {
  // @@protoc_insertion_point(field_get:fantasybit.ScheduleData.weekly)
  return weekly_ != NULL ? *weekly_ : *default_instance_->weekly_;
}
::fantasybit::WeeklySchedule* ScheduleData::mutable_weekly() {
  set_has_weekly();
  if (weekly_ == NULL) {
    weekly_ = new ::fantasybit::WeeklySchedule;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ScheduleData.weekly)
  return weekly_;
}
::fantasybit::WeeklySchedule* ScheduleData::release_weekly() {
  clear_has_weekly();
  ::fantasybit::WeeklySchedule* temp = weekly_;
  weekly_ = NULL;
  return temp;
}
void ScheduleData::set_allocated_weekly(::fantasybit::WeeklySchedule* weekly) {
  delete weekly_;
  weekly_ = weekly;
  if (weekly) {
    set_has_weekly();
  } else {
    clear_has_weekly();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ScheduleData.weekly)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DataTransition_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransition_Type_descriptor_;
}
bool DataTransition_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataTransition_Type DataTransition::SEASONSTART;
const DataTransition_Type DataTransition::SEASONEND;
const DataTransition_Type DataTransition::HEARTBEAT;
const DataTransition_Type DataTransition::GAMESTART;
const DataTransition_Type DataTransition::WEEKOVER;
const DataTransition_Type DataTransition::Type_MIN;
const DataTransition_Type DataTransition::Type_MAX;
const int DataTransition::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataTransition::kTypeFieldNumber;
const int DataTransition::kSeasonFieldNumber;
const int DataTransition::kWeekFieldNumber;
const int DataTransition::kGamedataFieldNumber;
const int DataTransition::kDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int DataTransition::kDataTransFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
  DataTransition::data_trans(kDataTransFieldNumber, ::fantasybit::DataTransition::default_instance());
DataTransition::DataTransition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.DataTransition)
}

void DataTransition::InitAsDefaultInstance() {
}

DataTransition::DataTransition(const DataTransition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.DataTransition)
}

void DataTransition::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  season_ = 0u;
  week_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataTransition::~DataTransition() {
  // @@protoc_insertion_point(destructor:fantasybit.DataTransition)
  SharedDtor();
}

void DataTransition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataTransition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataTransition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataTransition_descriptor_;
}

const DataTransition& DataTransition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

DataTransition* DataTransition::default_instance_ = NULL;

DataTransition* DataTransition::New(::google::protobuf::Arena* arena) const {
  DataTransition* n = new DataTransition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataTransition::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 2;
    season_ = 0u;
    week_ = 0u;
  }
  gamedata_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.DataTransition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.DataTransition.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::DataTransition_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::DataTransition_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_season;
        break;
      }

      // optional uint32 season = 10;
      case 10: {
        if (tag == 80) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_week;
        break;
      }

      // optional uint32 week = 20;
      case 20: {
        if (tag == 160) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_gamedata;
        break;
      }

      // repeated .fantasybit.GameData gamedata = 30;
      case 30: {
        if (tag == 242) {
         parse_gamedata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_gamedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_gamedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_gamedata;
        if (input->ExpectTag(322)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .fantasybit.Data data = 40;
      case 40: {
        if (tag == 322) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.DataTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.DataTransition)
  return false;
#undef DO_
}

void DataTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.DataTransition)
  // optional .fantasybit.DataTransition.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->season(), output);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->week(), output);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (unsigned int i = 0, n = this->gamedata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->gamedata(i), output);
  }

  // repeated .fantasybit.Data data = 40;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.DataTransition)
}

::google::protobuf::uint8* DataTransition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DataTransition)
  // optional .fantasybit.DataTransition.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 season = 10;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->season(), target);
  }

  // optional uint32 week = 20;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->week(), target);
  }

  // repeated .fantasybit.GameData gamedata = 30;
  for (unsigned int i = 0, n = this->gamedata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->gamedata(i), target);
  }

  // repeated .fantasybit.Data data = 40;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DataTransition)
  return target;
}

int DataTransition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .fantasybit.DataTransition.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 season = 10;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 week = 20;
    if (has_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

  }
  // repeated .fantasybit.GameData gamedata = 30;
  total_size += 2 * this->gamedata_size();
  for (int i = 0; i < this->gamedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamedata(i));
  }

  // repeated .fantasybit.Data data = 40;
  total_size += 2 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataTransition::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataTransition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataTransition>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataTransition::MergeFrom(const DataTransition& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  gamedata_.MergeFrom(from.gamedata_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataTransition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTransition::CopyFrom(const DataTransition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTransition::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void DataTransition::Swap(DataTransition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataTransition::InternalSwap(DataTransition* other) {
  std::swap(type_, other->type_);
  std::swap(season_, other->season_);
  std::swap(week_, other->week_);
  gamedata_.UnsafeArenaSwap(&other->gamedata_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataTransition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataTransition_descriptor_;
  metadata.reflection = DataTransition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataTransition

// optional .fantasybit.DataTransition.Type type = 1;
bool DataTransition::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataTransition::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DataTransition::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataTransition::clear_type() {
  type_ = 2;
  clear_has_type();
}
 ::fantasybit::DataTransition_Type DataTransition::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.type)
  return static_cast< ::fantasybit::DataTransition_Type >(type_);
}
 void DataTransition::set_type(::fantasybit::DataTransition_Type value) {
  assert(::fantasybit::DataTransition_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.type)
}

// optional uint32 season = 10;
bool DataTransition::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataTransition::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
void DataTransition::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataTransition::clear_season() {
  season_ = 0u;
  clear_has_season();
}
 ::google::protobuf::uint32 DataTransition::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.season)
  return season_;
}
 void DataTransition::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.season)
}

// optional uint32 week = 20;
bool DataTransition::has_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataTransition::set_has_week() {
  _has_bits_[0] |= 0x00000004u;
}
void DataTransition::clear_has_week() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataTransition::clear_week() {
  week_ = 0u;
  clear_has_week();
}
 ::google::protobuf::uint32 DataTransition::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.week)
  return week_;
}
 void DataTransition::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.week)
}

// repeated .fantasybit.GameData gamedata = 30;
int DataTransition::gamedata_size() const {
  return gamedata_.size();
}
void DataTransition::clear_gamedata() {
  gamedata_.Clear();
}
const ::fantasybit::GameData& DataTransition::gamedata(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.gamedata)
  return gamedata_.Get(index);
}
::fantasybit::GameData* DataTransition::mutable_gamedata(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataTransition.gamedata)
  return gamedata_.Mutable(index);
}
::fantasybit::GameData* DataTransition::add_gamedata() {
  // @@protoc_insertion_point(field_add:fantasybit.DataTransition.gamedata)
  return gamedata_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >*
DataTransition::mutable_gamedata() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DataTransition.gamedata)
  return &gamedata_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >&
DataTransition::gamedata() const {
  // @@protoc_insertion_point(field_list:fantasybit.DataTransition.gamedata)
  return gamedata_;
}

// repeated .fantasybit.Data data = 40;
int DataTransition::data_size() const {
  return data_.size();
}
void DataTransition::clear_data() {
  data_.Clear();
}
const ::fantasybit::Data& DataTransition::data(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.data)
  return data_.Get(index);
}
::fantasybit::Data* DataTransition::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataTransition.data)
  return data_.Mutable(index);
}
::fantasybit::Data* DataTransition::add_data() {
  // @@protoc_insertion_point(field_add:fantasybit.DataTransition.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DataTransition::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DataTransition.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DataTransition::data() const {
  // @@protoc_insertion_point(field_list:fantasybit.DataTransition.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamState_State_descriptor_;
}
bool TeamState_State_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TeamState_State TeamState::PREGAME;
const TeamState_State TeamState::INGAME;
const TeamState_State TeamState::State_MIN;
const TeamState_State TeamState::State_MAX;
const int TeamState::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TeamState::kStateFieldNumber;
const int TeamState::kWeekFieldNumber;
const int TeamState::kTeamidFieldNumber;
#endif  // !_MSC_VER

TeamState::TeamState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.TeamState)
}

void TeamState::InitAsDefaultInstance() {
}

TeamState::TeamState(const TeamState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.TeamState)
}

void TeamState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 1;
  week_ = 0u;
  teamid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamState::~TeamState() {
  // @@protoc_insertion_point(destructor:fantasybit.TeamState)
  SharedDtor();
}

void TeamState::SharedDtor() {
  teamid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TeamState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamState_descriptor_;
}

const TeamState& TeamState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

TeamState* TeamState::default_instance_ = NULL;

TeamState* TeamState::New(::google::protobuf::Arena* arena) const {
  TeamState* n = new TeamState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamState::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    state_ = 1;
    week_ = 0u;
    if (has_teamid()) {
      teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.TeamState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.TeamState.State state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::TeamState_State_IsValid(value)) {
            set_state(static_cast< ::fantasybit::TeamState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_week;
        break;
      }

      // optional uint32 week = 10;
      case 10: {
        if (tag == 80) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_teamid;
        break;
      }

      // optional string teamid = 20;
      case 20: {
        if (tag == 162) {
         parse_teamid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teamid().data(), this->teamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fantasybit.TeamState.teamid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.TeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.TeamState)
  return false;
#undef DO_
}

void TeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.TeamState)
  // optional .fantasybit.TeamState.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional uint32 week = 10;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week(), output);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamState.teamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->teamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.TeamState)
}

::google::protobuf::uint8* TeamState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.TeamState)
  // optional .fantasybit.TeamState.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional uint32 week = 10;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week(), target);
  }

  // optional string teamid = 20;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teamid().data(), this->teamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fantasybit.TeamState.teamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->teamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.TeamState)
  return target;
}

int TeamState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .fantasybit.TeamState.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 week = 10;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week());
    }

    // optional string teamid = 20;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TeamState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamState::MergeFrom(const TeamState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
    if (from.has_teamid()) {
      set_has_teamid();
      teamid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TeamState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamState::CopyFrom(const TeamState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamState::IsInitialized() const {

  return true;
}

void TeamState::Swap(TeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamState::InternalSwap(TeamState* other) {
  std::swap(state_, other->state_);
  std::swap(week_, other->week_);
  teamid_.Swap(&other->teamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamState_descriptor_;
  metadata.reflection = TeamState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamState

// optional .fantasybit.TeamState.State state = 1;
bool TeamState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamState::clear_state() {
  state_ = 1;
  clear_has_state();
}
 ::fantasybit::TeamState_State TeamState::state() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.state)
  return static_cast< ::fantasybit::TeamState_State >(state_);
}
 void TeamState::set_state(::fantasybit::TeamState_State value) {
  assert(::fantasybit::TeamState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.state)
}

// optional uint32 week = 10;
bool TeamState::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamState::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamState::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamState::clear_week() {
  week_ = 0u;
  clear_has_week();
}
 ::google::protobuf::uint32 TeamState::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.week)
  return week_;
}
 void TeamState::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.week)
}

// optional string teamid = 20;
bool TeamState::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeamState::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
void TeamState::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeamState::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
 const ::std::string& TeamState::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.teamid)
  return teamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamState::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.teamid)
}
 void TeamState::set_teamid(const char* value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamState.teamid)
}
 void TeamState::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamState.teamid)
}
 ::std::string* TeamState::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamState.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeamState::release_teamid() {
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeamState::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamState.teamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaData_Type_descriptor_;
}
bool DeltaData_Type_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DeltaData_Type DeltaData::SNAPSHOT;
const DeltaData_Type DeltaData::HEARTBEAT;
const DeltaData_Type DeltaData::Type_MIN;
const DeltaData_Type DeltaData::Type_MAX;
const int DeltaData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DeltaData::kTypeFieldNumber;
const int DeltaData::kMyfantasynameFieldNumber;
const int DeltaData::kGlobalstateFieldNumber;
const int DeltaData::kTeamstatesFieldNumber;
const int DeltaData::kDatasFieldNumber;
const int DeltaData::kPlayersFieldNumber;
#endif  // !_MSC_VER

DeltaData::DeltaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.DeltaData)
}

void DeltaData::InitAsDefaultInstance() {
  globalstate_ = const_cast< ::fantasybit::GlobalState*>(&::fantasybit::GlobalState::default_instance());
}

DeltaData::DeltaData(const DeltaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.DeltaData)
}

void DeltaData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  globalstate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeltaData::~DeltaData() {
  // @@protoc_insertion_point(destructor:fantasybit.DeltaData)
  SharedDtor();
}

void DeltaData::SharedDtor() {
  if (this != default_instance_) {
    delete globalstate_;
  }
}

void DeltaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeltaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeltaData_descriptor_;
}

const DeltaData& DeltaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

DeltaData* DeltaData::default_instance_ = NULL;

DeltaData* DeltaData::New(::google::protobuf::Arena* arena) const {
  DeltaData* n = new DeltaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 5u) {
    type_ = 2;
    if (has_globalstate()) {
      if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
    }
  }
  myfantasyname_.Clear();
  teamstates_.Clear();
  datas_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeltaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.DeltaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.DeltaData.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::DeltaData_Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::DeltaData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // repeated .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (tag == 18) {
         parse_myfantasyname:
          DO_(input->IncrementRecursionDepth());
         parse_loop_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_myfantasyname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_myfantasyname;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_globalstate;
        break;
      }

      // optional .fantasybit.GlobalState globalstate = 10;
      case 10: {
        if (tag == 82) {
         parse_globalstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_globalstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_teamstates;
        break;
      }

      // repeated .fantasybit.TeamState teamstates = 20;
      case 20: {
        if (tag == 162) {
         parse_teamstates:
          DO_(input->IncrementRecursionDepth());
         parse_loop_teamstates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teamstates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_teamstates;
        if (input->ExpectTag(242)) goto parse_loop_datas;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .fantasybit.Data datas = 30;
      case 30: {
        if (tag == 242) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_datas;
        if (input->ExpectTag(322)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .fantasybit.FantasyPlayer players = 40;
      case 40: {
        if (tag == 322) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.DeltaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.DeltaData)
  return false;
#undef DO_
}

void DeltaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.DeltaData)
  // optional .fantasybit.DeltaData.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (unsigned int i = 0, n = this->myfantasyname_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(i), output);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->globalstate_, output);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (unsigned int i = 0, n = this->teamstates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->teamstates(i), output);
  }

  // repeated .fantasybit.Data datas = 30;
  for (unsigned int i = 0, n = this->datas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->datas(i), output);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->players(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.DeltaData)
}

::google::protobuf::uint8* DeltaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.DeltaData)
  // optional .fantasybit.DeltaData.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  for (unsigned int i = 0, n = this->myfantasyname_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(i), target);
  }

  // optional .fantasybit.GlobalState globalstate = 10;
  if (has_globalstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->globalstate_, target);
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  for (unsigned int i = 0, n = this->teamstates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->teamstates(i), target);
  }

  // repeated .fantasybit.Data datas = 30;
  for (unsigned int i = 0, n = this->datas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->datas(i), target);
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->players(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.DeltaData)
  return target;
}

int DeltaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .fantasybit.DeltaData.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fantasybit.GlobalState globalstate = 10;
    if (has_globalstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->globalstate_);
    }

  }
  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  total_size += 1 * this->myfantasyname_size();
  for (int i = 0; i < this->myfantasyname_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myfantasyname(i));
  }

  // repeated .fantasybit.TeamState teamstates = 20;
  total_size += 2 * this->teamstates_size();
  for (int i = 0; i < this->teamstates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamstates(i));
  }

  // repeated .fantasybit.Data datas = 30;
  total_size += 2 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .fantasybit.FantasyPlayer players = 40;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeltaData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeltaData::MergeFrom(const DeltaData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  myfantasyname_.MergeFrom(from.myfantasyname_);
  teamstates_.MergeFrom(from.teamstates_);
  datas_.MergeFrom(from.datas_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_globalstate()) {
      mutable_globalstate()->::fantasybit::GlobalState::MergeFrom(from.globalstate());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeltaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaData::CopyFrom(const DeltaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DeltaData::Swap(DeltaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaData::InternalSwap(DeltaData* other) {
  std::swap(type_, other->type_);
  myfantasyname_.UnsafeArenaSwap(&other->myfantasyname_);
  std::swap(globalstate_, other->globalstate_);
  teamstates_.UnsafeArenaSwap(&other->teamstates_);
  datas_.UnsafeArenaSwap(&other->datas_);
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata DeltaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeltaData_descriptor_;
  metadata.reflection = DeltaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaData

// optional .fantasybit.DeltaData.Type type = 1;
bool DeltaData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeltaData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DeltaData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeltaData::clear_type() {
  type_ = 2;
  clear_has_type();
}
 ::fantasybit::DeltaData_Type DeltaData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.type)
  return static_cast< ::fantasybit::DeltaData_Type >(type_);
}
 void DeltaData::set_type(::fantasybit::DeltaData_Type value) {
  assert(::fantasybit::DeltaData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DeltaData.type)
}

// repeated .fantasybit.MyFantasyName myfantasyname = 2;
int DeltaData::myfantasyname_size() const {
  return myfantasyname_.size();
}
void DeltaData::clear_myfantasyname() {
  myfantasyname_.Clear();
}
const ::fantasybit::MyFantasyName& DeltaData::myfantasyname(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Get(index);
}
::fantasybit::MyFantasyName* DeltaData::mutable_myfantasyname(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Mutable(index);
}
::fantasybit::MyFantasyName* DeltaData::add_myfantasyname() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >*
DeltaData::mutable_myfantasyname() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.myfantasyname)
  return &myfantasyname_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >&
DeltaData::myfantasyname() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_;
}

// optional .fantasybit.GlobalState globalstate = 10;
bool DeltaData::has_globalstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeltaData::set_has_globalstate() {
  _has_bits_[0] |= 0x00000004u;
}
void DeltaData::clear_has_globalstate() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeltaData::clear_globalstate() {
  if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
  clear_has_globalstate();
}
const ::fantasybit::GlobalState& DeltaData::globalstate() const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.globalstate)
  return globalstate_ != NULL ? *globalstate_ : *default_instance_->globalstate_;
}
::fantasybit::GlobalState* DeltaData::mutable_globalstate() {
  set_has_globalstate();
  if (globalstate_ == NULL) {
    globalstate_ = new ::fantasybit::GlobalState;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.globalstate)
  return globalstate_;
}
::fantasybit::GlobalState* DeltaData::release_globalstate() {
  clear_has_globalstate();
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = NULL;
  return temp;
}
void DeltaData::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  delete globalstate_;
  globalstate_ = globalstate;
  if (globalstate) {
    set_has_globalstate();
  } else {
    clear_has_globalstate();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DeltaData.globalstate)
}

// repeated .fantasybit.TeamState teamstates = 20;
int DeltaData::teamstates_size() const {
  return teamstates_.size();
}
void DeltaData::clear_teamstates() {
  teamstates_.Clear();
}
const ::fantasybit::TeamState& DeltaData::teamstates(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.teamstates)
  return teamstates_.Get(index);
}
::fantasybit::TeamState* DeltaData::mutable_teamstates(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.teamstates)
  return teamstates_.Mutable(index);
}
::fantasybit::TeamState* DeltaData::add_teamstates() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.teamstates)
  return teamstates_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >*
DeltaData::mutable_teamstates() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.teamstates)
  return &teamstates_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >&
DeltaData::teamstates() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.teamstates)
  return teamstates_;
}

// repeated .fantasybit.Data datas = 30;
int DeltaData::datas_size() const {
  return datas_.size();
}
void DeltaData::clear_datas() {
  datas_.Clear();
}
const ::fantasybit::Data& DeltaData::datas(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.datas)
  return datas_.Get(index);
}
::fantasybit::Data* DeltaData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.datas)
  return datas_.Mutable(index);
}
::fantasybit::Data* DeltaData::add_datas() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.datas)
  return datas_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DeltaData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.datas)
  return &datas_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DeltaData::datas() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.datas)
  return datas_;
}

// repeated .fantasybit.FantasyPlayer players = 40;
int DeltaData::players_size() const {
  return players_.size();
}
void DeltaData::clear_players() {
  players_.Clear();
}
const ::fantasybit::FantasyPlayer& DeltaData::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.players)
  return players_.Get(index);
}
::fantasybit::FantasyPlayer* DeltaData::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.players)
  return players_.Mutable(index);
}
::fantasybit::FantasyPlayer* DeltaData::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >*
DeltaData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >&
DeltaData::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
