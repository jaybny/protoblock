// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StaticData.proto

#ifndef PROTOBUF_StaticData_2eproto__INCLUDED
#define PROTOBUF_StaticData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "NameData.pb.h"
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_StaticData_2eproto();
void protobuf_AssignDesc_StaticData_2eproto();
void protobuf_ShutdownFile_StaticData_2eproto();

class Dstats;
class GameInfo;
class GameResult;
class Kstats;
class Ostats;
class PlayerBase;
class PlayerResult;
class Stats;
class WeeklySchedule;

// ===================================================================

class PlayerBase : public ::google::protobuf::Message {
 public:
  PlayerBase();
  virtual ~PlayerBase();

  PlayerBase(const PlayerBase& from);

  inline PlayerBase& operator=(const PlayerBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBase& default_instance();

  void Swap(PlayerBase* other);

  // implements Message ----------------------------------------------

  inline PlayerBase* New() const { return New(NULL); }

  PlayerBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBase& from);
  void MergeFrom(const PlayerBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string first = 30;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 30;
  const ::std::string& first() const;
  void set_first(const ::std::string& value);
  void set_first(const char* value);
  void set_first(const char* value, size_t size);
  ::std::string* mutable_first();
  ::std::string* release_first();
  void set_allocated_first(::std::string* first);

  // optional string last = 40;
  bool has_last() const;
  void clear_last();
  static const int kLastFieldNumber = 40;
  const ::std::string& last() const;
  void set_last(const ::std::string& value);
  void set_last(const char* value);
  void set_last(const char* value, size_t size);
  ::std::string* mutable_last();
  ::std::string* release_last();
  void set_allocated_last(::std::string* last);

  // optional string position = 50;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 50;
  const ::std::string& position() const;
  void set_position(const ::std::string& value);
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  ::std::string* mutable_position();
  ::std::string* release_position();
  void set_allocated_position(::std::string* position);

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerBase)
 private:
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr first_;
  ::google::protobuf::internal::ArenaStringPtr last_;
  ::google::protobuf::internal::ArenaStringPtr position_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static PlayerBase* default_instance_;
};
// -------------------------------------------------------------------

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  void Swap(GameInfo* other);

  // implements Message ----------------------------------------------

  inline GameInfo* New() const { return New(NULL); }

  GameInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 10;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 10;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string home = 20;
  bool has_home() const;
  void clear_home();
  static const int kHomeFieldNumber = 20;
  const ::std::string& home() const;
  void set_home(const ::std::string& value);
  void set_home(const char* value);
  void set_home(const char* value, size_t size);
  ::std::string* mutable_home();
  ::std::string* release_home();
  void set_allocated_home(::std::string* home);

  // optional string away = 30;
  bool has_away() const;
  void clear_away();
  static const int kAwayFieldNumber = 30;
  const ::std::string& away() const;
  void set_away(const ::std::string& value);
  void set_away(const char* value);
  void set_away(const char* value, size_t size);
  ::std::string* mutable_away();
  ::std::string* release_away();
  void set_allocated_away(::std::string* away);

  // optional uint32 time = 40;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 40;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.GameInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_home();
  inline void clear_has_home();
  inline void set_has_away();
  inline void clear_has_away();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr home_;
  ::google::protobuf::internal::ArenaStringPtr away_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class WeeklySchedule : public ::google::protobuf::Message {
 public:
  WeeklySchedule();
  virtual ~WeeklySchedule();

  WeeklySchedule(const WeeklySchedule& from);

  inline WeeklySchedule& operator=(const WeeklySchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeeklySchedule& default_instance();

  void Swap(WeeklySchedule* other);

  // implements Message ----------------------------------------------

  inline WeeklySchedule* New() const { return New(NULL); }

  WeeklySchedule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeeklySchedule& from);
  void MergeFrom(const WeeklySchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WeeklySchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fantasybit.GameInfo games = 10;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 10;
  const ::fantasybit::GameInfo& games(int index) const;
  ::fantasybit::GameInfo* mutable_games(int index);
  ::fantasybit::GameInfo* add_games();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo >*
      mutable_games();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo >&
      games() const;

  // repeated string byes = 20;
  int byes_size() const;
  void clear_byes();
  static const int kByesFieldNumber = 20;
  const ::std::string& byes(int index) const;
  ::std::string* mutable_byes(int index);
  void set_byes(int index, const ::std::string& value);
  void set_byes(int index, const char* value);
  void set_byes(int index, const char* value, size_t size);
  ::std::string* add_byes();
  void add_byes(const ::std::string& value);
  void add_byes(const char* value);
  void add_byes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& byes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_byes();

  // @@protoc_insertion_point(class_scope:fantasybit.WeeklySchedule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo > games_;
  ::google::protobuf::RepeatedPtrField< ::std::string> byes_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static WeeklySchedule* default_instance_;
};
// -------------------------------------------------------------------

class Kstats : public ::google::protobuf::Message {
 public:
  Kstats();
  virtual ~Kstats();

  Kstats(const Kstats& from);

  inline Kstats& operator=(const Kstats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Kstats& default_instance();

  void Swap(Kstats* other);

  // implements Message ----------------------------------------------

  inline Kstats* New() const { return New(NULL); }

  Kstats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Kstats& from);
  void MergeFrom(const Kstats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Kstats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pa = 10;
  bool has_pa() const;
  void clear_pa();
  static const int kPaFieldNumber = 10;
  ::google::protobuf::int32 pa() const;
  void set_pa(::google::protobuf::int32 value);

  // repeated int32 fg = 20;
  int fg_size() const;
  void clear_fg();
  static const int kFgFieldNumber = 20;
  ::google::protobuf::int32 fg(int index) const;
  void set_fg(int index, ::google::protobuf::int32 value);
  void add_fg(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fg() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fg();

  // @@protoc_insertion_point(class_scope:fantasybit.Kstats)
 private:
  inline void set_has_pa();
  inline void clear_has_pa();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fg_;
  ::google::protobuf::int32 pa_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static Kstats* default_instance_;
};
// -------------------------------------------------------------------

class Dstats : public ::google::protobuf::Message {
 public:
  Dstats();
  virtual ~Dstats();

  Dstats(const Dstats& from);

  inline Dstats& operator=(const Dstats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dstats& default_instance();

  void Swap(Dstats* other);

  // implements Message ----------------------------------------------

  inline Dstats* New() const { return New(NULL); }

  Dstats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dstats& from);
  void MergeFrom(const Dstats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dstats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 twopt = 100;
  bool has_twopt() const;
  void clear_twopt();
  static const int kTwoptFieldNumber = 100;
  ::google::protobuf::int32 twopt() const;
  void set_twopt(::google::protobuf::int32 value);

  // optional int32 onept = 110;
  bool has_onept() const;
  void clear_onept();
  static const int kOneptFieldNumber = 110;
  ::google::protobuf::int32 onept() const;
  void set_onept(::google::protobuf::int32 value);

  // optional int32 deftd = 120;
  bool has_deftd() const;
  void clear_deftd();
  static const int kDeftdFieldNumber = 120;
  ::google::protobuf::int32 deftd() const;
  void set_deftd(::google::protobuf::int32 value);

  // optional int32 sfty = 130;
  bool has_sfty() const;
  void clear_sfty();
  static const int kSftyFieldNumber = 130;
  ::google::protobuf::int32 sfty() const;
  void set_sfty(::google::protobuf::int32 value);

  // optional int32 turnovers = 140;
  bool has_turnovers() const;
  void clear_turnovers();
  static const int kTurnoversFieldNumber = 140;
  ::google::protobuf::int32 turnovers() const;
  void set_turnovers(::google::protobuf::int32 value);

  // optional int32 sacks = 150;
  bool has_sacks() const;
  void clear_sacks();
  static const int kSacksFieldNumber = 150;
  ::google::protobuf::int32 sacks() const;
  void set_sacks(::google::protobuf::int32 value);

  // optional int32 ptsa = 160;
  bool has_ptsa() const;
  void clear_ptsa();
  static const int kPtsaFieldNumber = 160;
  ::google::protobuf::int32 ptsa() const;
  void set_ptsa(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.Dstats)
 private:
  inline void set_has_twopt();
  inline void clear_has_twopt();
  inline void set_has_onept();
  inline void clear_has_onept();
  inline void set_has_deftd();
  inline void clear_has_deftd();
  inline void set_has_sfty();
  inline void clear_has_sfty();
  inline void set_has_turnovers();
  inline void clear_has_turnovers();
  inline void set_has_sacks();
  inline void clear_has_sacks();
  inline void set_has_ptsa();
  inline void clear_has_ptsa();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 twopt_;
  ::google::protobuf::int32 onept_;
  ::google::protobuf::int32 deftd_;
  ::google::protobuf::int32 sfty_;
  ::google::protobuf::int32 turnovers_;
  ::google::protobuf::int32 sacks_;
  ::google::protobuf::int32 ptsa_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static Dstats* default_instance_;
};
// -------------------------------------------------------------------

class Ostats : public ::google::protobuf::Message {
 public:
  Ostats();
  virtual ~Ostats();

  Ostats(const Ostats& from);

  inline Ostats& operator=(const Ostats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ostats& default_instance();

  void Swap(Ostats* other);

  // implements Message ----------------------------------------------

  inline Ostats* New() const { return New(NULL); }

  Ostats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ostats& from);
  void MergeFrom(const Ostats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ostats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 passyds = 10;
  bool has_passyds() const;
  void clear_passyds();
  static const int kPassydsFieldNumber = 10;
  ::google::protobuf::int32 passyds() const;
  void set_passyds(::google::protobuf::int32 value);

  // optional int32 passtd = 20;
  bool has_passtd() const;
  void clear_passtd();
  static const int kPasstdFieldNumber = 20;
  ::google::protobuf::int32 passtd() const;
  void set_passtd(::google::protobuf::int32 value);

  // optional int32 rushyds = 30;
  bool has_rushyds() const;
  void clear_rushyds();
  static const int kRushydsFieldNumber = 30;
  ::google::protobuf::int32 rushyds() const;
  void set_rushyds(::google::protobuf::int32 value);

  // optional int32 rushtd = 40;
  bool has_rushtd() const;
  void clear_rushtd();
  static const int kRushtdFieldNumber = 40;
  ::google::protobuf::int32 rushtd() const;
  void set_rushtd(::google::protobuf::int32 value);

  // optional int32 recyds = 50;
  bool has_recyds() const;
  void clear_recyds();
  static const int kRecydsFieldNumber = 50;
  ::google::protobuf::int32 recyds() const;
  void set_recyds(::google::protobuf::int32 value);

  // optional int32 rectd = 60;
  bool has_rectd() const;
  void clear_rectd();
  static const int kRectdFieldNumber = 60;
  ::google::protobuf::int32 rectd() const;
  void set_rectd(::google::protobuf::int32 value);

  // optional int32 rec = 70;
  bool has_rec() const;
  void clear_rec();
  static const int kRecFieldNumber = 70;
  ::google::protobuf::int32 rec() const;
  void set_rec(::google::protobuf::int32 value);

  // optional int32 pint = 80;
  bool has_pint() const;
  void clear_pint();
  static const int kPintFieldNumber = 80;
  ::google::protobuf::int32 pint() const;
  void set_pint(::google::protobuf::int32 value);

  // optional int32 fumble = 90;
  bool has_fumble() const;
  void clear_fumble();
  static const int kFumbleFieldNumber = 90;
  ::google::protobuf::int32 fumble() const;
  void set_fumble(::google::protobuf::int32 value);

  // optional int32 twopt = 100;
  bool has_twopt() const;
  void clear_twopt();
  static const int kTwoptFieldNumber = 100;
  ::google::protobuf::int32 twopt() const;
  void set_twopt(::google::protobuf::int32 value);

  // optional int32 onept = 110;
  bool has_onept() const;
  void clear_onept();
  static const int kOneptFieldNumber = 110;
  ::google::protobuf::int32 onept() const;
  void set_onept(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.Ostats)
 private:
  inline void set_has_passyds();
  inline void clear_has_passyds();
  inline void set_has_passtd();
  inline void clear_has_passtd();
  inline void set_has_rushyds();
  inline void clear_has_rushyds();
  inline void set_has_rushtd();
  inline void clear_has_rushtd();
  inline void set_has_recyds();
  inline void clear_has_recyds();
  inline void set_has_rectd();
  inline void clear_has_rectd();
  inline void set_has_rec();
  inline void clear_has_rec();
  inline void set_has_pint();
  inline void clear_has_pint();
  inline void set_has_fumble();
  inline void clear_has_fumble();
  inline void set_has_twopt();
  inline void clear_has_twopt();
  inline void set_has_onept();
  inline void clear_has_onept();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 passyds_;
  ::google::protobuf::int32 passtd_;
  ::google::protobuf::int32 rushyds_;
  ::google::protobuf::int32 rushtd_;
  ::google::protobuf::int32 recyds_;
  ::google::protobuf::int32 rectd_;
  ::google::protobuf::int32 rec_;
  ::google::protobuf::int32 pint_;
  ::google::protobuf::int32 fumble_;
  ::google::protobuf::int32 twopt_;
  ::google::protobuf::int32 onept_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static Ostats* default_instance_;
};
// -------------------------------------------------------------------

class Stats : public ::google::protobuf::Message {
 public:
  Stats();
  virtual ~Stats();

  Stats(const Stats& from);

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stats& default_instance();

  void Swap(Stats* other);

  // implements Message ----------------------------------------------

  inline Stats* New() const { return New(NULL); }

  Stats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.Ostats ostats = 10;
  bool has_ostats() const;
  void clear_ostats();
  static const int kOstatsFieldNumber = 10;
  const ::fantasybit::Ostats& ostats() const;
  ::fantasybit::Ostats* mutable_ostats();
  ::fantasybit::Ostats* release_ostats();
  void set_allocated_ostats(::fantasybit::Ostats* ostats);

  // optional .fantasybit.Dstats dstats = 20;
  bool has_dstats() const;
  void clear_dstats();
  static const int kDstatsFieldNumber = 20;
  const ::fantasybit::Dstats& dstats() const;
  ::fantasybit::Dstats* mutable_dstats();
  ::fantasybit::Dstats* release_dstats();
  void set_allocated_dstats(::fantasybit::Dstats* dstats);

  // optional .fantasybit.Kstats kstats = 30;
  bool has_kstats() const;
  void clear_kstats();
  static const int kKstatsFieldNumber = 30;
  const ::fantasybit::Kstats& kstats() const;
  ::fantasybit::Kstats* mutable_kstats();
  ::fantasybit::Kstats* release_kstats();
  void set_allocated_kstats(::fantasybit::Kstats* kstats);

  // @@protoc_insertion_point(class_scope:fantasybit.Stats)
 private:
  inline void set_has_ostats();
  inline void clear_has_ostats();
  inline void set_has_dstats();
  inline void clear_has_dstats();
  inline void set_has_kstats();
  inline void clear_has_kstats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::Ostats* ostats_;
  ::fantasybit::Dstats* dstats_;
  ::fantasybit::Kstats* kstats_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static Stats* default_instance_;
};
// -------------------------------------------------------------------

class PlayerResult : public ::google::protobuf::Message {
 public:
  PlayerResult();
  virtual ~PlayerResult();

  PlayerResult(const PlayerResult& from);

  inline PlayerResult& operator=(const PlayerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerResult& default_instance();

  void Swap(PlayerResult* other);

  // implements Message ----------------------------------------------

  inline PlayerResult* New() const { return New(NULL); }

  PlayerResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerResult& from);
  void MergeFrom(const PlayerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 20;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 20;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional float result = 40;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 40;
  float result() const;
  void set_result(float value);

  // optional .fantasybit.Stats stats = 50;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 50;
  const ::fantasybit::Stats& stats() const;
  ::fantasybit::Stats* mutable_stats();
  ::fantasybit::Stats* release_stats();
  void set_allocated_stats(::fantasybit::Stats* stats);

  // repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
  int fantaybitaward_size() const;
  void clear_fantaybitaward();
  static const int kFantaybitawardFieldNumber = 60;
  const ::fantasybit::FantasyBitAward& fantaybitaward(int index) const;
  ::fantasybit::FantasyBitAward* mutable_fantaybitaward(int index);
  ::fantasybit::FantasyBitAward* add_fantaybitaward();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward >*
      mutable_fantaybitaward();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward >&
      fantaybitaward() const;

  // @@protoc_insertion_point(class_scope:fantasybit.PlayerResult)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::fantasybit::Stats* stats_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward > fantaybitaward_;
  float result_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static PlayerResult* default_instance_;
};
// -------------------------------------------------------------------

class GameResult : public ::google::protobuf::Message {
 public:
  GameResult();
  virtual ~GameResult();

  GameResult(const GameResult& from);

  inline GameResult& operator=(const GameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResult& default_instance();

  void Swap(GameResult* other);

  // implements Message ----------------------------------------------

  inline GameResult* New() const { return New(NULL); }

  GameResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameResult& from);
  void MergeFrom(const GameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 1;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 1;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // repeated .fantasybit.PlayerResult home_result = 10;
  int home_result_size() const;
  void clear_home_result();
  static const int kHomeResultFieldNumber = 10;
  const ::fantasybit::PlayerResult& home_result(int index) const;
  ::fantasybit::PlayerResult* mutable_home_result(int index);
  ::fantasybit::PlayerResult* add_home_result();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >*
      mutable_home_result();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >&
      home_result() const;

  // repeated .fantasybit.PlayerResult away_result = 20;
  int away_result_size() const;
  void clear_away_result();
  static const int kAwayResultFieldNumber = 20;
  const ::fantasybit::PlayerResult& away_result(int index) const;
  ::fantasybit::PlayerResult* mutable_away_result(int index);
  ::fantasybit::PlayerResult* add_away_result();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >*
      mutable_away_result();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >&
      away_result() const;

  // optional uint32 kickofftime = 30;
  bool has_kickofftime() const;
  void clear_kickofftime();
  static const int kKickofftimeFieldNumber = 30;
  ::google::protobuf::uint32 kickofftime() const;
  void set_kickofftime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.GameResult)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_kickofftime();
  inline void clear_has_kickofftime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult > home_result_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult > away_result_;
  ::google::protobuf::uint32 kickofftime_;
  friend void  protobuf_AddDesc_StaticData_2eproto();
  friend void protobuf_AssignDesc_StaticData_2eproto();
  friend void protobuf_ShutdownFile_StaticData_2eproto();

  void InitAsDefaultInstance();
  static GameResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerBase

// optional string first = 30;
inline bool PlayerBase::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBase::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBase::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBase::clear_first() {
  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first();
}
inline const ::std::string& PlayerBase::first() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.first)
  return first_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBase::set_first(const ::std::string& value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.first)
}
inline void PlayerBase::set_first(const char* value) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.first)
}
inline void PlayerBase::set_first(const char* value, size_t size) {
  set_has_first();
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.first)
}
inline ::std::string* PlayerBase::mutable_first() {
  set_has_first();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.first)
  return first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBase::release_first() {
  clear_has_first();
  return first_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBase::set_allocated_first(::std::string* first) {
  if (first != NULL) {
    set_has_first();
  } else {
    clear_has_first();
  }
  first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.first)
}

// optional string last = 40;
inline bool PlayerBase::has_last() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBase::set_has_last() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBase::clear_has_last() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBase::clear_last() {
  last_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last();
}
inline const ::std::string& PlayerBase::last() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.last)
  return last_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBase::set_last(const ::std::string& value) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.last)
}
inline void PlayerBase::set_last(const char* value) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.last)
}
inline void PlayerBase::set_last(const char* value, size_t size) {
  set_has_last();
  last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.last)
}
inline ::std::string* PlayerBase::mutable_last() {
  set_has_last();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.last)
  return last_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBase::release_last() {
  clear_has_last();
  return last_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBase::set_allocated_last(::std::string* last) {
  if (last != NULL) {
    set_has_last();
  } else {
    clear_has_last();
  }
  last_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.last)
}

// optional string position = 50;
inline bool PlayerBase::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerBase::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerBase::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerBase::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_position();
}
inline const ::std::string& PlayerBase::position() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerBase.position)
  return position_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBase::set_position(const ::std::string& value) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerBase.position)
}
inline void PlayerBase::set_position(const char* value) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerBase.position)
}
inline void PlayerBase::set_position(const char* value, size_t size) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerBase.position)
}
inline ::std::string* PlayerBase::mutable_position() {
  set_has_position();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerBase.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBase::release_position() {
  clear_has_position();
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBase::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    set_has_position();
  } else {
    clear_has_position();
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerBase.position)
}

// -------------------------------------------------------------------

// GameInfo

// optional string id = 10;
inline bool GameInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& GameInfo::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.id)
}
inline void GameInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.id)
}
inline void GameInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.id)
}
inline ::std::string* GameInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInfo::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.id)
}

// optional string home = 20;
inline bool GameInfo::has_home() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfo::set_has_home() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfo::clear_has_home() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfo::clear_home() {
  home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_home();
}
inline const ::std::string& GameInfo::home() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.home)
  return home_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_home(const ::std::string& value) {
  set_has_home();
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.home)
}
inline void GameInfo::set_home(const char* value) {
  set_has_home();
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.home)
}
inline void GameInfo::set_home(const char* value, size_t size) {
  set_has_home();
  home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.home)
}
inline ::std::string* GameInfo::mutable_home() {
  set_has_home();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.home)
  return home_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInfo::release_home() {
  clear_has_home();
  return home_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_allocated_home(::std::string* home) {
  if (home != NULL) {
    set_has_home();
  } else {
    clear_has_home();
  }
  home_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), home);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.home)
}

// optional string away = 30;
inline bool GameInfo::has_away() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInfo::set_has_away() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInfo::clear_has_away() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInfo::clear_away() {
  away_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_away();
}
inline const ::std::string& GameInfo::away() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.away)
  return away_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_away(const ::std::string& value) {
  set_has_away();
  away_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.away)
}
inline void GameInfo::set_away(const char* value) {
  set_has_away();
  away_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameInfo.away)
}
inline void GameInfo::set_away(const char* value, size_t size) {
  set_has_away();
  away_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameInfo.away)
}
inline ::std::string* GameInfo::mutable_away() {
  set_has_away();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameInfo.away)
  return away_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInfo::release_away() {
  clear_has_away();
  return away_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInfo::set_allocated_away(::std::string* away) {
  if (away != NULL) {
    set_has_away();
  } else {
    clear_has_away();
  }
  away_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), away);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameInfo.away)
}

// optional uint32 time = 40;
inline bool GameInfo::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInfo::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 GameInfo::time() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameInfo.time)
  return time_;
}
inline void GameInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameInfo.time)
}

// -------------------------------------------------------------------

// WeeklySchedule

// repeated .fantasybit.GameInfo games = 10;
inline int WeeklySchedule::games_size() const {
  return games_.size();
}
inline void WeeklySchedule::clear_games() {
  games_.Clear();
}
inline const ::fantasybit::GameInfo& WeeklySchedule::games(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.WeeklySchedule.games)
  return games_.Get(index);
}
inline ::fantasybit::GameInfo* WeeklySchedule::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeeklySchedule.games)
  return games_.Mutable(index);
}
inline ::fantasybit::GameInfo* WeeklySchedule::add_games() {
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.games)
  return games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo >*
WeeklySchedule::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.WeeklySchedule.games)
  return &games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameInfo >&
WeeklySchedule::games() const {
  // @@protoc_insertion_point(field_list:fantasybit.WeeklySchedule.games)
  return games_;
}

// repeated string byes = 20;
inline int WeeklySchedule::byes_size() const {
  return byes_.size();
}
inline void WeeklySchedule::clear_byes() {
  byes_.Clear();
}
inline const ::std::string& WeeklySchedule::byes(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.WeeklySchedule.byes)
  return byes_.Get(index);
}
inline ::std::string* WeeklySchedule::mutable_byes(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.WeeklySchedule.byes)
  return byes_.Mutable(index);
}
inline void WeeklySchedule::set_byes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.WeeklySchedule.byes)
  byes_.Mutable(index)->assign(value);
}
inline void WeeklySchedule::set_byes(int index, const char* value) {
  byes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::set_byes(int index, const char* value, size_t size) {
  byes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.WeeklySchedule.byes)
}
inline ::std::string* WeeklySchedule::add_byes() {
  return byes_.Add();
}
inline void WeeklySchedule::add_byes(const ::std::string& value) {
  byes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::add_byes(const char* value) {
  byes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.WeeklySchedule.byes)
}
inline void WeeklySchedule::add_byes(const char* value, size_t size) {
  byes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.WeeklySchedule.byes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WeeklySchedule::byes() const {
  // @@protoc_insertion_point(field_list:fantasybit.WeeklySchedule.byes)
  return byes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WeeklySchedule::mutable_byes() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.WeeklySchedule.byes)
  return &byes_;
}

// -------------------------------------------------------------------

// Kstats

// optional int32 pa = 10;
inline bool Kstats::has_pa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Kstats::set_has_pa() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Kstats::clear_has_pa() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Kstats::clear_pa() {
  pa_ = 0;
  clear_has_pa();
}
inline ::google::protobuf::int32 Kstats::pa() const {
  // @@protoc_insertion_point(field_get:fantasybit.Kstats.pa)
  return pa_;
}
inline void Kstats::set_pa(::google::protobuf::int32 value) {
  set_has_pa();
  pa_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Kstats.pa)
}

// repeated int32 fg = 20;
inline int Kstats::fg_size() const {
  return fg_.size();
}
inline void Kstats::clear_fg() {
  fg_.Clear();
}
inline ::google::protobuf::int32 Kstats::fg(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.Kstats.fg)
  return fg_.Get(index);
}
inline void Kstats::set_fg(int index, ::google::protobuf::int32 value) {
  fg_.Set(index, value);
  // @@protoc_insertion_point(field_set:fantasybit.Kstats.fg)
}
inline void Kstats::add_fg(::google::protobuf::int32 value) {
  fg_.Add(value);
  // @@protoc_insertion_point(field_add:fantasybit.Kstats.fg)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Kstats::fg() const {
  // @@protoc_insertion_point(field_list:fantasybit.Kstats.fg)
  return fg_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Kstats::mutable_fg() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.Kstats.fg)
  return &fg_;
}

// -------------------------------------------------------------------

// Dstats

// optional int32 twopt = 100;
inline bool Dstats::has_twopt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dstats::set_has_twopt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dstats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dstats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
inline ::google::protobuf::int32 Dstats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.twopt)
  return twopt_;
}
inline void Dstats::set_twopt(::google::protobuf::int32 value) {
  set_has_twopt();
  twopt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.twopt)
}

// optional int32 onept = 110;
inline bool Dstats::has_onept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dstats::set_has_onept() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dstats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dstats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
inline ::google::protobuf::int32 Dstats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.onept)
  return onept_;
}
inline void Dstats::set_onept(::google::protobuf::int32 value) {
  set_has_onept();
  onept_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.onept)
}

// optional int32 deftd = 120;
inline bool Dstats::has_deftd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dstats::set_has_deftd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dstats::clear_has_deftd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dstats::clear_deftd() {
  deftd_ = 0;
  clear_has_deftd();
}
inline ::google::protobuf::int32 Dstats::deftd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.deftd)
  return deftd_;
}
inline void Dstats::set_deftd(::google::protobuf::int32 value) {
  set_has_deftd();
  deftd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.deftd)
}

// optional int32 sfty = 130;
inline bool Dstats::has_sfty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dstats::set_has_sfty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dstats::clear_has_sfty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dstats::clear_sfty() {
  sfty_ = 0;
  clear_has_sfty();
}
inline ::google::protobuf::int32 Dstats::sfty() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.sfty)
  return sfty_;
}
inline void Dstats::set_sfty(::google::protobuf::int32 value) {
  set_has_sfty();
  sfty_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.sfty)
}

// optional int32 turnovers = 140;
inline bool Dstats::has_turnovers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dstats::set_has_turnovers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dstats::clear_has_turnovers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dstats::clear_turnovers() {
  turnovers_ = 0;
  clear_has_turnovers();
}
inline ::google::protobuf::int32 Dstats::turnovers() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.turnovers)
  return turnovers_;
}
inline void Dstats::set_turnovers(::google::protobuf::int32 value) {
  set_has_turnovers();
  turnovers_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.turnovers)
}

// optional int32 sacks = 150;
inline bool Dstats::has_sacks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dstats::set_has_sacks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dstats::clear_has_sacks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dstats::clear_sacks() {
  sacks_ = 0;
  clear_has_sacks();
}
inline ::google::protobuf::int32 Dstats::sacks() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.sacks)
  return sacks_;
}
inline void Dstats::set_sacks(::google::protobuf::int32 value) {
  set_has_sacks();
  sacks_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.sacks)
}

// optional int32 ptsa = 160;
inline bool Dstats::has_ptsa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dstats::set_has_ptsa() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dstats::clear_has_ptsa() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dstats::clear_ptsa() {
  ptsa_ = 0;
  clear_has_ptsa();
}
inline ::google::protobuf::int32 Dstats::ptsa() const {
  // @@protoc_insertion_point(field_get:fantasybit.Dstats.ptsa)
  return ptsa_;
}
inline void Dstats::set_ptsa(::google::protobuf::int32 value) {
  set_has_ptsa();
  ptsa_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Dstats.ptsa)
}

// -------------------------------------------------------------------

// Ostats

// optional int32 passyds = 10;
inline bool Ostats::has_passyds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ostats::set_has_passyds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ostats::clear_has_passyds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ostats::clear_passyds() {
  passyds_ = 0;
  clear_has_passyds();
}
inline ::google::protobuf::int32 Ostats::passyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.passyds)
  return passyds_;
}
inline void Ostats::set_passyds(::google::protobuf::int32 value) {
  set_has_passyds();
  passyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.passyds)
}

// optional int32 passtd = 20;
inline bool Ostats::has_passtd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ostats::set_has_passtd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ostats::clear_has_passtd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ostats::clear_passtd() {
  passtd_ = 0;
  clear_has_passtd();
}
inline ::google::protobuf::int32 Ostats::passtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.passtd)
  return passtd_;
}
inline void Ostats::set_passtd(::google::protobuf::int32 value) {
  set_has_passtd();
  passtd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.passtd)
}

// optional int32 rushyds = 30;
inline bool Ostats::has_rushyds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ostats::set_has_rushyds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ostats::clear_has_rushyds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ostats::clear_rushyds() {
  rushyds_ = 0;
  clear_has_rushyds();
}
inline ::google::protobuf::int32 Ostats::rushyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rushyds)
  return rushyds_;
}
inline void Ostats::set_rushyds(::google::protobuf::int32 value) {
  set_has_rushyds();
  rushyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rushyds)
}

// optional int32 rushtd = 40;
inline bool Ostats::has_rushtd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ostats::set_has_rushtd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ostats::clear_has_rushtd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ostats::clear_rushtd() {
  rushtd_ = 0;
  clear_has_rushtd();
}
inline ::google::protobuf::int32 Ostats::rushtd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rushtd)
  return rushtd_;
}
inline void Ostats::set_rushtd(::google::protobuf::int32 value) {
  set_has_rushtd();
  rushtd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rushtd)
}

// optional int32 recyds = 50;
inline bool Ostats::has_recyds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ostats::set_has_recyds() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ostats::clear_has_recyds() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ostats::clear_recyds() {
  recyds_ = 0;
  clear_has_recyds();
}
inline ::google::protobuf::int32 Ostats::recyds() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.recyds)
  return recyds_;
}
inline void Ostats::set_recyds(::google::protobuf::int32 value) {
  set_has_recyds();
  recyds_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.recyds)
}

// optional int32 rectd = 60;
inline bool Ostats::has_rectd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ostats::set_has_rectd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ostats::clear_has_rectd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ostats::clear_rectd() {
  rectd_ = 0;
  clear_has_rectd();
}
inline ::google::protobuf::int32 Ostats::rectd() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rectd)
  return rectd_;
}
inline void Ostats::set_rectd(::google::protobuf::int32 value) {
  set_has_rectd();
  rectd_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rectd)
}

// optional int32 rec = 70;
inline bool Ostats::has_rec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ostats::set_has_rec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ostats::clear_has_rec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ostats::clear_rec() {
  rec_ = 0;
  clear_has_rec();
}
inline ::google::protobuf::int32 Ostats::rec() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.rec)
  return rec_;
}
inline void Ostats::set_rec(::google::protobuf::int32 value) {
  set_has_rec();
  rec_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.rec)
}

// optional int32 pint = 80;
inline bool Ostats::has_pint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ostats::set_has_pint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ostats::clear_has_pint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ostats::clear_pint() {
  pint_ = 0;
  clear_has_pint();
}
inline ::google::protobuf::int32 Ostats::pint() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.pint)
  return pint_;
}
inline void Ostats::set_pint(::google::protobuf::int32 value) {
  set_has_pint();
  pint_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.pint)
}

// optional int32 fumble = 90;
inline bool Ostats::has_fumble() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ostats::set_has_fumble() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ostats::clear_has_fumble() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ostats::clear_fumble() {
  fumble_ = 0;
  clear_has_fumble();
}
inline ::google::protobuf::int32 Ostats::fumble() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.fumble)
  return fumble_;
}
inline void Ostats::set_fumble(::google::protobuf::int32 value) {
  set_has_fumble();
  fumble_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.fumble)
}

// optional int32 twopt = 100;
inline bool Ostats::has_twopt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ostats::set_has_twopt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ostats::clear_has_twopt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ostats::clear_twopt() {
  twopt_ = 0;
  clear_has_twopt();
}
inline ::google::protobuf::int32 Ostats::twopt() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.twopt)
  return twopt_;
}
inline void Ostats::set_twopt(::google::protobuf::int32 value) {
  set_has_twopt();
  twopt_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.twopt)
}

// optional int32 onept = 110;
inline bool Ostats::has_onept() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ostats::set_has_onept() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ostats::clear_has_onept() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ostats::clear_onept() {
  onept_ = 0;
  clear_has_onept();
}
inline ::google::protobuf::int32 Ostats::onept() const {
  // @@protoc_insertion_point(field_get:fantasybit.Ostats.onept)
  return onept_;
}
inline void Ostats::set_onept(::google::protobuf::int32 value) {
  set_has_onept();
  onept_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Ostats.onept)
}

// -------------------------------------------------------------------

// Stats

// optional .fantasybit.Ostats ostats = 10;
inline bool Stats::has_ostats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stats::set_has_ostats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stats::clear_has_ostats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stats::clear_ostats() {
  if (ostats_ != NULL) ostats_->::fantasybit::Ostats::Clear();
  clear_has_ostats();
}
inline const ::fantasybit::Ostats& Stats::ostats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.ostats)
  return ostats_ != NULL ? *ostats_ : *default_instance_->ostats_;
}
inline ::fantasybit::Ostats* Stats::mutable_ostats() {
  set_has_ostats();
  if (ostats_ == NULL) {
    ostats_ = new ::fantasybit::Ostats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.ostats)
  return ostats_;
}
inline ::fantasybit::Ostats* Stats::release_ostats() {
  clear_has_ostats();
  ::fantasybit::Ostats* temp = ostats_;
  ostats_ = NULL;
  return temp;
}
inline void Stats::set_allocated_ostats(::fantasybit::Ostats* ostats) {
  delete ostats_;
  ostats_ = ostats;
  if (ostats) {
    set_has_ostats();
  } else {
    clear_has_ostats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.ostats)
}

// optional .fantasybit.Dstats dstats = 20;
inline bool Stats::has_dstats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stats::set_has_dstats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stats::clear_has_dstats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stats::clear_dstats() {
  if (dstats_ != NULL) dstats_->::fantasybit::Dstats::Clear();
  clear_has_dstats();
}
inline const ::fantasybit::Dstats& Stats::dstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.dstats)
  return dstats_ != NULL ? *dstats_ : *default_instance_->dstats_;
}
inline ::fantasybit::Dstats* Stats::mutable_dstats() {
  set_has_dstats();
  if (dstats_ == NULL) {
    dstats_ = new ::fantasybit::Dstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.dstats)
  return dstats_;
}
inline ::fantasybit::Dstats* Stats::release_dstats() {
  clear_has_dstats();
  ::fantasybit::Dstats* temp = dstats_;
  dstats_ = NULL;
  return temp;
}
inline void Stats::set_allocated_dstats(::fantasybit::Dstats* dstats) {
  delete dstats_;
  dstats_ = dstats;
  if (dstats) {
    set_has_dstats();
  } else {
    clear_has_dstats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.dstats)
}

// optional .fantasybit.Kstats kstats = 30;
inline bool Stats::has_kstats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stats::set_has_kstats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stats::clear_has_kstats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stats::clear_kstats() {
  if (kstats_ != NULL) kstats_->::fantasybit::Kstats::Clear();
  clear_has_kstats();
}
inline const ::fantasybit::Kstats& Stats::kstats() const {
  // @@protoc_insertion_point(field_get:fantasybit.Stats.kstats)
  return kstats_ != NULL ? *kstats_ : *default_instance_->kstats_;
}
inline ::fantasybit::Kstats* Stats::mutable_kstats() {
  set_has_kstats();
  if (kstats_ == NULL) {
    kstats_ = new ::fantasybit::Kstats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Stats.kstats)
  return kstats_;
}
inline ::fantasybit::Kstats* Stats::release_kstats() {
  clear_has_kstats();
  ::fantasybit::Kstats* temp = kstats_;
  kstats_ = NULL;
  return temp;
}
inline void Stats::set_allocated_kstats(::fantasybit::Kstats* kstats) {
  delete kstats_;
  kstats_ = kstats;
  if (kstats) {
    set_has_kstats();
  } else {
    clear_has_kstats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Stats.kstats)
}

// -------------------------------------------------------------------

// PlayerResult

// optional string playerid = 20;
inline bool PlayerResult::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerResult::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerResult::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerResult::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerResult::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResult::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.playerid)
}
inline void PlayerResult::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerResult.playerid)
}
inline void PlayerResult::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerResult.playerid)
}
inline ::std::string* PlayerResult::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerResult::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerResult::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.playerid)
}

// optional float result = 40;
inline bool PlayerResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float PlayerResult::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.result)
  return result_;
}
inline void PlayerResult::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerResult.result)
}

// optional .fantasybit.Stats stats = 50;
inline bool PlayerResult::has_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerResult::set_has_stats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerResult::clear_has_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerResult::clear_stats() {
  if (stats_ != NULL) stats_->::fantasybit::Stats::Clear();
  clear_has_stats();
}
inline const ::fantasybit::Stats& PlayerResult::stats() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.stats)
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::fantasybit::Stats* PlayerResult::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    stats_ = new ::fantasybit::Stats;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.stats)
  return stats_;
}
inline ::fantasybit::Stats* PlayerResult::release_stats() {
  clear_has_stats();
  ::fantasybit::Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void PlayerResult::set_allocated_stats(::fantasybit::Stats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerResult.stats)
}

// repeated .fantasybit.FantasyBitAward fantaybitaward = 60;
inline int PlayerResult::fantaybitaward_size() const {
  return fantaybitaward_.size();
}
inline void PlayerResult::clear_fantaybitaward() {
  fantaybitaward_.Clear();
}
inline const ::fantasybit::FantasyBitAward& PlayerResult::fantaybitaward(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Get(index);
}
inline ::fantasybit::FantasyBitAward* PlayerResult::mutable_fantaybitaward(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Mutable(index);
}
inline ::fantasybit::FantasyBitAward* PlayerResult::add_fantaybitaward() {
  // @@protoc_insertion_point(field_add:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward >*
PlayerResult::mutable_fantaybitaward() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.PlayerResult.fantaybitaward)
  return &fantaybitaward_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyBitAward >&
PlayerResult::fantaybitaward() const {
  // @@protoc_insertion_point(field_list:fantasybit.PlayerResult.fantaybitaward)
  return fantaybitaward_;
}

// -------------------------------------------------------------------

// GameResult

// optional string gameid = 1;
inline bool GameResult::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameResult::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameResult::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameResult::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& GameResult::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.gameid)
  return gameid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResult::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.gameid)
}
inline void GameResult::set_gameid(const char* value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameResult.gameid)
}
inline void GameResult::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameResult.gameid)
}
inline ::std::string* GameResult::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameResult::release_gameid() {
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameResult::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameResult.gameid)
}

// repeated .fantasybit.PlayerResult home_result = 10;
inline int GameResult::home_result_size() const {
  return home_result_.size();
}
inline void GameResult::clear_home_result() {
  home_result_.Clear();
}
inline const ::fantasybit::PlayerResult& GameResult::home_result(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.home_result)
  return home_result_.Get(index);
}
inline ::fantasybit::PlayerResult* GameResult::mutable_home_result(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.home_result)
  return home_result_.Mutable(index);
}
inline ::fantasybit::PlayerResult* GameResult::add_home_result() {
  // @@protoc_insertion_point(field_add:fantasybit.GameResult.home_result)
  return home_result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >*
GameResult::mutable_home_result() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameResult.home_result)
  return &home_result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >&
GameResult::home_result() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameResult.home_result)
  return home_result_;
}

// repeated .fantasybit.PlayerResult away_result = 20;
inline int GameResult::away_result_size() const {
  return away_result_.size();
}
inline void GameResult::clear_away_result() {
  away_result_.Clear();
}
inline const ::fantasybit::PlayerResult& GameResult::away_result(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.away_result)
  return away_result_.Get(index);
}
inline ::fantasybit::PlayerResult* GameResult::mutable_away_result(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.GameResult.away_result)
  return away_result_.Mutable(index);
}
inline ::fantasybit::PlayerResult* GameResult::add_away_result() {
  // @@protoc_insertion_point(field_add:fantasybit.GameResult.away_result)
  return away_result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >*
GameResult::mutable_away_result() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.GameResult.away_result)
  return &away_result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::PlayerResult >&
GameResult::away_result() const {
  // @@protoc_insertion_point(field_list:fantasybit.GameResult.away_result)
  return away_result_;
}

// optional uint32 kickofftime = 30;
inline bool GameResult::has_kickofftime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameResult::set_has_kickofftime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameResult::clear_has_kickofftime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameResult::clear_kickofftime() {
  kickofftime_ = 0u;
  clear_has_kickofftime();
}
inline ::google::protobuf::uint32 GameResult::kickofftime() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameResult.kickofftime)
  return kickofftime_;
}
inline void GameResult::set_kickofftime(::google::protobuf::uint32 value) {
  set_has_kickofftime();
  kickofftime_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.GameResult.kickofftime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StaticData_2eproto__INCLUDED
