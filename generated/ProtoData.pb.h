// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef PROTOBUF_ProtoData_2eproto__INCLUDED
#define PROTOBUF_ProtoData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "StaticData.pb.h"
#include "StatusData.pb.h"
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ProtoData_2eproto();
void protobuf_AssignDesc_ProtoData_2eproto();
void protobuf_ShutdownFile_ProtoData_2eproto();

class Block;
class BlockHeader;
class Data;
class DataTransition;
class DeltaData;
class FantasyPlayer;
class FantasyPlayerPoints;
class GameData;
class InData;
class MyFantasyName;
class NameProof;
class NameTrans;
class NodeReply;
class NodeRequest;
class OutData;
class PlayerData;
class ProjectionTrans;
class ResultData;
class ScheduleData;
class Secret;
class Secret2;
class SignedBlockHeader;
class SignedTransaction;
class TeamState;
class Transaction;
class TweetProof;

enum OutData_Type {
  OutData_Type_MYFANTASYNAME = 1,
  OutData_Type_SNAPSHOT = 2,
  OutData_Type_HEARTBEAT = 3
};
bool OutData_Type_IsValid(int value);
const OutData_Type OutData_Type_Type_MIN = OutData_Type_MYFANTASYNAME;
const OutData_Type OutData_Type_Type_MAX = OutData_Type_HEARTBEAT;
const int OutData_Type_Type_ARRAYSIZE = OutData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor();
inline const ::std::string& OutData_Type_Name(OutData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutData_Type_descriptor(), value);
}
inline bool OutData_Type_Parse(
    const ::std::string& name, OutData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutData_Type>(
    OutData_Type_descriptor(), name, value);
}
enum InData_Type {
  InData_Type_MINENAME = 1,
  InData_Type_QUIT = 2,
  InData_Type_HEARTBEAT = 3,
  InData_Type_CONNECT = 4,
  InData_Type_MAKE_BLOCK = 5,
  InData_Type_NEWNAME = 6,
  InData_Type_PROJ = 7,
  InData_Type_DATA = 8
};
bool InData_Type_IsValid(int value);
const InData_Type InData_Type_Type_MIN = InData_Type_MINENAME;
const InData_Type InData_Type_Type_MAX = InData_Type_DATA;
const int InData_Type_Type_ARRAYSIZE = InData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* InData_Type_descriptor();
inline const ::std::string& InData_Type_Name(InData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    InData_Type_descriptor(), value);
}
inline bool InData_Type_Parse(
    const ::std::string& name, InData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InData_Type>(
    InData_Type_descriptor(), name, value);
}
enum NameProof_Type {
  NameProof_Type_POW = 1,
  NameProof_Type_TWEET = 2,
  NameProof_Type_ORACLE = 3
};
bool NameProof_Type_IsValid(int value);
const NameProof_Type NameProof_Type_Type_MIN = NameProof_Type_POW;
const NameProof_Type NameProof_Type_Type_MAX = NameProof_Type_ORACLE;
const int NameProof_Type_Type_ARRAYSIZE = NameProof_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor();
inline const ::std::string& NameProof_Type_Name(NameProof_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NameProof_Type_descriptor(), value);
}
inline bool NameProof_Type_Parse(
    const ::std::string& name, NameProof_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NameProof_Type>(
    NameProof_Type_descriptor(), name, value);
}
enum BlockHeader_Type {
  BlockHeader_Type_NORMAL = 1,
  BlockHeader_Type_DATA = 2
};
bool BlockHeader_Type_IsValid(int value);
const BlockHeader_Type BlockHeader_Type_Type_MIN = BlockHeader_Type_NORMAL;
const BlockHeader_Type BlockHeader_Type_Type_MAX = BlockHeader_Type_DATA;
const int BlockHeader_Type_Type_ARRAYSIZE = BlockHeader_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor();
inline const ::std::string& BlockHeader_Type_Name(BlockHeader_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockHeader_Type_descriptor(), value);
}
inline bool BlockHeader_Type_Parse(
    const ::std::string& name, BlockHeader_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockHeader_Type>(
    BlockHeader_Type_descriptor(), name, value);
}
enum NodeRequest_Type {
  NodeRequest_Type_HANDSHAKE = 1,
  NodeRequest_Type_BLOCK_REQUEST = 2,
  NodeRequest_Type_HIGHT_REQUEST = 3,
  NodeRequest_Type_NAT_TEST = 4
};
bool NodeRequest_Type_IsValid(int value);
const NodeRequest_Type NodeRequest_Type_Type_MIN = NodeRequest_Type_HANDSHAKE;
const NodeRequest_Type NodeRequest_Type_Type_MAX = NodeRequest_Type_NAT_TEST;
const int NodeRequest_Type_Type_ARRAYSIZE = NodeRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor();
inline const ::std::string& NodeRequest_Type_Name(NodeRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeRequest_Type_descriptor(), value);
}
inline bool NodeRequest_Type_Parse(
    const ::std::string& name, NodeRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeRequest_Type>(
    NodeRequest_Type_descriptor(), name, value);
}
enum Data_Type {
  Data_Type_SCHEDULE = 0,
  Data_Type_PLAYER = 1,
  Data_Type_GAME = 2,
  Data_Type_RESULT = 3
};
bool Data_Type_IsValid(int value);
const Data_Type Data_Type_Type_MIN = Data_Type_SCHEDULE;
const Data_Type Data_Type_Type_MAX = Data_Type_RESULT;
const int Data_Type_Type_ARRAYSIZE = Data_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_Type_descriptor();
inline const ::std::string& Data_Type_Name(Data_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_Type_descriptor(), value);
}
inline bool Data_Type_Parse(
    const ::std::string& name, Data_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_Type>(
    Data_Type_descriptor(), name, value);
}
enum DataTransition_Type {
  DataTransition_Type_SEASONSTART = 2,
  DataTransition_Type_SEASONEND = 3,
  DataTransition_Type_HEARTBEAT = 5,
  DataTransition_Type_GAMESTART = 6,
  DataTransition_Type_WEEKOVER = 7
};
bool DataTransition_Type_IsValid(int value);
const DataTransition_Type DataTransition_Type_Type_MIN = DataTransition_Type_SEASONSTART;
const DataTransition_Type DataTransition_Type_Type_MAX = DataTransition_Type_WEEKOVER;
const int DataTransition_Type_Type_ARRAYSIZE = DataTransition_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataTransition_Type_descriptor();
inline const ::std::string& DataTransition_Type_Name(DataTransition_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataTransition_Type_descriptor(), value);
}
inline bool DataTransition_Type_Parse(
    const ::std::string& name, DataTransition_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataTransition_Type>(
    DataTransition_Type_descriptor(), name, value);
}
enum TeamState_State {
  TeamState_State_PREGAME = 1,
  TeamState_State_INGAME = 2
};
bool TeamState_State_IsValid(int value);
const TeamState_State TeamState_State_State_MIN = TeamState_State_PREGAME;
const TeamState_State TeamState_State_State_MAX = TeamState_State_INGAME;
const int TeamState_State_State_ARRAYSIZE = TeamState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamState_State_descriptor();
inline const ::std::string& TeamState_State_Name(TeamState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamState_State_descriptor(), value);
}
inline bool TeamState_State_Parse(
    const ::std::string& name, TeamState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamState_State>(
    TeamState_State_descriptor(), name, value);
}
enum DeltaData_Type {
  DeltaData_Type_SNAPSHOT = 2,
  DeltaData_Type_HEARTBEAT = 3
};
bool DeltaData_Type_IsValid(int value);
const DeltaData_Type DeltaData_Type_Type_MIN = DeltaData_Type_SNAPSHOT;
const DeltaData_Type DeltaData_Type_Type_MAX = DeltaData_Type_HEARTBEAT;
const int DeltaData_Type_Type_ARRAYSIZE = DeltaData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeltaData_Type_descriptor();
inline const ::std::string& DeltaData_Type_Name(DeltaData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeltaData_Type_descriptor(), value);
}
inline bool DeltaData_Type_Parse(
    const ::std::string& name, DeltaData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeltaData_Type>(
    DeltaData_Type_descriptor(), name, value);
}
enum MyNameStatus {
  none = 1,
  notavil = 2,
  requested = 5,
  transaction_sent = 15,
  confirmed = 20
};
bool MyNameStatus_IsValid(int value);
const MyNameStatus MyNameStatus_MIN = none;
const MyNameStatus MyNameStatus_MAX = confirmed;
const int MyNameStatus_ARRAYSIZE = MyNameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor();
inline const ::std::string& MyNameStatus_Name(MyNameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MyNameStatus_descriptor(), value);
}
inline bool MyNameStatus_Parse(
    const ::std::string& name, MyNameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MyNameStatus>(
    MyNameStatus_descriptor(), name, value);
}
enum TransType {
  NAME = 0,
  PROJECTION = 1,
  RESULT = 2,
  DATA = 3
};
bool TransType_IsValid(int value);
const TransType TransType_MIN = NAME;
const TransType TransType_MAX = DATA;
const int TransType_ARRAYSIZE = TransType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransType_descriptor();
inline const ::std::string& TransType_Name(TransType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransType_descriptor(), value);
}
inline bool TransType_Parse(
    const ::std::string& name, TransType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransType>(
    TransType_descriptor(), name, value);
}
// ===================================================================

class MyFantasyName : public ::google::protobuf::Message {
 public:
  MyFantasyName();
  virtual ~MyFantasyName();

  MyFantasyName(const MyFantasyName& from);

  inline MyFantasyName& operator=(const MyFantasyName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyFantasyName& default_instance();

  void Swap(MyFantasyName* other);

  // implements Message ----------------------------------------------

  inline MyFantasyName* New() const { return New(NULL); }

  MyFantasyName* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyFantasyName& from);
  void MergeFrom(const MyFantasyName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyFantasyName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .fantasybit.MyNameStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::fantasybit::MyNameStatus status() const;
  void set_status(::fantasybit::MyNameStatus value);

  // @@protoc_insertion_point(class_scope:fantasybit.MyFantasyName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int status_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static MyFantasyName* default_instance_;
};
// -------------------------------------------------------------------

class FantasyPlayer : public ::google::protobuf::Message {
 public:
  FantasyPlayer();
  virtual ~FantasyPlayer();

  FantasyPlayer(const FantasyPlayer& from);

  inline FantasyPlayer& operator=(const FantasyPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyPlayer& default_instance();

  void Swap(FantasyPlayer* other);

  // implements Message ----------------------------------------------

  inline FantasyPlayer* New() const { return New(NULL); }

  FantasyPlayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyPlayer& from);
  void MergeFrom(const FantasyPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FantasyPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 10;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 10;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 bits = 20;
  bool has_bits() const;
  void clear_bits();
  static const int kBitsFieldNumber = 20;
  ::google::protobuf::uint64 bits() const;
  void set_bits(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyPlayer)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bits();
  inline void clear_has_bits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 bits_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static FantasyPlayer* default_instance_;
};
// -------------------------------------------------------------------

class Secret : public ::google::protobuf::Message {
 public:
  Secret();
  virtual ~Secret();

  Secret(const Secret& from);

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret& default_instance();

  void Swap(Secret* other);

  // implements Message ----------------------------------------------

  inline Secret* New() const { return New(NULL); }

  Secret* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Secret* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string private_key = 1;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  bool has_myfantasyname() const;
  void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  const ::fantasybit::MyFantasyName& myfantasyname() const;
  ::fantasybit::MyFantasyName* mutable_myfantasyname();
  ::fantasybit::MyFantasyName* release_myfantasyname();
  void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  // optional .fantasybit.NameTrans nametran = 10;
  bool has_nametran() const;
  void clear_nametran();
  static const int kNametranFieldNumber = 10;
  const ::fantasybit::NameTrans& nametran() const;
  ::fantasybit::NameTrans* mutable_nametran();
  ::fantasybit::NameTrans* release_nametran();
  void set_allocated_nametran(::fantasybit::NameTrans* nametran);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret)
 private:
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_myfantasyname();
  inline void clear_has_myfantasyname();
  inline void set_has_nametran();
  inline void clear_has_nametran();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::fantasybit::MyFantasyName* myfantasyname_;
  ::fantasybit::NameTrans* nametran_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Secret* default_instance_;
};
// -------------------------------------------------------------------

class Secret2 : public ::google::protobuf::Message {
 public:
  Secret2();
  virtual ~Secret2();

  Secret2(const Secret2& from);

  inline Secret2& operator=(const Secret2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret2& default_instance();

  void Swap(Secret2* other);

  // implements Message ----------------------------------------------

  inline Secret2* New() const { return New(NULL); }

  Secret2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Secret2& from);
  void MergeFrom(const Secret2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Secret2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string private_key = 1;
  bool has_private_key() const;
  void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  const ::std::string& private_key() const;
  void set_private_key(const ::std::string& value);
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  ::std::string* mutable_private_key();
  ::std::string* release_private_key();
  void set_allocated_private_key(::std::string* private_key);

  // optional string fantasy_name = 20;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 20;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional string public_key = 30;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 30;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret2)
 private:
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_fantasy_name();
  inline void clear_has_fantasy_name();
  inline void set_has_public_key();
  inline void clear_has_public_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr private_key_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Secret2* default_instance_;
};
// -------------------------------------------------------------------

class OutData : public ::google::protobuf::Message {
 public:
  OutData();
  virtual ~OutData();

  OutData(const OutData& from);

  inline OutData& operator=(const OutData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutData& default_instance();

  void Swap(OutData* other);

  // implements Message ----------------------------------------------

  inline OutData* New() const { return New(NULL); }

  OutData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutData& from);
  void MergeFrom(const OutData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OutData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OutData_Type Type;
  static const Type MYFANTASYNAME = OutData_Type_MYFANTASYNAME;
  static const Type SNAPSHOT = OutData_Type_SNAPSHOT;
  static const Type HEARTBEAT = OutData_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return OutData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    OutData_Type_Type_MIN;
  static const Type Type_MAX =
    OutData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    OutData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return OutData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return OutData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return OutData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .fantasybit.OutData.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::OutData_Type type() const;
  void set_type(::fantasybit::OutData_Type value);

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  bool has_myfantasyname() const;
  void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  const ::fantasybit::MyFantasyName& myfantasyname() const;
  ::fantasybit::MyFantasyName* mutable_myfantasyname();
  ::fantasybit::MyFantasyName* release_myfantasyname();
  void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OutData)
  // @@protoc_insertion_point(class_scope:fantasybit.OutData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_myfantasyname();
  inline void clear_has_myfantasyname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::MyFantasyName* myfantasyname_;
  int type_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static OutData* default_instance_;
};
// -------------------------------------------------------------------

class InData : public ::google::protobuf::Message {
 public:
  InData();
  virtual ~InData();

  InData(const InData& from);

  inline InData& operator=(const InData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InData& default_instance();

  void Swap(InData* other);

  // implements Message ----------------------------------------------

  inline InData* New() const { return New(NULL); }

  InData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InData& from);
  void MergeFrom(const InData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InData_Type Type;
  static const Type MINENAME = InData_Type_MINENAME;
  static const Type QUIT = InData_Type_QUIT;
  static const Type HEARTBEAT = InData_Type_HEARTBEAT;
  static const Type CONNECT = InData_Type_CONNECT;
  static const Type MAKE_BLOCK = InData_Type_MAKE_BLOCK;
  static const Type NEWNAME = InData_Type_NEWNAME;
  static const Type PROJ = InData_Type_PROJ;
  static const Type DATA = InData_Type_DATA;
  static inline bool Type_IsValid(int value) {
    return InData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    InData_Type_Type_MIN;
  static const Type Type_MAX =
    InData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    InData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return InData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return InData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return InData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .fantasybit.InData.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::InData_Type type() const;
  void set_type(::fantasybit::InData_Type value);

  // optional string data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string data2 = 3;
  bool has_data2() const;
  void clear_data2();
  static const int kData2FieldNumber = 3;
  const ::std::string& data2() const;
  void set_data2(const ::std::string& value);
  void set_data2(const char* value);
  void set_data2(const char* value, size_t size);
  ::std::string* mutable_data2();
  ::std::string* release_data2();
  void set_allocated_data2(::std::string* data2);

  // optional int32 num = 4;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 4;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional .fantasybit.DataTransition data_trans = 5;
  bool has_data_trans() const;
  void clear_data_trans();
  static const int kDataTransFieldNumber = 5;
  const ::fantasybit::DataTransition& data_trans() const;
  ::fantasybit::DataTransition* mutable_data_trans();
  ::fantasybit::DataTransition* release_data_trans();
  void set_allocated_data_trans(::fantasybit::DataTransition* data_trans);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(InData)
  // @@protoc_insertion_point(class_scope:fantasybit.InData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_data2();
  inline void clear_has_data2();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_data_trans();
  inline void clear_has_data_trans();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::internal::ArenaStringPtr data2_;
  ::fantasybit::DataTransition* data_trans_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static InData* default_instance_;
};
// -------------------------------------------------------------------

class NameProof : public ::google::protobuf::Message {
 public:
  NameProof();
  virtual ~NameProof();

  NameProof(const NameProof& from);

  inline NameProof& operator=(const NameProof& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameProof& default_instance();

  void Swap(NameProof* other);

  // implements Message ----------------------------------------------

  inline NameProof* New() const { return New(NULL); }

  NameProof* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameProof& from);
  void MergeFrom(const NameProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NameProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NameProof_Type Type;
  static const Type POW = NameProof_Type_POW;
  static const Type TWEET = NameProof_Type_TWEET;
  static const Type ORACLE = NameProof_Type_ORACLE;
  static inline bool Type_IsValid(int value) {
    return NameProof_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NameProof_Type_Type_MIN;
  static const Type Type_MAX =
    NameProof_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NameProof_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NameProof_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NameProof_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NameProof_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.NameProof.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::NameProof_Type type() const;
  void set_type(::fantasybit::NameProof_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NameProof)
  // @@protoc_insertion_point(class_scope:fantasybit.NameProof)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NameProof* default_instance_;
};
// -------------------------------------------------------------------

class TweetProof : public ::google::protobuf::Message {
 public:
  TweetProof();
  virtual ~TweetProof();

  TweetProof(const TweetProof& from);

  inline TweetProof& operator=(const TweetProof& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TweetProof& default_instance();

  void Swap(TweetProof* other);

  // implements Message ----------------------------------------------

  inline TweetProof* New() const { return New(NULL); }

  TweetProof* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TweetProof& from);
  void MergeFrom(const TweetProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TweetProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tweet = 10;
  bool has_tweet() const;
  void clear_tweet();
  static const int kTweetFieldNumber = 10;
  const ::std::string& tweet() const;
  void set_tweet(const ::std::string& value);
  void set_tweet(const char* value);
  void set_tweet(const char* value, size_t size);
  ::std::string* mutable_tweet();
  ::std::string* release_tweet();
  void set_allocated_tweet(::std::string* tweet);

  static const int kTweetProofFieldNumber = 201;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
    tweet_proof;
  // @@protoc_insertion_point(class_scope:fantasybit.TweetProof)
 private:
  inline void set_has_tweet();
  inline void clear_has_tweet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tweet_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static TweetProof* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  inline Transaction* New() const { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.TransType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::fantasybit::TransType type() const;
  void set_type(::fantasybit::TransType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Transaction)
  // @@protoc_insertion_point(class_scope:fantasybit.Transaction)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  int type_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class NameTrans : public ::google::protobuf::Message {
 public:
  NameTrans();
  virtual ~NameTrans();

  NameTrans(const NameTrans& from);

  inline NameTrans& operator=(const NameTrans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameTrans& default_instance();

  void Swap(NameTrans* other);

  // implements Message ----------------------------------------------

  inline NameTrans* New() const { return New(NULL); }

  NameTrans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameTrans& from);
  void MergeFrom(const NameTrans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NameTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fantasy_name = 10;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 10;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional bytes public_key = 20;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 20;
  const ::std::string& public_key() const;
  void set_public_key(const ::std::string& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  ::std::string* mutable_public_key();
  ::std::string* release_public_key();
  void set_allocated_public_key(::std::string* public_key);

  // optional .fantasybit.NameProof proof = 30;
  bool has_proof() const;
  void clear_proof();
  static const int kProofFieldNumber = 30;
  const ::fantasybit::NameProof& proof() const;
  ::fantasybit::NameProof* mutable_proof();
  ::fantasybit::NameProof* release_proof();
  void set_allocated_proof(::fantasybit::NameProof* proof);

  static const int kNameTransFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
    name_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.NameTrans)
 private:
  inline void set_has_fantasy_name();
  inline void clear_has_fantasy_name();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_proof();
  inline void clear_has_proof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  ::google::protobuf::internal::ArenaStringPtr public_key_;
  ::fantasybit::NameProof* proof_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NameTrans* default_instance_;
};
// -------------------------------------------------------------------

class SignedTransaction : public ::google::protobuf::Message {
 public:
  SignedTransaction();
  virtual ~SignedTransaction();

  SignedTransaction(const SignedTransaction& from);

  inline SignedTransaction& operator=(const SignedTransaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedTransaction& default_instance();

  void Swap(SignedTransaction* other);

  // implements Message ----------------------------------------------

  inline SignedTransaction* New() const { return New(NULL); }

  SignedTransaction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedTransaction& from);
  void MergeFrom(const SignedTransaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignedTransaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.Transaction trans = 10;
  bool has_trans() const;
  void clear_trans();
  static const int kTransFieldNumber = 10;
  const ::fantasybit::Transaction& trans() const;
  ::fantasybit::Transaction* mutable_trans();
  ::fantasybit::Transaction* release_trans();
  void set_allocated_trans(::fantasybit::Transaction* trans);

  // optional bytes id = 20;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 20;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes sig = 30;
  bool has_sig() const;
  void clear_sig();
  static const int kSigFieldNumber = 30;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // optional string fantasy_name = 40;
  bool has_fantasy_name() const;
  void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 40;
  const ::std::string& fantasy_name() const;
  void set_fantasy_name(const ::std::string& value);
  void set_fantasy_name(const char* value);
  void set_fantasy_name(const char* value, size_t size);
  ::std::string* mutable_fantasy_name();
  ::std::string* release_fantasy_name();
  void set_allocated_fantasy_name(::std::string* fantasy_name);

  // @@protoc_insertion_point(class_scope:fantasybit.SignedTransaction)
 private:
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_fantasy_name();
  inline void clear_has_fantasy_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::Transaction* trans_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::google::protobuf::internal::ArenaStringPtr fantasy_name_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static SignedTransaction* default_instance_;
};
// -------------------------------------------------------------------

class BlockHeader : public ::google::protobuf::Message {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  void Swap(BlockHeader* other);

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const { return New(NULL); }

  BlockHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BlockHeader_Type Type;
  static const Type NORMAL = BlockHeader_Type_NORMAL;
  static const Type DATA = BlockHeader_Type_DATA;
  static inline bool Type_IsValid(int value) {
    return BlockHeader_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BlockHeader_Type_Type_MIN;
  static const Type Type_MAX =
    BlockHeader_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BlockHeader_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BlockHeader_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BlockHeader_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BlockHeader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 num = 10;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 10;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional bytes prev_id = 20;
  bool has_prev_id() const;
  void clear_prev_id();
  static const int kPrevIdFieldNumber = 20;
  const ::std::string& prev_id() const;
  void set_prev_id(const ::std::string& value);
  void set_prev_id(const char* value);
  void set_prev_id(const void* value, size_t size);
  ::std::string* mutable_prev_id();
  ::std::string* release_prev_id();
  void set_allocated_prev_id(::std::string* prev_id);

  // optional int32 timestamp = 21;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 21;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // optional bytes generator_pk = 30;
  bool has_generator_pk() const;
  void clear_generator_pk();
  static const int kGeneratorPkFieldNumber = 30;
  const ::std::string& generator_pk() const;
  void set_generator_pk(const ::std::string& value);
  void set_generator_pk(const char* value);
  void set_generator_pk(const void* value, size_t size);
  ::std::string* mutable_generator_pk();
  ::std::string* release_generator_pk();
  void set_allocated_generator_pk(::std::string* generator_pk);

  // optional bytes generating_sig = 40;
  bool has_generating_sig() const;
  void clear_generating_sig();
  static const int kGeneratingSigFieldNumber = 40;
  const ::std::string& generating_sig() const;
  void set_generating_sig(const ::std::string& value);
  void set_generating_sig(const char* value);
  void set_generating_sig(const void* value, size_t size);
  ::std::string* mutable_generating_sig();
  ::std::string* release_generating_sig();
  void set_allocated_generating_sig(::std::string* generating_sig);

  // optional int32 basetarget = 50;
  bool has_basetarget() const;
  void clear_basetarget();
  static const int kBasetargetFieldNumber = 50;
  ::google::protobuf::int32 basetarget() const;
  void set_basetarget(::google::protobuf::int32 value);

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  bool has_blocktype() const;
  void clear_blocktype();
  static const int kBlocktypeFieldNumber = 60;
  ::fantasybit::BlockHeader_Type blocktype() const;
  void set_blocktype(::fantasybit::BlockHeader_Type value);

  // optional bytes transaction_id = 70;
  bool has_transaction_id() const;
  void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 70;
  const ::std::string& transaction_id() const;
  void set_transaction_id(const ::std::string& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const void* value, size_t size);
  ::std::string* mutable_transaction_id();
  ::std::string* release_transaction_id();
  void set_allocated_transaction_id(::std::string* transaction_id);

  // @@protoc_insertion_point(class_scope:fantasybit.BlockHeader)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_prev_id();
  inline void clear_has_prev_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_generator_pk();
  inline void clear_has_generator_pk();
  inline void set_has_generating_sig();
  inline void clear_has_generating_sig();
  inline void set_has_basetarget();
  inline void clear_has_basetarget();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::internal::ArenaStringPtr prev_id_;
  ::google::protobuf::internal::ArenaStringPtr generator_pk_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 basetarget_;
  ::google::protobuf::internal::ArenaStringPtr generating_sig_;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  int blocktype_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static BlockHeader* default_instance_;
};
// -------------------------------------------------------------------

class SignedBlockHeader : public ::google::protobuf::Message {
 public:
  SignedBlockHeader();
  virtual ~SignedBlockHeader();

  SignedBlockHeader(const SignedBlockHeader& from);

  inline SignedBlockHeader& operator=(const SignedBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedBlockHeader& default_instance();

  void Swap(SignedBlockHeader* other);

  // implements Message ----------------------------------------------

  inline SignedBlockHeader* New() const { return New(NULL); }

  SignedBlockHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedBlockHeader& from);
  void MergeFrom(const SignedBlockHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignedBlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.BlockHeader head = 10;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 10;
  const ::fantasybit::BlockHeader& head() const;
  ::fantasybit::BlockHeader* mutable_head();
  ::fantasybit::BlockHeader* release_head();
  void set_allocated_head(::fantasybit::BlockHeader* head);

  // optional string sig = 30;
  bool has_sig() const;
  void clear_sig();
  static const int kSigFieldNumber = 30;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:fantasybit.SignedBlockHeader)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::BlockHeader* head_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static SignedBlockHeader* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  inline Block* New() const { return New(NULL); }

  Block* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  bool has_signedhead() const;
  void clear_signedhead();
  static const int kSignedheadFieldNumber = 10;
  const ::fantasybit::SignedBlockHeader& signedhead() const;
  ::fantasybit::SignedBlockHeader* mutable_signedhead();
  ::fantasybit::SignedBlockHeader* release_signedhead();
  void set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead);

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  int signed_transactions_size() const;
  void clear_signed_transactions();
  static const int kSignedTransactionsFieldNumber = 20;
  const ::fantasybit::SignedTransaction& signed_transactions(int index) const;
  ::fantasybit::SignedTransaction* mutable_signed_transactions(int index);
  ::fantasybit::SignedTransaction* add_signed_transactions();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
      mutable_signed_transactions();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
      signed_transactions() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Block)
  // @@protoc_insertion_point(class_scope:fantasybit.Block)
 private:
  inline void set_has_signedhead();
  inline void clear_has_signedhead();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::SignedBlockHeader* signedhead_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction > signed_transactions_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class NodeRequest : public ::google::protobuf::Message {
 public:
  NodeRequest();
  virtual ~NodeRequest();

  NodeRequest(const NodeRequest& from);

  inline NodeRequest& operator=(const NodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeRequest& default_instance();

  void Swap(NodeRequest* other);

  // implements Message ----------------------------------------------

  inline NodeRequest* New() const { return New(NULL); }

  NodeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeRequest& from);
  void MergeFrom(const NodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NodeRequest_Type Type;
  static const Type HANDSHAKE = NodeRequest_Type_HANDSHAKE;
  static const Type BLOCK_REQUEST = NodeRequest_Type_BLOCK_REQUEST;
  static const Type HIGHT_REQUEST = NodeRequest_Type_HIGHT_REQUEST;
  static const Type NAT_TEST = NodeRequest_Type_NAT_TEST;
  static inline bool Type_IsValid(int value) {
    return NodeRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NodeRequest_Type_Type_MIN;
  static const Type Type_MAX =
    NodeRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NodeRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NodeRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NodeRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NodeRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.NodeRequest.Type type = 10;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 10;
  ::fantasybit::NodeRequest_Type type() const;
  void set_type(::fantasybit::NodeRequest_Type value);

  // optional string myip = 20;
  bool has_myip() const;
  void clear_myip();
  static const int kMyipFieldNumber = 20;
  const ::std::string& myip() const;
  void set_myip(const ::std::string& value);
  void set_myip(const char* value);
  void set_myip(const char* value, size_t size);
  ::std::string* mutable_myip();
  ::std::string* release_myip();
  void set_allocated_myip(::std::string* myip);

  // optional int32 num = 30;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 30;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional string myhost = 40;
  bool has_myhost() const;
  void clear_myhost();
  static const int kMyhostFieldNumber = 40;
  const ::std::string& myhost() const;
  void set_myhost(const ::std::string& value);
  void set_myhost(const char* value);
  void set_myhost(const char* value, size_t size);
  ::std::string* mutable_myhost();
  ::std::string* release_myhost();
  void set_allocated_myhost(::std::string* myhost);

  // @@protoc_insertion_point(class_scope:fantasybit.NodeRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_myip();
  inline void clear_has_myip();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_myhost();
  inline void clear_has_myhost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr myip_;
  int type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::internal::ArenaStringPtr myhost_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeReply : public ::google::protobuf::Message {
 public:
  NodeReply();
  virtual ~NodeReply();

  NodeReply(const NodeReply& from);

  inline NodeReply& operator=(const NodeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeReply& default_instance();

  void Swap(NodeReply* other);

  // implements Message ----------------------------------------------

  inline NodeReply* New() const { return New(NULL); }

  NodeReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeReply& from);
  void MergeFrom(const NodeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hight = 10;
  bool has_hight() const;
  void clear_hight();
  static const int kHightFieldNumber = 10;
  ::google::protobuf::int32 hight() const;
  void set_hight(::google::protobuf::int32 value);

  // repeated string ips = 20;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 20;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // @@protoc_insertion_point(class_scope:fantasybit.NodeReply)
 private:
  inline void set_has_hight();
  inline void clear_has_hight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::int32 hight_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NodeReply* default_instance_;
};
// -------------------------------------------------------------------

class FantasyPlayerPoints : public ::google::protobuf::Message {
 public:
  FantasyPlayerPoints();
  virtual ~FantasyPlayerPoints();

  FantasyPlayerPoints(const FantasyPlayerPoints& from);

  inline FantasyPlayerPoints& operator=(const FantasyPlayerPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyPlayerPoints& default_instance();

  void Swap(FantasyPlayerPoints* other);

  // implements Message ----------------------------------------------

  inline FantasyPlayerPoints* New() const { return New(NULL); }

  FantasyPlayerPoints* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyPlayerPoints& from);
  void MergeFrom(const FantasyPlayerPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FantasyPlayerPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional int32 points = 40;
  bool has_points() const;
  void clear_points();
  static const int kPointsFieldNumber = 40;
  ::google::protobuf::int32 points() const;
  void set_points(::google::protobuf::int32 value);

  // optional float result = 50;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 50;
  float result() const;
  void set_result(float value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyPlayerPoints)
 private:
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 points_;
  float result_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static FantasyPlayerPoints* default_instance_;
};
// -------------------------------------------------------------------

class ProjectionTrans : public ::google::protobuf::Message {
 public:
  ProjectionTrans();
  virtual ~ProjectionTrans();

  ProjectionTrans(const ProjectionTrans& from);

  inline ProjectionTrans& operator=(const ProjectionTrans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectionTrans& default_instance();

  void Swap(ProjectionTrans* other);

  // implements Message ----------------------------------------------

  inline ProjectionTrans* New() const { return New(NULL); }

  ProjectionTrans* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjectionTrans& from);
  void MergeFrom(const ProjectionTrans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProjectionTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional string playerid = 30;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional int32 points = 40;
  bool has_points() const;
  void clear_points();
  static const int kPointsFieldNumber = 40;
  ::google::protobuf::int32 points() const;
  void set_points(::google::protobuf::int32 value);

  static const int kProjTransFieldNumber = 201;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
    proj_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.ProjectionTrans)
 private:
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_points();
  inline void clear_has_points();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 points_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static ProjectionTrans* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Data_Type Type;
  static const Type SCHEDULE = Data_Type_SCHEDULE;
  static const Type PLAYER = Data_Type_PLAYER;
  static const Type GAME = Data_Type_GAME;
  static const Type RESULT = Data_Type_RESULT;
  static inline bool Type_IsValid(int value) {
    return Data_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Data_Type_Type_MIN;
  static const Type Type_MAX =
    Data_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Data_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Data_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Data_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Data_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 version = 10;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 10;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.Data.Type type = 20;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::fantasybit::Data_Type type() const;
  void set_type(::fantasybit::Data_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Data)
  // @@protoc_insertion_point(class_scope:fantasybit.Data)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  int type_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  void Swap(PlayerData* other);

  // implements Message ----------------------------------------------

  inline PlayerData* New() const { return New(NULL); }

  PlayerData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string playerid = 10;
  bool has_playerid() const;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 10;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // optional .fantasybit.PlayerBase player_base = 20;
  bool has_player_base() const;
  void clear_player_base();
  static const int kPlayerBaseFieldNumber = 20;
  const ::fantasybit::PlayerBase& player_base() const;
  ::fantasybit::PlayerBase* mutable_player_base();
  ::fantasybit::PlayerBase* release_player_base();
  void set_allocated_player_base(::fantasybit::PlayerBase* player_base);

  // optional .fantasybit.PlayerStatus player_status = 30;
  bool has_player_status() const;
  void clear_player_status();
  static const int kPlayerStatusFieldNumber = 30;
  const ::fantasybit::PlayerStatus& player_status() const;
  ::fantasybit::PlayerStatus* mutable_player_status();
  ::fantasybit::PlayerStatus* release_player_status();
  void set_allocated_player_status(::fantasybit::PlayerStatus* player_status);

  // optional .fantasybit.PlayerGameStatus player_game_status = 40;
  bool has_player_game_status() const;
  void clear_player_game_status();
  static const int kPlayerGameStatusFieldNumber = 40;
  ::fantasybit::PlayerGameStatus player_game_status() const;
  void set_player_game_status(::fantasybit::PlayerGameStatus value);

  static const int kPlayerDataFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
    player_data;
  // @@protoc_insertion_point(class_scope:fantasybit.PlayerData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_player_base();
  inline void clear_has_player_base();
  inline void set_has_player_status();
  inline void clear_has_player_status();
  inline void set_has_player_game_status();
  inline void clear_has_player_game_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::fantasybit::PlayerBase* player_base_;
  ::fantasybit::PlayerStatus* player_status_;
  int player_game_status_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// -------------------------------------------------------------------

class GameData : public ::google::protobuf::Message {
 public:
  GameData();
  virtual ~GameData();

  GameData(const GameData& from);

  inline GameData& operator=(const GameData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameData& default_instance();

  void Swap(GameData* other);

  // implements Message ----------------------------------------------

  inline GameData* New() const { return New(NULL); }

  GameData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameData& from);
  void MergeFrom(const GameData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string gameid = 10;
  bool has_gameid() const;
  void clear_gameid();
  static const int kGameidFieldNumber = 10;
  const ::std::string& gameid() const;
  void set_gameid(const ::std::string& value);
  void set_gameid(const char* value);
  void set_gameid(const char* value, size_t size);
  ::std::string* mutable_gameid();
  ::std::string* release_gameid();
  void set_allocated_gameid(::std::string* gameid);

  // optional .fantasybit.GameStatus status = 20;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 20;
  const ::fantasybit::GameStatus& status() const;
  ::fantasybit::GameStatus* mutable_status();
  ::fantasybit::GameStatus* release_status();
  void set_allocated_status(::fantasybit::GameStatus* status);

  static const int kGameDataFieldNumber = 111;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::GameData >, 11, false >
    game_data;
  // @@protoc_insertion_point(class_scope:fantasybit.GameData)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr gameid_;
  ::fantasybit::GameStatus* status_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static GameData* default_instance_;
};
// -------------------------------------------------------------------

class ResultData : public ::google::protobuf::Message {
 public:
  ResultData();
  virtual ~ResultData();

  ResultData(const ResultData& from);

  inline ResultData& operator=(const ResultData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultData& default_instance();

  void Swap(ResultData* other);

  // implements Message ----------------------------------------------

  inline ResultData* New() const { return New(NULL); }

  ResultData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultData& from);
  void MergeFrom(const ResultData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResultData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.GameResult game_result = 10;
  bool has_game_result() const;
  void clear_game_result();
  static const int kGameResultFieldNumber = 10;
  const ::fantasybit::GameResult& game_result() const;
  ::fantasybit::GameResult* mutable_game_result();
  ::fantasybit::GameResult* release_game_result();
  void set_allocated_game_result(::fantasybit::GameResult* game_result);

  static const int kResultDataFieldNumber = 202;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
    result_data;
  // @@protoc_insertion_point(class_scope:fantasybit.ResultData)
 private:
  inline void set_has_game_result();
  inline void clear_has_game_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::GameResult* game_result_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static ResultData* default_instance_;
};
// -------------------------------------------------------------------

class ScheduleData : public ::google::protobuf::Message {
 public:
  ScheduleData();
  virtual ~ScheduleData();

  ScheduleData(const ScheduleData& from);

  inline ScheduleData& operator=(const ScheduleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScheduleData& default_instance();

  void Swap(ScheduleData* other);

  // implements Message ----------------------------------------------

  inline ScheduleData* New() const { return New(NULL); }

  ScheduleData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScheduleData& from);
  void MergeFrom(const ScheduleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScheduleData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 week = 1;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // optional .fantasybit.WeeklySchedule weekly = 10;
  bool has_weekly() const;
  void clear_weekly();
  static const int kWeeklyFieldNumber = 10;
  const ::fantasybit::WeeklySchedule& weekly() const;
  ::fantasybit::WeeklySchedule* mutable_weekly();
  ::fantasybit::WeeklySchedule* release_weekly();
  void set_allocated_weekly(::fantasybit::WeeklySchedule* weekly);

  static const int kScheduleDataFieldNumber = 302;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ScheduleData >, 11, false >
    schedule_data;
  // @@protoc_insertion_point(class_scope:fantasybit.ScheduleData)
 private:
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_weekly();
  inline void clear_has_weekly();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fantasybit::WeeklySchedule* weekly_;
  ::google::protobuf::int32 week_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static ScheduleData* default_instance_;
};
// -------------------------------------------------------------------

class DataTransition : public ::google::protobuf::Message {
 public:
  DataTransition();
  virtual ~DataTransition();

  DataTransition(const DataTransition& from);

  inline DataTransition& operator=(const DataTransition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataTransition& default_instance();

  void Swap(DataTransition* other);

  // implements Message ----------------------------------------------

  inline DataTransition* New() const { return New(NULL); }

  DataTransition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataTransition& from);
  void MergeFrom(const DataTransition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataTransition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataTransition_Type Type;
  static const Type SEASONSTART = DataTransition_Type_SEASONSTART;
  static const Type SEASONEND = DataTransition_Type_SEASONEND;
  static const Type HEARTBEAT = DataTransition_Type_HEARTBEAT;
  static const Type GAMESTART = DataTransition_Type_GAMESTART;
  static const Type WEEKOVER = DataTransition_Type_WEEKOVER;
  static inline bool Type_IsValid(int value) {
    return DataTransition_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DataTransition_Type_Type_MIN;
  static const Type Type_MAX =
    DataTransition_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DataTransition_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DataTransition_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DataTransition_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DataTransition_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.DataTransition.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::DataTransition_Type type() const;
  void set_type(::fantasybit::DataTransition_Type value);

  // optional uint32 season = 10;
  bool has_season() const;
  void clear_season();
  static const int kSeasonFieldNumber = 10;
  ::google::protobuf::uint32 season() const;
  void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 20;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // repeated .fantasybit.GameData gamedata = 30;
  int gamedata_size() const;
  void clear_gamedata();
  static const int kGamedataFieldNumber = 30;
  const ::fantasybit::GameData& gamedata(int index) const;
  ::fantasybit::GameData* mutable_gamedata(int index);
  ::fantasybit::GameData* add_gamedata();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >*
      mutable_gamedata();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >&
      gamedata() const;

  // repeated .fantasybit.Data data = 40;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 40;
  const ::fantasybit::Data& data(int index) const;
  ::fantasybit::Data* mutable_data(int index);
  ::fantasybit::Data* add_data();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
      data() const;

  static const int kDataTransFieldNumber = 203;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
    data_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.DataTransition)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData > gamedata_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data > data_;
  ::google::protobuf::uint32 week_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static DataTransition* default_instance_;
};
// -------------------------------------------------------------------

class TeamState : public ::google::protobuf::Message {
 public:
  TeamState();
  virtual ~TeamState();

  TeamState(const TeamState& from);

  inline TeamState& operator=(const TeamState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamState& default_instance();

  void Swap(TeamState* other);

  // implements Message ----------------------------------------------

  inline TeamState* New() const { return New(NULL); }

  TeamState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamState& from);
  void MergeFrom(const TeamState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TeamState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TeamState_State State;
  static const State PREGAME = TeamState_State_PREGAME;
  static const State INGAME = TeamState_State_INGAME;
  static inline bool State_IsValid(int value) {
    return TeamState_State_IsValid(value);
  }
  static const State State_MIN =
    TeamState_State_State_MIN;
  static const State State_MAX =
    TeamState_State_State_MAX;
  static const int State_ARRAYSIZE =
    TeamState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return TeamState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return TeamState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return TeamState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.TeamState.State state = 1;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::fantasybit::TeamState_State state() const;
  void set_state(::fantasybit::TeamState_State value);

  // optional uint32 week = 10;
  bool has_week() const;
  void clear_week();
  static const int kWeekFieldNumber = 10;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // optional string teamid = 20;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 20;
  const ::std::string& teamid() const;
  void set_teamid(const ::std::string& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  ::std::string* mutable_teamid();
  ::std::string* release_teamid();
  void set_allocated_teamid(::std::string* teamid);

  // @@protoc_insertion_point(class_scope:fantasybit.TeamState)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int state_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::internal::ArenaStringPtr teamid_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static TeamState* default_instance_;
};
// -------------------------------------------------------------------

class DeltaData : public ::google::protobuf::Message {
 public:
  DeltaData();
  virtual ~DeltaData();

  DeltaData(const DeltaData& from);

  inline DeltaData& operator=(const DeltaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeltaData& default_instance();

  void Swap(DeltaData* other);

  // implements Message ----------------------------------------------

  inline DeltaData* New() const { return New(NULL); }

  DeltaData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeltaData& from);
  void MergeFrom(const DeltaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeltaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DeltaData_Type Type;
  static const Type SNAPSHOT = DeltaData_Type_SNAPSHOT;
  static const Type HEARTBEAT = DeltaData_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return DeltaData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DeltaData_Type_Type_MIN;
  static const Type Type_MAX =
    DeltaData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DeltaData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DeltaData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DeltaData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DeltaData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.DeltaData.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::fantasybit::DeltaData_Type type() const;
  void set_type(::fantasybit::DeltaData_Type value);

  // repeated .fantasybit.MyFantasyName myfantasyname = 2;
  int myfantasyname_size() const;
  void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  const ::fantasybit::MyFantasyName& myfantasyname(int index) const;
  ::fantasybit::MyFantasyName* mutable_myfantasyname(int index);
  ::fantasybit::MyFantasyName* add_myfantasyname();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >*
      mutable_myfantasyname();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >&
      myfantasyname() const;

  // optional .fantasybit.GlobalState globalstate = 10;
  bool has_globalstate() const;
  void clear_globalstate();
  static const int kGlobalstateFieldNumber = 10;
  const ::fantasybit::GlobalState& globalstate() const;
  ::fantasybit::GlobalState* mutable_globalstate();
  ::fantasybit::GlobalState* release_globalstate();
  void set_allocated_globalstate(::fantasybit::GlobalState* globalstate);

  // repeated .fantasybit.TeamState teamstates = 20;
  int teamstates_size() const;
  void clear_teamstates();
  static const int kTeamstatesFieldNumber = 20;
  const ::fantasybit::TeamState& teamstates(int index) const;
  ::fantasybit::TeamState* mutable_teamstates(int index);
  ::fantasybit::TeamState* add_teamstates();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >*
      mutable_teamstates();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >&
      teamstates() const;

  // repeated .fantasybit.Data datas = 30;
  int datas_size() const;
  void clear_datas();
  static const int kDatasFieldNumber = 30;
  const ::fantasybit::Data& datas(int index) const;
  ::fantasybit::Data* mutable_datas(int index);
  ::fantasybit::Data* add_datas();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
      mutable_datas();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
      datas() const;

  // repeated .fantasybit.FantasyPlayer players = 40;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 40;
  const ::fantasybit::FantasyPlayer& players(int index) const;
  ::fantasybit::FantasyPlayer* mutable_players(int index);
  ::fantasybit::FantasyPlayer* add_players();
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >&
      players() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DeltaData)
  // @@protoc_insertion_point(class_scope:fantasybit.DeltaData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_globalstate();
  inline void clear_has_globalstate();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName > myfantasyname_;
  ::fantasybit::GlobalState* globalstate_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState > teamstates_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data > datas_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer > players_;
  int type_;
  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static DeltaData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MyFantasyName

// optional string name = 1;
inline bool MyFantasyName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyFantasyName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyFantasyName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyFantasyName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MyFantasyName::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.MyFantasyName.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyFantasyName::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.MyFantasyName.name)
}
inline void MyFantasyName::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.MyFantasyName.name)
}
inline void MyFantasyName::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.MyFantasyName.name)
}
inline ::std::string* MyFantasyName::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.MyFantasyName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyFantasyName::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyFantasyName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.MyFantasyName.name)
}

// optional .fantasybit.MyNameStatus status = 2;
inline bool MyFantasyName::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyFantasyName::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyFantasyName::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyFantasyName::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::fantasybit::MyNameStatus MyFantasyName::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.MyFantasyName.status)
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
inline void MyFantasyName::set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.MyFantasyName.status)
}

// -------------------------------------------------------------------

// FantasyPlayer

// optional string name = 10;
inline bool FantasyPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FantasyPlayer::name() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyPlayer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayer.name)
}
inline void FantasyPlayer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyPlayer.name)
}
inline void FantasyPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyPlayer.name)
}
inline ::std::string* FantasyPlayer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyPlayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyPlayer::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyPlayer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyPlayer.name)
}

// optional uint64 bits = 20;
inline bool FantasyPlayer::has_bits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyPlayer::set_has_bits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyPlayer::clear_has_bits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyPlayer::clear_bits() {
  bits_ = GOOGLE_ULONGLONG(0);
  clear_has_bits();
}
inline ::google::protobuf::uint64 FantasyPlayer::bits() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayer.bits)
  return bits_;
}
inline void FantasyPlayer::set_bits(::google::protobuf::uint64 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayer.bits)
}

// -------------------------------------------------------------------

// Secret

// required string private_key = 1;
inline bool Secret::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
inline const ::std::string& Secret::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret.private_key)
}
inline void Secret::set_private_key(const char* value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret.private_key)
}
inline void Secret::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret.private_key)
}
inline ::std::string* Secret::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_private_key() {
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.private_key)
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool Secret::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& Secret::myfantasyname() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.myfantasyname)
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
inline ::fantasybit::MyFantasyName* Secret::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) {
    myfantasyname_ = new ::fantasybit::MyFantasyName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.myfantasyname)
  return myfantasyname_;
}
inline ::fantasybit::MyFantasyName* Secret::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline void Secret::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.myfantasyname)
}

// optional .fantasybit.NameTrans nametran = 10;
inline bool Secret::has_nametran() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Secret::set_has_nametran() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Secret::clear_has_nametran() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Secret::clear_nametran() {
  if (nametran_ != NULL) nametran_->::fantasybit::NameTrans::Clear();
  clear_has_nametran();
}
inline const ::fantasybit::NameTrans& Secret::nametran() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret.nametran)
  return nametran_ != NULL ? *nametran_ : *default_instance_->nametran_;
}
inline ::fantasybit::NameTrans* Secret::mutable_nametran() {
  set_has_nametran();
  if (nametran_ == NULL) {
    nametran_ = new ::fantasybit::NameTrans;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret.nametran)
  return nametran_;
}
inline ::fantasybit::NameTrans* Secret::release_nametran() {
  clear_has_nametran();
  ::fantasybit::NameTrans* temp = nametran_;
  nametran_ = NULL;
  return temp;
}
inline void Secret::set_allocated_nametran(::fantasybit::NameTrans* nametran) {
  delete nametran_;
  nametran_ = nametran;
  if (nametran) {
    set_has_nametran();
  } else {
    clear_has_nametran();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret.nametran)
}

// -------------------------------------------------------------------

// Secret2

// optional string private_key = 1;
inline bool Secret2::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret2::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret2::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret2::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_key();
}
inline const ::std::string& Secret2::private_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.private_key)
  return private_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_private_key(const ::std::string& value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.private_key)
}
inline void Secret2::set_private_key(const char* value) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.private_key)
}
inline void Secret2::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  private_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.private_key)
}
inline ::std::string* Secret2::mutable_private_key() {
  set_has_private_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.private_key)
  return private_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret2::release_private_key() {
  clear_has_private_key();
  return private_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_allocated_private_key(::std::string* private_key) {
  if (private_key != NULL) {
    set_has_private_key();
  } else {
    clear_has_private_key();
  }
  private_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.private_key)
}

// optional string fantasy_name = 20;
inline bool Secret2::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret2::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret2::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret2::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& Secret2::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.fantasy_name)
  return fantasy_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.fantasy_name)
}
inline void Secret2::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.fantasy_name)
}
inline void Secret2::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.fantasy_name)
}
inline ::std::string* Secret2::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret2::release_fantasy_name() {
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.fantasy_name)
}

// optional string public_key = 30;
inline bool Secret2::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Secret2::set_has_public_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Secret2::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Secret2::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& Secret2::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.Secret2.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.Secret2.public_key)
}
inline void Secret2::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.Secret2.public_key)
}
inline void Secret2::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.Secret2.public_key)
}
inline ::std::string* Secret2::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.Secret2.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret2::release_public_key() {
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret2::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Secret2.public_key)
}

// -------------------------------------------------------------------

// OutData

// required .fantasybit.OutData.Type type = 1;
inline bool OutData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::OutData_Type OutData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.OutData.type)
  return static_cast< ::fantasybit::OutData_Type >(type_);
}
inline void OutData::set_type(::fantasybit::OutData_Type value) {
  assert(::fantasybit::OutData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.OutData.type)
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool OutData::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutData::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutData::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutData::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& OutData::myfantasyname() const {
  // @@protoc_insertion_point(field_get:fantasybit.OutData.myfantasyname)
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
inline ::fantasybit::MyFantasyName* OutData::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) {
    myfantasyname_ = new ::fantasybit::MyFantasyName;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.OutData.myfantasyname)
  return myfantasyname_;
}
inline ::fantasybit::MyFantasyName* OutData::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline void OutData::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.OutData.myfantasyname)
}

// -------------------------------------------------------------------

// InData

// required .fantasybit.InData.Type type = 1;
inline bool InData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::InData_Type InData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.type)
  return static_cast< ::fantasybit::InData_Type >(type_);
}
inline void InData::set_type(::fantasybit::InData_Type value) {
  assert(::fantasybit::InData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InData.type)
}

// optional string data = 2;
inline bool InData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& InData::data() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InData.data)
}
inline void InData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InData.data)
}
inline void InData::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InData.data)
}
inline ::std::string* InData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InData::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data)
}

// optional string data2 = 3;
inline bool InData::has_data2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InData::set_has_data2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InData::clear_has_data2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InData::clear_data2() {
  data2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data2();
}
inline const ::std::string& InData::data2() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data2)
  return data2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InData::set_data2(const ::std::string& value) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.InData.data2)
}
inline void InData::set_data2(const char* value) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.InData.data2)
}
inline void InData::set_data2(const char* value, size_t size) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.InData.data2)
}
inline ::std::string* InData::mutable_data2() {
  set_has_data2();
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data2)
  return data2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InData::release_data2() {
  clear_has_data2();
  return data2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InData::set_allocated_data2(::std::string* data2) {
  if (data2 != NULL) {
    set_has_data2();
  } else {
    clear_has_data2();
  }
  data2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data2);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data2)
}

// optional int32 num = 4;
inline bool InData::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InData::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InData::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 InData::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.num)
  return num_;
}
inline void InData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.InData.num)
}

// optional .fantasybit.DataTransition data_trans = 5;
inline bool InData::has_data_trans() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InData::set_has_data_trans() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InData::clear_has_data_trans() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InData::clear_data_trans() {
  if (data_trans_ != NULL) data_trans_->::fantasybit::DataTransition::Clear();
  clear_has_data_trans();
}
inline const ::fantasybit::DataTransition& InData::data_trans() const {
  // @@protoc_insertion_point(field_get:fantasybit.InData.data_trans)
  return data_trans_ != NULL ? *data_trans_ : *default_instance_->data_trans_;
}
inline ::fantasybit::DataTransition* InData::mutable_data_trans() {
  set_has_data_trans();
  if (data_trans_ == NULL) {
    data_trans_ = new ::fantasybit::DataTransition;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.InData.data_trans)
  return data_trans_;
}
inline ::fantasybit::DataTransition* InData::release_data_trans() {
  clear_has_data_trans();
  ::fantasybit::DataTransition* temp = data_trans_;
  data_trans_ = NULL;
  return temp;
}
inline void InData::set_allocated_data_trans(::fantasybit::DataTransition* data_trans) {
  delete data_trans_;
  data_trans_ = data_trans;
  if (data_trans) {
    set_has_data_trans();
  } else {
    clear_has_data_trans();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.InData.data_trans)
}

// -------------------------------------------------------------------

// NameProof

// optional .fantasybit.NameProof.Type type = 1;
inline bool NameProof::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameProof::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameProof::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameProof::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::NameProof_Type NameProof::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameProof.type)
  return static_cast< ::fantasybit::NameProof_Type >(type_);
}
inline void NameProof::set_type(::fantasybit::NameProof_Type value) {
  assert(::fantasybit::NameProof_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NameProof.type)
}

// -------------------------------------------------------------------

// TweetProof

// optional string tweet = 10;
inline bool TweetProof::has_tweet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TweetProof::set_has_tweet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TweetProof::clear_has_tweet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TweetProof::clear_tweet() {
  tweet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tweet();
}
inline const ::std::string& TweetProof::tweet() const {
  // @@protoc_insertion_point(field_get:fantasybit.TweetProof.tweet)
  return tweet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TweetProof::set_tweet(const ::std::string& value) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TweetProof.tweet)
}
inline void TweetProof::set_tweet(const char* value) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TweetProof.tweet)
}
inline void TweetProof::set_tweet(const char* value, size_t size) {
  set_has_tweet();
  tweet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TweetProof.tweet)
}
inline ::std::string* TweetProof::mutable_tweet() {
  set_has_tweet();
  // @@protoc_insertion_point(field_mutable:fantasybit.TweetProof.tweet)
  return tweet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TweetProof::release_tweet() {
  clear_has_tweet();
  return tweet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TweetProof::set_allocated_tweet(::std::string* tweet) {
  if (tweet != NULL) {
    set_has_tweet();
  } else {
    clear_has_tweet();
  }
  tweet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tweet);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TweetProof.tweet)
}

// -------------------------------------------------------------------

// Transaction

// optional int32 version = 1;
inline bool Transaction::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Transaction::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.version)
  return version_;
}
inline void Transaction::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.version)
}

// optional .fantasybit.TransType type = 2;
inline bool Transaction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::TransType Transaction::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.Transaction.type)
  return static_cast< ::fantasybit::TransType >(type_);
}
inline void Transaction::set_type(::fantasybit::TransType value) {
  assert(::fantasybit::TransType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Transaction.type)
}

// -------------------------------------------------------------------

// NameTrans

// optional string fantasy_name = 10;
inline bool NameTrans::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameTrans::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameTrans::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameTrans::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& NameTrans::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.fantasy_name)
  return fantasy_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.fantasy_name)
}
inline void NameTrans::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.fantasy_name)
}
inline void NameTrans::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.fantasy_name)
}
inline ::std::string* NameTrans::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameTrans::release_fantasy_name() {
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.fantasy_name)
}

// optional bytes public_key = 20;
inline bool NameTrans::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameTrans::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameTrans::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameTrans::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_key();
}
inline const ::std::string& NameTrans::public_key() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.public_key)
  return public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_public_key(const ::std::string& value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NameTrans.public_key)
}
inline void NameTrans::set_public_key(const char* value) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NameTrans.public_key)
}
inline void NameTrans::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NameTrans.public_key)
}
inline ::std::string* NameTrans::mutable_public_key() {
  set_has_public_key();
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NameTrans::release_public_key() {
  clear_has_public_key();
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NameTrans::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    set_has_public_key();
  } else {
    clear_has_public_key();
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.public_key)
}

// optional .fantasybit.NameProof proof = 30;
inline bool NameTrans::has_proof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameTrans::set_has_proof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameTrans::clear_has_proof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameTrans::clear_proof() {
  if (proof_ != NULL) proof_->::fantasybit::NameProof::Clear();
  clear_has_proof();
}
inline const ::fantasybit::NameProof& NameTrans::proof() const {
  // @@protoc_insertion_point(field_get:fantasybit.NameTrans.proof)
  return proof_ != NULL ? *proof_ : *default_instance_->proof_;
}
inline ::fantasybit::NameProof* NameTrans::mutable_proof() {
  set_has_proof();
  if (proof_ == NULL) {
    proof_ = new ::fantasybit::NameProof;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.NameTrans.proof)
  return proof_;
}
inline ::fantasybit::NameProof* NameTrans::release_proof() {
  clear_has_proof();
  ::fantasybit::NameProof* temp = proof_;
  proof_ = NULL;
  return temp;
}
inline void NameTrans::set_allocated_proof(::fantasybit::NameProof* proof) {
  delete proof_;
  proof_ = proof;
  if (proof) {
    set_has_proof();
  } else {
    clear_has_proof();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NameTrans.proof)
}

// -------------------------------------------------------------------

// SignedTransaction

// optional .fantasybit.Transaction trans = 10;
inline bool SignedTransaction::has_trans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedTransaction::set_has_trans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedTransaction::clear_has_trans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedTransaction::clear_trans() {
  if (trans_ != NULL) trans_->::fantasybit::Transaction::Clear();
  clear_has_trans();
}
inline const ::fantasybit::Transaction& SignedTransaction::trans() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.trans)
  return trans_ != NULL ? *trans_ : *default_instance_->trans_;
}
inline ::fantasybit::Transaction* SignedTransaction::mutable_trans() {
  set_has_trans();
  if (trans_ == NULL) {
    trans_ = new ::fantasybit::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.trans)
  return trans_;
}
inline ::fantasybit::Transaction* SignedTransaction::release_trans() {
  clear_has_trans();
  ::fantasybit::Transaction* temp = trans_;
  trans_ = NULL;
  return temp;
}
inline void SignedTransaction::set_allocated_trans(::fantasybit::Transaction* trans) {
  delete trans_;
  trans_ = trans;
  if (trans) {
    set_has_trans();
  } else {
    clear_has_trans();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.trans)
}

// optional bytes id = 20;
inline bool SignedTransaction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedTransaction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedTransaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedTransaction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& SignedTransaction::id() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.id)
}
inline void SignedTransaction::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.id)
}
inline void SignedTransaction::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.id)
}
inline ::std::string* SignedTransaction::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedTransaction::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.id)
}

// optional bytes sig = 30;
inline bool SignedTransaction::has_sig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignedTransaction::set_has_sig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignedTransaction::clear_has_sig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignedTransaction::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
inline const ::std::string& SignedTransaction::sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.sig)
  return sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.sig)
}
inline void SignedTransaction::set_sig(const char* value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.sig)
}
inline void SignedTransaction::set_sig(const void* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.sig)
}
inline ::std::string* SignedTransaction::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedTransaction::release_sig() {
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.sig)
}

// optional string fantasy_name = 40;
inline bool SignedTransaction::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignedTransaction::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignedTransaction::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignedTransaction::clear_fantasy_name() {
  fantasy_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_name();
}
inline const ::std::string& SignedTransaction::fantasy_name() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedTransaction.fantasy_name)
  return fantasy_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedTransaction.fantasy_name)
}
inline void SignedTransaction::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedTransaction.fantasy_name)
}
inline void SignedTransaction::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  fantasy_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedTransaction.fantasy_name)
}
inline ::std::string* SignedTransaction::mutable_fantasy_name() {
  set_has_fantasy_name();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedTransaction.fantasy_name)
  return fantasy_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedTransaction::release_fantasy_name() {
  clear_has_fantasy_name();
  return fantasy_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTransaction::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name != NULL) {
    set_has_fantasy_name();
  } else {
    clear_has_fantasy_name();
  }
  fantasy_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_name);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedTransaction.fantasy_name)
}

// -------------------------------------------------------------------

// BlockHeader

// optional int32 version = 1;
inline bool BlockHeader::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockHeader::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockHeader::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BlockHeader::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.version)
  return version_;
}
inline void BlockHeader::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.version)
}

// optional int32 num = 10;
inline bool BlockHeader::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockHeader::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockHeader::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockHeader::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlockHeader::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.num)
  return num_;
}
inline void BlockHeader::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.num)
}

// optional bytes prev_id = 20;
inline bool BlockHeader::has_prev_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockHeader::set_has_prev_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockHeader::clear_has_prev_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockHeader::clear_prev_id() {
  prev_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prev_id();
}
inline const ::std::string& BlockHeader::prev_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.prev_id)
  return prev_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_prev_id(const ::std::string& value) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.prev_id)
}
inline void BlockHeader::set_prev_id(const char* value) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.prev_id)
}
inline void BlockHeader::set_prev_id(const void* value, size_t size) {
  set_has_prev_id();
  prev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.prev_id)
}
inline ::std::string* BlockHeader::mutable_prev_id() {
  set_has_prev_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.prev_id)
  return prev_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_prev_id() {
  clear_has_prev_id();
  return prev_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_prev_id(::std::string* prev_id) {
  if (prev_id != NULL) {
    set_has_prev_id();
  } else {
    clear_has_prev_id();
  }
  prev_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.prev_id)
}

// optional int32 timestamp = 21;
inline bool BlockHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockHeader::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.timestamp)
  return timestamp_;
}
inline void BlockHeader::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.timestamp)
}

// optional bytes generator_pk = 30;
inline bool BlockHeader::has_generator_pk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockHeader::set_has_generator_pk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockHeader::clear_has_generator_pk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockHeader::clear_generator_pk() {
  generator_pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generator_pk();
}
inline const ::std::string& BlockHeader::generator_pk() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.generator_pk)
  return generator_pk_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_generator_pk(const ::std::string& value) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.generator_pk)
}
inline void BlockHeader::set_generator_pk(const char* value) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.generator_pk)
}
inline void BlockHeader::set_generator_pk(const void* value, size_t size) {
  set_has_generator_pk();
  generator_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.generator_pk)
}
inline ::std::string* BlockHeader::mutable_generator_pk() {
  set_has_generator_pk();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.generator_pk)
  return generator_pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_generator_pk() {
  clear_has_generator_pk();
  return generator_pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_generator_pk(::std::string* generator_pk) {
  if (generator_pk != NULL) {
    set_has_generator_pk();
  } else {
    clear_has_generator_pk();
  }
  generator_pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generator_pk);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.generator_pk)
}

// optional bytes generating_sig = 40;
inline bool BlockHeader::has_generating_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockHeader::set_has_generating_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockHeader::clear_has_generating_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockHeader::clear_generating_sig() {
  generating_sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generating_sig();
}
inline const ::std::string& BlockHeader::generating_sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.generating_sig)
  return generating_sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_generating_sig(const ::std::string& value) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.generating_sig)
}
inline void BlockHeader::set_generating_sig(const char* value) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.generating_sig)
}
inline void BlockHeader::set_generating_sig(const void* value, size_t size) {
  set_has_generating_sig();
  generating_sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.generating_sig)
}
inline ::std::string* BlockHeader::mutable_generating_sig() {
  set_has_generating_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.generating_sig)
  return generating_sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_generating_sig() {
  clear_has_generating_sig();
  return generating_sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_generating_sig(::std::string* generating_sig) {
  if (generating_sig != NULL) {
    set_has_generating_sig();
  } else {
    clear_has_generating_sig();
  }
  generating_sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generating_sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.generating_sig)
}

// optional int32 basetarget = 50;
inline bool BlockHeader::has_basetarget() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockHeader::set_has_basetarget() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockHeader::clear_has_basetarget() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockHeader::clear_basetarget() {
  basetarget_ = 0;
  clear_has_basetarget();
}
inline ::google::protobuf::int32 BlockHeader::basetarget() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.basetarget)
  return basetarget_;
}
inline void BlockHeader::set_basetarget(::google::protobuf::int32 value) {
  set_has_basetarget();
  basetarget_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.basetarget)
}

// optional .fantasybit.BlockHeader.Type blocktype = 60;
inline bool BlockHeader::has_blocktype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockHeader::set_has_blocktype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockHeader::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockHeader::clear_blocktype() {
  blocktype_ = 1;
  clear_has_blocktype();
}
inline ::fantasybit::BlockHeader_Type BlockHeader::blocktype() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.blocktype)
  return static_cast< ::fantasybit::BlockHeader_Type >(blocktype_);
}
inline void BlockHeader::set_blocktype(::fantasybit::BlockHeader_Type value) {
  assert(::fantasybit::BlockHeader_Type_IsValid(value));
  set_has_blocktype();
  blocktype_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.blocktype)
}

// optional bytes transaction_id = 70;
inline bool BlockHeader::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockHeader::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockHeader::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockHeader::clear_transaction_id() {
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction_id();
}
inline const ::std::string& BlockHeader::transaction_id() const {
  // @@protoc_insertion_point(field_get:fantasybit.BlockHeader.transaction_id)
  return transaction_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.BlockHeader.transaction_id)
}
inline void BlockHeader::set_transaction_id(const char* value) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.BlockHeader.transaction_id)
}
inline void BlockHeader::set_transaction_id(const void* value, size_t size) {
  set_has_transaction_id();
  transaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.BlockHeader.transaction_id)
}
inline ::std::string* BlockHeader::mutable_transaction_id() {
  set_has_transaction_id();
  // @@protoc_insertion_point(field_mutable:fantasybit.BlockHeader.transaction_id)
  return transaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_transaction_id() {
  clear_has_transaction_id();
  return transaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id != NULL) {
    set_has_transaction_id();
  } else {
    clear_has_transaction_id();
  }
  transaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction_id);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.BlockHeader.transaction_id)
}

// -------------------------------------------------------------------

// SignedBlockHeader

// optional .fantasybit.BlockHeader head = 10;
inline bool SignedBlockHeader::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedBlockHeader::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedBlockHeader::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedBlockHeader::clear_head() {
  if (head_ != NULL) head_->::fantasybit::BlockHeader::Clear();
  clear_has_head();
}
inline const ::fantasybit::BlockHeader& SignedBlockHeader::head() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedBlockHeader.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::fantasybit::BlockHeader* SignedBlockHeader::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::fantasybit::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedBlockHeader.head)
  return head_;
}
inline ::fantasybit::BlockHeader* SignedBlockHeader::release_head() {
  clear_has_head();
  ::fantasybit::BlockHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SignedBlockHeader::set_allocated_head(::fantasybit::BlockHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedBlockHeader.head)
}

// optional string sig = 30;
inline bool SignedBlockHeader::has_sig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedBlockHeader::set_has_sig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedBlockHeader::clear_has_sig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedBlockHeader::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
inline const ::std::string& SignedBlockHeader::sig() const {
  // @@protoc_insertion_point(field_get:fantasybit.SignedBlockHeader.sig)
  return sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedBlockHeader::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.SignedBlockHeader.sig)
}
inline void SignedBlockHeader::set_sig(const char* value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.SignedBlockHeader.sig)
}
inline void SignedBlockHeader::set_sig(const char* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.SignedBlockHeader.sig)
}
inline ::std::string* SignedBlockHeader::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:fantasybit.SignedBlockHeader.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignedBlockHeader::release_sig() {
  clear_has_sig();
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignedBlockHeader::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.SignedBlockHeader.sig)
}

// -------------------------------------------------------------------

// Block

// optional .fantasybit.SignedBlockHeader signedhead = 10;
inline bool Block::has_signedhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_signedhead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_signedhead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_signedhead() {
  if (signedhead_ != NULL) signedhead_->::fantasybit::SignedBlockHeader::Clear();
  clear_has_signedhead();
}
inline const ::fantasybit::SignedBlockHeader& Block::signedhead() const {
  // @@protoc_insertion_point(field_get:fantasybit.Block.signedhead)
  return signedhead_ != NULL ? *signedhead_ : *default_instance_->signedhead_;
}
inline ::fantasybit::SignedBlockHeader* Block::mutable_signedhead() {
  set_has_signedhead();
  if (signedhead_ == NULL) {
    signedhead_ = new ::fantasybit::SignedBlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.Block.signedhead)
  return signedhead_;
}
inline ::fantasybit::SignedBlockHeader* Block::release_signedhead() {
  clear_has_signedhead();
  ::fantasybit::SignedBlockHeader* temp = signedhead_;
  signedhead_ = NULL;
  return temp;
}
inline void Block::set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead) {
  delete signedhead_;
  signedhead_ = signedhead;
  if (signedhead) {
    set_has_signedhead();
  } else {
    clear_has_signedhead();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.Block.signedhead)
}

// repeated .fantasybit.SignedTransaction signed_transactions = 20;
inline int Block::signed_transactions_size() const {
  return signed_transactions_.size();
}
inline void Block::clear_signed_transactions() {
  signed_transactions_.Clear();
}
inline const ::fantasybit::SignedTransaction& Block::signed_transactions(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.Block.signed_transactions)
  return signed_transactions_.Get(index);
}
inline ::fantasybit::SignedTransaction* Block::mutable_signed_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.Block.signed_transactions)
  return signed_transactions_.Mutable(index);
}
inline ::fantasybit::SignedTransaction* Block::add_signed_transactions() {
  // @@protoc_insertion_point(field_add:fantasybit.Block.signed_transactions)
  return signed_transactions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
Block::mutable_signed_transactions() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.Block.signed_transactions)
  return &signed_transactions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
Block::signed_transactions() const {
  // @@protoc_insertion_point(field_list:fantasybit.Block.signed_transactions)
  return signed_transactions_;
}

// -------------------------------------------------------------------

// NodeRequest

// optional .fantasybit.NodeRequest.Type type = 10;
inline bool NodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::NodeRequest_Type NodeRequest::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.type)
  return static_cast< ::fantasybit::NodeRequest_Type >(type_);
}
inline void NodeRequest::set_type(::fantasybit::NodeRequest_Type value) {
  assert(::fantasybit::NodeRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.type)
}

// optional string myip = 20;
inline bool NodeRequest::has_myip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeRequest::set_has_myip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeRequest::clear_has_myip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeRequest::clear_myip() {
  myip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myip();
}
inline const ::std::string& NodeRequest::myip() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.myip)
  return myip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRequest::set_myip(const ::std::string& value) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.myip)
}
inline void NodeRequest::set_myip(const char* value) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeRequest.myip)
}
inline void NodeRequest::set_myip(const char* value, size_t size) {
  set_has_myip();
  myip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeRequest.myip)
}
inline ::std::string* NodeRequest::mutable_myip() {
  set_has_myip();
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeRequest.myip)
  return myip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRequest::release_myip() {
  clear_has_myip();
  return myip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRequest::set_allocated_myip(::std::string* myip) {
  if (myip != NULL) {
    set_has_myip();
  } else {
    clear_has_myip();
  }
  myip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myip);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NodeRequest.myip)
}

// optional int32 num = 30;
inline bool NodeRequest::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeRequest::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 NodeRequest::num() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.num)
  return num_;
}
inline void NodeRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.num)
}

// optional string myhost = 40;
inline bool NodeRequest::has_myhost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeRequest::set_has_myhost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeRequest::clear_has_myhost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeRequest::clear_myhost() {
  myhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_myhost();
}
inline const ::std::string& NodeRequest::myhost() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeRequest.myhost)
  return myhost_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRequest::set_myhost(const ::std::string& value) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.NodeRequest.myhost)
}
inline void NodeRequest::set_myhost(const char* value) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeRequest.myhost)
}
inline void NodeRequest::set_myhost(const char* value, size_t size) {
  set_has_myhost();
  myhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeRequest.myhost)
}
inline ::std::string* NodeRequest::mutable_myhost() {
  set_has_myhost();
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeRequest.myhost)
  return myhost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeRequest::release_myhost() {
  clear_has_myhost();
  return myhost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeRequest::set_allocated_myhost(::std::string* myhost) {
  if (myhost != NULL) {
    set_has_myhost();
  } else {
    clear_has_myhost();
  }
  myhost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myhost);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.NodeRequest.myhost)
}

// -------------------------------------------------------------------

// NodeReply

// optional int32 hight = 10;
inline bool NodeReply::has_hight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeReply::set_has_hight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeReply::clear_has_hight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeReply::clear_hight() {
  hight_ = 0;
  clear_has_hight();
}
inline ::google::protobuf::int32 NodeReply::hight() const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeReply.hight)
  return hight_;
}
inline void NodeReply::set_hight(::google::protobuf::int32 value) {
  set_has_hight();
  hight_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.hight)
}

// repeated string ips = 20;
inline int NodeReply::ips_size() const {
  return ips_.size();
}
inline void NodeReply::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& NodeReply::ips(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.NodeReply.ips)
  return ips_.Get(index);
}
inline ::std::string* NodeReply::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.NodeReply.ips)
  return ips_.Mutable(index);
}
inline void NodeReply::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fantasybit.NodeReply.ips)
  ips_.Mutable(index)->assign(value);
}
inline void NodeReply::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fantasybit.NodeReply.ips)
}
inline void NodeReply::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fantasybit.NodeReply.ips)
}
inline ::std::string* NodeReply::add_ips() {
  return ips_.Add();
}
inline void NodeReply::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fantasybit.NodeReply.ips)
}
inline void NodeReply::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fantasybit.NodeReply.ips)
}
inline void NodeReply::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fantasybit.NodeReply.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeReply::ips() const {
  // @@protoc_insertion_point(field_list:fantasybit.NodeReply.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeReply::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.NodeReply.ips)
  return &ips_;
}

// -------------------------------------------------------------------

// FantasyPlayerPoints

// optional uint32 season = 10;
inline bool FantasyPlayerPoints::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyPlayerPoints::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyPlayerPoints::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyPlayerPoints::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.season)
  return season_;
}
inline void FantasyPlayerPoints::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.season)
}

// optional uint32 week = 20;
inline bool FantasyPlayerPoints::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyPlayerPoints::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyPlayerPoints::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyPlayerPoints::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.week)
  return week_;
}
inline void FantasyPlayerPoints::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.week)
}

// optional string playerid = 30;
inline bool FantasyPlayerPoints::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyPlayerPoints::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyPlayerPoints::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyPlayerPoints::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& FantasyPlayerPoints::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyPlayerPoints::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.playerid)
}
inline void FantasyPlayerPoints::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.FantasyPlayerPoints.playerid)
}
inline void FantasyPlayerPoints::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.FantasyPlayerPoints.playerid)
}
inline ::std::string* FantasyPlayerPoints::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.FantasyPlayerPoints.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FantasyPlayerPoints::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FantasyPlayerPoints::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.FantasyPlayerPoints.playerid)
}

// optional int32 points = 40;
inline bool FantasyPlayerPoints::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyPlayerPoints::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyPlayerPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyPlayerPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 FantasyPlayerPoints::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.points)
  return points_;
}
inline void FantasyPlayerPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.points)
}

// optional float result = 50;
inline bool FantasyPlayerPoints::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FantasyPlayerPoints::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FantasyPlayerPoints::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FantasyPlayerPoints::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline float FantasyPlayerPoints::result() const {
  // @@protoc_insertion_point(field_get:fantasybit.FantasyPlayerPoints.result)
  return result_;
}
inline void FantasyPlayerPoints::set_result(float value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.FantasyPlayerPoints.result)
}

// -------------------------------------------------------------------

// ProjectionTrans

// optional uint32 season = 10;
inline bool ProjectionTrans::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionTrans::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjectionTrans::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjectionTrans::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 ProjectionTrans::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.season)
  return season_;
}
inline void ProjectionTrans::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.season)
}

// optional uint32 week = 20;
inline bool ProjectionTrans::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProjectionTrans::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProjectionTrans::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProjectionTrans::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 ProjectionTrans::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.week)
  return week_;
}
inline void ProjectionTrans::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.week)
}

// optional string playerid = 30;
inline bool ProjectionTrans::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProjectionTrans::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProjectionTrans::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProjectionTrans::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& ProjectionTrans::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectionTrans::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.playerid)
}
inline void ProjectionTrans::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.ProjectionTrans.playerid)
}
inline void ProjectionTrans::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.ProjectionTrans.playerid)
}
inline ::std::string* ProjectionTrans::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.ProjectionTrans.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectionTrans::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectionTrans::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ProjectionTrans.playerid)
}

// optional int32 points = 40;
inline bool ProjectionTrans::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProjectionTrans::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProjectionTrans::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProjectionTrans::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 ProjectionTrans::points() const {
  // @@protoc_insertion_point(field_get:fantasybit.ProjectionTrans.points)
  return points_;
}
inline void ProjectionTrans::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ProjectionTrans.points)
}

// -------------------------------------------------------------------

// Data

// optional int32 version = 10;
inline bool Data::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Data::version() const {
  // @@protoc_insertion_point(field_get:fantasybit.Data.version)
  return version_;
}
inline void Data::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Data.version)
}

// optional .fantasybit.Data.Type type = 20;
inline bool Data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::Data_Type Data::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.Data.type)
  return static_cast< ::fantasybit::Data_Type >(type_);
}
inline void Data::set_type(::fantasybit::Data_Type value) {
  assert(::fantasybit::Data_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.Data.type)
}

// -------------------------------------------------------------------

// PlayerData

// optional string playerid = 10;
inline bool PlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_playerid();
}
inline const ::std::string& PlayerData::playerid() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.playerid)
  return playerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_playerid(const ::std::string& value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.PlayerData.playerid)
}
inline void PlayerData::set_playerid(const char* value) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.PlayerData.playerid)
}
inline void PlayerData::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.PlayerData.playerid)
}
inline ::std::string* PlayerData::mutable_playerid() {
  set_has_playerid();
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerData::release_playerid() {
  clear_has_playerid();
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    set_has_playerid();
  } else {
    clear_has_playerid();
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.playerid)
}

// optional .fantasybit.PlayerBase player_base = 20;
inline bool PlayerData::has_player_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::set_has_player_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerData::clear_has_player_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerData::clear_player_base() {
  if (player_base_ != NULL) player_base_->::fantasybit::PlayerBase::Clear();
  clear_has_player_base();
}
inline const ::fantasybit::PlayerBase& PlayerData::player_base() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_base)
  return player_base_ != NULL ? *player_base_ : *default_instance_->player_base_;
}
inline ::fantasybit::PlayerBase* PlayerData::mutable_player_base() {
  set_has_player_base();
  if (player_base_ == NULL) {
    player_base_ = new ::fantasybit::PlayerBase;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.player_base)
  return player_base_;
}
inline ::fantasybit::PlayerBase* PlayerData::release_player_base() {
  clear_has_player_base();
  ::fantasybit::PlayerBase* temp = player_base_;
  player_base_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_player_base(::fantasybit::PlayerBase* player_base) {
  delete player_base_;
  player_base_ = player_base;
  if (player_base) {
    set_has_player_base();
  } else {
    clear_has_player_base();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.player_base)
}

// optional .fantasybit.PlayerStatus player_status = 30;
inline bool PlayerData::has_player_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerData::set_has_player_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerData::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerData::clear_player_status() {
  if (player_status_ != NULL) player_status_->::fantasybit::PlayerStatus::Clear();
  clear_has_player_status();
}
inline const ::fantasybit::PlayerStatus& PlayerData::player_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_status)
  return player_status_ != NULL ? *player_status_ : *default_instance_->player_status_;
}
inline ::fantasybit::PlayerStatus* PlayerData::mutable_player_status() {
  set_has_player_status();
  if (player_status_ == NULL) {
    player_status_ = new ::fantasybit::PlayerStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.PlayerData.player_status)
  return player_status_;
}
inline ::fantasybit::PlayerStatus* PlayerData::release_player_status() {
  clear_has_player_status();
  ::fantasybit::PlayerStatus* temp = player_status_;
  player_status_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_player_status(::fantasybit::PlayerStatus* player_status) {
  delete player_status_;
  player_status_ = player_status;
  if (player_status) {
    set_has_player_status();
  } else {
    clear_has_player_status();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.PlayerData.player_status)
}

// optional .fantasybit.PlayerGameStatus player_game_status = 40;
inline bool PlayerData::has_player_game_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerData::set_has_player_game_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerData::clear_has_player_game_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerData::clear_player_game_status() {
  player_game_status_ = 0;
  clear_has_player_game_status();
}
inline ::fantasybit::PlayerGameStatus PlayerData::player_game_status() const {
  // @@protoc_insertion_point(field_get:fantasybit.PlayerData.player_game_status)
  return static_cast< ::fantasybit::PlayerGameStatus >(player_game_status_);
}
inline void PlayerData::set_player_game_status(::fantasybit::PlayerGameStatus value) {
  assert(::fantasybit::PlayerGameStatus_IsValid(value));
  set_has_player_game_status();
  player_game_status_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.PlayerData.player_game_status)
}

// -------------------------------------------------------------------

// GameData

// optional string gameid = 10;
inline bool GameData::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameData::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameData::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameData::clear_gameid() {
  gameid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gameid();
}
inline const ::std::string& GameData::gameid() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameData.gameid)
  return gameid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameData::set_gameid(const ::std::string& value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.GameData.gameid)
}
inline void GameData::set_gameid(const char* value) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.GameData.gameid)
}
inline void GameData::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  gameid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.GameData.gameid)
}
inline ::std::string* GameData::mutable_gameid() {
  set_has_gameid();
  // @@protoc_insertion_point(field_mutable:fantasybit.GameData.gameid)
  return gameid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameData::release_gameid() {
  clear_has_gameid();
  return gameid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameData::set_allocated_gameid(::std::string* gameid) {
  if (gameid != NULL) {
    set_has_gameid();
  } else {
    clear_has_gameid();
  }
  gameid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gameid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameData.gameid)
}

// optional .fantasybit.GameStatus status = 20;
inline bool GameData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameData::clear_status() {
  if (status_ != NULL) status_->::fantasybit::GameStatus::Clear();
  clear_has_status();
}
inline const ::fantasybit::GameStatus& GameData::status() const {
  // @@protoc_insertion_point(field_get:fantasybit.GameData.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::fantasybit::GameStatus* GameData::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::fantasybit::GameStatus;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.GameData.status)
  return status_;
}
inline ::fantasybit::GameStatus* GameData::release_status() {
  clear_has_status();
  ::fantasybit::GameStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void GameData::set_allocated_status(::fantasybit::GameStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.GameData.status)
}

// -------------------------------------------------------------------

// ResultData

// optional .fantasybit.GameResult game_result = 10;
inline bool ResultData::has_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultData::set_has_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultData::clear_has_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultData::clear_game_result() {
  if (game_result_ != NULL) game_result_->::fantasybit::GameResult::Clear();
  clear_has_game_result();
}
inline const ::fantasybit::GameResult& ResultData::game_result() const {
  // @@protoc_insertion_point(field_get:fantasybit.ResultData.game_result)
  return game_result_ != NULL ? *game_result_ : *default_instance_->game_result_;
}
inline ::fantasybit::GameResult* ResultData::mutable_game_result() {
  set_has_game_result();
  if (game_result_ == NULL) {
    game_result_ = new ::fantasybit::GameResult;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ResultData.game_result)
  return game_result_;
}
inline ::fantasybit::GameResult* ResultData::release_game_result() {
  clear_has_game_result();
  ::fantasybit::GameResult* temp = game_result_;
  game_result_ = NULL;
  return temp;
}
inline void ResultData::set_allocated_game_result(::fantasybit::GameResult* game_result) {
  delete game_result_;
  game_result_ = game_result;
  if (game_result) {
    set_has_game_result();
  } else {
    clear_has_game_result();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ResultData.game_result)
}

// -------------------------------------------------------------------

// ScheduleData

// optional int32 week = 1;
inline bool ScheduleData::has_week() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScheduleData::set_has_week() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScheduleData::clear_has_week() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScheduleData::clear_week() {
  week_ = 0;
  clear_has_week();
}
inline ::google::protobuf::int32 ScheduleData::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.ScheduleData.week)
  return week_;
}
inline void ScheduleData::set_week(::google::protobuf::int32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.ScheduleData.week)
}

// optional .fantasybit.WeeklySchedule weekly = 10;
inline bool ScheduleData::has_weekly() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScheduleData::set_has_weekly() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScheduleData::clear_has_weekly() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScheduleData::clear_weekly() {
  if (weekly_ != NULL) weekly_->::fantasybit::WeeklySchedule::Clear();
  clear_has_weekly();
}
inline const ::fantasybit::WeeklySchedule& ScheduleData::weekly() const {
  // @@protoc_insertion_point(field_get:fantasybit.ScheduleData.weekly)
  return weekly_ != NULL ? *weekly_ : *default_instance_->weekly_;
}
inline ::fantasybit::WeeklySchedule* ScheduleData::mutable_weekly() {
  set_has_weekly();
  if (weekly_ == NULL) {
    weekly_ = new ::fantasybit::WeeklySchedule;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.ScheduleData.weekly)
  return weekly_;
}
inline ::fantasybit::WeeklySchedule* ScheduleData::release_weekly() {
  clear_has_weekly();
  ::fantasybit::WeeklySchedule* temp = weekly_;
  weekly_ = NULL;
  return temp;
}
inline void ScheduleData::set_allocated_weekly(::fantasybit::WeeklySchedule* weekly) {
  delete weekly_;
  weekly_ = weekly;
  if (weekly) {
    set_has_weekly();
  } else {
    clear_has_weekly();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.ScheduleData.weekly)
}

// -------------------------------------------------------------------

// DataTransition

// optional .fantasybit.DataTransition.Type type = 1;
inline bool DataTransition::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTransition::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataTransition::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataTransition::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::fantasybit::DataTransition_Type DataTransition::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.type)
  return static_cast< ::fantasybit::DataTransition_Type >(type_);
}
inline void DataTransition::set_type(::fantasybit::DataTransition_Type value) {
  assert(::fantasybit::DataTransition_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.type)
}

// optional uint32 season = 10;
inline bool DataTransition::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataTransition::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataTransition::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataTransition::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 DataTransition::season() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.season)
  return season_;
}
inline void DataTransition::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.season)
}

// optional uint32 week = 20;
inline bool DataTransition::has_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataTransition::set_has_week() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataTransition::clear_has_week() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataTransition::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 DataTransition::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.week)
  return week_;
}
inline void DataTransition::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DataTransition.week)
}

// repeated .fantasybit.GameData gamedata = 30;
inline int DataTransition::gamedata_size() const {
  return gamedata_.size();
}
inline void DataTransition::clear_gamedata() {
  gamedata_.Clear();
}
inline const ::fantasybit::GameData& DataTransition::gamedata(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.gamedata)
  return gamedata_.Get(index);
}
inline ::fantasybit::GameData* DataTransition::mutable_gamedata(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataTransition.gamedata)
  return gamedata_.Mutable(index);
}
inline ::fantasybit::GameData* DataTransition::add_gamedata() {
  // @@protoc_insertion_point(field_add:fantasybit.DataTransition.gamedata)
  return gamedata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >*
DataTransition::mutable_gamedata() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DataTransition.gamedata)
  return &gamedata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::GameData >&
DataTransition::gamedata() const {
  // @@protoc_insertion_point(field_list:fantasybit.DataTransition.gamedata)
  return gamedata_;
}

// repeated .fantasybit.Data data = 40;
inline int DataTransition::data_size() const {
  return data_.size();
}
inline void DataTransition::clear_data() {
  data_.Clear();
}
inline const ::fantasybit::Data& DataTransition::data(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DataTransition.data)
  return data_.Get(index);
}
inline ::fantasybit::Data* DataTransition::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DataTransition.data)
  return data_.Mutable(index);
}
inline ::fantasybit::Data* DataTransition::add_data() {
  // @@protoc_insertion_point(field_add:fantasybit.DataTransition.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DataTransition::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DataTransition.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DataTransition::data() const {
  // @@protoc_insertion_point(field_list:fantasybit.DataTransition.data)
  return data_;
}

// -------------------------------------------------------------------

// TeamState

// optional .fantasybit.TeamState.State state = 1;
inline bool TeamState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamState::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::fantasybit::TeamState_State TeamState::state() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.state)
  return static_cast< ::fantasybit::TeamState_State >(state_);
}
inline void TeamState::set_state(::fantasybit::TeamState_State value) {
  assert(::fantasybit::TeamState_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.state)
}

// optional uint32 week = 10;
inline bool TeamState::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamState::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamState::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamState::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 TeamState::week() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.week)
  return week_;
}
inline void TeamState::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.week)
}

// optional string teamid = 20;
inline bool TeamState::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamState::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamState::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamState::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teamid();
}
inline const ::std::string& TeamState::teamid() const {
  // @@protoc_insertion_point(field_get:fantasybit.TeamState.teamid)
  return teamid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamState::set_teamid(const ::std::string& value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fantasybit.TeamState.teamid)
}
inline void TeamState::set_teamid(const char* value) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fantasybit.TeamState.teamid)
}
inline void TeamState::set_teamid(const char* value, size_t size) {
  set_has_teamid();
  teamid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fantasybit.TeamState.teamid)
}
inline ::std::string* TeamState::mutable_teamid() {
  set_has_teamid();
  // @@protoc_insertion_point(field_mutable:fantasybit.TeamState.teamid)
  return teamid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeamState::release_teamid() {
  clear_has_teamid();
  return teamid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeamState::set_allocated_teamid(::std::string* teamid) {
  if (teamid != NULL) {
    set_has_teamid();
  } else {
    clear_has_teamid();
  }
  teamid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:fantasybit.TeamState.teamid)
}

// -------------------------------------------------------------------

// DeltaData

// optional .fantasybit.DeltaData.Type type = 1;
inline bool DeltaData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeltaData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeltaData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeltaData::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::fantasybit::DeltaData_Type DeltaData::type() const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.type)
  return static_cast< ::fantasybit::DeltaData_Type >(type_);
}
inline void DeltaData::set_type(::fantasybit::DeltaData_Type value) {
  assert(::fantasybit::DeltaData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fantasybit.DeltaData.type)
}

// repeated .fantasybit.MyFantasyName myfantasyname = 2;
inline int DeltaData::myfantasyname_size() const {
  return myfantasyname_.size();
}
inline void DeltaData::clear_myfantasyname() {
  myfantasyname_.Clear();
}
inline const ::fantasybit::MyFantasyName& DeltaData::myfantasyname(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Get(index);
}
inline ::fantasybit::MyFantasyName* DeltaData::mutable_myfantasyname(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Mutable(index);
}
inline ::fantasybit::MyFantasyName* DeltaData::add_myfantasyname() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >*
DeltaData::mutable_myfantasyname() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.myfantasyname)
  return &myfantasyname_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::MyFantasyName >&
DeltaData::myfantasyname() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.myfantasyname)
  return myfantasyname_;
}

// optional .fantasybit.GlobalState globalstate = 10;
inline bool DeltaData::has_globalstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeltaData::set_has_globalstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeltaData::clear_has_globalstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeltaData::clear_globalstate() {
  if (globalstate_ != NULL) globalstate_->::fantasybit::GlobalState::Clear();
  clear_has_globalstate();
}
inline const ::fantasybit::GlobalState& DeltaData::globalstate() const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.globalstate)
  return globalstate_ != NULL ? *globalstate_ : *default_instance_->globalstate_;
}
inline ::fantasybit::GlobalState* DeltaData::mutable_globalstate() {
  set_has_globalstate();
  if (globalstate_ == NULL) {
    globalstate_ = new ::fantasybit::GlobalState;
  }
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.globalstate)
  return globalstate_;
}
inline ::fantasybit::GlobalState* DeltaData::release_globalstate() {
  clear_has_globalstate();
  ::fantasybit::GlobalState* temp = globalstate_;
  globalstate_ = NULL;
  return temp;
}
inline void DeltaData::set_allocated_globalstate(::fantasybit::GlobalState* globalstate) {
  delete globalstate_;
  globalstate_ = globalstate;
  if (globalstate) {
    set_has_globalstate();
  } else {
    clear_has_globalstate();
  }
  // @@protoc_insertion_point(field_set_allocated:fantasybit.DeltaData.globalstate)
}

// repeated .fantasybit.TeamState teamstates = 20;
inline int DeltaData::teamstates_size() const {
  return teamstates_.size();
}
inline void DeltaData::clear_teamstates() {
  teamstates_.Clear();
}
inline const ::fantasybit::TeamState& DeltaData::teamstates(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.teamstates)
  return teamstates_.Get(index);
}
inline ::fantasybit::TeamState* DeltaData::mutable_teamstates(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.teamstates)
  return teamstates_.Mutable(index);
}
inline ::fantasybit::TeamState* DeltaData::add_teamstates() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.teamstates)
  return teamstates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >*
DeltaData::mutable_teamstates() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.teamstates)
  return &teamstates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::TeamState >&
DeltaData::teamstates() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.teamstates)
  return teamstates_;
}

// repeated .fantasybit.Data datas = 30;
inline int DeltaData::datas_size() const {
  return datas_.size();
}
inline void DeltaData::clear_datas() {
  datas_.Clear();
}
inline const ::fantasybit::Data& DeltaData::datas(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.datas)
  return datas_.Get(index);
}
inline ::fantasybit::Data* DeltaData::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.datas)
  return datas_.Mutable(index);
}
inline ::fantasybit::Data* DeltaData::add_datas() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.datas)
  return datas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DeltaData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.datas)
  return &datas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DeltaData::datas() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.datas)
  return datas_;
}

// repeated .fantasybit.FantasyPlayer players = 40;
inline int DeltaData::players_size() const {
  return players_.size();
}
inline void DeltaData::clear_players() {
  players_.Clear();
}
inline const ::fantasybit::FantasyPlayer& DeltaData::players(int index) const {
  // @@protoc_insertion_point(field_get:fantasybit.DeltaData.players)
  return players_.Get(index);
}
inline ::fantasybit::FantasyPlayer* DeltaData::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:fantasybit.DeltaData.players)
  return players_.Mutable(index);
}
inline ::fantasybit::FantasyPlayer* DeltaData::add_players() {
  // @@protoc_insertion_point(field_add:fantasybit.DeltaData.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >*
DeltaData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:fantasybit.DeltaData.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::FantasyPlayer >&
DeltaData::players() const {
  // @@protoc_insertion_point(field_list:fantasybit.DeltaData.players)
  return players_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fantasybit::OutData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::OutData_Type>() {
  return ::fantasybit::OutData_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::InData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::InData_Type>() {
  return ::fantasybit::InData_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::NameProof_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::NameProof_Type>() {
  return ::fantasybit::NameProof_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::BlockHeader_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::BlockHeader_Type>() {
  return ::fantasybit::BlockHeader_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::NodeRequest_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::NodeRequest_Type>() {
  return ::fantasybit::NodeRequest_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::Data_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::Data_Type>() {
  return ::fantasybit::Data_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::DataTransition_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::DataTransition_Type>() {
  return ::fantasybit::DataTransition_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::TeamState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TeamState_State>() {
  return ::fantasybit::TeamState_State_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::DeltaData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::DeltaData_Type>() {
  return ::fantasybit::DeltaData_Type_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::MyNameStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MyNameStatus>() {
  return ::fantasybit::MyNameStatus_descriptor();
}
template <> struct is_proto_enum< ::fantasybit::TransType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TransType>() {
  return ::fantasybit::TransType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoData_2eproto__INCLUDED
