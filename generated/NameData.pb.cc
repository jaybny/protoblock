// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NameData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* FantasyNameBal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyNameBal_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyBitAword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyBitAword_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NameData_2eproto() {
  protobuf_AddDesc_NameData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NameData.proto");
  GOOGLE_CHECK(file != NULL);
  FantasyNameBal_descriptor_ = file->message_type(0);
  static const int FantasyNameBal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, bits_),
  };
  FantasyNameBal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyNameBal_descriptor_,
      FantasyNameBal::default_instance_,
      FantasyNameBal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyNameBal));
  FantasyBitAword_descriptor_ = file->message_type(1);
  static const int FantasyBitAword_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAword, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAword, proj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAword, aword_),
  };
  FantasyBitAword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyBitAword_descriptor_,
      FantasyBitAword::default_instance_,
      FantasyBitAword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyBitAword));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NameData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyNameBal_descriptor_, &FantasyNameBal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyBitAword_descriptor_, &FantasyBitAword::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NameData_2eproto() {
  delete FantasyNameBal::default_instance_;
  delete FantasyNameBal_reflection_;
  delete FantasyBitAword::default_instance_;
  delete FantasyBitAword_reflection_;
}

void protobuf_AddDesc_NameData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NameData.proto\022\nfantasybit\"@\n\016FantasyN"
    "ameBal\022\014\n\004name\030\n \001(\t\022\022\n\npublic_key\030\024 \001(\t"
    "\022\014\n\004bits\030\036 \001(\004\"<\n\017FantasyBitAword\022\014\n\004nam"
    "e\030\n \001(\t\022\014\n\004proj\030\024 \001(\005\022\r\n\005aword\030\036 \001(\004", 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NameData.proto", &protobuf_RegisterTypes);
  FantasyNameBal::default_instance_ = new FantasyNameBal();
  FantasyBitAword::default_instance_ = new FantasyBitAword();
  FantasyNameBal::default_instance_->InitAsDefaultInstance();
  FantasyBitAword::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NameData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NameData_2eproto {
  StaticDescriptorInitializer_NameData_2eproto() {
    protobuf_AddDesc_NameData_2eproto();
  }
} static_descriptor_initializer_NameData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FantasyNameBal::kNameFieldNumber;
const int FantasyNameBal::kPublicKeyFieldNumber;
const int FantasyNameBal::kBitsFieldNumber;
#endif  // !_MSC_VER

FantasyNameBal::FantasyNameBal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyNameBal::InitAsDefaultInstance() {
}

FantasyNameBal::FantasyNameBal(const FantasyNameBal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyNameBal::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bits_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyNameBal::~FantasyNameBal() {
  SharedDtor();
}

void FantasyNameBal::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void FantasyNameBal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyNameBal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyNameBal_descriptor_;
}

const FantasyNameBal& FantasyNameBal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

FantasyNameBal* FantasyNameBal::default_instance_ = NULL;

FantasyNameBal* FantasyNameBal::New() const {
  return new FantasyNameBal;
}

void FantasyNameBal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    bits_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyNameBal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_public_key;
        break;
      }

      // optional string public_key = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyNameBal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional string public_key = 20;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->public_key(), output);
  }

  // optional uint64 bits = 30;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyNameBal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string public_key = 20;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->public_key(), target);
  }

  // optional uint64 bits = 30;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyNameBal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional uint64 bits = 30;
    if (has_bits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameBal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyNameBal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyNameBal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyNameBal::MergeFrom(const FantasyNameBal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyNameBal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameBal::CopyFrom(const FantasyNameBal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameBal::IsInitialized() const {

  return true;
}

void FantasyNameBal::Swap(FantasyNameBal* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(public_key_, other->public_key_);
    std::swap(bits_, other->bits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyNameBal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyNameBal_descriptor_;
  metadata.reflection = FantasyNameBal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyBitAword::kNameFieldNumber;
const int FantasyBitAword::kProjFieldNumber;
const int FantasyBitAword::kAwordFieldNumber;
#endif  // !_MSC_VER

FantasyBitAword::FantasyBitAword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyBitAword::InitAsDefaultInstance() {
}

FantasyBitAword::FantasyBitAword(const FantasyBitAword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyBitAword::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proj_ = 0;
  aword_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyBitAword::~FantasyBitAword() {
  SharedDtor();
}

void FantasyBitAword::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FantasyBitAword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyBitAword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyBitAword_descriptor_;
}

const FantasyBitAword& FantasyBitAword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

FantasyBitAword* FantasyBitAword::default_instance_ = NULL;

FantasyBitAword* FantasyBitAword::New() const {
  return new FantasyBitAword;
}

void FantasyBitAword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    proj_ = 0;
    aword_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyBitAword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_proj;
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
          set_has_proj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_aword;
        break;
      }

      // optional uint64 aword = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aword_)));
          set_has_aword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyBitAword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional uint64 aword = 30;
  if (has_aword()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->aword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyBitAword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional uint64 aword = 30;
  if (has_aword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->aword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyBitAword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional uint64 aword = 30;
    if (has_aword()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitAword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyBitAword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyBitAword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyBitAword::MergeFrom(const FantasyBitAword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_proj()) {
      set_proj(from.proj());
    }
    if (from.has_aword()) {
      set_aword(from.aword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyBitAword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitAword::CopyFrom(const FantasyBitAword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitAword::IsInitialized() const {

  return true;
}

void FantasyBitAword::Swap(FantasyBitAword* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(proj_, other->proj_);
    std::swap(aword_, other->aword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyBitAword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyBitAword_descriptor_;
  metadata.reflection = FantasyBitAword_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
