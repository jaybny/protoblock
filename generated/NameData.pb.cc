// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NameData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google_public::protobuf::Descriptor* FantasyNameBal_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FantasyNameBal_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FantasyBitAward_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FantasyBitAward_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FantasyBitPnl_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FantasyBitPnl_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FantasyBitProj_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FantasyBitProj_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GameFantasyBitProj_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GameFantasyBitProj_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NameData_2eproto() {
  protobuf_AddDesc_NameData_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NameData.proto");
  GOOGLE_CHECK(file != NULL);
  FantasyNameBal_descriptor_ = file->message_type(0);
  static const int FantasyNameBal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, stake_),
  };
  FantasyNameBal_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FantasyNameBal_descriptor_,
      FantasyNameBal::default_instance_,
      FantasyNameBal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameBal, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyNameBal));
  FantasyBitAward_descriptor_ = file->message_type(1);
  static const int FantasyBitAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAward, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAward, proj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAward, award_),
  };
  FantasyBitAward_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FantasyBitAward_descriptor_,
      FantasyBitAward::default_instance_,
      FantasyBitAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitAward, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyBitAward));
  FantasyBitPnl_descriptor_ = file->message_type(2);
  static const int FantasyBitPnl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitPnl, spos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitPnl, pnl_),
  };
  FantasyBitPnl_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FantasyBitPnl_descriptor_,
      FantasyBitPnl::default_instance_,
      FantasyBitPnl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitPnl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitPnl, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyBitPnl));
  FantasyBitProj_descriptor_ = file->message_type(3);
  static const int FantasyBitProj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitProj, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitProj, proj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitProj, playerid_),
  };
  FantasyBitProj_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FantasyBitProj_descriptor_,
      FantasyBitProj::default_instance_,
      FantasyBitProj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitProj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyBitProj, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyBitProj));
  GameFantasyBitProj_descriptor_ = file->message_type(4);
  static const int GameFantasyBitProj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFantasyBitProj, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFantasyBitProj, home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFantasyBitProj, away_),
  };
  GameFantasyBitProj_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GameFantasyBitProj_descriptor_,
      GameFantasyBitProj::default_instance_,
      GameFantasyBitProj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFantasyBitProj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameFantasyBitProj, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GameFantasyBitProj));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NameData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyNameBal_descriptor_, &FantasyNameBal::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyBitAward_descriptor_, &FantasyBitAward::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyBitPnl_descriptor_, &FantasyBitPnl::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyBitProj_descriptor_, &FantasyBitProj::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameFantasyBitProj_descriptor_, &GameFantasyBitProj::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NameData_2eproto() {
  delete FantasyNameBal::default_instance_;
  delete FantasyNameBal_reflection_;
  delete FantasyBitAward::default_instance_;
  delete FantasyBitAward_reflection_;
  delete FantasyBitPnl::default_instance_;
  delete FantasyBitPnl_reflection_;
  delete FantasyBitProj::default_instance_;
  delete FantasyBitProj_reflection_;
  delete GameFantasyBitProj::default_instance_;
  delete GameFantasyBitProj_reflection_;
}

void protobuf_AddDesc_NameData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fantasybit::protobuf_AddDesc_ExData_2eproto();
  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016NameData.proto\022\nfantasybit\032\014ExData.pro"
    "to\"O\n\016FantasyNameBal\022\014\n\004name\030\n \001(\t\022\022\n\npu"
    "blic_key\030\024 \001(\t\022\014\n\004bits\030\036 \001(\004\022\r\n\005stake\030( "
    "\001(\003\"<\n\017FantasyBitAward\022\014\n\004name\030\n \001(\t\022\014\n\004"
    "proj\030\024 \001(\005\022\r\n\005award\030\036 \001(\004\"A\n\rFantasyBitP"
    "nl\022#\n\004spos\030\024 \001(\0132\025.fantasybit.SettlePos\022"
    "\013\n\003pnl\030\036 \001(\003\">\n\016FantasyBitProj\022\014\n\004name\030\n"
    " \001(\t\022\014\n\004proj\030\024 \001(\005\022\020\n\010playerid\030\036 \001(\t\"x\n\022"
    "GameFantasyBitProj\022\016\n\006gameid\030\n \001(\t\022(\n\004ho"
    "me\030\024 \003(\0132\032.fantasybit.FantasyBitProj\022(\n\004"
    "away\030\036 \003(\0132\032.fantasybit.FantasyBitProj", 438);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NameData.proto", &protobuf_RegisterTypes);
  FantasyNameBal::default_instance_ = new FantasyNameBal();
  FantasyBitAward::default_instance_ = new FantasyBitAward();
  FantasyBitPnl::default_instance_ = new FantasyBitPnl();
  FantasyBitProj::default_instance_ = new FantasyBitProj();
  GameFantasyBitProj::default_instance_ = new GameFantasyBitProj();
  FantasyNameBal::default_instance_->InitAsDefaultInstance();
  FantasyBitAward::default_instance_->InitAsDefaultInstance();
  FantasyBitPnl::default_instance_->InitAsDefaultInstance();
  FantasyBitProj::default_instance_->InitAsDefaultInstance();
  GameFantasyBitProj::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NameData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NameData_2eproto {
  StaticDescriptorInitializer_NameData_2eproto() {
    protobuf_AddDesc_NameData_2eproto();
  }
} static_descriptor_initializer_NameData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FantasyNameBal::kNameFieldNumber;
const int FantasyNameBal::kPublicKeyFieldNumber;
const int FantasyNameBal::kBitsFieldNumber;
const int FantasyNameBal::kStakeFieldNumber;
#endif  // !_MSC_VER

FantasyNameBal::FantasyNameBal()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyNameBal)
}

void FantasyNameBal::InitAsDefaultInstance() {
}

FantasyNameBal::FantasyNameBal(const FantasyNameBal& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyNameBal)
}

void FantasyNameBal::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  bits_ = GOOGLE_ULONGLONG(0);
  stake_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyNameBal::~FantasyNameBal() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyNameBal)
  SharedDtor();
}

void FantasyNameBal::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (public_key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void FantasyNameBal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FantasyNameBal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyNameBal_descriptor_;
}

const FantasyNameBal& FantasyNameBal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

FantasyNameBal* FantasyNameBal::default_instance_ = NULL;

FantasyNameBal* FantasyNameBal::New() const {
  return new FantasyNameBal;
}

void FantasyNameBal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FantasyNameBal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(bits_, stake_);
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        public_key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyNameBal::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyNameBal)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_public_key;
        break;
      }

      // optional string public_key = 20;
      case 20: {
        if (tag == 162) {
         parse_public_key:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_key().data(), this->public_key().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "public_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_bits;
        break;
      }

      // optional uint64 bits = 30;
      case 30: {
        if (tag == 240) {
         parse_bits:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint64, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_stake;
        break;
      }

      // optional int64 stake = 40;
      case 40: {
        if (tag == 320) {
         parse_stake:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stake_)));
          set_has_stake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyNameBal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyNameBal)
  return false;
#undef DO_
}

void FantasyNameBal::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyNameBal)
  // optional string name = 10;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string public_key = 20;
  if (has_public_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), this->public_key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "public_key");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->public_key(), output);
  }

  // optional uint64 bits = 30;
  if (has_bits()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt64(30, this->bits(), output);
  }

  // optional int64 stake = 40;
  if (has_stake()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(40, this->stake(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyNameBal)
}

::google_public::protobuf::uint8* FantasyNameBal::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyNameBal)
  // optional string name = 10;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string public_key = 20;
  if (has_public_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_key().data(), this->public_key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "public_key");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->public_key(), target);
  }

  // optional uint64 bits = 30;
  if (has_bits()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->bits(), target);
  }

  // optional int64 stake = 40;
  if (has_stake()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->stake(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyNameBal)
  return target;
}

int FantasyNameBal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string public_key = 20;
    if (has_public_key()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional uint64 bits = 30;
    if (has_bits()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::UInt64Size(
          this->bits());
    }

    // optional int64 stake = 40;
    if (has_stake()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->stake());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameBal::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyNameBal* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FantasyNameBal*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyNameBal::MergeFrom(const FantasyNameBal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_stake()) {
      set_stake(from.stake());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyNameBal::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameBal::CopyFrom(const FantasyNameBal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameBal::IsInitialized() const {

  return true;
}

void FantasyNameBal::Swap(FantasyNameBal* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(public_key_, other->public_key_);
    std::swap(bits_, other->bits_);
    std::swap(stake_, other->stake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FantasyNameBal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FantasyNameBal_descriptor_;
  metadata.reflection = FantasyNameBal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyBitAward::kNameFieldNumber;
const int FantasyBitAward::kProjFieldNumber;
const int FantasyBitAward::kAwardFieldNumber;
#endif  // !_MSC_VER

FantasyBitAward::FantasyBitAward()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyBitAward)
}

void FantasyBitAward::InitAsDefaultInstance() {
}

FantasyBitAward::FantasyBitAward(const FantasyBitAward& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitAward)
}

void FantasyBitAward::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  proj_ = 0;
  award_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyBitAward::~FantasyBitAward() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitAward)
  SharedDtor();
}

void FantasyBitAward::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FantasyBitAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FantasyBitAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyBitAward_descriptor_;
}

const FantasyBitAward& FantasyBitAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

FantasyBitAward* FantasyBitAward::default_instance_ = NULL;

FantasyBitAward* FantasyBitAward::New() const {
  return new FantasyBitAward;
}

void FantasyBitAward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FantasyBitAward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(award_, proj_);
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyBitAward::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyBitAward)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_proj;
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (tag == 160) {
         parse_proj:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
          set_has_proj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_award;
        break;
      }

      // optional uint64 award = 30;
      case 30: {
        if (tag == 240) {
         parse_award:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint64, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyBitAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyBitAward)
  return false;
#undef DO_
}

void FantasyBitAward::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyBitAward)
  // optional string name = 10;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional uint64 award = 30;
  if (has_award()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt64(30, this->award(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyBitAward)
}

::google_public::protobuf::uint8* FantasyBitAward::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitAward)
  // optional string name = 10;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional uint64 award = 30;
  if (has_award()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->award(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitAward)
  return target;
}

int FantasyBitAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional uint64 award = 30;
    if (has_award()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::UInt64Size(
          this->award());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitAward::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyBitAward* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FantasyBitAward*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyBitAward::MergeFrom(const FantasyBitAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_proj()) {
      set_proj(from.proj());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyBitAward::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitAward::CopyFrom(const FantasyBitAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitAward::IsInitialized() const {

  return true;
}

void FantasyBitAward::Swap(FantasyBitAward* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(proj_, other->proj_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FantasyBitAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FantasyBitAward_descriptor_;
  metadata.reflection = FantasyBitAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyBitPnl::kSposFieldNumber;
const int FantasyBitPnl::kPnlFieldNumber;
#endif  // !_MSC_VER

FantasyBitPnl::FantasyBitPnl()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyBitPnl)
}

void FantasyBitPnl::InitAsDefaultInstance() {
  spos_ = const_cast< ::fantasybit::SettlePos*>(&::fantasybit::SettlePos::default_instance());
}

FantasyBitPnl::FantasyBitPnl(const FantasyBitPnl& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitPnl)
}

void FantasyBitPnl::SharedCtor() {
  _cached_size_ = 0;
  spos_ = NULL;
  pnl_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyBitPnl::~FantasyBitPnl() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitPnl)
  SharedDtor();
}

void FantasyBitPnl::SharedDtor() {
  if (this != default_instance_) {
    delete spos_;
  }
}

void FantasyBitPnl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FantasyBitPnl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyBitPnl_descriptor_;
}

const FantasyBitPnl& FantasyBitPnl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

FantasyBitPnl* FantasyBitPnl::default_instance_ = NULL;

FantasyBitPnl* FantasyBitPnl::New() const {
  return new FantasyBitPnl;
}

void FantasyBitPnl::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_spos()) {
      if (spos_ != NULL) spos_->::fantasybit::SettlePos::Clear();
    }
    pnl_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyBitPnl::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyBitPnl)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fantasybit.SettlePos spos = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_pnl;
        break;
      }

      // optional int64 pnl = 30;
      case 30: {
        if (tag == 240) {
         parse_pnl:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pnl_)));
          set_has_pnl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyBitPnl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyBitPnl)
  return false;
#undef DO_
}

void FantasyBitPnl::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyBitPnl)
  // optional .fantasybit.SettlePos spos = 20;
  if (has_spos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->spos(), output);
  }

  // optional int64 pnl = 30;
  if (has_pnl()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(30, this->pnl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyBitPnl)
}

::google_public::protobuf::uint8* FantasyBitPnl::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitPnl)
  // optional .fantasybit.SettlePos spos = 20;
  if (has_spos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->spos(), target);
  }

  // optional int64 pnl = 30;
  if (has_pnl()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->pnl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitPnl)
  return target;
}

int FantasyBitPnl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fantasybit.SettlePos spos = 20;
    if (has_spos()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spos());
    }

    // optional int64 pnl = 30;
    if (has_pnl()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->pnl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitPnl::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyBitPnl* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FantasyBitPnl*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyBitPnl::MergeFrom(const FantasyBitPnl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spos()) {
      mutable_spos()->::fantasybit::SettlePos::MergeFrom(from.spos());
    }
    if (from.has_pnl()) {
      set_pnl(from.pnl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyBitPnl::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitPnl::CopyFrom(const FantasyBitPnl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitPnl::IsInitialized() const {

  return true;
}

void FantasyBitPnl::Swap(FantasyBitPnl* other) {
  if (other != this) {
    std::swap(spos_, other->spos_);
    std::swap(pnl_, other->pnl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FantasyBitPnl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FantasyBitPnl_descriptor_;
  metadata.reflection = FantasyBitPnl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyBitProj::kNameFieldNumber;
const int FantasyBitProj::kProjFieldNumber;
const int FantasyBitProj::kPlayeridFieldNumber;
#endif  // !_MSC_VER

FantasyBitProj::FantasyBitProj()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.FantasyBitProj)
}

void FantasyBitProj::InitAsDefaultInstance() {
}

FantasyBitProj::FantasyBitProj(const FantasyBitProj& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.FantasyBitProj)
}

void FantasyBitProj::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  proj_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyBitProj::~FantasyBitProj() {
  // @@protoc_insertion_point(destructor:fantasybit.FantasyBitProj)
  SharedDtor();
}

void FantasyBitProj::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (playerid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void FantasyBitProj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FantasyBitProj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyBitProj_descriptor_;
}

const FantasyBitProj& FantasyBitProj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

FantasyBitProj* FantasyBitProj::default_instance_ = NULL;

FantasyBitProj* FantasyBitProj::New() const {
  return new FantasyBitProj;
}

void FantasyBitProj::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    proj_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyBitProj::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.FantasyBitProj)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_proj;
        break;
      }

      // optional int32 proj = 20;
      case 20: {
        if (tag == 160) {
         parse_proj:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proj_)));
          set_has_proj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_playerid;
        break;
      }

      // optional string playerid = 30;
      case 30: {
        if (tag == 242) {
         parse_playerid:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playerid().data(), this->playerid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "playerid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.FantasyBitProj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.FantasyBitProj)
  return false;
#undef DO_
}

void FantasyBitProj::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.FantasyBitProj)
  // optional string name = 10;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(20, this->proj(), output);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.FantasyBitProj)
}

::google_public::protobuf::uint8* FantasyBitProj::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.FantasyBitProj)
  // optional string name = 10;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional int32 proj = 20;
  if (has_proj()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->proj(), target);
  }

  // optional string playerid = 30;
  if (has_playerid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playerid().data(), this->playerid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "playerid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.FantasyBitProj)
  return target;
}

int FantasyBitProj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 proj = 20;
    if (has_proj()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->proj());
    }

    // optional string playerid = 30;
    if (has_playerid()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyBitProj::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyBitProj* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FantasyBitProj*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyBitProj::MergeFrom(const FantasyBitProj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_proj()) {
      set_proj(from.proj());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyBitProj::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyBitProj::CopyFrom(const FantasyBitProj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyBitProj::IsInitialized() const {

  return true;
}

void FantasyBitProj::Swap(FantasyBitProj* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(proj_, other->proj_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FantasyBitProj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FantasyBitProj_descriptor_;
  metadata.reflection = FantasyBitProj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameFantasyBitProj::kGameidFieldNumber;
const int GameFantasyBitProj::kHomeFieldNumber;
const int GameFantasyBitProj::kAwayFieldNumber;
#endif  // !_MSC_VER

GameFantasyBitProj::GameFantasyBitProj()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fantasybit.GameFantasyBitProj)
}

void GameFantasyBitProj::InitAsDefaultInstance() {
}

GameFantasyBitProj::GameFantasyBitProj(const GameFantasyBitProj& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fantasybit.GameFantasyBitProj)
}

void GameFantasyBitProj::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameFantasyBitProj::~GameFantasyBitProj() {
  // @@protoc_insertion_point(destructor:fantasybit.GameFantasyBitProj)
  SharedDtor();
}

void GameFantasyBitProj::SharedDtor() {
  if (gameid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gameid_;
  }
  if (this != default_instance_) {
  }
}

void GameFantasyBitProj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GameFantasyBitProj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameFantasyBitProj_descriptor_;
}

const GameFantasyBitProj& GameFantasyBitProj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NameData_2eproto();
  return *default_instance_;
}

GameFantasyBitProj* GameFantasyBitProj::default_instance_ = NULL;

GameFantasyBitProj* GameFantasyBitProj::New() const {
  return new GameFantasyBitProj;
}

void GameFantasyBitProj::Clear() {
  if (has_gameid()) {
    if (gameid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
      gameid_->clear();
    }
  }
  home_.Clear();
  away_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameFantasyBitProj::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fantasybit.GameFantasyBitProj)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gameid = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gameid().data(), this->gameid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "gameid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_home;
        break;
      }

      // repeated .fantasybit.FantasyBitProj home = 20;
      case 20: {
        if (tag == 162) {
         parse_home:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_home()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_home;
        if (input->ExpectTag(242)) goto parse_away;
        break;
      }

      // repeated .fantasybit.FantasyBitProj away = 30;
      case 30: {
        if (tag == 242) {
         parse_away:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_away()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_away;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fantasybit.GameFantasyBitProj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fantasybit.GameFantasyBitProj)
  return false;
#undef DO_
}

void GameFantasyBitProj::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fantasybit.GameFantasyBitProj)
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gameid(), output);
  }

  // repeated .fantasybit.FantasyBitProj home = 20;
  for (int i = 0; i < this->home_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->home(i), output);
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  for (int i = 0; i < this->away_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->away(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fantasybit.GameFantasyBitProj)
}

::google_public::protobuf::uint8* GameFantasyBitProj::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fantasybit.GameFantasyBitProj)
  // optional string gameid = 10;
  if (has_gameid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gameid().data(), this->gameid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "gameid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gameid(), target);
  }

  // repeated .fantasybit.FantasyBitProj home = 20;
  for (int i = 0; i < this->home_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->home(i), target);
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  for (int i = 0; i < this->away_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->away(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fantasybit.GameFantasyBitProj)
  return target;
}

int GameFantasyBitProj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gameid = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }

  }
  // repeated .fantasybit.FantasyBitProj home = 20;
  total_size += 2 * this->home_size();
  for (int i = 0; i < this->home_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->home(i));
  }

  // repeated .fantasybit.FantasyBitProj away = 30;
  total_size += 2 * this->away_size();
  for (int i = 0; i < this->away_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->away(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameFantasyBitProj::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameFantasyBitProj* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GameFantasyBitProj*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameFantasyBitProj::MergeFrom(const GameFantasyBitProj& from) {
  GOOGLE_CHECK_NE(&from, this);
  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameFantasyBitProj::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFantasyBitProj::CopyFrom(const GameFantasyBitProj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFantasyBitProj::IsInitialized() const {

  return true;
}

void GameFantasyBitProj::Swap(GameFantasyBitProj* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    home_.Swap(&other->home_);
    away_.Swap(&other->away_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GameFantasyBitProj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GameFantasyBitProj_descriptor_;
  metadata.reflection = GameFantasyBitProj_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
